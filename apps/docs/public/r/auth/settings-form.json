{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "settings-form",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Form for updating user settings.",
  "dependencies": [
    "@radix-ui/react-avatar",
    "@radix-ui/react-switch"
  ],
  "files": [
    {
      "path": "components/settings-form.tsx",
      "content": "\"use client\";\nimport { useEffect, useTransition, useRef, useState } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { SettingsSchema } from \"@/registry/auth/schemas\";\nimport {\n  settings,\n  updateUserImage,\n} from \"@/registry/auth/actions/auth-actions\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Form,\n  FormField,\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormDescription,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { FormSuccess } from \"@/registry/auth/components/form-success\";\nimport { FormError } from \"@/registry/auth/components/form-error\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Switch } from \"@/registry/new-york/ui/switch\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/new-york/ui/avatar\";\nimport { User } from \"lucide-react\";\n\nexport const SettingsForm = () => {\n  const user = useSession().data?.user;\n\n  const [error, setError] = useState<string | undefined>();\n  const [success, setSuccess] = useState<string | undefined>();\n  const { update } = useSession();\n  const [isPending, startTransition] = useTransition();\n  const [isImageUploading, setIsImageUploading] = useState(false);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const form = useForm<z.infer<typeof SettingsSchema>>({\n    resolver: zodResolver(SettingsSchema),\n    defaultValues: {\n      name: user?.name || \"\",\n      email: user?.email || \"\",\n      isTwoFactorEnabled: user?.isTwoFactorEnabled || undefined,\n    },\n  });\n\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        name: user?.name || \"\",\n        email: user?.email || \"\",\n        isTwoFactorEnabled: user?.isTwoFactorEnabled || undefined,\n      });\n      // Set the initial image preview if user has an image\n      setPreviewUrl(user.image || null);\n    }\n  }, [user, form]);\n\n  const onSubmit = (values: z.infer<typeof SettingsSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    const userId = user?.id;\n\n    if (!userId) {\n      setError(\"User ID is required!\");\n      return;\n    }\n\n    startTransition(() => {\n      settings(userId, values)\n        .then((data) => {\n          setError(data?.error);\n          setSuccess(data?.success);\n          if (data?.success) {\n            // Update the session to reflect changes\n            update();\n          }\n        })\n        .catch((error) => {\n          console.error(\"Settings update error:\", error);\n          setError(\"Something went wrong!\");\n        });\n    });\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n\n    if (!selectedFile) {\n      return;\n    }\n\n    if (!selectedFile.type.startsWith(\"image/\")) {\n      setError(\"Please select an image file\");\n      return;\n    }\n\n    if (selectedFile.size > 5 * 1024 * 1024) {\n      // 5MB limit\n      setError(\"Image must be less than 5MB\");\n      return;\n    }\n\n    setError(undefined);\n\n    // Create a preview\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setPreviewUrl(reader.result as string);\n    };\n    reader.readAsDataURL(selectedFile);\n  };\n\n  const handleImageUpload = async () => {\n    if (!previewUrl || !user?.id) {\n      setError(\"Please select an image file\");\n      return;\n    }\n\n    setIsImageUploading(true);\n    setError(undefined);\n    setSuccess(undefined);\n\n    try {\n      // Send the base64 string directly to our server action\n      const response = await updateUserImage(user.id, previewUrl);\n\n      if (response.error) {\n        setError(response.error);\n      } else if (response.success) {\n        setSuccess(response.success);\n        // Update the session to reflect changes\n        update();\n        // Clear the file input\n        if (fileInputRef.current) {\n          fileInputRef.current.value = \"\";\n        }\n      }\n    } catch (err) {\n      setError(\"An error occurred while uploading the image\");\n      console.error(err);\n    } finally {\n      setIsImageUploading(false);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form className=\"space-y-6\" onSubmit={form.handleSubmit(onSubmit)}>\n        <div className=\"space-y-4\">\n          {/* Profile Image */}\n          <div className=\"space-y-4\">\n            <FormLabel>Profile Picture</FormLabel>\n            <div className=\"flex flex-col items-center space-y-4\">\n              {previewUrl && (\n                <Avatar>\n                  <AvatarImage src={user?.image || \"\"} />\n                  <AvatarFallback className=\"bg-sky-500\">\n                    <User className=\"text-white\" />\n                  </AvatarFallback>\n                </Avatar>\n                // <div className=\"relative h-24 w-24 rounded-full overflow-hidden\">\n                //   <Image\n                //     src={previewUrl}\n                //     alt=\"Profile preview\"\n                //     fill\n                //     className=\"object-cover\"\n                //   />\n                // </div>\n              )}\n\n              <div className=\"flex flex-col w-full space-y-2\">\n                <Input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileChange}\n                  disabled={isImageUploading}\n                  className=\"w-full\"\n                />\n\n                <Button\n                  type=\"button\"\n                  onClick={handleImageUpload}\n                  disabled={!previewUrl || isImageUploading}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  {isImageUploading ? \"Uploading...\" : \"Upload Image\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Name Field */}\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Name</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    placeholder=\"John Doe\"\n                    disabled={isPending}\n                    type=\"text\"\n                    className=\"w-full\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/* Email Field (Only for non-OAuth users) */}\n          {!user?.isOAuth && (\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"john.doe@mail.com\"\n                      disabled={isPending}\n                      type=\"email\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          )}\n\n          {/* Two-Factor Authentication (Only for non-OAuth users) */}\n          {!user?.isOAuth && (\n            <FormField\n              control={form.control}\n              name=\"isTwoFactorEnabled\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4 shadow-sm\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel>Two-Factor Authentication</FormLabel>\n                    <FormDescription>\n                      Enable two-factor authentication for your account.\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      disabled={isPending}\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n          )}\n        </div>\n\n        {/* Error and Success Messages */}\n        {error && <FormError message={error} />}\n        {success && <FormSuccess message={success} />}\n\n        {/* Save Button */}\n        <Button\n          type=\"submit\"\n          disabled={isPending}\n          className=\"w-full bg-primary hover:bg-primary-dark\"\n        >\n          {isPending ? \"Saving...\" : \"Save Changes\"}\n        </Button>\n      </form>\n    </Form>\n  );\n};\n",
      "type": "registry:auth_comp"
    },
    {
      "path": "new-york/ui/switch.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\nimport { cn } from \"@/lib/utils\";\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    ref={ref}\n    className={cn(\n      // Base styles\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors\",\n      // Focus & disabled states\n      \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background\",\n      \"disabled:cursor-not-allowed disabled:opacity-50\",\n      // State-based background colors\n      \"data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className,\n    )}\n    {...props}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform\",\n        \"data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\",\n      )}\n    />\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = \"Switch\";\n\nexport { Switch };\n",
      "type": "registry:ui"
    },
    {
      "path": "new-york/ui/avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\n/* -------------------------------------------------------------------------------------\n *  1. Avatar\n * ----------------------------------------------------------------------------------- */\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = \"Avatar\";\n\n/* -------------------------------------------------------------------------------------\n *  2. AvatarImage\n * ----------------------------------------------------------------------------------- */\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = \"AvatarImage\";\n\n/* -------------------------------------------------------------------------------------\n *  3. AvatarFallback\n * ----------------------------------------------------------------------------------- */\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = \"AvatarFallback\";\n\ninterface AvatarGroupProps extends React.HTMLAttributes<HTMLDivElement> {\n  overlap?: string;\n  hoverScale?: boolean;\n}\n\nconst AvatarGroup = React.forwardRef<HTMLDivElement, AvatarGroupProps>(\n  (\n    { className, overlap = \"-ml-2\", hoverScale = false, children, ...props },\n    ref,\n  ) => {\n    return (\n      <div ref={ref} className={cn(\"flex items-center\", className)} {...props}>\n        {React.Children.map(children, (child, index) => {\n          if (!React.isValidElement(child)) {\n            return child;\n          }\n\n          const overlapClass = index === 0 ? \"\" : overlap;\n\n          const borderClass =\n            \"ring-2 ring-background ring-offset-1 ring-primary/10\";\n\n          const scaleClass = hoverScale\n            ? \"transition-transform duration-200 ease-in-out hover:z-10 hover:scale-110 hover:-translate-y-1\"\n            : \"\";\n\n          return React.cloneElement(child, {\n            className: cn(\n              overlapClass,\n              borderClass,\n              scaleClass,\n              child.props.className,\n            ),\n          });\n        })}\n      </div>\n    );\n  },\n);\nAvatarGroup.displayName = \"AvatarGroup\";\n\nexport { Avatar, AvatarImage, AvatarFallback, AvatarGroup };\n",
      "type": "registry:ui"
    }
  ]
}
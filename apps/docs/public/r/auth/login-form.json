{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "login-form",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Login form with email and password fields.",
  "dependencies": [
    "react-hook-form",
    "zod",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "@hookform/resolvers"
  ],
  "registryDependencies": [
    "auth-actions",
    "two-factor-actions",
    "form-success",
    "form-error",
    "card-wrapper"
  ],
  "files": [
    {
      "path": "components/login-form.tsx",
      "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { useState, useTransition } from \"react\";\nimport { useSearchParams, useRouter } from \"next/navigation\";\nimport {\n  Form,\n  FormField,\n  FormControl,\n  FormLabel,\n  FormItem,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { LoginSchema } from \"@/registry/auth/schemas\";\nimport { CardWrapper } from \"@/registry/auth/components/card-wrapper\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { FormError } from \"@/registry/auth/components/form-error\";\nimport { FormSuccess } from \"@/registry/auth/components/form-success\";\nimport { login } from \"@/registry/auth/actions/auth-actions\";\nimport Link from \"next/link\";\n\nexport const LoginForm = () => {\n  const searchParams = useSearchParams();\n  const callbackUrl = searchParams.get(\"callbackUrl\");\n  const urlError =\n    searchParams.get(\"error\") === \"OAuthAccountNotLinked\"\n      ? \"Email already in use with different provider!\"\n      : \"\";\n\n  const [showTwoFactor, setShowTwoFactor] = useState(false);\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const router = useRouter();\n\n  const form = useForm<z.infer<typeof LoginSchema>>({\n    resolver: zodResolver(LoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      code: \"\",\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof LoginSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      login(values, callbackUrl)\n        .then((data) => {\n          if (data?.error) {\n            form.reset();\n            setError(data.error);\n          }\n\n          if (data?.success) {\n            form.reset();\n            setSuccess(data.success);\n            router.push(callbackUrl || \"/dashboard\");\n          }\n\n          if (data?.twoFactor) {\n            setShowTwoFactor(true);\n          }\n        })\n        .catch(() => {\n          setError(\"\");\n        });\n    });\n  };\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Login\"\n      subHeaderLabel=\"Welcome Back\"\n      backButtonLabel=\"Don't have an account?\"\n      backButtonHref=\"/auth/register\"\n      showSocial\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            {showTwoFactor && (\n              <>\n                <FormField\n                  control={form.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Two Factor Code</FormLabel>\n                      <FormControl>\n                        <Input\n                          disabled={isPending}\n                          {...field}\n                          placeholder=\"123456\"\n                          type=\"text\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <span className=\"text-sm text-gray-500\">\n                  Check your inbox for the 2FA Code\n                </span>\n              </>\n            )}\n            {!showTwoFactor && (\n              <>\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          disabled={isPending}\n                          {...field}\n                          placeholder=\"jhon.doe@example.com\"\n                          type=\"email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          disabled={isPending}\n                          {...field}\n                          placeholder=\"******\"\n                          type=\"password\"\n                        />\n                      </FormControl>\n                      <Button\n                        size=\"sm\"\n                        variant=\"link\"\n                        asChild\n                        className=\"px-0 font-normal\"\n                      >\n                        <Link href=\"/auth/reset\">Forgot password?</Link>\n                      </Button>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </>\n            )}\n          </div>\n          <FormError message={error || urlError} />\n          <FormSuccess message={success} />\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n            {showTwoFactor ? \"Confirm\" : \"Login\"}\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n};\n",
      "type": "registry:auth_comp"
    },
    {
      "path": "new-york/ui/form.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/registry/new-york/ui/label\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n);\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  );\n});\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof Label>,\n  React.ComponentPropsWithoutRef<typeof Label>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } =\n    useFormField();\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n});\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  );\n});\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message) : children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n});\nFormMessage.displayName = \"FormMessage\";\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "new-york/ui/input.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cva, VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { z } from \"zod\";\n\nconst inputVariants = cva(\n  \"flex w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        error: \"border-destructive focus-visible:ring-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\ninterface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    VariantProps<typeof inputVariants> {\n  helperText?: string;\n  error?: string;\n  startIcon?: React.ReactNode;\n  endIcon?: React.ReactNode;\n  characterLimit?: number;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      variant,\n      type,\n      helperText,\n      error,\n      startIcon,\n      endIcon,\n      characterLimit,\n      ...props\n    },\n    ref,\n  ) => {\n    const [characterCount, setCharacterCount] = React.useState(0);\n    const [localError, setLocalError] = React.useState<string | undefined>(\n      error,\n    );\n\n    const schema = React.useMemo(() => {\n      return characterLimit\n        ? z\n            .string()\n            .max(characterLimit, `Maximum ${characterLimit} characters allowed`)\n        : z.string();\n    }, [characterLimit]);\n\n    const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = (\n      e,\n    ) => {\n      const newValue = e.target.value;\n      setCharacterCount(newValue.length);\n\n      try {\n        schema.parse(newValue);\n        setLocalError(undefined);\n      } catch (err) {\n        if (err instanceof z.ZodError) {\n          setLocalError(err.errors[0].message);\n        }\n      }\n\n      if (characterLimit && newValue.length > characterLimit) {\n        e.target.value = newValue.slice(0, characterLimit);\n      }\n\n      props.onChange?.(e);\n    };\n\n    return (\n      <div className=\"space-y-2\">\n        <div className=\"relative\">\n          {startIcon && (\n            <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2\">\n              {startIcon}\n            </div>\n          )}\n          <input\n            type={type}\n            className={cn(\n              inputVariants({ variant }),\n              startIcon && \"pl-10\",\n              endIcon && \"pr-10\",\n              className,\n            )}\n            ref={ref}\n            aria-invalid={!!localError}\n            aria-describedby={`${props.id}-helper ${props.id}-error`}\n            onChange={handleInputChange}\n            {...props}\n          />\n          {endIcon && (\n            <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n              {endIcon}\n            </div>\n          )}\n        </div>\n        {helperText && (\n          <p\n            id={`${props.id}-helper`}\n            className=\"text-sm text-muted-foreground\"\n          >\n            {helperText}\n          </p>\n        )}\n        {localError && (\n          <p\n            id={`${props.id}-error`}\n            className=\"text-sm text-destructive\"\n            role=\"alert\"\n          >\n            {localError}\n          </p>\n        )}\n        {characterLimit && (\n          <p className=\"text-sm text-muted-foreground\">\n            {characterCount}/{characterLimit} characters\n          </p>\n        )}\n      </div>\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n",
      "type": "registry:ui"
    },
    {
      "path": "new-york/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot, Slottable } from \"@radix-ui/react-slot\";\nimport { cva, VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { ArrowRight } from \"lucide-react\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        ringHover:\n          \"bg-primary text-primary-foreground transition-all duration-300 hover:bg-primary/90 hover:ring-2 hover:ring-primary/90 hover:ring-offset-2\",\n        linkHover:\n          \"relative after:absolute after:bg-primary after:bottom-2 after:h-[1px] after:w-2/3 after:origin-bottom-left after:scale-x-100 hover:after:origin-bottom-right hover:after:scale-x-0 after:transition-transform after:ease-in-out after:duration-300\",\n        expandIcon:\n          \"group relative bg-primary text-primary-foreground px-4 py-2 hover:bg-primary/90\",\n        shine:\n          \"text-primary-foreground animate-shine bg-gradient-to-r from-primary via-primary/75 to-primary bg-[length:400%_100%]\",\n        gooeyRight:\n          \"text-primary-foreground relative bg-primary z-0 overflow-hidden transition-all duration-500 before:absolute before:inset-0 before:-z-10 before:translate-x-[150%] before:translate-y-[150%] before:scale-[2.5] before:rounded-[100%] before:bg-gradient-to-r from-zinc-400 before:transition-transform before:duration-1000 hover:before:translate-x-0 hover:before:translate-y-0\",\n        gooeyLeft:\n          \"text-primary-foreground relative bg-primary z-0 overflow-hidden transition-all duration-500 after:absolute after:inset-0 after:-z-10 after:translate-x-[-150%] after:translate-y-[150%] after:scale-[2.5] after:rounded-[100%] after:bg-gradient-to-l from-zinc-400 after:transition-transform after:duration-1000 hover:after:translate-x-0 hover:after:translate-y-0\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  \"aria-label\"?: string;\n  \"aria-labelledby\"?: string;\n  \"aria-expanded\"?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      asChild = false,\n      children,\n      disabled = false,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledby,\n      \"aria-expanded\": ariaExpanded,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        role=\"button\"\n        aria-disabled={disabled}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledby}\n        aria-expanded={ariaExpanded}\n        disabled={disabled}\n        {...props}\n      >\n        <Slottable>{children}</Slottable>\n        {variant === \"expandIcon\" && (\n          <div\n            className=\"w-0 opacity-0 translate-x-[100%] pl-0 transition-all duration-300 group-hover:w-5 group-hover:opacity-100 group-hover:translate-x-0 group-hover:pl-2\"\n            aria-hidden=\"true\"\n          >\n            <ArrowRight />\n          </div>\n        )}\n      </Comp>\n    );\n  },\n);\n\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui"
    },
    {
      "path": "new-york/ui/label.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { cva, VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n  {\n    variants: {\n      variant: {\n        default: \"text-foreground\",\n        error: \"text-destructive\",\n      },\n      size: {\n        default: \"text-sm\",\n        large: \"text-base\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\ninterface LabelProps\n  extends React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>,\n    VariantProps<typeof labelVariants> {\n  helperText?: string;\n  error?: string;\n  required?: boolean;\n  htmlFor?: any;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst Label = React.forwardRef<HTMLLabelElement, LabelProps>(\n  (\n    {\n      className,\n      children,\n      variant,\n      size,\n      htmlFor,\n      required,\n      error,\n      helperText,\n      ...props\n    },\n    ref,\n  ) => {\n    const id = React.useId();\n    const errorId = `${id}-error`;\n    const helperId = `${id}-helper`;\n\n    return (\n      <div className=\"flex flex-col space-y-1\">\n        <LabelPrimitive.Root\n          ref={ref}\n          htmlFor={htmlFor}\n          className={cn(labelVariants({ variant, size, className }))}\n          {...props}\n        >\n          {children}\n          {required && (\n            <span className=\"ml-1 text-destructive\" aria-hidden=\"true\">\n              *\n            </span>\n          )}\n        </LabelPrimitive.Root>\n        {helperText && !error && (\n          <p id={helperId} className=\"text-sm text-muted-foreground\">\n            {helperText}\n          </p>\n        )}\n        {error && (\n          <p id={errorId} className=\"text-sm font-medium text-destructive\">\n            {error}\n          </p>\n        )}\n      </div>\n    );\n  },\n);\nLabel.displayName = \"Label\";\n\nexport { Label };\n",
      "type": "registry:ui"
    },
    {
      "path": "schemas/index.ts",
      "content": "import * as z from \"zod\";\n\nexport const LoginSchema = z.object({\n  email: z.string().email({\n    message: \"Invalid email address\",\n  }),\n  password: z.string().min(1, {\n    message: \"Password is required\",\n  }),\n  code: z.optional(z.string()),\n});\n\nexport const RegisterSchema = z.object({\n  email: z.string().email({\n    message: \"Invalid email address\",\n  }),\n  password: z.string().min(6, {\n    message: \"Password must be at least 6 characters\",\n  }),\n  name: z.string().min(1, {\n    message: \"Name is required\",\n  }),\n});\n\nexport const ResetSchema = z.object({\n  email: z.string().email({\n    message: \"Email is required\",\n  }),\n});\n\nexport const NewPasswordSchema = z.object({\n  password: z.string().min(6, { message: \"Minimum 6 characters required\" }),\n});\n\nexport const SettingsSchema = z.object({\n  name: z.optional(z.string()),\n  isTwoFactorEnabled: z.optional(z.boolean()),\n  email: z.optional(z.string().email({ message: \"Invalid email\" })),\n});\n\nexport const ChangePasswordSchema = z\n  .object({\n    currentPassword: z.string().min(1, \"Current password is required\"),\n    newPassword: z\n      .string()\n      .min(6, \"New password must be at least 6 characters\"),\n    confirmPassword: z\n      .string()\n      .min(6, \"Confirm password must be at least 6 characters\"),\n  })\n  .refine((data) => data.newPassword === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  });\n",
      "type": "registry:schemas"
    },
    {
      "path": "route.ts",
      "content": "import { handlers } from \"@/registry/auth/lib/auth\";\nexport const { GET, POST } = handlers;\n",
      "type": "registry:api"
    }
  ]
}
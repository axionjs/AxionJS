{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "change-password-form",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Form for changing a user's password.",
  "files": [
    {
      "path": "components/change-password-form.tsx",
      "content": "\"use client\";\nimport { useState, useTransition } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Form,\n  FormField,\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { FormSuccess } from \"@/registry/auth/components/form-success\";\nimport { FormError } from \"@/registry/auth/components/form-error\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { changePassword } from \"@/registry/auth/actions/auth-actions\";\nimport { CardWrapper } from \"./card-wrapper\";\nimport { ChangePasswordSchema } from \"@/registry/auth/schemas\";\n\nexport const ChangePasswordForm = () => {\n  const [error, setError] = useState<string | undefined>();\n  const [success, setSuccess] = useState<string | undefined>();\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<z.infer<typeof ChangePasswordSchema>>({\n    resolver: zodResolver(ChangePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof ChangePasswordSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n    startTransition(() => {\n      changePassword(values.currentPassword, values.newPassword)\n        .then((data) => {\n          if (data.error) {\n            setError(data.error);\n          }\n          if (data.success) {\n            setSuccess(data.success);\n          }\n        })\n        .catch(() => {\n          setError(\"Something went wrong!\");\n        });\n    });\n  };\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Change Password\"\n      subHeaderLabel=\"Update your account password\"\n      backButtonLabel=\"Back to Dashboard\"\n      backButtonHref=\"/dashboard\"\n    >\n      <Form {...form}>\n        <form className=\"space-y-6\" onSubmit={form.handleSubmit(onSubmit)}>\n          <div className=\"space-y-4\">\n            {/* Current Password Field */}\n            <FormField\n              control={form.control}\n              name=\"currentPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Current Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"******\"\n                      disabled={isPending}\n                      type=\"password\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* New Password Field */}\n            <FormField\n              control={form.control}\n              name=\"newPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>New Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"******\"\n                      disabled={isPending}\n                      type=\"password\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Confirm Password Field */}\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirm Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"******\"\n                      disabled={isPending}\n                      type=\"password\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          {/* Error and Success Messages */}\n          {error && <FormError message={error} />}\n          {success && <FormSuccess message={success} />}\n\n          {/* Save Button */}\n          <Button\n            type=\"submit\"\n            disabled={isPending}\n            className=\"w-full bg-primary hover:bg-primary-dark\"\n          >\n            {isPending ? \"Changing Password...\" : \"Change Password\"}\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n};\n",
      "type": "registry:auth_comp"
    }
  ]
}
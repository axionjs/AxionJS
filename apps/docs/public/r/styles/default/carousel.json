{
  "$schema": "http://localhost:3000/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "embla-carousel-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/carousel.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/default/ui/button\";\n\ntype CarouselApi = UseEmblaCarouselType[1];\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\ntype CarouselOptions = UseCarouselParameters[0];\ntype CarouselPlugin = UseCarouselParameters[1];\n\n/**\n * Extend your carousel props to accept an `ariaLabel`, so screen readers have\n * a descriptive name for the region. Also support `ariaDescribedby` for\n * referencing instructions (if needed).\n */\ntype CarouselProps = {\n  opts?: CarouselOptions;\n  plugins?: CarouselPlugin;\n  orientation?: \"horizontal\" | \"vertical\";\n  setApi?: (api: CarouselApi) => void;\n  ariaLabel?: string;\n  ariaDescribedby?: string;\n};\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  scrollPrev: () => void;\n  scrollNext: () => void;\n  canScrollPrev: boolean;\n  canScrollNext: boolean;\n} & CarouselProps;\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\");\n  }\n\n  return context;\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ariaLabel = \"Carousel\", // fallback if no label is passed\n      ariaDescribedby,\n      ...props\n    },\n    ref,\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins,\n    );\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n    const [canScrollNext, setCanScrollNext] = React.useState(false);\n\n    const onSelect = React.useCallback((emblaApi: CarouselApi) => {\n      if (!emblaApi) return;\n      setCanScrollPrev(emblaApi.canScrollPrev());\n      setCanScrollNext(emblaApi.canScrollNext());\n    }, []);\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev();\n    }, [api]);\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext();\n    }, [api]);\n\n    // Intercept arrow keys for navigation\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (orientation === \"horizontal\") {\n          if (event.key === \"ArrowLeft\") {\n            event.preventDefault();\n            scrollPrev();\n          } else if (event.key === \"ArrowRight\") {\n            event.preventDefault();\n            scrollNext();\n          }\n        } else {\n          if (event.key === \"ArrowUp\") {\n            event.preventDefault();\n            scrollPrev();\n          } else if (event.key === \"ArrowDown\") {\n            event.preventDefault();\n            scrollNext();\n          }\n        }\n      },\n      [orientation, scrollPrev, scrollNext],\n    );\n\n    React.useEffect(() => {\n      if (api && setApi) {\n        setApi(api);\n      }\n    }, [api, setApi]);\n\n    React.useEffect(() => {\n      if (!api) return;\n      onSelect(api);\n      api.on(\"reInit\", onSelect);\n      api.on(\"select\", onSelect);\n\n      return () => {\n        api.off(\"select\", onSelect);\n        api.off(\"reInit\", onSelect);\n      };\n    }, [api, onSelect]);\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n          ariaLabel,\n          ariaDescribedby,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          // The carousel role is non-standard; you can also simply do:\n          // role=\"region\" aria-label={ariaLabel}\n          // Some screen readers *do* recognize roledescription though, so we'll keep it:\n          aria-roledescription=\"carousel\"\n          aria-label={ariaLabel}\n          aria-describedby={ariaDescribedby}\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    );\n  },\n);\nCarousel.displayName = \"Carousel\";\n\n/**\n * CarouselContent: The embla wrapper (overflow-hidden) + a container for the slides.\n */\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel();\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  );\n});\nCarouselContent.displayName = \"CarouselContent\";\n\n/**\n * If you need to announce \"Slide X of Y\", you can pass in the index/total to this component.\n * For example:\n *   <CarouselItem index={i} total={slides.length} />\n */\ninterface CarouselItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  index?: number;\n  total?: number;\n}\n\nconst CarouselItem = React.forwardRef<HTMLDivElement, CarouselItemProps>(\n  ({ className, index, total, ...props }, ref) => {\n    const { orientation } = useCarousel();\n\n    /**\n     * aria-label example:\n     *   If you have index=0 and total=5, we get \"Slide 1 of 5\".\n     *   If you do not provide index & total, fallback is just “Slide”.\n     */\n    const slideNumber =\n      index != null && total != null\n        ? `Slide ${index + 1} of ${total}`\n        : \"Slide\";\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        aria-roledescription=\"slide\"\n        aria-label={slideNumber}\n        className={cn(\n          \"min-w-0 shrink-0 grow-0 basis-full\",\n          orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nCarouselItem.displayName = \"CarouselItem\";\n\n/**\n * Previous Button\n */\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className,\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  );\n});\nCarouselPrevious.displayName = \"CarouselPrevious\";\n\n/**\n * Next Button\n */\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel();\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className,\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  );\n});\nCarouselNext.displayName = \"CarouselNext\";\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
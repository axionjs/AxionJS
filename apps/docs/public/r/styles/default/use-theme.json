{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "use-theme",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-theme.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\ntype Theme = \"light\" | \"dark\" | \"system\";\r\n\r\n/**\r\n * A hook for managing theme with system preference detection\r\n * @param defaultTheme The default theme\r\n * @returns Theme state and actions\r\n */\r\nexport function useTheme(defaultTheme: Theme = \"system\") {\r\n  const [theme, setThemeState] = React.useState<Theme>(defaultTheme);\r\n\r\n  // Use localStorage to persist theme preference\r\n  React.useEffect(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const storedTheme = localStorage.getItem(\"theme\") as Theme | null;\r\n    if (storedTheme) {\r\n      setThemeState(storedTheme);\r\n    }\r\n  }, []);\r\n\r\n  // Update localStorage and document class when theme changes\r\n  React.useEffect(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    localStorage.setItem(\"theme\", theme);\r\n\r\n    const root = window.document.documentElement;\r\n    root.classList.remove(\"light\", \"dark\");\r\n\r\n    if (theme === \"system\") {\r\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\r\n        .matches\r\n        ? \"dark\"\r\n        : \"light\";\r\n      root.classList.add(systemTheme);\r\n    } else {\r\n      root.classList.add(theme);\r\n    }\r\n  }, [theme]);\r\n\r\n  // Listen for system theme changes\r\n  React.useEffect(() => {\r\n    if (typeof window === \"undefined\" || theme !== \"system\") return;\r\n\r\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n\r\n    const handleChange = () => {\r\n      const root = window.document.documentElement;\r\n      root.classList.remove(\"light\", \"dark\");\r\n      root.classList.add(mediaQuery.matches ? \"dark\" : \"light\");\r\n    };\r\n\r\n    mediaQuery.addEventListener(\"change\", handleChange);\r\n    return () => mediaQuery.removeEventListener(\"change\", handleChange);\r\n  }, [theme]);\r\n\r\n  const setTheme = React.useCallback((theme: Theme) => {\r\n    setThemeState(theme);\r\n  }, []);\r\n\r\n  return { theme, setTheme };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
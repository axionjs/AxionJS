{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "use-theme",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-theme.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"system\";\n\n/**\n * A hook for managing theme with system preference detection\n * @param defaultTheme The default theme\n * @returns Theme state and actions\n */\nexport function useTheme(defaultTheme: Theme = \"system\") {\n  const [theme, setThemeState] = React.useState<Theme>(defaultTheme);\n\n  // Use localStorage to persist theme preference\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    const storedTheme = localStorage.getItem(\"theme\") as Theme | null;\n    if (storedTheme) {\n      setThemeState(storedTheme);\n    }\n  }, []);\n\n  // Update localStorage and document class when theme changes\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    localStorage.setItem(\"theme\", theme);\n\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n  }, [theme]);\n\n  // Listen for system theme changes\n  React.useEffect(() => {\n    if (typeof window === \"undefined\" || theme !== \"system\") return;\n\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    const handleChange = () => {\n      const root = window.document.documentElement;\n      root.classList.remove(\"light\", \"dark\");\n      root.classList.add(mediaQuery.matches ? \"dark\" : \"light\");\n    };\n\n    mediaQuery.addEventListener(\"change\", handleChange);\n    return () => mediaQuery.removeEventListener(\"change\", handleChange);\n  }, [theme]);\n\n  const setTheme = React.useCallback((theme: Theme) => {\n    setThemeState(theme);\n  }, []);\n\n  return { theme, setTheme };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
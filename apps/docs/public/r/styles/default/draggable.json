{
  "$schema": "http://localhost:3000/schema/registry-item.json",
  "name": "draggable",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/draggable.tsx",
      "content": "import React from \"react\";\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  PointerSensor,\r\n  KeyboardSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragEndEvent,\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  useSortable,\r\n  sortableKeyboardCoordinates,\r\n  verticalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { GripVertical } from \"lucide-react\";\r\n\r\ninterface DraggableProps<T> {\r\n  items: T[];\r\n  onItemsChange: (items: T[]) => void;\r\n  renderItem: (item: T, index: number) => React.ReactNode;\r\n  idKey?: keyof T;\r\n  className?: string;\r\n}\r\n\r\nconst Draggable = <T extends { id: string | number }>({\r\n  items,\r\n  onItemsChange,\r\n  renderItem,\r\n  idKey = \"id\",\r\n  className,\r\n}: DraggableProps<T>) => {\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    }),\r\n  );\r\n\r\n  const handleDragEnd = (event: DragEndEvent) => {\r\n    const { active, over } = event;\r\n\r\n    if (active.id !== over?.id) {\r\n      const oldIndex = items.findIndex((item) => item[idKey] === active.id);\r\n      const newIndex = items.findIndex((item) => item[idKey] === over?.id);\r\n\r\n      const newItems = arrayMove(items, oldIndex, newIndex);\r\n      onItemsChange(newItems);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DndContext\r\n      sensors={sensors}\r\n      collisionDetection={closestCenter}\r\n      onDragEnd={handleDragEnd}\r\n    >\r\n      <SortableContext\r\n        items={items.map((item) => item[idKey])}\r\n        strategy={verticalListSortingStrategy}\r\n      >\r\n        <div className={cn(\"space-y-2\", className)}>\r\n          {items.map((item, index) => (\r\n            <SortableItem\r\n              key={item[idKey]}\r\n              id={item[idKey]}\r\n              item={item}\r\n              index={index}\r\n              renderItem={renderItem}\r\n              idKey={idKey}\r\n            />\r\n          ))}\r\n        </div>\r\n      </SortableContext>\r\n    </DndContext>\r\n  );\r\n};\r\n\r\ninterface SortableItemProps<T> {\r\n  id: string | number;\r\n  item: T;\r\n  index: number;\r\n  renderItem: (item: T, index: number) => React.ReactNode;\r\n  idKey: keyof T;\r\n}\r\n\r\nconst SortableItem = <T extends { id: string | number }>({\r\n  id,\r\n  item,\r\n  index,\r\n  renderItem,\r\n  idKey,\r\n}: SortableItemProps<T>) => {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    isDragging,\r\n  } = useSortable({ id });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n    opacity: isDragging ? 0.5 : 1,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={cn(\r\n        \"p-4 bg-background border border-border rounded-md shadow-sm flex items-center justify-between\",\r\n        isDragging && \"z-50\",\r\n      )}\r\n      {...attributes}\r\n      {...listeners}\r\n    >\r\n      <div className=\"flex-1\">{renderItem(item, index)}</div>\r\n      <Button\r\n        variant=\"ghost\"\r\n        size=\"icon\"\r\n        aria-label={`Drag handle for item ${index + 1}`}\r\n        className=\"ml-2\"\r\n        {...listeners}\r\n      >\r\n        <GripVertical />\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Draggable;\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
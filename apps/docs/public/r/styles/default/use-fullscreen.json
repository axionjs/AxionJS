{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-fullscreen",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-fullscreen.ts",
      "content": "import { useState, useCallback, useRef, useEffect } from \"react\";\r\n\r\ninterface FullscreenOptions {\r\n  /** Element to request fullscreen. Falls back to document.documentElement if not provided */\r\n  element?: React.RefObject<HTMLElement>;\r\n  /** Function to run when fullscreen is entered */\r\n  onEnter?: () => void;\r\n  /** Function to run when fullscreen is exited */\r\n  onExit?: () => void;\r\n  /** Whether to automatically apply fallback strategies for iOS (default: true) */\r\n  iosFallback?: boolean;\r\n}\r\n\r\n/**\r\n * Custom hook for controlling fullscreen mode with cross-browser support\r\n *\r\n * @param options Configuration options for fullscreen behavior\r\n * @returns Object containing fullscreen state and control functions\r\n */\r\nexport function useFullscreen(options: FullscreenOptions = {}) {\r\n  const { element, onEnter, onExit, iosFallback = true } = options;\r\n\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n  const [isSupported, setIsSupported] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const isIOS = useRef(false);\r\n  const onEnterRef = useRef(onEnter);\r\n  const onExitRef = useRef(onExit);\r\n\r\n  // Update callback refs when they change\r\n  useEffect(() => {\r\n    onEnterRef.current = onEnter;\r\n    onExitRef.current = onExit;\r\n  }, [onEnter, onExit]);\r\n\r\n  // Check browser support for fullscreen API\r\n  useEffect(() => {\r\n    if (typeof document === \"undefined\") return;\r\n\r\n    const fullscreenEnabled =\r\n      document.fullscreenEnabled ||\r\n      // @ts-ignore - Vendor prefixes\r\n      document.webkitFullscreenEnabled ||\r\n      // @ts-ignore - Vendor prefixes\r\n      document.mozFullScreenEnabled ||\r\n      // @ts-ignore - Vendor prefixes\r\n      document.msFullscreenEnabled;\r\n\r\n    isIOS.current =\r\n      typeof navigator !== \"undefined\" &&\r\n      /iPad|iPhone|iPod/.test(navigator.userAgent) &&\r\n      !window.MSStream;\r\n\r\n    setIsSupported(!!fullscreenEnabled || (iosFallback && isIOS.current));\r\n  }, [iosFallback]);\r\n\r\n  // Function to get the target element\r\n  const getTargetElement = useCallback(() => {\r\n    if (element && element.current) {\r\n      return element.current;\r\n    }\r\n    return document.documentElement;\r\n  }, [element]);\r\n\r\n  // Track fullscreen changes\r\n  useEffect(() => {\r\n    if (typeof document === \"undefined\") return;\r\n\r\n    const handleFullscreenChange = () => {\r\n      const fullscreenElement =\r\n        document.fullscreenElement ||\r\n        // @ts-ignore - Vendor prefixes\r\n        document.webkitFullscreenElement ||\r\n        // @ts-ignore - Vendor prefixes\r\n        document.mozFullScreenElement ||\r\n        // @ts-ignore - Vendor prefixes\r\n        document.msFullscreenElement;\r\n\r\n      const newIsFullscreen = !!fullscreenElement;\r\n      setIsFullscreen(newIsFullscreen);\r\n\r\n      if (newIsFullscreen && onEnterRef.current) {\r\n        onEnterRef.current();\r\n      } else if (!newIsFullscreen && onExitRef.current) {\r\n        onExitRef.current();\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"fullscreenchange\", handleFullscreenChange);\r\n    document.addEventListener(\"webkitfullscreenchange\", handleFullscreenChange);\r\n    document.addEventListener(\"mozfullscreenchange\", handleFullscreenChange);\r\n    document.addEventListener(\"MSFullscreenChange\", handleFullscreenChange);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"fullscreenchange\", handleFullscreenChange);\r\n      document.removeEventListener(\r\n        \"webkitfullscreenchange\",\r\n        handleFullscreenChange,\r\n      );\r\n      document.removeEventListener(\r\n        \"mozfullscreenchange\",\r\n        handleFullscreenChange,\r\n      );\r\n      document.removeEventListener(\r\n        \"MSFullscreenChange\",\r\n        handleFullscreenChange,\r\n      );\r\n    };\r\n  }, []);\r\n\r\n  // Enter fullscreen\r\n  const enter = useCallback(async () => {\r\n    if (!isSupported) {\r\n      setError(new Error(\"Fullscreen not supported\"));\r\n      return false;\r\n    }\r\n\r\n    const target = getTargetElement();\r\n    setError(null);\r\n\r\n    try {\r\n      if (isIOS.current && iosFallback) {\r\n        // iOS Safari doesn't support true fullscreen\r\n        // Apply a CSS class that makes the element take the full screen\r\n        if (target) {\r\n          target.style.position = \"fixed\";\r\n          target.style.top = \"0\";\r\n          target.style.right = \"0\";\r\n          target.style.bottom = \"0\";\r\n          target.style.left = \"0\";\r\n          target.style.width = \"100vw\";\r\n          target.style.height = \"100vh\";\r\n          target.style.zIndex = \"9999\";\r\n          target.style.backgroundColor = \"#000\";\r\n\r\n          // Force orientation change if possible\r\n          if (screen.orientation && screen.orientation.lock) {\r\n            try {\r\n              await screen.orientation.lock(\"landscape\");\r\n            } catch (e) {\r\n              // Ignore orientation errors\r\n            }\r\n          }\r\n\r\n          setIsFullscreen(true);\r\n          if (onEnterRef.current) {\r\n            onEnterRef.current();\r\n          }\r\n          return true;\r\n        }\r\n      } else {\r\n        // Standard fullscreen API\r\n        if (target.requestFullscreen) {\r\n          await target.requestFullscreen();\r\n          return true;\r\n        } else if (target.webkitRequestFullscreen) {\r\n          // @ts-ignore - Vendor prefixes\r\n          await target.webkitRequestFullscreen();\r\n          return true;\r\n        } else if (target.mozRequestFullScreen) {\r\n          // @ts-ignore - Vendor prefixes\r\n          await target.mozRequestFullScreen();\r\n          return true;\r\n        } else if (target.msRequestFullscreen) {\r\n          // @ts-ignore - Vendor prefixes\r\n          await target.msRequestFullscreen();\r\n          return true;\r\n        }\r\n      }\r\n    } catch (err) {\r\n      setError(\r\n        err instanceof Error ? err : new Error(\"Error entering fullscreen\"),\r\n      );\r\n      return false;\r\n    }\r\n\r\n    setError(new Error(\"Fullscreen request failed\"));\r\n    return false;\r\n  }, [isSupported, getTargetElement, iosFallback]);\r\n\r\n  // Exit fullscreen\r\n  const exit = useCallback(async () => {\r\n    if (!isFullscreen) return true;\r\n    setError(null);\r\n\r\n    try {\r\n      if (isIOS.current && iosFallback) {\r\n        // iOS Safari fallback cleanup\r\n        const target = getTargetElement();\r\n        if (target) {\r\n          target.style.position = \"\";\r\n          target.style.top = \"\";\r\n          target.style.right = \"\";\r\n          target.style.bottom = \"\";\r\n          target.style.left = \"\";\r\n          target.style.width = \"\";\r\n          target.style.height = \"\";\r\n          target.style.zIndex = \"\";\r\n          target.style.backgroundColor = \"\";\r\n\r\n          setIsFullscreen(false);\r\n          if (onExitRef.current) {\r\n            onExitRef.current();\r\n          }\r\n          return true;\r\n        }\r\n      } else {\r\n        // Standard fullscreen API\r\n        if (document.exitFullscreen) {\r\n          await document.exitFullscreen();\r\n          return true;\r\n        } else if (document.webkitExitFullscreen) {\r\n          // @ts-ignore - Vendor prefixes\r\n          await document.webkitExitFullscreen();\r\n          return true;\r\n        } else if (document.mozCancelFullScreen) {\r\n          // @ts-ignore - Vendor prefixes\r\n          await document.mozCancelFullScreen();\r\n          return true;\r\n        } else if (document.msExitFullscreen) {\r\n          // @ts-ignore - Vendor prefixes\r\n          await document.msExitFullscreen();\r\n          return true;\r\n        }\r\n      }\r\n    } catch (err) {\r\n      setError(\r\n        err instanceof Error ? err : new Error(\"Error exiting fullscreen\"),\r\n      );\r\n      return false;\r\n    }\r\n\r\n    setError(new Error(\"Exit fullscreen failed\"));\r\n    return false;\r\n  }, [isFullscreen, getTargetElement, iosFallback]);\r\n\r\n  // Toggle fullscreen\r\n  const toggle = useCallback(async () => {\r\n    if (isFullscreen) {\r\n      return exit();\r\n    } else {\r\n      return enter();\r\n    }\r\n  }, [isFullscreen, enter, exit]);\r\n\r\n  return {\r\n    isFullscreen,\r\n    isSupported,\r\n    error,\r\n    enter,\r\n    exit,\r\n    toggle,\r\n  };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
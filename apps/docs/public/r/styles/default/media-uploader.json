{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "media-uploader",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A media uploader with image and video support.",
  "dependencies": [
    "prisma",
    "@prisma/client",
    "cloudinary"
  ],
  "registryDependencies": [
    "button",
    "alert-dialog",
    "card",
    "progress"
  ],
  "files": [
    {
      "path": "dynamic-components/media-uploader/actions/media-actions.ts",
      "content": "\"use server\";\n\nimport { db } from \"@/registry/default/lib/db\";\nimport { v2 as cloudinary } from \"cloudinary\";\nimport { revalidatePath } from \"next/cache\";\n\n// Configure Cloudinary\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\nexport async function uploadToCloudinary({\n  name,\n  type,\n  size,\n  base64,\n  isVideo,\n}: {\n  name: string;\n  type: string;\n  size: number;\n  base64: string;\n  isVideo: boolean;\n}) {\n  try {\n    // Create a unique public_id\n    const timestamp = new Date().getTime();\n    const publicId = `upload_${timestamp}_${name.replace(/\\.[^/.]+$/, \"\")}`;\n\n    let uploadResult;\n\n    if (isVideo) {\n      // For videos - note: Cloudinary might have size limits for direct uploads\n      uploadResult = await cloudinary.uploader.upload(\n        `data:${type};base64,${base64}`,\n        {\n          resource_type: \"video\",\n          public_id: publicId,\n          folder: \"videos\",\n        },\n      );\n    } else {\n      // For images\n      uploadResult = await cloudinary.uploader.upload(\n        `data:${type};base64,${base64}`,\n        {\n          public_id: publicId,\n          folder: \"images\",\n        },\n      );\n    }\n\n    // Create a record in the database\n    const mediaRecord = await db.media.create({\n      data: {\n        name,\n        size,\n        url: uploadResult.secure_url,\n        publicId: uploadResult.public_id,\n        thumbnailUrl: isVideo ? null : uploadResult.secure_url,\n        mediaType: isVideo ? \"VIDEO\" : \"IMAGE\",\n      },\n    });\n\n    revalidatePath(\"/media\");\n\n    return {\n      success: true,\n      mediaId: mediaRecord.id,\n      url: uploadResult.secure_url,\n      thumbnailUrl: isVideo ? null : uploadResult.secure_url,\n    };\n  } catch (error) {\n    console.error(\"Error uploading to Cloudinary:\", error);\n    throw new Error(\"Failed to upload media\");\n  }\n}\n\nexport async function getMedia() {\n  try {\n    const media = await db.media.findMany({\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n\n    return media;\n  } catch (error) {\n    console.error(\"Error fetching media:\", error);\n    throw new Error(\"Failed to fetch media\");\n  }\n}\n\nexport async function deleteMedia(id: string) {\n  try {\n    // Get the media record\n    const media = await db.media.findUnique({\n      where: { id },\n    });\n\n    if (!media) {\n      throw new Error(\"Media not found\");\n    }\n\n    // Delete from Cloudinary\n    if (media.publicId) {\n      await cloudinary.uploader.destroy(media.publicId, {\n        resource_type: media.mediaType === \"VIDEO\" ? \"video\" : \"image\",\n      });\n    }\n\n    // Delete from database\n    await db.media.delete({\n      where: { id },\n    });\n\n    // Revalidate paths\n    revalidatePath(\"/media\");\n\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error deleting media:\", error);\n    throw new Error(\"Failed to delete media\");\n  }\n}\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/media-uploader/components/media-uploader.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport { useState, useRef } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport Image from \"next/image\";\nimport {\n  Upload,\n  X,\n  CheckCircle,\n  AlertCircle,\n  ImageIcon,\n  Film,\n  Trash2,\n  Eye,\n} from \"lucide-react\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport { cn } from \"@/lib/utils\";\nimport { uploadToCloudinary } from \"@/registry/default/dynamic-components/media-uploader/actions/media-actions\";\nimport { Progress } from \"@/registry/default/ui/progress\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { ScrollArea } from \"@/registry/default/ui/scroll-area\";\nimport { Separator } from \"@/registry/default/ui/separator\";\n\ntype FileStatus = \"idle\" | \"uploading\" | \"success\" | \"error\";\n\ninterface FileWithStatus {\n  file: File;\n  id: string;\n  progress: number;\n  status: FileStatus;\n  url?: string;\n  thumbnailUrl?: string;\n  isVideo: boolean;\n}\n\nexport function MediaUploader() {\n  const [files, setFiles] = useState<FileWithStatus[]>([]);\n  const [isDragging, setIsDragging] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const router = useRouter();\n\n  const handleFileChange = (selectedFiles: FileList | null) => {\n    if (!selectedFiles) return;\n\n    const newFiles = Array.from(selectedFiles)\n      .filter((file) => {\n        const fileType = file.type;\n        return fileType.includes(\"image\") || fileType.includes(\"video\");\n      })\n      .map((file) => ({\n        file,\n        id: crypto.randomUUID(),\n        progress: 0,\n        status: \"idle\" as FileStatus,\n        isVideo: file.type.includes(\"video\"),\n      }));\n\n    setFiles((prev) => [...prev, ...newFiles]);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = () => {\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    handleFileChange(e.dataTransfer.files);\n  };\n\n  const handleUpload = async (fileWithStatus: FileWithStatus) => {\n    try {\n      setFiles((prev) =>\n        prev.map((f) =>\n          f.id === fileWithStatus.id ? { ...f, status: \"uploading\" } : f,\n        ),\n      );\n\n      const reader = new FileReader();\n      const base64 = await new Promise((resolve) => {\n        reader.onload = () => resolve(reader.result);\n        reader.readAsDataURL(fileWithStatus.file);\n      });\n\n      const steps = 10;\n      for (let i = 1; i <= steps; i++) {\n        await new Promise((resolve) => setTimeout(resolve, 100));\n        setFiles((prev) =>\n          prev.map((f) =>\n            f.id === fileWithStatus.id\n              ? { ...f, progress: (i / steps) * 100 }\n              : f,\n          ),\n        );\n      }\n\n      const result = await uploadToCloudinary({\n        name: fileWithStatus.file.name,\n        type: fileWithStatus.file.type,\n        size: fileWithStatus.file.size,\n        base64: (base64 as string).split(\",\")[1],\n        isVideo: fileWithStatus.isVideo,\n      });\n\n      setFiles((prev) =>\n        prev.map((f) =>\n          f.id === fileWithStatus.id\n            ? {\n                ...f,\n                status: \"success\",\n                progress: 100,\n                url: result.url,\n                thumbnailUrl: result.thumbnailUrl || result.url,\n              }\n            : f,\n        ),\n      );\n\n      router.refresh();\n    } catch (error) {\n      console.error(\"Upload failed:\", error);\n      setFiles((prev) =>\n        prev.map((f) =>\n          f.id === fileWithStatus.id ? { ...f, status: \"error\" } : f,\n        ),\n      );\n    }\n  };\n\n  const removeFile = (id: string) => {\n    setFiles((prev) => prev.filter((f) => f.id !== id));\n  };\n\n  const getStatusIcon = (status: FileStatus) => {\n    switch (status) {\n      case \"success\":\n        return <CheckCircle className=\"h-3 w-3 text-green-600\" />;\n      case \"error\":\n        return <AlertCircle className=\"h-3 w-3 text-destructive\" />;\n      case \"uploading\":\n        return (\n          <div className=\"h-3 w-3 rounded-full bg-blue-500 animate-pulse\" />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 flex items-center justify-center p-4 bg-background/80 backdrop-blur-sm z-50\">\n      <Card className=\"w-full max-w-[80vw] max-h-[70vh] flex flex-col shadow-lg border\">\n        <CardHeader className=\"flex-shrink-0 pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">\n              Media Upload\n            </CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {files.length} files\n              </Badge>\n              {files.length > 0 && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setFiles([])}\n                  className=\"h-7 px-2 text-xs\"\n                >\n                  <Trash2 className=\"h-3 w-3 mr-1\" />\n                  Clear\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"flex-1 flex flex-col gap-4 min-h-0 p-4\">\n          {/* Uploaded Files Section */}\n          {files.length > 0 && (\n            <>\n              <div className=\"flex-1 min-h-0\">\n                <ScrollArea className=\"h-full pr-4\">\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-3\">\n                    {files.map((fileWithStatus) => (\n                      <div key={fileWithStatus.id} className=\"relative group\">\n                        <Card className=\"overflow-hidden border transition-all hover:shadow-md\">\n                          <div className=\"aspect-square relative bg-muted/30\">\n                            {fileWithStatus.status === \"success\" &&\n                            fileWithStatus.thumbnailUrl ? (\n                              <>\n                                <Image\n                                  src={fileWithStatus.thumbnailUrl}\n                                  alt={fileWithStatus.file.name}\n                                  fill\n                                  className=\"object-cover\"\n                                />\n                                {fileWithStatus.isVideo && (\n                                  <div className=\"absolute inset-0 flex items-center justify-center bg-black/20\">\n                                    <Film className=\"h-4 w-4 text-white\" />\n                                  </div>\n                                )}\n                              </>\n                            ) : (\n                              <div className=\"flex items-center justify-center h-full\">\n                                {fileWithStatus.isVideo ? (\n                                  <Film className=\"h-6 w-6 text-muted-foreground\" />\n                                ) : (\n                                  <ImageIcon className=\"h-6 w-6 text-muted-foreground\" />\n                                )}\n                              </div>\n                            )}\n\n                            {/* Status Overlay */}\n                            {fileWithStatus.status === \"uploading\" && (\n                              <div className=\"absolute inset-0 bg-background/80 flex items-center justify-center\">\n                                <div className=\"text-center space-y-1\">\n                                  <Progress\n                                    value={fileWithStatus.progress}\n                                    className=\"h-1 w-12\"\n                                  />\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {Math.round(fileWithStatus.progress)}%\n                                  </span>\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Remove Button */}\n                            <Button\n                              variant=\"secondary\"\n                              size=\"icon\"\n                              className=\"absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity\"\n                              onClick={() => removeFile(fileWithStatus.id)}\n                            >\n                              <X className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n\n                          <div className=\"p-2 space-y-1\">\n                            <div className=\"flex items-center justify-between\">\n                              <p className=\"text-xs font-medium truncate flex-1 mr-1\">\n                                {fileWithStatus.file.name}\n                              </p>\n                              {getStatusIcon(fileWithStatus.status)}\n                            </div>\n\n                            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                              <span>\n                                {(\n                                  fileWithStatus.file.size /\n                                  1024 /\n                                  1024\n                                ).toFixed(1)}\n                                MB\n                              </span>\n\n                              {fileWithStatus.status === \"idle\" && (\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"h-5 px-2 text-xs\"\n                                  onClick={() => handleUpload(fileWithStatus)}\n                                >\n                                  Upload\n                                </Button>\n                              )}\n\n                              {fileWithStatus.status === \"success\" &&\n                                fileWithStatus.url && (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"h-5 px-2 text-xs\"\n                                    asChild\n                                  >\n                                    <a\n                                      href={fileWithStatus.url}\n                                      target=\"_blank\"\n                                      rel=\"noopener noreferrer\"\n                                    >\n                                      <Eye className=\"h-3 w-3\" />\n                                    </a>\n                                  </Button>\n                                )}\n\n                              {fileWithStatus.status === \"error\" && (\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"h-5 px-2 text-xs text-destructive\"\n                                  onClick={() => handleUpload(fileWithStatus)}\n                                >\n                                  Retry\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        </Card>\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </div>\n              <Separator />\n            </>\n          )}\n\n          {/* Upload Area */}\n          <div className=\"flex-shrink-0\">\n            <div\n              className={cn(\n                \"border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-all duration-200\",\n                isDragging\n                  ? \"border-primary bg-primary/5\"\n                  : \"border-muted-foreground/25 hover:border-primary/50 hover:bg-accent/30\",\n              )}\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              onDrop={handleDrop}\n              onClick={() => fileInputRef.current?.click()}\n              role=\"button\"\n              tabIndex={0}\n              aria-label=\"Upload media files\"\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.preventDefault();\n                  fileInputRef.current?.click();\n                }\n              }}\n            >\n              <input\n                type=\"file\"\n                ref={fileInputRef}\n                onChange={(e) => handleFileChange(e.target.files)}\n                className=\"sr-only\"\n                multiple\n                accept=\"image/*,video/*\"\n              />\n\n              <div className=\"flex flex-col items-center justify-center space-y-2\">\n                <div className=\"p-2 rounded-full bg-primary/10\">\n                  <Upload className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div className=\"space-y-1\">\n                  <p className=\"text-sm font-medium\">\n                    Drop files here or click to browse\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    JPG, PNG, GIF, WebP, MP4, WebM\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/media-uploader/components/media-gallery.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport Image from \"next/image\";\nimport { Film, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { deleteMedia } from \"@/registry/default/dynamic-components/media-uploader/actions/media-actions\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/registry/default/ui/alert-dialog\";\n\ninterface Media {\n  id: string;\n  name: string;\n  url: string;\n  thumbnailUrl: string | null;\n  mediaType: \"IMAGE\" | \"VIDEO\";\n  createdAt: Date;\n}\n\ninterface MediaGalleryProps {\n  media: Media[];\n}\n\nexport function MediaGallery({ media: initialMedia }: MediaGalleryProps) {\n  const [media, setMedia] = useState<Media[]>(initialMedia);\n  const [mediaToDelete, setMediaToDelete] = useState<string | null>(null);\n\n  const handleDelete = async () => {\n    if (!mediaToDelete) return;\n\n    try {\n      await deleteMedia(mediaToDelete);\n      setMedia(media.filter((item) => item.id !== mediaToDelete));\n      setMediaToDelete(null);\n    } catch (error) {\n      console.error(\"Error deleting media:\", error);\n    }\n  };\n\n  if (media.length === 0) {\n    return (\n      <div className=\"text-center p-10 border rounded-lg\">\n        <p className=\"text-muted-foreground\">No media uploaded yet</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n      {media.map((item) => (\n        <div\n          key={item.id}\n          className=\"group relative border rounded-lg overflow-hidden\"\n        >\n          <div className=\"aspect-square relative bg-gray-100\">\n            <Image\n              src={item.thumbnailUrl || item.url}\n              alt={item.name}\n              fill\n              className=\"object-cover\"\n            />\n            {item.mediaType === \"VIDEO\" && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-black/30\">\n                <Film className=\"h-10 w-10 text-white\" />\n              </div>\n            )}\n          </div>\n\n          <div className=\"p-3\">\n            <p className=\"font-medium truncate\">{item.name}</p>\n            <p className=\"text-sm text-muted-foreground\">\n              {new Date(item.createdAt).toLocaleDateString()}\n            </p>\n\n            <div className=\"mt-2 flex justify-between\">\n              <Button variant=\"outline\" size=\"sm\" asChild>\n                <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                  View\n                </a>\n              </Button>\n\n              <AlertDialog\n                open={mediaToDelete === item.id}\n                onOpenChange={(open) => !open && setMediaToDelete(null)}\n              >\n                <AlertDialogTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"text-red-500 hover:text-red-600\"\n                    onClick={() => setMediaToDelete(item.id)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      This will permanently delete the media. This action cannot\n                      be undone.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction\n                      onClick={handleDelete}\n                      className=\"bg-red-500 hover:bg-red-600\"\n                    >\n                      Delete\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/media-uploader/media/page.tsx",
      "content": "import { getMedia } from \"@/registry/default/dynamic-components/media-uploader/actions/media-actions\";\nimport { MediaGallery } from \"@/registry/default/dynamic-components/media-uploader/components/media-gallery\";\n\nexport default async function MediaPage() {\n  const media = await getMedia();\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <h1 className=\"text-3xl font-bold mb-6\">Media Gallery</h1>\n      <MediaGallery media={media} />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(media-uploader)/media/page.tsx"
    }
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "accessibility-tool",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "zustand"
  ],
  "registryDependencies": [
    "dialog",
    "switch",
    "avatar",
    "tabs",
    "slider"
  ],
  "files": [
    {
      "path": "ui/AccessibilityTool.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/registry/default/ui/dialog\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/registry/default/ui/tabs\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Switch } from \"@/registry/default/ui/switch\";\nimport { Slider } from \"@/registry/default/ui/slider\";\nimport {\n  FeatureIntensity,\n  useAccessibilityStore,\n} from \"@/registry/default/lib/accessibility-store\";\nimport { AccessibilitySlider } from \"@/registry/default/ui/AccessibilitySlider\";\nimport screenReaderService from \"@/registry/default/lib/screen-reader-service\";\n\nimport {\n  LucideContrast,\n  LucideEye,\n  LucideMaximize,\n  LucideText,\n  LucideImageOff,\n  LucideType,\n  LucideUnderline,\n  LucideVolume2,\n  LucideRefreshCw,\n  LucideX,\n  LucideLineChart,\n  LucideInfo,\n  LucideUser,\n  LucideZap,\n} from \"lucide-react\";\n\nexport function AccessibilityTool() {\n  const {\n    isOpen,\n    toggleOpen,\n\n    contrast,\n    setContrast,\n\n    highlightLinks,\n    setHighlightLinks,\n\n    textSize,\n    setTextSize,\n\n    textSpacing,\n    setTextSpacing,\n\n    hideImages,\n    toggleHideImages,\n\n    dyslexiaFriendly,\n    toggleDyslexiaFriendly,\n\n    lineHeight,\n    setLineHeight,\n\n    saturation,\n    setSaturation,\n\n    screenReader,\n    toggleScreenReader,\n    setScreenReaderSpeed,\n    setScreenReaderVolume,\n\n    resetAll,\n  } = useAccessibilityStore();\n\n  // Initialize screen reader\n  useEffect(() => {\n    // When enabled, initialize the service\n    if (screenReader.enabled) {\n      console.log(\"Initializing screen reader\");\n      screenReaderService.initialize();\n      screenReaderService.setSpeed(screenReader.speed);\n      screenReaderService.setVolume(screenReader.volume);\n    } else {\n      // When disabled, clean up the service\n      console.log(\"Cleaning up screen reader\");\n      screenReaderService.cleanup();\n    }\n\n    // Always clean up on component unmount\n    return () => {\n      console.log(\"Component unmounting, cleaning up screen reader\");\n      screenReaderService.cleanup();\n    };\n  }, [screenReader.enabled, screenReader.speed, screenReader.volume]);\n\n  // Handle screen reader toggle with proper cleanup\n  const handleScreenReaderToggle = () => {\n    if (screenReader.enabled) {\n      // If currently enabled, clean up before toggling state\n      screenReaderService.cleanup();\n    }\n    toggleScreenReader();\n  };\n\n  const readPageContent = () => {\n    if (screenReader.enabled) {\n      screenReaderService.readPage();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={toggleOpen}>\n      <DialogContent className=\"h-[85vh] max-w-md w-full overflow-y-auto\">\n        <DialogHeader className=\"space-y-2\">\n          <DialogTitle className=\"text-2xl flex items-center gap-2\">\n            <LucideZap className=\"h-6 w-6 text-blue-500\" />\n            Accessibility Panel\n          </DialogTitle>\n          <DialogDescription>\n            Customize your browsing experience to match your needs\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"visual\" className=\"w-full\">\n          <TabsList className=\"grid grid-cols-3 mb-4\">\n            <TabsTrigger value=\"visual\">Visual</TabsTrigger>\n            <TabsTrigger value=\"reading\">Reading</TabsTrigger>\n            <TabsTrigger value=\"navigation\">Navigation</TabsTrigger>\n          </TabsList>\n\n          {/* Visual Tab */}\n          <TabsContent value=\"visual\" className=\"space-y-6\">\n            <div className=\"grid gap-6\">\n              <AccessibilitySlider\n                value={contrast}\n                onChange={setContrast}\n                label=\"Contrast\"\n                icon={<LucideContrast className=\"h-4 w-4\" />}\n              />\n\n              <AccessibilitySlider\n                value={saturation}\n                onChange={setSaturation}\n                label=\"Color Saturation\"\n                icon={<LucideEye className=\"h-4 w-4\" />}\n              />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <LucideImageOff className=\"h-4 w-4\" />\n                  <span className=\"text-sm font-medium\">Hide Images</span>\n                </div>\n                <Switch\n                  checked={hideImages}\n                  onCheckedChange={toggleHideImages}\n                />\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Reading Tab */}\n          <TabsContent value=\"reading\" className=\"space-y-6\">\n            <div className=\"grid gap-6\">\n              <AccessibilitySlider\n                value={textSize}\n                onChange={setTextSize}\n                label=\"Text Size\"\n                icon={<LucideMaximize className=\"h-4 w-4\" />}\n              />\n\n              <AccessibilitySlider\n                value={textSpacing}\n                onChange={setTextSpacing}\n                label=\"Text Spacing\"\n                icon={<LucideText className=\"h-4 w-4\" />}\n              />\n\n              <AccessibilitySlider\n                value={lineHeight}\n                onChange={setLineHeight}\n                label=\"Line Height\"\n                icon={<LucideLineChart className=\"h-4 w-4\" />}\n              />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <LucideType className=\"h-4 w-4\" />\n                  <span className=\"text-sm font-medium\">\n                    Dyslexia Friendly Font\n                  </span>\n                </div>\n                <Switch\n                  checked={dyslexiaFriendly}\n                  onCheckedChange={toggleDyslexiaFriendly}\n                />\n              </div>\n\n              <div className=\"space-y-4 border p-4 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <LucideVolume2 className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">Screen Reader</span>\n                  </div>\n                  <Switch\n                    checked={screenReader.enabled}\n                    onCheckedChange={toggleScreenReader}\n                  />\n                </div>\n\n                {screenReader.enabled && (\n                  <div className=\"pt-2 space-y-4\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-xs\">Reading Speed</span>\n                        <span className=\"text-xs font-medium\">\n                          {screenReader.speed === \"normal\" ? \"Normal\" : \"Slow\"}\n                        </span>\n                      </div>\n                      <Tabs\n                        value={screenReader.speed}\n                        onValueChange={(v) =>\n                          setScreenReaderSpeed(v as \"normal\" | \"slow\")\n                        }\n                        className=\"w-full\"\n                      >\n                        <TabsList className=\"grid grid-cols-2 w-full\">\n                          <TabsTrigger value=\"normal\" className=\"text-xs\">\n                            Normal\n                          </TabsTrigger>\n                          <TabsTrigger value=\"slow\" className=\"text-xs\">\n                            Slow\n                          </TabsTrigger>\n                        </TabsList>\n                      </Tabs>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-xs\">Volume</span>\n                        <span className=\"text-xs font-medium\">\n                          {Math.round(screenReader.volume * 100)}%\n                        </span>\n                      </div>\n                      <Slider\n                        value={[screenReader.volume * 100]}\n                        min={0}\n                        max={100}\n                        step={10}\n                        onValueChange={(value) =>\n                          setScreenReaderVolume(value[0] / 100)\n                        }\n                      />\n                    </div>\n\n                    <Button\n                      onClick={readPageContent}\n                      className=\"w-full\"\n                      variant=\"outline\"\n                    >\n                      Read Page Content\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Navigation Tab */}\n          <TabsContent value=\"navigation\" className=\"space-y-6\">\n            <div className=\"grid gap-6\">\n              <AccessibilitySlider\n                value={highlightLinks}\n                onChange={setHighlightLinks}\n                label=\"Highlight Links\"\n                icon={<LucideUnderline className=\"h-4 w-4\" />}\n              />\n\n              <div className=\"p-4 bg-blue-50 rounded-lg space-y-2\">\n                <div className=\"flex items-start gap-2\">\n                  <LucideInfo className=\"h-4 w-4 text-blue-500 mt-0.5\" />\n                  <div>\n                    <h4 className=\"text-sm font-medium\">Keyboard Shortcuts</h4>\n                    <ul className=\"text-xs space-y-1 mt-1\">\n                      <li>Ctrl + U: Toggle Accessibility Panel</li>\n                      <li>Tab: Navigate through elements</li>\n                      <li>Enter: Activate focused element</li>\n                      <li>Esc: Close dialogs or menus</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"flex justify-between mt-6 pt-4 border-t\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={resetAll}\n            className=\"flex items-center gap-1\"\n          >\n            <LucideRefreshCw className=\"h-3.5 w-3.5\" />\n            Reset All\n          </Button>\n\n          <Button\n            variant=\"default\"\n            size=\"sm\"\n            onClick={toggleOpen}\n            className=\"flex items-center gap-1\"\n          >\n            <LucideX className=\"h-3.5 w-3.5\" />\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/AccessibilityProvider.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport { useAccessibilityStore } from \"@/registry/default/lib/accessibility-store\";\n\nexport function AccessibilityProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const {\n    contrast,\n    highlightLinks,\n    textSize,\n    textSpacing,\n    hideImages,\n    dyslexiaFriendly,\n    lineHeight,\n    saturation,\n    screenReader,\n  } = useAccessibilityStore();\n\n  // Apply all accessibility settings to the HTML element\n  useEffect(() => {\n    const html = document.documentElement;\n\n    // Remove all potential classes first\n    const classesToRemove = [\n      \"contrast-medium\",\n      \"contrast-high\",\n      \"highlight-links-medium\",\n      \"highlight-links-high\",\n      \"text-size-medium\",\n      \"text-size-high\",\n      \"text-spacing-medium\",\n      \"text-spacing-high\",\n      \"hide-images\",\n      \"dyslexia-friendly\",\n      \"line-height-medium\",\n      \"line-height-high\",\n      \"saturation-medium\",\n      \"saturation-high\",\n    ];\n\n    html.classList.remove(...classesToRemove);\n\n    // Apply contrast settings\n    if (contrast === \"medium\") {\n      html.classList.add(\"contrast-medium\");\n    } else if (contrast === \"high\") {\n      html.classList.add(\"contrast-high\");\n    }\n\n    // Apply highlight links settings\n    if (highlightLinks === \"medium\") {\n      html.classList.add(\"highlight-links-medium\");\n    } else if (highlightLinks === \"high\") {\n      html.classList.add(\"highlight-links-high\");\n    }\n\n    // Apply text size settings\n    if (textSize === \"medium\") {\n      html.classList.add(\"text-size-medium\");\n    } else if (textSize === \"high\") {\n      html.classList.add(\"text-size-high\");\n    }\n\n    // Apply text spacing settings\n    if (textSpacing === \"medium\") {\n      html.classList.add(\"text-spacing-medium\");\n    } else if (textSpacing === \"high\") {\n      html.classList.add(\"text-spacing-high\");\n    }\n\n    // Apply hide images setting\n    if (hideImages) {\n      html.classList.add(\"hide-images\");\n    }\n\n    // Apply dyslexia-friendly setting\n    if (dyslexiaFriendly) {\n      html.classList.add(\"dyslexia-friendly\");\n    }\n\n    // Apply line height settings\n    if (lineHeight === \"medium\") {\n      html.classList.add(\"line-height-medium\");\n    } else if (lineHeight === \"high\") {\n      html.classList.add(\"line-height-high\");\n    }\n\n    // Apply saturation settings\n    if (saturation === \"medium\") {\n      html.classList.add(\"saturation-medium\");\n    } else if (saturation === \"high\") {\n      html.classList.add(\"saturation-high\");\n    }\n\n    // Add data attribute for screen reader enabled state\n    // This allows for potential CSS targeting if needed\n    if (screenReader.enabled) {\n      html.setAttribute(\"data-screen-reader\", \"enabled\");\n    } else {\n      html.removeAttribute(\"data-screen-reader\");\n    }\n\n    // Listen for Ctrl + U to open or close the accessibility menu\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Check if ctrlKey (or metaKey for Mac) + key \"u\"\n      if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === \"u\") {\n        event.preventDefault();\n        // We can't directly call toggleOpen here because of the dependency array\n        // Instead, dispatch a custom event that will be caught elsewhere\n        document.dispatchEvent(new CustomEvent(\"toggleAccessibilityPanel\"));\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [\n    contrast,\n    highlightLinks,\n    textSize,\n    textSpacing,\n    hideImages,\n    dyslexiaFriendly,\n    lineHeight,\n    saturation,\n    screenReader.enabled,\n  ]);\n\n  return <>{children}</>;\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/AccessibilityTrigger.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport { useAccessibilityStore } from \"@/registry/default/lib/accessibility-store\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  LucideAccessibility,\n  LucideEye,\n  LucideVolume2,\n  LucideZap,\n} from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/default/ui/tooltip\";\n\nexport function AccessibilityTrigger() {\n  const { toggleOpen, screenReader } = useAccessibilityStore();\n\n  // Listen for the custom event to toggle the panel\n  useEffect(() => {\n    const handleToggleEvent = () => {\n      toggleOpen();\n    };\n\n    document.addEventListener(\"toggleAccessibilityPanel\", handleToggleEvent);\n    return () => {\n      document.removeEventListener(\n        \"toggleAccessibilityPanel\",\n        handleToggleEvent,\n      );\n    };\n  }, [toggleOpen]);\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            variant=\"default\"\n            size=\"lg\"\n            className=\"fixed bottom-4 right-4 z-50 rounded-full w-16 h-16 shadow-lg bg-blue-600 hover:bg-blue-700 flex items-center justify-center\"\n            onClick={toggleOpen}\n            aria-label=\"Open Accessibility Menu\"\n          >\n            <div className=\"relative\">\n              <LucideAccessibility className=\"w-8 h-8 text-white\" />\n              {screenReader.enabled && (\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border border-white animate-pulse\" />\n              )}\n            </div>\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent side=\"left\">\n          <p>Accessibility Options (Ctrl+U)</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/AccessibilitySlider.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { FeatureIntensity } from \"@/registry/default/lib/accessibility-store\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/registry/default/ui/tabs\";\n\ninterface AccessibilitySliderProps {\n  value: FeatureIntensity;\n  onChange: (value: FeatureIntensity) => void;\n  label: string;\n  icon: React.ReactNode;\n}\n\nexport function AccessibilitySlider({\n  value,\n  onChange,\n  label,\n  icon,\n}: AccessibilitySliderProps) {\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center gap-2\">\n        <div className=\"w-5 h-5 flex items-center justify-center\">{icon}</div>\n        <span className=\"text-sm font-medium\">{label}</span>\n      </div>\n      <Tabs\n        value={value}\n        onValueChange={(v) => onChange(v as FeatureIntensity)}\n        className=\"w-full\"\n      >\n        <TabsList className=\"grid grid-cols-3 w-full\">\n          <TabsTrigger value=\"default\" className=\"text-xs\">\n            Default\n          </TabsTrigger>\n          <TabsTrigger value=\"medium\" className=\"text-xs\">\n            Medium\n          </TabsTrigger>\n          <TabsTrigger value=\"high\" className=\"text-xs\">\n            High\n          </TabsTrigger>\n        </TabsList>\n      </Tabs>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib/accessibility-store.ts",
      "content": "\"use client\";\n\nimport { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\n// Define types for feature intensity levels\nexport type FeatureIntensity = \"default\" | \"medium\" | \"high\";\n\ninterface AccessibilityState {\n  isOpen: boolean;\n  toggleOpen: () => void;\n\n  // Accessibility features with intensity levels\n  contrast: FeatureIntensity;\n  setContrast: (level: FeatureIntensity) => void;\n\n  highlightLinks: FeatureIntensity;\n  setHighlightLinks: (level: FeatureIntensity) => void;\n\n  textSize: FeatureIntensity;\n  setTextSize: (level: FeatureIntensity) => void;\n\n  textSpacing: FeatureIntensity;\n  setTextSpacing: (level: FeatureIntensity) => void;\n\n  hideImages: boolean;\n  toggleHideImages: () => void;\n\n  dyslexiaFriendly: boolean;\n  toggleDyslexiaFriendly: () => void;\n\n  lineHeight: FeatureIntensity;\n  setLineHeight: (level: FeatureIntensity) => void;\n\n  saturation: FeatureIntensity;\n  setSaturation: (level: FeatureIntensity) => void;\n\n  // Screen reader\n  screenReader: {\n    enabled: boolean;\n    speed: \"normal\" | \"slow\";\n    volume: number; // 0 to 1\n  };\n  toggleScreenReader: () => void;\n  setScreenReaderSpeed: (speed: \"normal\" | \"slow\") => void;\n  setScreenReaderVolume: (volume: number) => void;\n\n  // Reset all settings\n  resetAll: () => void;\n}\n\n// Default state to use when resetting\nconst defaultState = {\n  isOpen: false,\n  contrast: \"default\" as FeatureIntensity,\n  highlightLinks: \"default\" as FeatureIntensity,\n  textSize: \"default\" as FeatureIntensity,\n  textSpacing: \"default\" as FeatureIntensity,\n  hideImages: false,\n  dyslexiaFriendly: false,\n  lineHeight: \"default\" as FeatureIntensity,\n  saturation: \"default\" as FeatureIntensity,\n  screenReader: {\n    enabled: false,\n    speed: \"normal\" as \"normal\" | \"slow\",\n    volume: 0.8,\n  },\n};\n\nexport const useAccessibilityStore = create<AccessibilityState>()(\n  persist(\n    (set) => ({\n      ...defaultState,\n\n      toggleOpen: () =>\n        set((state) => ({\n          isOpen: !state.isOpen,\n        })),\n\n      // Feature setters with intensity levels\n      setContrast: (level) =>\n        set(() => ({\n          contrast: level,\n        })),\n\n      setHighlightLinks: (level) =>\n        set(() => ({\n          highlightLinks: level,\n        })),\n\n      setTextSize: (level) =>\n        set(() => ({\n          textSize: level,\n        })),\n\n      setTextSpacing: (level) =>\n        set(() => ({\n          textSpacing: level,\n        })),\n\n      toggleHideImages: () =>\n        set((state) => ({\n          hideImages: !state.hideImages,\n        })),\n\n      toggleDyslexiaFriendly: () =>\n        set((state) => ({\n          dyslexiaFriendly: !state.dyslexiaFriendly,\n        })),\n\n      setLineHeight: (level) =>\n        set(() => ({\n          lineHeight: level,\n        })),\n\n      setSaturation: (level) =>\n        set(() => ({\n          saturation: level,\n        })),\n\n      // Screen reader controls\n      toggleScreenReader: () =>\n        set((state) => {\n          // Create a clean toggle without side effects - the component will handle cleanup\n          return {\n            screenReader: {\n              ...state.screenReader,\n              enabled: !state.screenReader.enabled,\n            },\n          };\n        }),\n\n      setScreenReaderSpeed: (speed) =>\n        set((state) => ({\n          screenReader: {\n            ...state.screenReader,\n            speed,\n          },\n        })),\n\n      setScreenReaderVolume: (volume) =>\n        set((state) => ({\n          screenReader: {\n            ...state.screenReader,\n            volume,\n          },\n        })),\n\n      // Reset all settings to default\n      resetAll: () => set(defaultState),\n    }),\n    {\n      name: \"accessibility-storage\", // localStorage key\n    },\n  ),\n);\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "lib/screen-reader-service.ts",
      "content": "\"use client\";\n\nclass ScreenReaderService {\n  private speechSynthesis: SpeechSynthesis | null = null;\n  private utterance: SpeechSynthesisUtterance | null = null;\n  private isReading: boolean = false;\n  private isMounted: boolean = false;\n  private currentElement: HTMLElement | null = null;\n  private lastElementSelector: string = \"\";\n  private highlightClass = \"screen-reader-highlight\";\n\n  constructor() {\n    this.isMounted = typeof window !== \"undefined\";\n\n    // Only initialize these in the browser environment\n    if (this.isMounted) {\n      try {\n        this.speechSynthesis = window.speechSynthesis;\n        this.utterance = new SpeechSynthesisUtterance();\n\n        // Cancel any existing speech synthesis that might be running\n        if (this.speechSynthesis) {\n          this.speechSynthesis.cancel();\n        }\n      } catch (error) {\n        console.error(\"Error initializing speech synthesis:\", error);\n        this.isMounted = false;\n      }\n    }\n  }\n\n  // Implementation was moved to the updated initialize method above\n\n  public cleanup() {\n    if (!this.isMounted) return;\n\n    // Important: Use the same function reference for addEventListener and removeEventListener\n    // This ensures event listeners are properly removed\n    document.removeEventListener(\"mouseover\", this.handleHover);\n    document.removeEventListener(\"focusin\", this.handleFocus);\n    this.stop();\n  }\n\n  // Store bound methods to ensure same reference is used for add/remove event listener\n  private handleHover = this.handleHoverImpl.bind(this);\n  private handleFocus = this.handleFocusImpl.bind(this);\n\n  public initialize() {\n    if (!this.isMounted) return;\n\n    // Setup event listeners with the bound methods\n    document.addEventListener(\"mouseover\", this.handleHover);\n    document.addEventListener(\"focusin\", this.handleFocus);\n  }\n\n  public setSpeed(speed: \"normal\" | \"slow\") {\n    if (!this.utterance) return;\n\n    // Normal is around 1, slow is around 0.7\n    this.utterance.rate = speed === \"normal\" ? 1 : 0.7;\n  }\n\n  public setVolume(volume: number) {\n    if (!this.utterance) return;\n\n    // Volume between 0 and 1\n    this.utterance.volume = Math.max(0, Math.min(1, volume));\n  }\n\n  public async readElement(element: HTMLElement) {\n    if (!this.speechSynthesis || !this.utterance || !element) return;\n\n    // Stop any ongoing reading\n    this.stop();\n\n    // Get the text content of the element\n    const textToRead = this.getReadableText(element);\n    if (!textToRead) return;\n\n    // Highlight the element\n    this.highlightElement(element);\n\n    // Set the text to be read\n    this.utterance.text = textToRead;\n\n    // Start reading\n    this.isReading = true;\n    this.currentElement = element;\n    this.speechSynthesis.speak(this.utterance);\n\n    // Add event listener to remove highlight when done\n    this.utterance.onend = () => {\n      this.isReading = false;\n      this.removeHighlight();\n      this.currentElement = null;\n    };\n  }\n\n  public readPage() {\n    const mainContent = document.querySelector(\"main\") || document.body;\n    this.readElement(mainContent as HTMLElement);\n  }\n\n  public stop() {\n    if (!this.speechSynthesis) return;\n\n    this.speechSynthesis.cancel();\n    this.isReading = false;\n    this.removeHighlight();\n    this.currentElement = null;\n  }\n\n  public pause() {\n    if (!this.speechSynthesis || !this.isReading) return;\n\n    this.speechSynthesis.pause();\n  }\n\n  public resume() {\n    if (!this.speechSynthesis || !this.isReading) return;\n\n    this.speechSynthesis.resume();\n  }\n\n  private handleHoverImpl(event: MouseEvent) {\n    if (!this.isReading && event.target instanceof HTMLElement) {\n      // Don't read trivial elements like spans inside buttons, etc.\n      if (this.isSignificantElement(event.target)) {\n        this.lastElementSelector = this.getElementSelector(event.target);\n      }\n    }\n  }\n\n  private handleFocusImpl(event: FocusEvent) {\n    if (!this.isReading && event.target instanceof HTMLElement) {\n      this.readElement(event.target);\n    }\n  }\n\n  private highlightElement(element: HTMLElement) {\n    this.removeHighlight();\n    element.classList.add(this.highlightClass);\n  }\n\n  private removeHighlight() {\n    const highlighted = document.querySelectorAll(`.${this.highlightClass}`);\n    highlighted.forEach((el) => el.classList.remove(this.highlightClass));\n  }\n\n  private getReadableText(element: HTMLElement): string {\n    // Get text based on element type and role\n    if (element.tagName === \"IMG\") {\n      return element.alt || \"Image\";\n    }\n\n    if (element.tagName === \"A\") {\n      return `Link: ${element.textContent || \"\"}`;\n    }\n\n    if (element.tagName === \"BUTTON\") {\n      return `Button: ${element.textContent || \"\"}`;\n    }\n\n    if (element.tagName === \"INPUT\") {\n      const inputEl = element as HTMLInputElement;\n      return `${inputEl.placeholder || inputEl.name || \"Input field\"}`;\n    }\n\n    // Default to regular text content\n    return element.textContent || \"\";\n  }\n\n  private isSignificantElement(element: HTMLElement): boolean {\n    const significantTags = [\n      \"A\",\n      \"BUTTON\",\n      \"H1\",\n      \"H2\",\n      \"H3\",\n      \"H4\",\n      \"H5\",\n      \"H6\",\n      \"P\",\n      \"LI\",\n      \"IMG\",\n    ];\n    return (\n      significantTags.includes(element.tagName) ||\n      element.hasAttribute(\"role\") ||\n      element.hasAttribute(\"aria-label\")\n    );\n  }\n\n  private getElementSelector(element: HTMLElement): string {\n    // Create a simple selector path for the element\n    const id = element.id ? `#${element.id}` : \"\";\n    if (id) return id;\n\n    const classes = Array.from(element.classList)\n      .map((c) => `.${c}`)\n      .join(\"\");\n    return `${element.tagName.toLowerCase()}${classes}`;\n  }\n}\n\n// Singleton instance\nexport const screenReaderService = new ScreenReaderService();\n\nexport default screenReaderService;\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "accessibility-tool",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "zustand"
  ],
  "registryDependencies": [
    "dialog",
    "switch",
    "avatar"
  ],
  "files": [
    {
      "path": "ui/AccessibilityTool.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/registry/default/ui/dialog\";\nimport { useAccessibilityStore } from \"@/registry/default/lib/accessibility-store\";\nimport { Switch } from \"@/registry/default/ui/switch\";\nimport {\n  LucideContrast,\n  LucideEye,\n  LucideMaximize,\n  LucideText,\n  LucideImageOff,\n  LucideUnderline,\n  LucideType,\n} from \"lucide-react\";\n// Import any icons you like from lucide-react\n\nexport function AccessibilityTool() {\n  const {\n    isOpen,\n    toggleOpen,\n    highContrast,\n    toggleHighContrast,\n    highlightLinks,\n    toggleHighlightLinks,\n    biggerText,\n    toggleBiggerText,\n    textSpacing,\n    toggleTextSpacing,\n    hideImages,\n    toggleHideImages,\n    dyslexiaFriendly,\n    toggleDyslexiaFriendly,\n    lineHeight,\n    toggleLineHeight,\n    saturation,\n    toggleSaturation,\n  } = useAccessibilityStore();\n\n  return (\n    <Dialog open={isOpen} onOpenChange={toggleOpen}>\n      <DialogContent className=\" h-[70vh] w-80 overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Accessibility Tools</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <LucideContrast className=\"w-5 h-5\" />\n              <span>High Contrast</span>\n            </div>\n            <Switch\n              checked={highContrast}\n              onCheckedChange={toggleHighContrast}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <LucideUnderline className=\"w-5 h-5\" />\n              <span>Highlight Links</span>\n            </div>\n            <Switch\n              checked={highlightLinks}\n              onCheckedChange={toggleHighlightLinks}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <LucideMaximize className=\"w-5 h-5\" />\n              <span>Bigger Text</span>\n            </div>\n            <Switch checked={biggerText} onCheckedChange={toggleBiggerText} />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <LucideText className=\"w-5 h-5\" />\n              <span>Text Spacing</span>\n            </div>\n            <Switch checked={textSpacing} onCheckedChange={toggleTextSpacing} />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <LucideImageOff className=\"w-5 h-5\" />\n              <span>Hide Images</span>\n            </div>\n            <Switch checked={hideImages} onCheckedChange={toggleHideImages} />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <LucideType className=\"w-5 h-5\" />\n              <span>Dyslexia Friendly</span>\n            </div>\n            <Switch\n              checked={dyslexiaFriendly}\n              onCheckedChange={toggleDyslexiaFriendly}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <LucideType className=\"w-5 h-5\" />\n              <span>Line Height</span>\n            </div>\n            <Switch checked={lineHeight} onCheckedChange={toggleLineHeight} />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <LucideEye className=\"w-5 h-5\" />\n              <span>Low Saturation</span>\n            </div>\n            <Switch checked={saturation} onCheckedChange={toggleSaturation} />\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/AccessibilityProvider.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport { useAccessibilityStore } from \"@/registry/default/lib/accessibility-store\";\n\nexport function AccessibilityProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const {\n    isOpen,\n    toggleOpen,\n    highContrast,\n    highlightLinks,\n    biggerText,\n    textSpacing,\n    hideImages,\n    dyslexiaFriendly,\n    lineHeight,\n    saturation,\n  } = useAccessibilityStore();\n\n  // Listen for Ctrl + U to open or close the accessibility menu\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Check if ctrlKey (or metaKey for Mac) + key \"u\"\n      if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === \"u\") {\n        event.preventDefault();\n        toggleOpen();\n      }\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleOpen]);\n\n  // We can dynamically add classes to the <html> or <body> based on toggles:\n  useEffect(() => {\n    const html = document.documentElement;\n\n    // High Contrast\n    if (highContrast) {\n      html.classList.add(\"high-contrast\");\n    } else {\n      html.classList.remove(\"high-contrast\");\n    }\n\n    // Highlight Links\n    if (highlightLinks) {\n      html.classList.add(\"highlight-links\");\n    } else {\n      html.classList.remove(\"highlight-links\");\n    }\n\n    // Bigger Text\n    if (biggerText) {\n      html.classList.add(\"text-xl\");\n    } else {\n      html.classList.remove(\"text-xl\");\n    }\n\n    // Text Spacing\n    if (textSpacing) {\n      html.classList.add(\"text-spacing\");\n    } else {\n      html.classList.remove(\"text-spacing\");\n    }\n\n    // Hide Images\n    if (hideImages) {\n      html.classList.add(\"hide-images\");\n    } else {\n      html.classList.remove(\"hide-images\");\n    }\n\n    // Dyslexia Friendly\n    if (dyslexiaFriendly) {\n      html.classList.add(\"dyslexia-friendly\");\n    } else {\n      html.classList.remove(\"dyslexia-friendly\");\n    }\n\n    // Increased Line Height\n    if (lineHeight) {\n      html.classList.add(\"increased-line-height\");\n    } else {\n      html.classList.remove(\"increased-line-height\");\n    }\n\n    // Reduced/Grayscale Saturation\n    if (saturation) {\n      html.classList.add(\"low-saturation\");\n    } else {\n      html.classList.remove(\"low-saturation\");\n    }\n  }, [\n    highContrast,\n    highlightLinks,\n    biggerText,\n    textSpacing,\n    hideImages,\n    dyslexiaFriendly,\n    lineHeight,\n    saturation,\n  ]);\n\n  return <>{children}</>;\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/AccessibilityTriggerAvatar.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { useAccessibilityStore } from \"@/registry/default/lib/accessibility-store\";\nimport {\n  Avatar,\n  AvatarImage,\n  AvatarFallback,\n} from \"@/registry/default/ui/avatar\";\nimport { PersonStanding } from \"lucide-react\";\n\nexport function AccessibilityTriggerAvatar() {\n  const { toggleOpen } = useAccessibilityStore();\n\n  return (\n    <div\n      className=\"fixed bottom-4 right-4 z-50 cursor-pointer\"\n      onClick={toggleOpen}\n      title=\"Open Accessibility Menu\"\n    >\n      <Avatar className=\"w-12 h-12\">\n        <AvatarImage src=\"/some-avatar.png\" alt=\"@accessibility\" />\n        <AvatarFallback>\n          <PersonStanding />\n        </AvatarFallback>\n      </Avatar>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib/accessibility-store.ts",
      "content": "\"use client\";\n\nimport { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\n// Define types for feature intensity levels\nexport type FeatureIntensity = \"default\" | \"medium\" | \"high\";\n\ninterface AccessibilityState {\n  isOpen: boolean;\n  toggleOpen: () => void;\n\n  // Accessibility features with intensity levels\n  contrast: FeatureIntensity;\n  setContrast: (level: FeatureIntensity) => void;\n\n  highlightLinks: FeatureIntensity;\n  setHighlightLinks: (level: FeatureIntensity) => void;\n\n  textSize: FeatureIntensity;\n  setTextSize: (level: FeatureIntensity) => void;\n\n  textSpacing: FeatureIntensity;\n  setTextSpacing: (level: FeatureIntensity) => void;\n\n  hideImages: boolean;\n  toggleHideImages: () => void;\n\n  dyslexiaFriendly: boolean;\n  toggleDyslexiaFriendly: () => void;\n\n  lineHeight: FeatureIntensity;\n  setLineHeight: (level: FeatureIntensity) => void;\n\n  saturation: FeatureIntensity;\n  setSaturation: (level: FeatureIntensity) => void;\n\n  // Screen reader\n  screenReader: {\n    enabled: boolean;\n    speed: \"normal\" | \"slow\";\n    volume: number; // 0 to 1\n  };\n  toggleScreenReader: () => void;\n  setScreenReaderSpeed: (speed: \"normal\" | \"slow\") => void;\n  setScreenReaderVolume: (volume: number) => void;\n\n  // Reset all settings\n  resetAll: () => void;\n}\n\n// Default state to use when resetting\nconst defaultState = {\n  isOpen: false,\n  contrast: \"default\" as FeatureIntensity,\n  highlightLinks: \"default\" as FeatureIntensity,\n  textSize: \"default\" as FeatureIntensity,\n  textSpacing: \"default\" as FeatureIntensity,\n  hideImages: false,\n  dyslexiaFriendly: false,\n  lineHeight: \"default\" as FeatureIntensity,\n  saturation: \"default\" as FeatureIntensity,\n  screenReader: {\n    enabled: false,\n    speed: \"normal\" as \"normal\" | \"slow\",\n    volume: 0.8,\n  },\n};\n\nexport const useAccessibilityStore = create<AccessibilityState>()(\n  persist(\n    (set) => ({\n      ...defaultState,\n\n      toggleOpen: () =>\n        set((state) => ({\n          isOpen: !state.isOpen,\n        })),\n\n      // Feature setters with intensity levels\n      setContrast: (level) =>\n        set(() => ({\n          contrast: level,\n        })),\n\n      setHighlightLinks: (level) =>\n        set(() => ({\n          highlightLinks: level,\n        })),\n\n      setTextSize: (level) =>\n        set(() => ({\n          textSize: level,\n        })),\n\n      setTextSpacing: (level) =>\n        set(() => ({\n          textSpacing: level,\n        })),\n\n      toggleHideImages: () =>\n        set((state) => ({\n          hideImages: !state.hideImages,\n        })),\n\n      toggleDyslexiaFriendly: () =>\n        set((state) => ({\n          dyslexiaFriendly: !state.dyslexiaFriendly,\n        })),\n\n      setLineHeight: (level) =>\n        set(() => ({\n          lineHeight: level,\n        })),\n\n      setSaturation: (level) =>\n        set(() => ({\n          saturation: level,\n        })),\n\n      // Screen reader controls\n      toggleScreenReader: () =>\n        set((state) => {\n          // Create a clean toggle without side effects - the component will handle cleanup\n          return {\n            screenReader: {\n              ...state.screenReader,\n              enabled: !state.screenReader.enabled,\n            },\n          };\n        }),\n\n      setScreenReaderSpeed: (speed) =>\n        set((state) => ({\n          screenReader: {\n            ...state.screenReader,\n            speed,\n          },\n        })),\n\n      setScreenReaderVolume: (volume) =>\n        set((state) => ({\n          screenReader: {\n            ...state.screenReader,\n            volume,\n          },\n        })),\n\n      // Reset all settings to default\n      resetAll: () => set(defaultState),\n    }),\n    {\n      name: \"accessibility-storage\", // localStorage key\n    },\n  ),\n);\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
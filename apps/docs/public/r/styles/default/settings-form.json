{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "settings-form",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Form for updating user settings.",
  "registryDependencies": [
    "avatar",
    "switch"
  ],
  "files": [
    {
      "path": "auth/components/settings-form.tsx",
      "content": "\"use client\";\r\nimport { useEffect, useTransition, useRef, useState } from \"react\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as z from \"zod\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { SettingsSchema } from \"@/registry/default/auth/schemas\";\r\nimport {\r\n  settings,\r\n  updateUserImage,\r\n} from \"@/registry/default/auth/actions/auth-actions\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormControl,\r\n  FormItem,\r\n  FormLabel,\r\n  FormDescription,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\";\r\nimport { FormSuccess } from \"@/registry/default/auth/components/form-success\";\r\nimport { FormError } from \"@/registry/default/auth/components/form-error\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Switch } from \"@/registry/default/ui/switch\";\r\nimport {\r\n  Avatar,\r\n  AvatarFallback,\r\n  AvatarImage,\r\n} from \"@/registry/default/ui/avatar\";\r\nimport { User } from \"lucide-react\";\r\n\r\nexport const SettingsForm = () => {\r\n  const user = useSession().data?.user;\r\n\r\n  const [error, setError] = useState<string | undefined>();\r\n  const [success, setSuccess] = useState<string | undefined>();\r\n  const { update } = useSession();\r\n  const [isPending, startTransition] = useTransition();\r\n  const [isImageUploading, setIsImageUploading] = useState(false);\r\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const form = useForm<z.infer<typeof SettingsSchema>>({\r\n    resolver: zodResolver(SettingsSchema),\r\n    defaultValues: {\r\n      name: user?.name || \"\",\r\n      email: user?.email || \"\",\r\n      isTwoFactorEnabled: user?.isTwoFactorEnabled || undefined,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      form.reset({\r\n        name: user?.name || \"\",\r\n        email: user?.email || \"\",\r\n        isTwoFactorEnabled: user?.isTwoFactorEnabled || undefined,\r\n      });\r\n      // Set the initial image preview if user has an image\r\n      setPreviewUrl(user.image || null);\r\n    }\r\n  }, [user, form]);\r\n\r\n  const onSubmit = (values: z.infer<typeof SettingsSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    const userId = user?.id;\r\n\r\n    if (!userId) {\r\n      setError(\"User ID is required!\");\r\n      return;\r\n    }\r\n\r\n    startTransition(() => {\r\n      settings(userId, values)\r\n        .then((data) => {\r\n          setError(data?.error);\r\n          setSuccess(data?.success);\r\n          if (data?.success) {\r\n            // Update the session to reflect changes\r\n            update();\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Settings update error:\", error);\r\n          setError(\"Something went wrong!\");\r\n        });\r\n    });\r\n  };\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFile = e.target.files?.[0];\r\n\r\n    if (!selectedFile) {\r\n      return;\r\n    }\r\n\r\n    if (!selectedFile.type.startsWith(\"image/\")) {\r\n      setError(\"Please select an image file\");\r\n      return;\r\n    }\r\n\r\n    if (selectedFile.size > 5 * 1024 * 1024) {\r\n      // 5MB limit\r\n      setError(\"Image must be less than 5MB\");\r\n      return;\r\n    }\r\n\r\n    setError(undefined);\r\n\r\n    // Create a preview\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      setPreviewUrl(reader.result as string);\r\n    };\r\n    reader.readAsDataURL(selectedFile);\r\n  };\r\n\r\n  const handleImageUpload = async () => {\r\n    if (!previewUrl || !user?.id) {\r\n      setError(\"Please select an image file\");\r\n      return;\r\n    }\r\n\r\n    setIsImageUploading(true);\r\n    setError(undefined);\r\n    setSuccess(undefined);\r\n\r\n    try {\r\n      // Send the base64 string directly to our server action\r\n      const response = await updateUserImage(user.id, previewUrl);\r\n\r\n      if (response.error) {\r\n        setError(response.error);\r\n      } else if (response.success) {\r\n        setSuccess(response.success);\r\n        // Update the session to reflect changes\r\n        update();\r\n        // Clear the file input\r\n        if (fileInputRef.current) {\r\n          fileInputRef.current.value = \"\";\r\n        }\r\n      }\r\n    } catch (err) {\r\n      setError(\"An error occurred while uploading the image\");\r\n      console.error(err);\r\n    } finally {\r\n      setIsImageUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form className=\"space-y-6\" onSubmit={form.handleSubmit(onSubmit)}>\r\n        <div className=\"space-y-4\">\r\n          {/* Profile Image */}\r\n          <div className=\"space-y-4\">\r\n            <FormLabel>Profile Picture</FormLabel>\r\n            <div className=\"flex flex-col items-center space-y-4\">\r\n              {previewUrl && (\r\n                <Avatar>\r\n                  <AvatarImage src={user?.image || \"\"} />\r\n                  <AvatarFallback className=\"bg-sky-500\">\r\n                    <User className=\"text-white\" />\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n              )}\r\n\r\n              <div className=\"flex flex-col w-full space-y-2\">\r\n                <Input\r\n                  ref={fileInputRef}\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  onChange={handleFileChange}\r\n                  disabled={isImageUploading}\r\n                  className=\"w-full\"\r\n                />\r\n\r\n                <Button\r\n                  type=\"button\"\r\n                  onClick={handleImageUpload}\r\n                  disabled={!previewUrl || isImageUploading}\r\n                  variant=\"outline\"\r\n                  className=\"w-full\"\r\n                >\r\n                  {isImageUploading ? \"Uploading...\" : \"Upload Image\"}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Name Field */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"name\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Name</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    {...field}\r\n                    placeholder=\"John Doe\"\r\n                    disabled={isPending}\r\n                    type=\"text\"\r\n                    className=\"w-full\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Email Field (Only for non-OAuth users) */}\r\n          {!user?.isOAuth && (\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      placeholder=\"john.doe@mail.com\"\r\n                      disabled={isPending}\r\n                      type=\"email\"\r\n                      className=\"w-full\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          )}\r\n\r\n          {/* Two-Factor Authentication (Only for non-OAuth users) */}\r\n          {!user?.isOAuth && (\r\n            <FormField\r\n              control={form.control}\r\n              name=\"isTwoFactorEnabled\"\r\n              render={({ field }) => (\r\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4 shadow-sm\">\r\n                  <div className=\"space-y-0.5\">\r\n                    <FormLabel>Two-Factor Authentication</FormLabel>\r\n                    <FormDescription>\r\n                      Enable two-factor authentication for your account.\r\n                    </FormDescription>\r\n                  </div>\r\n                  <FormControl>\r\n                    <Switch\r\n                      disabled={isPending}\r\n                      checked={field.value}\r\n                      onCheckedChange={field.onChange}\r\n                    />\r\n                  </FormControl>\r\n                </FormItem>\r\n              )}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {/* Error and Success Messages */}\r\n        {error && <FormError message={error} />}\r\n        {success && <FormSuccess message={success} />}\r\n\r\n        {/* Save Button */}\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={isPending}\r\n          className=\"w-full bg-primary hover:bg-primary-dark\"\r\n        >\r\n          {isPending ? \"Saving...\" : \"Save Changes\"}\r\n        </Button>\r\n      </form>\r\n    </Form>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    }
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "alert",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "ui/alert.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst alertVariants = cva(\r\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-background text-foreground\",\r\n        destructive:\r\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\ninterface AlertProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof alertVariants> {}\r\n\r\n/**\r\n * Alert\r\n *\r\n * By default:\r\n * - Uses `role=\"status\"` and `aria-live=\"polite\"` for non-destructive alerts.\r\n * - Uses `role=\"alert\"` and `aria-live=\"assertive\"` for destructive alerts.\r\n * - Has `aria-atomic=\"true\"` so that screen readers read the entire alert at once.\r\n *\r\n * If you need different or more advanced ARIA settings, simply override them in props:\r\n *\r\n *   <Alert role=\"alert\" aria-live=\"assertive\" variant=\"default\" />\r\n */\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(\r\n  ({ className, variant, role, ...props }, ref) => {\r\n    const isDestructive = variant === \"destructive\";\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        // Default to alert if destructive, otherwise status\r\n        role={role ?? (isDestructive ? \"alert\" : \"status\")}\r\n        // Default live region behavior (assertive for destructive, polite for default)\r\n        aria-live={\r\n          props[\"aria-live\"] ?? (isDestructive ? \"assertive\" : \"polite\")\r\n        }\r\n        // Ensure the entire alert message is announced as one unit\r\n        aria-atomic=\"true\"\r\n        className={cn(alertVariants({ variant }), className)}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nAlert.displayName = \"Alert\";\r\n\r\ninterface AlertTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}\r\n\r\nconst AlertTitle = React.forwardRef<HTMLHeadingElement, AlertTitleProps>(\r\n  ({ className, ...props }, ref) => (\r\n    <h5\r\n      ref={ref}\r\n      className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nAlertTitle.displayName = \"AlertTitle\";\r\n\r\ninterface AlertDescriptionProps\r\n  extends React.HTMLAttributes<HTMLParagraphElement> {}\r\n\r\nconst AlertDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  AlertDescriptionProps\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\r\n    {...props}\r\n  />\r\n));\r\nAlertDescription.displayName = \"AlertDescription\";\r\n\r\nexport { Alert, AlertTitle, AlertDescription };\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "alert",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "ui/alert.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\ninterface AlertProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof alertVariants> {}\n\n/**\n * Alert\n *\n * By default:\n * - Uses `role=\"status\"` and `aria-live=\"polite\"` for non-destructive alerts.\n * - Uses `role=\"alert\"` and `aria-live=\"assertive\"` for destructive alerts.\n * - Has `aria-atomic=\"true\"` so that screen readers read the entire alert at once.\n *\n * If you need different or more advanced ARIA settings, simply override them in props:\n *\n *   <Alert role=\"alert\" aria-live=\"assertive\" variant=\"default\" />\n */\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(\n  ({ className, variant, role, ...props }, ref) => {\n    const isDestructive = variant === \"destructive\";\n\n    return (\n      <div\n        ref={ref}\n        // Default to alert if destructive, otherwise status\n        role={role ?? (isDestructive ? \"alert\" : \"status\")}\n        // Default live region behavior (assertive for destructive, polite for default)\n        aria-live={\n          props[\"aria-live\"] ?? (isDestructive ? \"assertive\" : \"polite\")\n        }\n        // Ensure the entire alert message is announced as one unit\n        aria-atomic=\"true\"\n        className={cn(alertVariants({ variant }), className)}\n        {...props}\n      />\n    );\n  },\n);\nAlert.displayName = \"Alert\";\n\ninterface AlertTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}\n\nconst AlertTitle = React.forwardRef<HTMLHeadingElement, AlertTitleProps>(\n  ({ className, ...props }, ref) => (\n    <h5\n      ref={ref}\n      className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n      {...props}\n    />\n  ),\n);\nAlertTitle.displayName = \"AlertTitle\";\n\ninterface AlertDescriptionProps\n  extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  AlertDescriptionProps\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertTitle, AlertDescription };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
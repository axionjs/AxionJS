{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "subscribe-newsletter",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A newsletter subscription form with email functionality.",
  "dependencies": [
    "nodemailer",
    "zod",
    "crypto",
    "prisma",
    "@prisma/client",
    "date-fns"
  ],
  "registryDependencies": [
    "button",
    "textarea",
    "input",
    "label",
    "alert",
    "card",
    "use-toast",
    "toaster",
    "table",
    "badge",
    "dropdown-menu",
    "tabs",
    "skeleton"
  ],
  "files": [
    {
      "path": "dynamic-components/subscribe-newsletter/actions/subscribe-newsletter-actions.ts",
      "content": "\"use server\";\n\nimport { z } from \"zod\";\nimport nodemailer from \"nodemailer\";\nimport { revalidatePath } from \"next/cache\";\nimport { db } from \"@/registry/default/lib/db\";\nimport { randomBytes } from \"crypto\";\n\n// Form validation schema\nconst subscribeFormSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email address.\" }),\n  name: z.string().optional(),\n});\n\nexport type SubscribeFormState = {\n  success?: boolean;\n  message?: string;\n  errors?: {\n    email?: string[];\n    name?: string[];\n  };\n};\n\n// Generate a secure random token\nfunction generateSecureToken(): string {\n  return randomBytes(32).toString(\"hex\");\n}\n\n// Get all subscribers\nexport async function getAllSubscribers() {\n  try {\n    const subscribers = await db.newsletterSubscriber.findMany({\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n    return subscribers;\n  } catch (error) {\n    console.error(\"Error fetching subscribers:\", error);\n    return [];\n  }\n}\n\nexport async function subscribeToNewsletter(\n  prevState: SubscribeFormState,\n  formData: FormData,\n): Promise<SubscribeFormState> {\n  // Validate form data\n  const validatedFields = subscribeFormSchema.safeParse({\n    email: formData.get(\"email\"),\n    name: formData.get(\"name\") || \"\",\n  });\n\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: \"Please check the form for errors.\",\n    };\n  }\n\n  const { email, name } = validatedFields.data;\n\n  try {\n    // Check if subscriber already exists\n    const existingSubscriber = await db.newsletterSubscriber.findUnique({\n      where: { email },\n    });\n\n    const token = generateSecureToken();\n\n    if (existingSubscriber) {\n      if (existingSubscriber.status === \"ACTIVE\") {\n        return {\n          success: false,\n          message: \"This email is already subscribed to our newsletter.\",\n        };\n      } else {\n        // Reactivate the subscriber and update their token\n        await db.newsletterSubscriber.update({\n          where: { email },\n          data: {\n            status: \"ACTIVE\",\n            token: token,\n            tokenCreatedAt: new Date(),\n          },\n        });\n\n        await sendConfirmationEmail(email, name || \"\", token);\n\n        return {\n          success: true,\n          message: \"Welcome back! Your subscription has been reactivated.\",\n        };\n      }\n    }\n\n    await db.newsletterSubscriber.create({\n      data: {\n        email,\n        name: name || null,\n        status: \"ACTIVE\",\n        token: token,\n        tokenCreatedAt: new Date(),\n      },\n    });\n\n    // Send confirmation email\n    await sendConfirmationEmail(email, name || \"\", token);\n\n    revalidatePath(\"/admin/newsletter\");\n\n    return {\n      success: true,\n      message: \"Thank you for subscribing to our newsletter!\",\n    };\n  } catch (error) {\n    console.error(\"Error subscribing to newsletter:\", error);\n    return {\n      success: false,\n      message: \"Failed to subscribe. Please try again later.\",\n    };\n  }\n}\n\nasync function sendConfirmationEmail(\n  email: string,\n  name: string,\n  token: string,\n) {\n  const transporter = nodemailer.createTransport({\n    host: process.env.EMAIL_SERVER_HOST,\n    port: Number(process.env.EMAIL_SERVER_PORT),\n    auth: {\n      user: process.env.EMAIL_SERVER_USER,\n      pass: process.env.EMAIL_SERVER_PASSWORD,\n    },\n  });\n\n  const siteName = process.env.SITE_NAME;\n  const unsubscribeUrl = `${process.env.NEXT_PUBLIC_APP_URL}/unsubscribe?token=${token}`;\n\n  await transporter.sendMail({\n    from: process.env.EMAIL_FROM,\n    to: email,\n    subject: `Welcome to ${siteName}'s Newsletter`,\n    text: `\n      Hello ${name || \"there\"},\n      \n      Thank you for subscribing to our newsletter! You'll now receive updates on our latest news, products, and offers.\n      \n      If you didn't subscribe to this newsletter, please ignore this email.\n      \n      To unsubscribe at any time, click here: ${unsubscribeUrl}\n      \n      Best regards,\n      The ${siteName} Team\n    `,\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2>Welcome to Our Newsletter!</h2>\n        <p>Hello ${name || \"there\"},</p>\n        <p>Thank you for subscribing to our newsletter! You'll now receive updates on our latest news, products, and offers.</p>\n        <p>If you didn't subscribe to this newsletter, please ignore this email.</p>\n        <p>Best regards,<br>The ${siteName} Team</p>\n        <hr style=\"margin: 20px 0; border: none; border-top: 1px solid #eaeaea;\" />\n        <p style=\"font-size: 12px; color: #666;\">\n          To unsubscribe from our newsletter, <a href=\"${unsubscribeUrl}\">click here</a>.\n        </p>\n      </div>\n    `,\n  });\n}\n\n// Campaign form validation schema\nconst campaignFormSchema = z.object({\n  subject: z.string().min(1, { message: \"Subject is required\" }),\n  content: z\n    .string()\n    .min(10, { message: \"Content must be at least 10 characters\" }),\n});\n\nexport type CampaignFormState = {\n  success?: boolean;\n  message?: string;\n  errors?: {\n    subject?: string[];\n    content?: string[];\n  };\n};\n\n// Get all campaigns\nexport async function getAllCampaigns() {\n  try {\n    const campaigns = await db.newsletterCampaign.findMany({\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      take: 5,\n      include: {\n        _count: {\n          select: {\n            recipients: true,\n          },\n        },\n      },\n    });\n    return campaigns;\n  } catch (error) {\n    console.error(\"Error fetching campaigns:\", error);\n    throw new Error(\"Failed to fetch campaigns\");\n  }\n}\n\nexport async function createAndSendCampaign(\n  prevState: CampaignFormState,\n  formData: FormData,\n): Promise<CampaignFormState> {\n  // Validate form data\n  const validatedFields = campaignFormSchema.safeParse({\n    subject: formData.get(\"subject\"),\n    content: formData.get(\"content\"),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      errors: validatedFields.error.flatten().fieldErrors,\n      message: \"Please check the form for errors.\",\n    };\n  }\n\n  const { subject, content } = validatedFields.data;\n\n  try {\n    // Create campaign\n    const campaign = await db.newsletterCampaign.create({\n      data: {\n        subject,\n        content,\n        sentAt: new Date(),\n      },\n    });\n\n    // Get all active subscribers\n    const subscribers = await db.newsletterSubscriber.findMany({\n      where: { status: \"ACTIVE\" },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        token: true,\n      },\n    });\n\n    if (subscribers.length === 0) {\n      return {\n        success: false,\n        message: \"No active subscribers found to send the newsletter to.\",\n      };\n    }\n\n    // Create campaign recipients\n    await db.newsletterCampaignRecipient.createMany({\n      data: subscribers.map((subscriber) => ({\n        campaignId: campaign.id,\n        subscriberId: subscriber.id,\n        status: \"PENDING\",\n      })),\n    });\n\n    // Send emails to all subscribers\n    const transporter = nodemailer.createTransport({\n      host: process.env.EMAIL_SERVER_HOST,\n      port: Number(process.env.EMAIL_SERVER_PORT),\n      auth: {\n        user: process.env.EMAIL_SERVER_USER,\n        pass: process.env.EMAIL_SERVER_PASSWORD,\n      },\n    });\n\n    const siteName = process.env.SITE_NAME || \"Our Website\";\n    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || \"http://localhost:3000\";\n\n    // Send emails in batches to avoid overloading the email server\n    const batchSize = 50;\n    for (let i = 0; i < subscribers.length; i += batchSize) {\n      const batch = subscribers.slice(i, i + batchSize);\n\n      await Promise.all(\n        batch.map(async (subscriber) => {\n          const unsubscribeUrl = `${baseUrl}/unsubscribe?token=${subscriber.token}`;\n\n          await transporter.sendMail({\n            from: process.env.EMAIL_FROM,\n            to: subscriber.email,\n            subject,\n            text: `${content}\\n\\nTo unsubscribe from our newsletter, visit: ${unsubscribeUrl}`,\n            html: `\n              <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                ${content}\n                <hr style=\"margin: 20px 0; border: none; border-top: 1px solid #eaeaea;\" />\n                <p style=\"font-size: 12px; color: #666;\">\n                  You're receiving this email because you subscribed to the ${siteName} newsletter.\n                  <br>\n                  To unsubscribe, <a href=\"${unsubscribeUrl}\">click here</a>.\n                </p>\n              </div>\n            `,\n          });\n\n          // Update recipient status\n          await db.newsletterCampaignRecipient.updateMany({\n            where: {\n              campaignId: campaign.id,\n              subscriberId: subscriber.id,\n            },\n            data: {\n              status: \"SENT\",\n              sentAt: new Date(),\n            },\n          });\n        }),\n      );\n    }\n\n    revalidatePath(\"/admin/newsletter\");\n\n    return {\n      success: true,\n      message: `Newsletter sent successfully to ${subscribers.length} subscribers.`,\n    };\n  } catch (error) {\n    console.error(\"Error sending newsletter:\", error);\n    return {\n      success: false,\n      message: \"Failed to send newsletter. Please try again later.\",\n    };\n  }\n}\n\nexport async function unsubscribeSubscriber(id: string) {\n  try {\n    await db.newsletterSubscriber.update({\n      where: { id },\n      data: { status: \"UNSUBSCRIBED\" },\n    });\n\n    revalidatePath(\"/admin/newsletter\");\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error unsubscribing:\", error);\n    return { success: false, error: \"Failed to unsubscribe.\" };\n  }\n}\n\nexport async function deleteSubscriber(id: string) {\n  try {\n    await db.newsletterSubscriber.delete({\n      where: { id },\n    });\n\n    revalidatePath(\"/admin/newsletter\");\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error deleting subscriber:\", error);\n    return { success: false, error: \"Failed to delete subscriber.\" };\n  }\n}\n\nexport async function verifyUnsubscribeToken(\n  token: string,\n): Promise<string | null> {\n  try {\n    const subscriber = await db.newsletterSubscriber.findUnique({\n      where: { token },\n      select: { email: true, status: true, tokenCreatedAt: true },\n    });\n\n    // Check if subscriber exists and is active\n    if (!subscriber || subscriber.status !== \"ACTIVE\") {\n      return null;\n    }\n\n    // Optional: Check token expiration (e.g., tokens valid for xyz time)\n\n    return subscriber.email;\n  } catch (error) {\n    console.error(\"Error verifying token:\", error);\n    return null;\n  }\n}\n\nexport async function unsubscribeByToken(token: string) {\n  try {\n    const subscriber = await db.newsletterSubscriber.findUnique({\n      where: { token },\n    });\n\n    if (!subscriber || subscriber.status !== \"ACTIVE\") {\n      return {\n        success: false,\n        message: \"Invalid or expired unsubscribe link.\",\n      };\n    }\n\n    // Update subscriber status\n    await db.newsletterSubscriber.update({\n      where: { token },\n      data: { status: \"UNSUBSCRIBED\" },\n    });\n\n    revalidatePath(\"/admin/newsletter\");\n\n    return {\n      success: true,\n      message: \"You have been successfully unsubscribed from our newsletter.\",\n    };\n  } catch (error) {\n    console.error(\"Error unsubscribing:\", error);\n    return {\n      success: false,\n      message: \"Failed to unsubscribe. Please try again later.\",\n    };\n  }\n}\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/subscribe-newsletter/hooks/use-unsubscribe-form.ts",
      "content": "import { unsubscribeByToken } from \"@/registry/default/dynamic-components/subscribe-newsletter/actions/subscribe-newsletter-actions\";\nimport { useState } from \"react\";\n\nexport function useUnsubscribeForm(token: string) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isUnsubscribed, setIsUnsubscribed] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const handleUnsubscribe = async () => {\n    setIsLoading(true);\n    try {\n      const result = await unsubscribeByToken(token);\n      setIsUnsubscribed(result.success);\n      setMessage(result.message);\n\n      if (result.success) {\n        window.location.href = \"/newsletter\";\n      }\n    } catch (error) {\n      setIsUnsubscribed(false);\n      setMessage(\n        \"An error occurred while processing your request. Please try again later.\",\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    isLoading,\n    isUnsubscribed,\n    message,\n    handleUnsubscribe,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "dynamic-components/subscribe-newsletter/components/newsletter-campaign-form.tsx",
      "content": "\"use client\";\n\nimport { useActionState } from \"react\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { Textarea } from \"@/registry/default/ui/textarea\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle,\n} from \"@/registry/default/ui/alert\";\nimport {\n  createAndSendCampaign,\n  type CampaignFormState,\n} from \"@/registry/default/dynamic-components/subscribe-newsletter/actions/subscribe-newsletter-actions\";\nimport { Loader2, CheckCircle, Send } from \"lucide-react\";\n\nconst initialState: CampaignFormState = {};\n\nexport function NewsletterCampaignForm() {\n  const [state, formAction, isPending] = useActionState(\n    createAndSendCampaign,\n    initialState,\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {state.success ? (\n        <Alert className=\"bg-primary/10 border-primary/20\">\n          <CheckCircle className=\"h-4 w-4 text-primary\" />\n          <AlertTitle>Success!</AlertTitle>\n          <AlertDescription>{state.message}</AlertDescription>\n          <Button\n            className=\"mt-4\"\n            variant=\"outline\"\n            onClick={() => window.location.reload()}\n          >\n            Send Another Newsletter\n          </Button>\n        </Alert>\n      ) : (\n        <form action={formAction} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"subject\" className=\"text-base\">\n              Subject Line\n            </Label>\n            <Input\n              id=\"subject\"\n              name=\"subject\"\n              placeholder=\"Enter newsletter subject\"\n              className=\"h-12\"\n              required\n            />\n            {state.errors?.subject && (\n              <p className=\"text-sm text-destructive\">\n                {state.errors.subject[0]}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\" className=\"text-base\">\n              Newsletter Content\n            </Label>\n            <Textarea\n              id=\"content\"\n              name=\"content\"\n              placeholder=\"Enter your newsletter content here. HTML is supported.\"\n              className=\"min-h-[300px] resize-none\"\n              required\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              You can use HTML tags for formatting. For example: &lt;h1&gt;,\n              &lt;p&gt;, &lt;a href=\"...\"&gt;, etc.\n            </p>\n            {state.errors?.content && (\n              <p className=\"text-sm text-destructive\">\n                {state.errors.content[0]}\n              </p>\n            )}\n          </div>\n\n          {state.message && !state.success && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{state.message}</AlertDescription>\n            </Alert>\n          )}\n\n          <Button\n            type=\"submit\"\n            className=\"h-12 px-8 text-base transition-all duration-200 group\"\n            disabled={isPending}\n          >\n            {isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Sending Newsletter...\n              </>\n            ) : (\n              <>\n                <Send className=\"mr-2 h-4 w-4\" />\n                Send Newsletter\n              </>\n            )}\n          </Button>\n        </form>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/subscribe-newsletter/components/newsletter-subscription.tsx",
      "content": "\"use client\";\n\nimport { useActionState } from \"react\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport {\n  subscribeToNewsletter,\n  type SubscribeFormState,\n} from \"@/registry/default/dynamic-components/subscribe-newsletter/actions/subscribe-newsletter-actions\";\nimport { Loader2, CheckCircle, Mail } from \"lucide-react\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle,\n} from \"@/registry/default/ui/alert\";\n\nconst initialState: SubscribeFormState = {};\n\nexport default function NewsletterSubscription() {\n  const [state, formAction, isPending] = useActionState(\n    subscribeToNewsletter,\n    initialState,\n  );\n\n  return (\n    <section className=\"w-full py-12 md:py-24 lg:py-32 bg-muted/30\">\n      <div className=\"container px-4 md:px-6\">\n        <div className=\"flex flex-col items-center justify-center space-y-4 text-center\">\n          <div className=\"space-y-2\">\n            <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl\">\n              Stay Updated\n            </h2>\n            <p className=\"max-w-[700px] text-muted-foreground md:text-xl/relaxed\">\n              Subscribe to our newsletter to receive the latest updates and\n              exclusive offers.\n            </p>\n          </div>\n        </div>\n        <div className=\"mx-auto max-w-[500px] mt-8\">\n          {state.success ? (\n            <Alert className=\"bg-primary/10 border-primary/20\">\n              <CheckCircle className=\"h-4 w-4 text-primary\" />\n              <AlertTitle>Success!</AlertTitle>\n              <AlertDescription>{state.message}</AlertDescription>\n            </Alert>\n          ) : (\n            <form action={formAction} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\" className=\"text-base\">\n                  Name (Optional)\n                </Label>\n                <Input\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Your name\"\n                  className=\"h-12 bg-background border-muted-foreground/20 focus-visible:ring-offset-0\"\n                />\n                {state.errors?.name && (\n                  <p className=\"text-sm text-destructive\">\n                    {state.errors.name[0]}\n                  </p>\n                )}\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-base\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"your.email@example.com\"\n                  required\n                  className=\"h-12 bg-background border-muted-foreground/20 focus-visible:ring-offset-0\"\n                />\n                {state.errors?.email && (\n                  <p className=\"text-sm text-destructive\">\n                    {state.errors.email[0]}\n                  </p>\n                )}\n              </div>\n              {state.message && !state.success && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{state.message}</AlertDescription>\n                </Alert>\n              )}\n              <div className=\"flex items-center justify-center\">\n                <Button\n                  type=\"submit\"\n                  className=\"h-12 px-8 text-base transition-all duration-200 group w-full\"\n                  disabled={isPending}\n                >\n                  {isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Subscribing...\n                    </>\n                  ) : (\n                    <>\n                      <Mail className=\"mr-2 h-4 w-4\" />\n                      Subscribe to Newsletter\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/subscribe-newsletter/components/subscriber-list.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Card, CardContent, CardHeader } from \"@/registry/default/ui/card\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport { deleteSubscriber } from \"@/registry/default/dynamic-components/subscribe-newsletter/actions/subscribe-newsletter-actions\";\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\nimport { MoreVertical, Search, Trash2, AlertCircle } from \"lucide-react\";\n\ntype Subscriber = {\n  id: string;\n  email: string;\n  name: string | null;\n  status: string;\n  createdAt: Date;\n};\n\nexport function SubscriberList({\n  initialSubscribers,\n}: {\n  initialSubscribers: Subscriber[];\n}) {\n  const [subscribers, setSubscribers] = useState(initialSubscribers);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n\n  const filteredSubscribers = subscribers.filter(\n    (subscriber) =>\n      subscriber.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (subscriber.name &&\n        subscriber.name.toLowerCase().includes(searchTerm.toLowerCase())),\n  );\n\n  const handleDelete = async (id: string) => {\n    const result = await deleteSubscriber(id);\n\n    if (result.success) {\n      setSubscribers(subscribers.filter((subscriber) => subscriber.id !== id));\n\n      toast({\n        title: \"Subscriber deleted\",\n        description: \"The subscriber has been permanently deleted\",\n      });\n    } else {\n      toast({\n        title: \"Error\",\n        description: result.error || \"Failed to delete subscriber\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold\">Newsletter Subscribers</h2>\n          <div className=\"relative w-64\">\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search subscribers...\"\n              className=\"pl-8\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {filteredSubscribers.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <AlertCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium\">No subscribers found</h3>\n            <p className=\"text-muted-foreground mt-2\">\n              {searchTerm\n                ? \"No subscribers match your search criteria.\"\n                : \"There are no subscribers yet.\"}\n            </p>\n          </div>\n        ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Email</TableHead>\n                <TableHead>Name</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Subscribed On</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredSubscribers.map((subscriber) => (\n                <TableRow key={subscriber.id}>\n                  <TableCell className=\"font-medium\">\n                    {subscriber.email}\n                  </TableCell>\n                  <TableCell>{subscriber.name || \"-\"}</TableCell>\n                  <TableCell>\n                    <Badge\n                      variant={\n                        subscriber.status === \"ACTIVE\" ? \"default\" : \"secondary\"\n                      }\n                    >\n                      {subscriber.status === \"ACTIVE\"\n                        ? \"Active\"\n                        : \"Unsubscribed\"}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {formatDistanceToNow(new Date(subscriber.createdAt), {\n                      addSuffix: true,\n                    })}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <MoreVertical className=\"h-4 w-4\" />\n                          <span className=\"sr-only\">Actions</span>\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem\n                          onClick={() => handleDelete(subscriber.id)}\n                          className=\"text-destructive focus:text-destructive\"\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-2\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/subscribe-newsletter/components/unsubscribe.tsx",
      "content": "\"use client\";\n\nimport { useSearchParams } from \"next/navigation\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport { XCircle, Loader2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { UnsubscribeForm } from \"@/registry/default/dynamic-components/subscribe-newsletter/components/unsubscribe-form\";\nimport { verifyUnsubscribeToken } from \"@/registry/default/dynamic-components/subscribe-newsletter/actions/subscribe-newsletter-actions\";\n\nexport function Unsubscribe() {\n  const searchParams = useSearchParams();\n  const token = searchParams.get(\"token\");\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [email, setEmail] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function verifyToken() {\n      if (!token) {\n        setIsLoading(false);\n        return;\n      }\n      try {\n        const verifiedEmail = await verifyUnsubscribeToken(token);\n        setEmail(verifiedEmail);\n      } catch (err) {\n        setError(\"Failed to verify token\");\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    verifyToken();\n  }, [token]);\n\n  if (!token) {\n    return (\n      <Card className=\"max-w-md w-full\">\n        <CardHeader>\n          <CardTitle className=\"text-xl\">Invalid Request</CardTitle>\n          <CardDescription>\n            The unsubscribe link is invalid or has expired.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center\">\n          <XCircle className=\"h-16 w-16 text-destructive mb-4\" />\n          <p className=\"text-center mb-6\">\n            This link appears to be invalid or has expired. Please check the\n            link and try again.\n          </p>\n          <Button asChild>\n            <Link href=\"/\">Return to Homepage</Link>\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Card className=\"max-w-md w-full\">\n        <CardContent className=\"flex flex-col items-center py-10\">\n          <Loader2 className=\"h-16 w-16 animate-spin mb-4 text-primary\" />\n          <p className=\"text-center\">Verifying your unsubscribe request...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (email) {\n    return <UnsubscribeForm token={token} email={email} />;\n  }\n\n  return (\n    <Card className=\"max-w-md w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">Invalid Unsubscribe Link</CardTitle>\n        <CardDescription>\n          The unsubscribe link is invalid or has expired.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col items-center\">\n        <XCircle className=\"h-16 w-16 text-destructive mb-4\" />\n        <p className=\"text-center mb-6\">\n          {error ||\n            \"This link appears to be invalid or has expired. Please check the link and try again.\"}\n        </p>\n        <Button asChild>\n          <Link href=\"/\">Return to Homepage</Link>\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/subscribe-newsletter/components/unsubscribe-form.tsx",
      "content": "\"use client\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport { CheckCircle, Loader2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { useUnsubscribeForm } from \"@/registry/default/dynamic-components/subscribe-newsletter/hooks/use-unsubscribe-form\";\n\nexport function UnsubscribeForm({\n  token,\n  email,\n}: {\n  token: string;\n  email: string;\n}) {\n  const { isLoading, isUnsubscribed, message, handleUnsubscribe } =\n    useUnsubscribeForm(token);\n  if (isUnsubscribed) {\n    return (\n      <Card className=\"max-w-md w-full\">\n        <CardHeader>\n          <CardTitle className=\"text-xl\">Successfully Unsubscribed</CardTitle>\n          <CardDescription>\n            You have been removed from our mailing list\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center\">\n          <CheckCircle className=\"h-16 w-16 text-primary mb-4\" />\n          <p className=\"text-center mb-6\">{message}</p>\n          <Button asChild>\n            <Link href=\"/\">Return to Homepage</Link>\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"max-w-md w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">Unsubscribe from Newsletter</CardTitle>\n        <CardDescription>\n          You are about to unsubscribe <strong>{email}</strong> from our\n          newsletter.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col items-center\">\n        <p className=\"text-center mb-6\">\n          If you unsubscribe, you will no longer receive our newsletters. You\n          can always subscribe again in the future.\n        </p>\n        <div className=\"flex gap-4\">\n          <Button variant=\"outline\" asChild>\n            <Link href=\"/\">Cancel</Link>\n          </Button>\n          <Button onClick={handleUnsubscribe} disabled={isLoading}>\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Processing...\n              </>\n            ) : (\n              \"Confirm Unsubscribe\"\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/subscribe-newsletter/admin/page.tsx",
      "content": "import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport Link from \"next/link\";\nimport { ArrowRight, Mail } from \"lucide-react\";\nimport { getAllSubscribers } from \"@/registry/default/dynamic-components/subscribe-newsletter/actions/subscribe-newsletter-actions\";\n\nexport default async function AdminDashboard() {\n  const subscribers = await getAllSubscribers();\n\n  return (\n    <div className=\"container py-10\">\n      <h1 className=\"text-3xl font-bold mb-8\">Dashboard</h1>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              NewsLetter Management\n            </CardTitle>\n            <Mail className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{subscribers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Subscribers</p>\n            <div className=\"mt-4\">\n              <Link\n                href=\"/admin/newsletter\"\n                className=\"text-sm text-primary flex items-center\"\n              >\n                View all\n                <ArrowRight className=\"ml-1 h-4 w-4\" />\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(subscribe-newsletter)/admin/page.tsx"
    },
    {
      "path": "dynamic-components/subscribe-newsletter/unsubscribe/page.tsx",
      "content": "import { Unsubscribe } from \"@/registry/default/dynamic-components/subscribe-newsletter/components/unsubscribe\";\n\nexport default function UnsubscribePage() {\n  return (\n    <div className=\"container flex items-center justify-center min-h-[70vh]\">\n      <Unsubscribe />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(subscribe-newsletter)/unsubscribe/page.tsx"
    },
    {
      "path": "dynamic-components/subscribe-newsletter/admin/newsletter/page.tsx",
      "content": "import { SubscriberList } from \"@/registry/default/dynamic-components/subscribe-newsletter/components/subscriber-list\";\nimport { NewsletterCampaignForm } from \"@/registry/default/dynamic-components/subscribe-newsletter/components/newsletter-campaign-form\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/registry/default/ui/tabs\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  getAllCampaigns,\n  getAllSubscribers,\n} from \"@/registry/default/dynamic-components/subscribe-newsletter/actions/subscribe-newsletter-actions\";\n\nexport default async function AdminNewsletterPage() {\n  const subscribers = await getAllSubscribers();\n  const campaigns = await getAllCampaigns();\n\n  const activeSubscribersCount = subscribers.filter(\n    (sub) => sub.status === \"ACTIVE\",\n  ).length;\n\n  return (\n    <div className=\"container py-10\">\n      <h1 className=\"text-3xl font-bold mb-8\">Newsletter Management</h1>\n\n      <div className=\"grid gap-6 mb-8\">\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Total Subscribers\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{subscribers.length}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {activeSubscribersCount} active subscribers\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Recent Campaigns\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{campaigns.length}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {campaigns.length > 0\n                  ? `Last sent ${new Date(\n                      campaigns[0].createdAt,\n                    ).toLocaleDateString()}`\n                  : \"No campaigns sent yet\"}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"subscribers\">\n        <TabsList className=\"mb-6\">\n          <TabsTrigger value=\"subscribers\">Subscribers</TabsTrigger>\n          <TabsTrigger value=\"send-newsletter\">Send Newsletter</TabsTrigger>\n          <TabsTrigger value=\"campaigns\">Past Campaigns</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"subscribers\">\n          <SubscriberList initialSubscribers={subscribers} />\n        </TabsContent>\n\n        <TabsContent value=\"send-newsletter\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Send Newsletter</CardTitle>\n              <CardDescription>\n                Compose and send a newsletter to all active subscribers (\n                {activeSubscribersCount})\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <NewsletterCampaignForm />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"campaigns\">\n          <div className=\"space-y-6\">\n            <h2 className=\"text-xl font-semibold\">Recent Campaigns</h2>\n\n            {campaigns.length === 0 ? (\n              <p className=\"text-muted-foreground\">\n                No campaigns have been sent yet.\n              </p>\n            ) : (\n              <div className=\"space-y-4\">\n                {campaigns.map((campaign) => (\n                  <Card key={campaign.id}>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">\n                        {campaign.subject}\n                      </CardTitle>\n                      <CardDescription>\n                        Sent on{\" \"}\n                        {new Date(campaign.createdAt).toLocaleDateString()} to{\" \"}\n                        {campaign._count.recipients} subscribers\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div\n                        className=\"prose prose-sm max-w-none\"\n                        dangerouslySetInnerHTML={{ __html: campaign.content }}\n                      />\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(subscribe-newsletter)/admin/newsletter/page.tsx"
    },
    {
      "path": "dynamic-components/subscribe-newsletter/admin/layout.tsx",
      "content": "import type React from \"react\";\nimport type { Metadata } from \"next\";\nimport Link from \"next/link\";\nimport { LayoutDashboard, Mail } from \"lucide-react\";\nimport { Toaster } from \"@/registry/default/ui/toaster\";\n\nexport const metadata: Metadata = {\n  title: \"Admin Dashboard\",\n  description:\n    \"Admin dashboard for managing contact messages and other admin tasks.\",\n};\n\nexport default function AdminLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <div className=\"flex min-h-screen flex-col\">\n      <header className=\"sticky top-0 z-10 border-b bg-background\">\n        <div className=\"container flex h-16 items-center justify-between py-4\">\n          <div className=\"flex items-center gap-2\">\n            <Link href=\"/admin\" className=\"font-bold\">\n              Admin Dashboard\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container flex-1 items-start md:grid md:grid-cols-[220px_1fr] md:gap-6 lg:grid-cols-[240px_1fr] lg:gap-10\">\n        <aside className=\"fixed top-16 z-30 hidden h-[calc(100vh-4rem)] w-full shrink-0 overflow-y-auto border-r md:sticky md:block\">\n          <div className=\"py-6 pr-6\">\n            <nav className=\"flex flex-col gap-2\">\n              <Link\n                href=\"/admin\"\n                className=\"w-auto flex items-center justify-start gap-2 rounded-md bg-background px-4 py-2 font-medium transition-colors hover:bg-accent focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50 text-muted-foreground hover:text-foreground\"\n              >\n                <LayoutDashboard className=\"h-4 w-4\" />\n                Dashboard\n              </Link>\n              <Link\n                href=\"/admin/newsletter\"\n                className=\"w-auto flex items-center justify-start gap-2 rounded-md bg-background px-4 py-2 font-medium transition-colors hover:bg-accent focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50 text-muted-foreground hover:text-foreground\"\n              >\n                <Mail className=\"h-4 w-4\" />\n                Newsletter\n              </Link>\n            </nav>\n          </div>\n        </aside>\n        <main className=\"flex w-full flex-col overflow-hidden\">{children}</main>\n        <Toaster />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/(subscribe-newsletter)/admin/layout.tsx"
    }
  ]
}
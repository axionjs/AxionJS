{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "signup-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A signup form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card",
    "use-toast",
    "password-input",
    "toast"
  ],
  "files": [
    {
      "path": "blocks/signup-form-1.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useId } from \"react\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport Link from \"next/link\";\r\nimport { AtSignIcon, UserIcon, LockIcon } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/default/ui/card\";\r\nimport { useToast } from \"@/lib/use-toast\";\r\nimport PasswordInput from \"@/registry/default/ui/password-input\";\r\n\r\n// TODO: Create server action for signup\r\n// Create a file: app/actions/auth-actions.ts\r\n//\r\n// \"use server\";\r\n//\r\n// import { z } from \"zod\";\r\n// import { redirect } from \"next/navigation\";\r\n//\r\n// const signupSchema = z.object({\r\n//   name: z.string().min(2),\r\n//   email: z.string().email(),\r\n//   password: z.string().min(8),\r\n//   confirmPassword: z.string(),\r\n// }).refine((data) => data.password === data.confirmPassword, {\r\n//   message: \"Passwords do not match\",\r\n//   path: [\"confirmPassword\"],\r\n// });\r\n//\r\n// export async function signupAction(formData: z.infer<typeof signupSchema>) {\r\n//   try {\r\n//     // Validate the form data\r\n//     const validatedFields = signupSchema.parse(formData);\r\n//\r\n//     // TODO: Implement your authentication logic here\r\n//     // Examples:\r\n//     // - Hash the password using bcrypt\r\n//     // - Save user to database\r\n//     // - Send verification email\r\n//     // - Create session/JWT token\r\n//\r\n//     // Example with a database call:\r\n//     // const hashedPassword = await bcrypt.hash(validatedFields.password, 10);\r\n//     // const user = await db.user.create({\r\n//     //   data: {\r\n//     //     name: validatedFields.name,\r\n//     //     email: validatedFields.email,\r\n//     //     password: hashedPassword,\r\n//     //   },\r\n//     // });\r\n//\r\n//     return { success: true, message: \"Account created successfully\" };\r\n//   } catch (error) {\r\n//     console.error(\"Signup error:\", error);\r\n//     throw new Error(\"Failed to create account\");\r\n//   }\r\n// }\r\n\r\nconst formSchema = z\r\n  .object({\r\n    name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\r\n    email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n    password: z\r\n      .string()\r\n      .min(8, { message: \"Password must be at least 8 characters\" }),\r\n    confirmPassword: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirmPassword, {\r\n    message: \"Passwords do not match\",\r\n    path: [\"confirmPassword\"],\r\n  });\r\n\r\nexport function SignupForm1() {\r\n  const router = useRouter();\r\n  const { toast } = useToast();\r\n  const [isPending, setIsPending] = React.useState(false);\r\n\r\n  const nameId = useId();\r\n  const emailId = useId();\r\n  const passwordId = useId();\r\n  const confirmPasswordId = useId();\r\n\r\n  const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n    },\r\n  });\r\n\r\n  async function onSubmit(values: z.infer<typeof formSchema>) {\r\n    try {\r\n      setIsPending(true);\r\n\r\n      // TODO: Import and use the signupAction server action\r\n      // import { signupAction } from \"@/actions/auth-actions\";\r\n      // await signupAction(values);\r\n\r\n      // For now, simulate the signup process\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n      toast({\r\n        title: \"Account created\",\r\n        description: \"Your account has been created successfully.\",\r\n      });\r\n      router.push(\"/login\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Registration failed\",\r\n        description: \"There was a problem creating your account.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsPending(false);\r\n    }\r\n  }\r\n\r\n  // TODO: Implement OAuth server actions\r\n  // Create server actions for GitHub and Google OAuth:\r\n  //\r\n  // export async function signInWithGitHub() {\r\n  //   \"use server\";\r\n  //   // Implement GitHub OAuth logic\r\n  //   // redirect to GitHub OAuth URL\r\n  // }\r\n  //\r\n  // export async function signInWithGoogle() {\r\n  //   \"use server\";\r\n  //   // Implement Google OAuth logic\r\n  //   // redirect to Google OAuth URL\r\n  // }\r\n\r\n  const handleGitHubSignup = async () => {\r\n    // TODO: Call GitHub OAuth server action\r\n    // await signInWithGitHub();\r\n    console.log(\"GitHub signup clicked\");\r\n  };\r\n\r\n  const handleGoogleSignup = async () => {\r\n    // TODO: Call Google OAuth server action\r\n    // await signInWithGoogle();\r\n    console.log(\"Google signup clicked\");\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-md mx-auto\">\r\n      <CardHeader>\r\n        <CardTitle className=\"text-2xl font-bold text-center\">\r\n          Create an account\r\n        </CardTitle>\r\n        <CardDescription className=\"text-center\">\r\n          Enter your information to create an account\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel htmlFor={nameId}>Full Name</FormLabel>\r\n                  <FormControl>\r\n                    <div className=\"relative\">\r\n                      <Input\r\n                        id={nameId}\r\n                        placeholder=\"John Doe\"\r\n                        className=\"peer ps-9\"\r\n                        {...field}\r\n                        autoComplete=\"name\"\r\n                        aria-label=\"Full name\"\r\n                      />\r\n                      <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                        <UserIcon size={16} aria-hidden=\"true\" />\r\n                      </div>\r\n                    </div>\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel htmlFor={emailId}>Email</FormLabel>\r\n                  <FormControl>\r\n                    <div className=\"relative\">\r\n                      <Input\r\n                        id={emailId}\r\n                        placeholder=\"name@example.com\"\r\n                        className=\"peer ps-9\"\r\n                        {...field}\r\n                        autoComplete=\"email\"\r\n                        aria-label=\"Email address\"\r\n                      />\r\n                      <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                        <AtSignIcon size={16} aria-hidden=\"true\" />\r\n                      </div>\r\n                    </div>\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"password\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel htmlFor={passwordId}>Password</FormLabel>\r\n                  <FormControl>\r\n                    <PasswordInput\r\n                      id={passwordId}\r\n                      value={field.value}\r\n                      onChange={field.onChange}\r\n                      error={form.formState.errors.password?.message}\r\n                      autoComplete=\"new-password\"\r\n                      aria-label=\"Password\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"confirmPassword\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel htmlFor={confirmPasswordId}>\r\n                    Confirm Password\r\n                  </FormLabel>\r\n                  <FormControl>\r\n                    <div className=\"relative\">\r\n                      <Input\r\n                        id={confirmPasswordId}\r\n                        type=\"password\"\r\n                        placeholder=\"••••••••\"\r\n                        className=\"peer ps-9\"\r\n                        {...field}\r\n                        aria-label=\"Confirm password\"\r\n                      />\r\n                      <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                        <LockIcon size={16} aria-hidden=\"true\" />\r\n                      </div>\r\n                    </div>\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"w-full\"\r\n              disabled={isPending}\r\n              aria-label=\"Create your account\"\r\n            >\r\n              {isPending ? \"Creating account...\" : \"Create account\"}\r\n            </Button>\r\n          </form>\r\n        </Form>\r\n      </CardContent>\r\n      <CardFooter className=\"flex flex-col space-y-4\">\r\n        <div className=\"relative w-full\">\r\n          <div className=\"absolute inset-0 flex items-center\">\r\n            <span className=\"w-full border-t\" />\r\n          </div>\r\n          <div className=\"relative flex justify-center text-xs uppercase\">\r\n            <span className=\"bg-background px-2 text-muted-foreground\">\r\n              Or continue with\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid grid-cols-2 gap-4 w-full\">\r\n          <Button\r\n            variant=\"outline\"\r\n            type=\"button\"\r\n            onClick={handleGitHubSignup}\r\n            className=\"flex items-center justify-center gap-2\"\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"16\"\r\n              height=\"16\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            >\r\n              <path d=\"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4\" />\r\n              <path d=\"M9 18c-4.51 2-5-2-7-2\" />\r\n            </svg>\r\n            GitHub\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            type=\"button\"\r\n            onClick={handleGoogleSignup}\r\n            className=\"flex items-center justify-center gap-2\"\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"16\"\r\n              height=\"16\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            >\r\n              <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10z\" />\r\n              <path d=\"M12 8v8\" />\r\n              <path d=\"M8 12h8\" />\r\n            </svg>\r\n            Google\r\n          </Button>\r\n        </div>\r\n        <div className=\"text-center text-sm mt-4\">\r\n          Already have an account?{\" \"}\r\n          <Link href=\"/login\" className=\"text-primary hover:underline\">\r\n            Sign in\r\n          </Link>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
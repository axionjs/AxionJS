{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "two-factor-form",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A social authentication component that allows users to log in using OAuth provider (Github).",
  "dependencies": [
    "nodemailer",
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "card",
    "alert",
    "form",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "dynamic-components/two-factor-form/actions/two-factor-actions.ts",
      "content": "\"use server\";\r\n\r\nimport * as z from \"zod\";\r\nimport crypto from \"crypto\";\r\nimport { sendTwoFactorTokenEmail } from \"@/registry/default/dynamic-components/two-factor-form/lib/two-factor-utils\";\r\nimport { db } from \"@/registry/default/lib/db\";\r\n\r\n// Validation schemas\r\nconst TwoFactorRequestSchema = z.object({\r\n  email: z.string().email(\"Invalid email address\"),\r\n});\r\n\r\nconst TwoFactorVerifySchema = z.object({\r\n  email: z.string().email(\"Invalid email address\"),\r\n  code: z\r\n    .string()\r\n    .min(6, \"Code must be 6 digits\")\r\n    .max(6, \"Code must be 6 digits\"),\r\n});\r\n\r\nexport interface TwoFactorActionResult {\r\n  success?: string;\r\n  error?: string;\r\n  twoFactorRequired?: boolean;\r\n}\r\n\r\nexport interface TwoFactorToken {\r\n  id: string;\r\n  email: string;\r\n  token: string;\r\n  expires: Date;\r\n}\r\n\r\nexport interface TwoFactorConfirmation {\r\n  id: string;\r\n  userId: string;\r\n}\r\n// Request 2FA code\r\nexport const requestTwoFactorCode = async (\r\n  values: z.infer<typeof TwoFactorRequestSchema>\r\n): Promise<TwoFactorActionResult> => {\r\n  try {\r\n    const validatedFields = TwoFactorRequestSchema.safeParse(values);\r\n\r\n    if (!validatedFields.success) {\r\n      return { error: \"Invalid email address\" };\r\n    }\r\n\r\n    const { email } = validatedFields.data;\r\n\r\n    // Generate and send 2FA token\r\n    const twoFactorToken = await generateTwoFactorToken(email);\r\n    await sendTwoFactorTokenEmail(email, twoFactorToken.token);\r\n\r\n    return {\r\n      success: \"Verification code sent to your email\",\r\n      twoFactorRequired: true,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"2FA request error:\", error);\r\n    return { error: \"Failed to send verification code\" };\r\n  }\r\n};\r\n\r\n// Verify 2FA code\r\nexport const verifyTwoFactorCode = async (\r\n  values: z.infer<typeof TwoFactorVerifySchema>\r\n): Promise<TwoFactorActionResult> => {\r\n  try {\r\n    const validatedFields = TwoFactorVerifySchema.safeParse(values);\r\n\r\n    if (!validatedFields.success) {\r\n      return { error: \"Invalid input\" };\r\n    }\r\n\r\n    const { email, code } = validatedFields.data;\r\n\r\n    // Get the token from database\r\n    const twoFactorToken = await getTwoFactorTokenByEmail(email);\r\n\r\n    if (!twoFactorToken) {\r\n      return { error: \"Invalid or expired code\" };\r\n    }\r\n\r\n    if (twoFactorToken.token !== code) {\r\n      return { error: \"Invalid verification code\" };\r\n    }\r\n\r\n    const hasExpired = new Date(twoFactorToken.expires) < new Date();\r\n    if (hasExpired) {\r\n      return { error: \"Verification code has expired\" };\r\n    }\r\n\r\n    // Clean up the token after successful verification\r\n    await db.twoFactorToken.delete({\r\n      where: { id: twoFactorToken.id },\r\n    });\r\n\r\n    return { success: \"Two-factor authentication verified successfully\" };\r\n  } catch (error) {\r\n    console.error(\"2FA verification error:\", error);\r\n    return { error: \"Verification failed\" };\r\n  }\r\n};\r\n\r\n// Enable/Disable 2FA for a user\r\nexport const toggleTwoFactor = async (\r\n  userId: string,\r\n  enabled: boolean\r\n): Promise<TwoFactorActionResult> => {\r\n  try {\r\n    await db.user.update({\r\n      where: { id: userId },\r\n      data: { isTwoFactorEnabled: enabled },\r\n    });\r\n\r\n    if (!enabled) {\r\n      // Remove any existing 2FA confirmations when disabling\r\n      const existingConfirmation =\r\n        await getTwoFactorConfirmationByUserId(userId);\r\n      if (existingConfirmation) {\r\n        await db.twoFactorConfirmation.delete({\r\n          where: { id: existingConfirmation.id },\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: `Two-factor authentication ${enabled ? \"enabled\" : \"disabled\"} successfully`,\r\n    };\r\n  } catch (error) {\r\n    return { error: \"Failed to update two-factor authentication settings\" };\r\n  }\r\n};\r\n\r\n// Database operations using Prisma\r\nexport const getTwoFactorTokenByToken = async (\r\n  token: string\r\n): Promise<TwoFactorToken | null> => {\r\n  try {\r\n    const twoFactorToken = await db.twoFactorToken.findUnique({\r\n      where: { token },\r\n    });\r\n    return twoFactorToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getTwoFactorTokenByEmail = async (\r\n  email: string\r\n): Promise<TwoFactorToken | null> => {\r\n  try {\r\n    const twoFactorToken = await db.twoFactorToken.findFirst({\r\n      where: { email },\r\n    });\r\n    return twoFactorToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getTwoFactorConfirmationByUserId = async (\r\n  userId: string\r\n): Promise<TwoFactorConfirmation | null> => {\r\n  try {\r\n    const twoFactorConfirmation = await db.twoFactorConfirmation.findUnique({\r\n      where: { userId },\r\n    });\r\n    return twoFactorConfirmation;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const generateTwoFactorToken = async (\r\n  email: string\r\n): Promise<TwoFactorToken> => {\r\n  const token = crypto.randomInt(100_000, 1_000_000).toString();\r\n  const expires = new Date(new Date().getTime() + 5 * 60 * 1000); // 5 minute expiry\r\n\r\n  // Delete existing token if any\r\n  const existingToken = await getTwoFactorTokenByEmail(email);\r\n  if (existingToken) {\r\n    await db.twoFactorToken.delete({\r\n      where: { id: existingToken.id },\r\n    });\r\n  }\r\n\r\n  // Create new token\r\n  const twoFactorToken = await db.twoFactorToken.create({\r\n    data: {\r\n      email,\r\n      token,\r\n      expires,\r\n    },\r\n  });\r\n\r\n  return twoFactorToken;\r\n};\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalThis.prisma = db;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/two-factor-form/components/two-factor-form.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState, useTransition } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Label } from \"@/registry/default/ui/label\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/default/ui/card\";\r\nimport { Alert, AlertDescription } from \"@/registry/default/ui/alert\";\r\nimport { Loader2, Shield, Mail } from \"lucide-react\";\r\nimport {\r\n  requestTwoFactorCode,\r\n  verifyTwoFactorCode,\r\n} from \"@/registry/default/dynamic-components/two-factor-form/actions/two-factor-actions\";\r\n\r\n// Validation schemas\r\nconst EmailSchema = z.object({\r\n  email: z.string().email(\"Please enter a valid email address\"),\r\n});\r\n\r\nconst VerificationSchema = z.object({\r\n  code: z\r\n    .string()\r\n    .min(6, \"Code must be 6 digits\")\r\n    .max(6, \"Code must be 6 digits\")\r\n    .regex(/^\\d+$/, \"Code must contain only numbers\"),\r\n});\r\n\r\ninterface TwoFactorFormProps {\r\n  onSuccess?: (email: string) => void;\r\n  onError?: (error: string) => void;\r\n  title?: string;\r\n  description?: string;\r\n  className?: string;\r\n}\r\n\r\nexport function TwoFactorForm({\r\n  onSuccess,\r\n  onError,\r\n  title = \"Two-Factor Authentication\",\r\n  description = \"Secure your account with an additional layer of protection\",\r\n  className = \"\",\r\n}: TwoFactorFormProps) {\r\n  const [step, setStep] = useState<\"email\" | \"verification\">(\"email\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [message, setMessage] = useState<{\r\n    type: \"success\" | \"error\";\r\n    text: string;\r\n  } | null>(null);\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const emailForm = useForm<z.infer<typeof EmailSchema>>({\r\n    resolver: zodResolver(EmailSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n    },\r\n  });\r\n\r\n  const verificationForm = useForm<z.infer<typeof VerificationSchema>>({\r\n    resolver: zodResolver(VerificationSchema),\r\n    defaultValues: {\r\n      code: \"\",\r\n    },\r\n  });\r\n\r\n  const handleEmailSubmit = (values: z.infer<typeof EmailSchema>) => {\r\n    setMessage(null);\r\n\r\n    startTransition(async () => {\r\n      try {\r\n        const result = await requestTwoFactorCode(values);\r\n\r\n        if (result.error) {\r\n          setMessage({ type: \"error\", text: result.error });\r\n          onError?.(result.error);\r\n        } else if (result.success) {\r\n          setMessage({ type: \"success\", text: result.success });\r\n          setEmail(values.email);\r\n          setStep(\"verification\");\r\n        }\r\n      } catch (error) {\r\n        const errorMessage = \"Something went wrong. Please try again.\";\r\n        setMessage({ type: \"error\", text: errorMessage });\r\n        onError?.(errorMessage);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleVerificationSubmit = (\r\n    values: z.infer<typeof VerificationSchema>\r\n  ) => {\r\n    setMessage(null);\r\n\r\n    startTransition(async () => {\r\n      try {\r\n        const result = await verifyTwoFactorCode({\r\n          email,\r\n          code: values.code,\r\n        });\r\n\r\n        if (result.error) {\r\n          setMessage({ type: \"error\", text: result.error });\r\n          onError?.(result.error);\r\n        } else if (result.success) {\r\n          setMessage({ type: \"success\", text: result.success });\r\n          onSuccess?.(email);\r\n        }\r\n      } catch (error) {\r\n        const errorMessage = \"Verification failed. Please try again.\";\r\n        setMessage({ type: \"error\", text: errorMessage });\r\n        onError?.(errorMessage);\r\n      }\r\n    });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setStep(\"email\");\r\n    setEmail(\"\");\r\n    setMessage(null);\r\n    emailForm.reset();\r\n    verificationForm.reset();\r\n  };\r\n\r\n  return (\r\n    <div className={`w-full max-w-md mx-auto ${className}`}>\r\n      <Card className=\"border-0 shadow-lg bg-card\">\r\n        <CardHeader className=\"text-center space-y-4 pb-8\">\r\n          <div className=\"mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-primary/10 ring-8 ring-primary/5\">\r\n            <Shield className=\"h-8 w-8 text-primary\" />\r\n          </div>\r\n          <div className=\"space-y-2\">\r\n            <CardTitle className=\"text-2xl font-semibold tracking-tight\">\r\n              {title}\r\n            </CardTitle>\r\n            <CardDescription className=\"text-muted-foreground\">\r\n              {step === \"email\"\r\n                ? description\r\n                : \"We've sent a verification code to your email\"}\r\n            </CardDescription>\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-6\">\r\n          {/* Progress indicator */}\r\n          <div className=\"flex items-center justify-center space-x-2\">\r\n            <div\r\n              className={`h-2 w-8 rounded-full transition-colors ${\r\n                step === \"email\" ? \"bg-primary\" : \"bg-primary/30\"\r\n              }`}\r\n            />\r\n            <div\r\n              className={`h-2 w-8 rounded-full transition-colors ${\r\n                step === \"verification\" ? \"bg-primary\" : \"bg-muted\"\r\n              }`}\r\n            />\r\n          </div>\r\n\r\n          {/* Alert Messages */}\r\n          {message && (\r\n            <Alert\r\n              variant={message.type === \"error\" ? \"destructive\" : \"default\"}\r\n              className=\"border-l-4\"\r\n            >\r\n              {message.type === \"error\" ? (\r\n                <AlertCircle className=\"h-4 w-4\" />\r\n              ) : (\r\n                <CheckCircle className=\"h-4 w-4\" />\r\n              )}\r\n              <AlertDescription className=\"font-medium\">\r\n                {message.text}\r\n              </AlertDescription>\r\n            </Alert>\r\n          )}\r\n\r\n          {step === \"email\" ? (\r\n            <form\r\n              onSubmit={emailForm.handleSubmit(handleEmailSubmit)}\r\n              className=\"space-y-6\"\r\n            >\r\n              <div className=\"space-y-3\">\r\n                <Label\r\n                  htmlFor=\"email\"\r\n                  className=\"text-sm font-medium text-foreground\"\r\n                >\r\n                  Email Address\r\n                </Label>\r\n                <div className=\"relative\">\r\n                  <Mail className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n                  <Input\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Enter your email address\"\r\n                    className=\"pl-10 h-12 bg-background border-input focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all\"\r\n                    disabled={isPending}\r\n                    {...emailForm.register(\"email\")}\r\n                  />\r\n                </div>\r\n                {emailForm.formState.errors.email && (\r\n                  <p className=\"text-sm text-destructive flex items-center gap-1\">\r\n                    <AlertCircle className=\"h-3 w-3\" />\r\n                    {emailForm.formState.errors.email.message}\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full h-12 font-medium\"\r\n                disabled={isPending}\r\n              >\r\n                {isPending ? (\r\n                  <>\r\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                    Sending verification code...\r\n                  </>\r\n                ) : (\r\n                  \"Send Verification Code\"\r\n                )}\r\n              </Button>\r\n            </form>\r\n          ) : (\r\n            <form\r\n              onSubmit={verificationForm.handleSubmit(handleVerificationSubmit)}\r\n              className=\"space-y-6\"\r\n            >\r\n              <div className=\"text-center space-y-2\">\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Code sent to{\" \"}\r\n                  <span className=\"font-medium text-foreground\">{email}</span>\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"space-y-3\">\r\n                <Label\r\n                  htmlFor=\"code\"\r\n                  className=\"text-sm font-medium text-foreground\"\r\n                >\r\n                  Verification Code\r\n                </Label>\r\n                <Input\r\n                  id=\"code\"\r\n                  type=\"text\"\r\n                  placeholder=\"000000\"\r\n                  maxLength={6}\r\n                  className=\"text-center text-2xl font-mono tracking-[0.5em] h-16 bg-background border-input focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all\"\r\n                  disabled={isPending}\r\n                  {...verificationForm.register(\"code\")}\r\n                  onChange={(e) => {\r\n                    // Only allow numbers\r\n                    const value = e.target.value.replace(/\\D/g, \"\");\r\n                    e.target.value = value;\r\n                    verificationForm.setValue(\"code\", value);\r\n                  }}\r\n                />\r\n                {verificationForm.formState.errors.code && (\r\n                  <p className=\"text-sm text-destructive flex items-center gap-1\">\r\n                    <AlertCircle className=\"h-3 w-3\" />\r\n                    {verificationForm.formState.errors.code.message}\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"space-y-3\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  className=\"w-full h-12 font-medium\"\r\n                  disabled={isPending}\r\n                >\r\n                  {isPending ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      Verifying code...\r\n                    </>\r\n                  ) : (\r\n                    \"Verify Code\"\r\n                  )}\r\n                </Button>\r\n\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"ghost\"\r\n                  className=\"w-full h-12 font-medium text-muted-foreground hover:text-foreground\"\r\n                  onClick={resetForm}\r\n                  disabled={isPending}\r\n                >\r\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\r\n                  Use different email\r\n                </Button>\r\n              </div>\r\n\r\n              <div className=\"text-center\">\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  Didn't receive the code?{\" \"}\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"text-primary hover:underline font-medium\"\r\n                    onClick={() => handleEmailSubmit({ email })}\r\n                    disabled={isPending}\r\n                  >\r\n                    Resend code\r\n                  </button>\r\n                </p>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/two-factor-form/lib/two-factor-utils.ts",
      "content": "import nodemailer from \"nodemailer\";\r\nimport { getTwoFactorEmailTemplate } from \"@/registry/default/dynamic-components/two-factor-form/emails/two-factor-template\";\r\n\r\n// Email sending function - Complete implementation with template\r\nexport const sendTwoFactorTokenEmail = async (\r\n  email: string,\r\n  token: string,\r\n): Promise<void> => {\r\n  try {\r\n    // Create transporter based on environment variables\r\n    const transporter = nodemailer.createTransport({\r\n      host: process.env.EMAIL_SERVER_HOST,\r\n      port: Number(process.env.EMAIL_SERVER_PORT) || 587,\r\n      secure: Number(process.env.EMAIL_SERVER_PORT) === 465, // true for 465, false for other ports\r\n      auth: {\r\n        user: process.env.EMAIL_SERVER_USER,\r\n        pass: process.env.EMAIL_SERVER_PASSWORD,\r\n      },\r\n    });\r\n\r\n    // Get email templates\r\n    const { html, text } = getTwoFactorEmailTemplate(token);\r\n\r\n    // Send email\r\n    await transporter.sendMail({\r\n      from: `${process.env.EMAIL_FROM || \"AxionJS Team\"}`,\r\n      to: email,\r\n      subject: \"🔐 Your Two-Factor Authentication Code\",\r\n      text,\r\n      html,\r\n    });\r\n\r\n    console.log(`2FA code sent successfully to ${email}`);\r\n  } catch (error) {\r\n    console.error(\"Failed to send 2FA email:\", error);\r\n    throw new Error(\"Failed to send verification email\");\r\n  }\r\n};\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/two-factor-form/emails/two-factor-template.tsx",
      "content": "export const getTwoFactorEmailTemplate = (token: string) => {\r\n  const html = `\r\n      <!DOCTYPE html>\r\n      <html>\r\n        <head>\r\n          <meta charset=\"utf-8\">\r\n          <title>Two-Factor Authentication Code</title>\r\n          <style>\r\n            body { \r\n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; \r\n              line-height: 1.6; \r\n              color: #333; \r\n              margin: 0; \r\n              padding: 0; \r\n              background-color: #f5f5f5; \r\n            }\r\n            .container { \r\n              max-width: 600px; \r\n              margin: 40px auto; \r\n              background: white; \r\n              border-radius: 12px; \r\n              overflow: hidden; \r\n              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); \r\n            }\r\n            .header { \r\n              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); \r\n              color: white; \r\n              padding: 40px 30px; \r\n              text-align: center; \r\n            }\r\n            .header h1 { \r\n              margin: 0; \r\n              font-size: 28px; \r\n              font-weight: 600; \r\n            }\r\n            .content { \r\n              padding: 40px 30px; \r\n            }\r\n            .code-container { \r\n              text-align: center; \r\n              margin: 30px 0; \r\n            }\r\n            .code { \r\n              display: inline-block;\r\n              font-size: 36px; \r\n              font-weight: bold; \r\n              padding: 20px 30px; \r\n              background: #f8f9fa; \r\n              border: 2px dashed #dee2e6;\r\n              border-radius: 12px; \r\n              letter-spacing: 8px; \r\n              color: #495057;\r\n              font-family: 'Courier New', monospace;\r\n            }\r\n            .info { \r\n              background: #e3f2fd; \r\n              border-left: 4px solid #2196f3; \r\n              padding: 15px 20px; \r\n              margin: 25px 0; \r\n              border-radius: 4px; \r\n            }\r\n            .warning { \r\n              background: #fff3e0; \r\n              border-left: 4px solid #ff9800; \r\n              padding: 15px 20px; \r\n              margin: 25px 0; \r\n              border-radius: 4px; \r\n            }\r\n            .footer { \r\n              background: #f8f9fa; \r\n              padding: 20px 30px; \r\n              text-align: center; \r\n              font-size: 14px; \r\n              color: #6c757d; \r\n              border-top: 1px solid #e9ecef; \r\n            }\r\n            .btn {\r\n              display: inline-block;\r\n              padding: 12px 24px;\r\n              background: #007bff;\r\n              color: white;\r\n              text-decoration: none;\r\n              border-radius: 6px;\r\n              font-weight: 500;\r\n              margin: 20px 0;\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div class=\"container\">\r\n            <div class=\"header\">\r\n              <h1>🔐 Two-Factor Authentication</h1>\r\n              <p style=\"margin: 10px 0 0 0; opacity: 0.9;\">Secure your account with this verification code</p>\r\n            </div>\r\n            <div class=\"content\">\r\n              <h2 style=\"color: #333; margin-top: 0;\">Your Verification Code</h2>\r\n              <p>Enter the following code to complete your two-factor authentication:</p>\r\n              \r\n              <div class=\"code-container\">\r\n                <div class=\"code\">${token}</div>\r\n              </div>\r\n              \r\n              <div class=\"info\">\r\n                <strong>⏰ Time Sensitive:</strong> This code will expire in <strong>5 minutes</strong> for your security.\r\n              </div>\r\n              \r\n              <div class=\"warning\">\r\n                <strong>🛡️ Security Notice:</strong> If you didn't request this code, please ignore this email and consider changing your password. Never share this code with anyone.\r\n              </div>\r\n              \r\n              <p style=\"margin-top: 30px;\">\r\n                Having trouble? Make sure you're entering the code exactly as shown above, including any spaces or dashes.\r\n              </p>\r\n            </div>\r\n            <div class=\"footer\">\r\n              <p>This is an automated security message from your application.</p>\r\n              <p>Please do not reply to this email.</p>\r\n            </div>\r\n          </div>\r\n        </body>\r\n      </html>\r\n    `;\r\n\r\n  const text = `\r\n  Two-Factor Authentication Code\r\n  \r\n  Your verification code is: ${token}\r\n  \r\n  This code will expire in 5 minutes for security reasons.\r\n  \r\n  Security Notice: If you didn't request this code, please ignore this email and consider changing your password. Never share this code with anyone.\r\n  \r\n  Having trouble? Make sure you're entering the code exactly as shown above.\r\n  \r\n  This is an automated security message. Please do not reply to this email.\r\n    `;\r\n\r\n  return { html, text };\r\n};\r\n",
      "type": "registry:email",
      "target": ""
    },
    {
      "path": "dynamic-components/two-factor-form/twoFA/page.tsx",
      "content": "\"use client\";\r\nimport { TwoFactorForm } from \"@/registry/default/dynamic-components/two-factor-form/components/two-factor-form\";\r\n\r\nexport default function TwoFA() {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-12\">\r\n      <div className=\"mx-auto max-w-xl px-4\">\r\n        <div className=\"grid gap-8\">\r\n          <div className=\"space-y-4\">\r\n            <TwoFactorForm\r\n              onSuccess={(email) => {\r\n                console.log(\"2FA Success for:\", email);\r\n              }}\r\n              onError={(error) => {}}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(two-factor-form)/twoFA/page.tsx"
    }
  ]
}
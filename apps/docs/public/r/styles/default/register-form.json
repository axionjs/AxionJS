{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "register-form",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Register form with email, password, and username fields.",
  "files": [
    {
      "path": "auth/components/register-form.tsx",
      "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { useState, useTransition } from \"react\";\n\nimport {\n  Form,\n  FormField,\n  FormControl,\n  FormLabel,\n  FormItem,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { RegisterSchema } from \"@/registry/default/auth/schemas\";\nimport { CardWrapper } from \"@/registry/default/auth/components/card-wrapper\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { FormError } from \"@/registry/default/auth/components/form-error\";\nimport { FormSuccess } from \"@/registry/default/auth/components/form-success\";\nimport { register } from \"@/registry/default/auth/actions/auth-actions\";\n\nexport const RegisterForm = () => {\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<z.infer<typeof RegisterSchema>>({\n    resolver: zodResolver(RegisterSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      name: \"\",\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof RegisterSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      register(values).then((data) => {\n        setError(data.error);\n        setSuccess(data.success);\n      });\n    });\n  };\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Register\"\n      subHeaderLabel=\"Create an account\"\n      backButtonLabel=\"Already have an account?\"\n      backButtonHref=\"/auth/login\"\n      showSocial\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"Jhon Doe\"\n                      type=\"text\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"jhon.doe@example.com\"\n                      type=\"email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"******\"\n                      type=\"password\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <FormError message={error} />\n          <FormSuccess message={success} />\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n            Create an account\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    }
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "use-pagination",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-pagination.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ninterface UsePaginationProps {\n  totalItems: number;\n  initialPage?: number;\n  pageSize?: number;\n  siblingCount?: number;\n}\n\ninterface UsePaginationReturn {\n  currentPage: number;\n  totalPages: number;\n  pageItems: number[];\n  firstPage: () => void;\n  previousPage: () => void;\n  nextPage: () => void;\n  lastPage: () => void;\n  goToPage: (page: number) => void;\n  canPreviousPage: boolean;\n  canNextPage: boolean;\n}\n\n/**\n * A hook for pagination\n * @param props Pagination configuration\n * @returns Pagination state and actions\n */\nexport function usePagination({\n  totalItems,\n  initialPage = 1,\n  pageSize = 10,\n  siblingCount = 1,\n}: UsePaginationProps): UsePaginationReturn {\n  const [currentPage, setCurrentPage] = React.useState(initialPage);\n\n  const totalPages = Math.ceil(totalItems / pageSize);\n\n  // Reset current page if total pages changes\n  React.useEffect(() => {\n    if (currentPage > totalPages) {\n      setCurrentPage(totalPages || 1);\n    }\n  }, [currentPage, totalPages]);\n\n  // Generate page items array with ellipsis\n  const pageItems = React.useMemo(() => {\n    const totalPageNumbers = siblingCount * 2 + 3; // siblings + first + current + last\n\n    // If the number of pages is less than the page numbers we want to show\n    if (totalPageNumbers >= totalPages) {\n      return Array.from({ length: totalPages }, (_, i) => i + 1);\n    }\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages);\n\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPages - 1;\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = 1 + 2 * siblingCount;\n      const leftRange = Array.from({ length: leftItemCount }, (_, i) => i + 1);\n\n      return [...leftRange, -1, totalPages];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = 1 + 2 * siblingCount;\n      const rightRange = Array.from(\n        { length: rightItemCount },\n        (_, i) => totalPages - rightItemCount + i + 1,\n      );\n\n      return [1, -1, ...rightRange];\n    }\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      const middleRange = Array.from(\n        { length: rightSiblingIndex - leftSiblingIndex + 1 },\n        (_, i) => leftSiblingIndex + i,\n      );\n\n      return [1, -1, ...middleRange, -1, totalPages];\n    }\n\n    return [];\n  }, [currentPage, siblingCount, totalPages]);\n\n  const canPreviousPage = currentPage > 1;\n  const canNextPage = currentPage < totalPages;\n\n  const firstPage = React.useCallback(() => setCurrentPage(1), []);\n  const previousPage = React.useCallback(\n    () => setCurrentPage((page) => Math.max(page - 1, 1)),\n    [],\n  );\n  const nextPage = React.useCallback(\n    () => setCurrentPage((page) => Math.min(page + 1, totalPages)),\n    [totalPages],\n  );\n  const lastPage = React.useCallback(\n    () => setCurrentPage(totalPages),\n    [totalPages],\n  );\n  const goToPage = React.useCallback(\n    (page: number) => setCurrentPage(Math.min(Math.max(page, 1), totalPages)),\n    [totalPages],\n  );\n\n  return {\n    currentPage,\n    totalPages,\n    pageItems,\n    firstPage,\n    previousPage,\n    nextPage,\n    lastPage,\n    goToPage,\n    canPreviousPage,\n    canNextPage,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-pagination",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-pagination.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\ninterface UsePaginationProps {\r\n  totalItems: number;\r\n  initialPage?: number;\r\n  pageSize?: number;\r\n  siblingCount?: number;\r\n}\r\n\r\ninterface UsePaginationReturn {\r\n  currentPage: number;\r\n  totalPages: number;\r\n  pageItems: number[];\r\n  firstPage: () => void;\r\n  previousPage: () => void;\r\n  nextPage: () => void;\r\n  lastPage: () => void;\r\n  goToPage: (page: number) => void;\r\n  canPreviousPage: boolean;\r\n  canNextPage: boolean;\r\n}\r\n\r\n/**\r\n * A hook for pagination\r\n * @param props Pagination configuration\r\n * @returns Pagination state and actions\r\n */\r\nexport function usePagination({\r\n  totalItems,\r\n  initialPage = 1,\r\n  pageSize = 10,\r\n  siblingCount = 1,\r\n}: UsePaginationProps): UsePaginationReturn {\r\n  const [currentPage, setCurrentPage] = React.useState(initialPage);\r\n\r\n  const totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n  // Reset current page if total pages changes\r\n  React.useEffect(() => {\r\n    if (currentPage > totalPages) {\r\n      setCurrentPage(totalPages || 1);\r\n    }\r\n  }, [currentPage, totalPages]);\r\n\r\n  // Generate page items array with ellipsis\r\n  const pageItems = React.useMemo(() => {\r\n    const totalPageNumbers = siblingCount * 2 + 3; // siblings + first + current + last\r\n\r\n    // If the number of pages is less than the page numbers we want to show\r\n    if (totalPageNumbers >= totalPages) {\r\n      return Array.from({ length: totalPages }, (_, i) => i + 1);\r\n    }\r\n\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages);\r\n\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPages - 1;\r\n\r\n    if (!shouldShowLeftDots && shouldShowRightDots) {\r\n      const leftItemCount = 1 + 2 * siblingCount;\r\n      const leftRange = Array.from({ length: leftItemCount }, (_, i) => i + 1);\r\n\r\n      return [...leftRange, -1, totalPages];\r\n    }\r\n\r\n    if (shouldShowLeftDots && !shouldShowRightDots) {\r\n      const rightItemCount = 1 + 2 * siblingCount;\r\n      const rightRange = Array.from(\r\n        { length: rightItemCount },\r\n        (_, i) => totalPages - rightItemCount + i + 1,\r\n      );\r\n\r\n      return [1, -1, ...rightRange];\r\n    }\r\n\r\n    if (shouldShowLeftDots && shouldShowRightDots) {\r\n      const middleRange = Array.from(\r\n        { length: rightSiblingIndex - leftSiblingIndex + 1 },\r\n        (_, i) => leftSiblingIndex + i,\r\n      );\r\n\r\n      return [1, -1, ...middleRange, -1, totalPages];\r\n    }\r\n\r\n    return [];\r\n  }, [currentPage, siblingCount, totalPages]);\r\n\r\n  const canPreviousPage = currentPage > 1;\r\n  const canNextPage = currentPage < totalPages;\r\n\r\n  const firstPage = React.useCallback(() => setCurrentPage(1), []);\r\n  const previousPage = React.useCallback(\r\n    () => setCurrentPage((page) => Math.max(page - 1, 1)),\r\n    [],\r\n  );\r\n  const nextPage = React.useCallback(\r\n    () => setCurrentPage((page) => Math.min(page + 1, totalPages)),\r\n    [totalPages],\r\n  );\r\n  const lastPage = React.useCallback(\r\n    () => setCurrentPage(totalPages),\r\n    [totalPages],\r\n  );\r\n  const goToPage = React.useCallback(\r\n    (page: number) => setCurrentPage(Math.min(Math.max(page, 1), totalPages)),\r\n    [totalPages],\r\n  );\r\n\r\n  return {\r\n    currentPage,\r\n    totalPages,\r\n    pageItems,\r\n    firstPage,\r\n    previousPage,\r\n    nextPage,\r\n    lastPage,\r\n    goToPage,\r\n    canPreviousPage,\r\n    canNextPage,\r\n  };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
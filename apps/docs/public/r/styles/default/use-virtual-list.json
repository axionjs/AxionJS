{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-virtual-list",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-virtual-list.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\ninterface UseVirtualListOptions {\r\n  itemHeight: number;\r\n  overscan?: number;\r\n}\r\n\r\ninterface UseVirtualListReturn<T> {\r\n  virtualItems: Array<{\r\n    index: number;\r\n    start: number;\r\n    end: number;\r\n    item: T;\r\n  }>;\r\n  totalHeight: number;\r\n  scrollToIndex: (index: number) => void;\r\n}\r\n\r\n/**\r\n * A hook for virtualizing long lists\r\n * @param items The list items\r\n * @param options Configuration options\r\n * @returns Virtual list state and actions\r\n */\r\nexport function useVirtualList<T>(\r\n  items: T[],\r\n  { itemHeight, overscan = 3 }: UseVirtualListOptions,\r\n): UseVirtualListReturn<T> {\r\n  const [scrollTop, setScrollTop] = React.useState(0);\r\n  const [containerHeight, setContainerHeight] = React.useState(0);\r\n  const containerRef = React.useRef<HTMLElement | null>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n\r\n    const resizeObserver = new ResizeObserver((entries) => {\r\n      const { height } = entries[0].contentRect;\r\n      setContainerHeight(height);\r\n    });\r\n\r\n    resizeObserver.observe(container);\r\n\r\n    const handleScroll = () => {\r\n      setScrollTop(container.scrollTop);\r\n    };\r\n\r\n    container.addEventListener(\"scroll\", handleScroll);\r\n    setContainerHeight(container.clientHeight);\r\n\r\n    return () => {\r\n      container.removeEventListener(\"scroll\", handleScroll);\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const totalHeight = items.length * itemHeight;\r\n\r\n  const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\r\n  const endIndex = Math.min(\r\n    items.length - 1,\r\n    Math.floor((scrollTop + containerHeight) / itemHeight) + overscan,\r\n  );\r\n\r\n  const virtualItems = React.useMemo(() => {\r\n    return items.slice(startIndex, endIndex + 1).map((item, index) => {\r\n      const virtualIndex = startIndex + index;\r\n      return {\r\n        index: virtualIndex,\r\n        start: virtualIndex * itemHeight,\r\n        end: (virtualIndex + 1) * itemHeight,\r\n        item,\r\n      };\r\n    });\r\n  }, [startIndex, endIndex, items, itemHeight]);\r\n\r\n  const scrollToIndex = React.useCallback(\r\n    (index: number) => {\r\n      if (containerRef.current) {\r\n        containerRef.current.scrollTop = index * itemHeight;\r\n      }\r\n    },\r\n    [itemHeight],\r\n  );\r\n\r\n  return {\r\n    virtualItems,\r\n    totalHeight,\r\n    scrollToIndex,\r\n  };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
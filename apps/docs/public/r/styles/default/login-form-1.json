{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "login-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A login form component.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card",
    "checkbox",
    "use-toast",
    "password-input"
  ],
  "files": [
    {
      "path": "blocks/login-form-1.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useId } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { AtSignIcon, Loader2, ArrowRight } from \"lucide-react\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\nimport PasswordInput from \"@/registry/default/ui/password-input\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport { cn } from \"@/lib/utils\";\n\n// Define login form validation schema\nconst formSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n  password: z\n    .string()\n    .min(8, { message: \"Password must be at least 8 characters\" }),\n  rememberMe: z.boolean().optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function LoginForm1({\n  onLogin,\n  redirectTo = \"/dashboard\",\n  onSocialLogin,\n  formAction,\n  signupUrl = \"/signup\",\n  forgotPasswordUrl = \"/reset-password\",\n  socialProviders = [],\n  welcomeText = \"Welcome back\",\n  descriptionText = \"Enter your credentials to access your account\",\n  showRememberMe = true,\n  className,\n}: {\n  onLogin?: (values: FormValues) => Promise<void>;\n  redirectTo?: string;\n  onSocialLogin?: (provider: string) => Promise<void>;\n  formAction?: string;\n  signupUrl?: string;\n  forgotPasswordUrl?: string;\n  socialProviders?: { id: string; name: string; icon: React.ReactNode }[];\n  welcomeText?: string;\n  descriptionText?: string;\n  showRememberMe?: boolean;\n  className?: string;\n}) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [isPending, setIsPending] = React.useState(false);\n  const [rememberMe, setRememberMe] = React.useState(false);\n\n  const emailId = useId();\n  const passwordId = useId();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n    mode: \"onBlur\",\n  });\n\n  // Handle social login\n  const handleSocialLogin = async (providerId: string) => {\n    try {\n      setIsPending(true);\n\n      if (onSocialLogin) {\n        await onSocialLogin(providerId);\n      } else {\n        // Simulate API call for social login\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        console.log(`Logging in with ${providerId}`);\n\n        toast({\n          title: \"Social login\",\n          description: `Logged in with ${providerId}`,\n        });\n\n        router.push(redirectTo);\n      }\n    } catch (error) {\n      console.error(`Social login error with ${providerId}:`, error);\n\n      toast({\n        title: \"Login failed\",\n        description: `Could not log in with ${providerId}. Please try again.`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsPending(false);\n    }\n  };\n\n  // Handle form submission\n  async function onSubmit(values: FormValues) {\n    try {\n      setIsPending(true);\n\n      if (onLogin) {\n        // Use the provided login function\n        await onLogin(values);\n      } else {\n        // Simulate API call\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(\"Login values:\", values);\n\n        toast({\n          title: \"Login successful\",\n          description: \"You have been logged in successfully.\",\n        });\n\n        router.push(redirectTo);\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n\n      toast({\n        title: \"Login failed\",\n        description: \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsPending(false);\n    }\n  }\n\n  return (\n    <Card className={cn(\"w-full max-w-md mx-auto shadow-md\", className)}>\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold text-center\">\n          {welcomeText}\n        </CardTitle>\n        <CardDescription className=\"text-center\">\n          {descriptionText}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form\n            onSubmit={form.handleSubmit(onSubmit)}\n            className=\"space-y-4\"\n            action={formAction}\n            noValidate\n          >\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel htmlFor={emailId}>Email</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        id={emailId}\n                        placeholder=\"name@example.com\"\n                        className=\"peer ps-9\"\n                        {...field}\n                        autoComplete=\"email\"\n                        type=\"email\"\n                        aria-required=\"true\"\n                      />\n                      <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                        <AtSignIcon size={16} aria-hidden=\"true\" />\n                      </div>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex items-center justify-between\">\n                    <FormLabel htmlFor={passwordId}>Password</FormLabel>\n                    <Link\n                      href={forgotPasswordUrl}\n                      className=\"text-sm text-primary hover:underline\"\n                      tabIndex={-1}\n                    >\n                      Forgot password?\n                    </Link>\n                  </div>\n                  <FormControl>\n                    <PasswordInput\n                      id={passwordId}\n                      value={field.value}\n                      onChange={(value) => field.onChange(value)}\n                      error={form.formState.errors.password?.message}\n                      autoComplete=\"current-password\"\n                      aria-required=\"true\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            {showRememberMe && (\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"remember-me\"\n                  checked={rememberMe}\n                  onCheckedChange={(checked) => {\n                    if (typeof checked === \"boolean\") {\n                      setRememberMe(checked);\n                      form.setValue(\"rememberMe\", checked);\n                    }\n                  }}\n                />\n                <label\n                  htmlFor=\"remember-me\"\n                  className=\"text-sm font-medium leading-none cursor-pointer\"\n                >\n                  Remember me\n                </label>\n              </div>\n            )}\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isPending}\n              aria-label=\"Sign in to your account\"\n            >\n              {isPending ? (\n                <>\n                  <Loader2\n                    className=\"mr-2 h-4 w-4 animate-spin\"\n                    aria-hidden=\"true\"\n                  />\n                  <span>Signing in...</span>\n                </>\n              ) : (\n                <>\n                  <span>Sign in</span>\n                  <ArrowRight className=\"ml-2 h-4 w-4\" aria-hidden=\"true\" />\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n      <CardFooter className=\"flex flex-col space-y-4\">\n        <div className=\"relative w-full\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <span className=\"w-full border-t\" />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">\n              Or continue with\n            </span>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 gap-4 w-full\">\n          {socialProviders.map((provider) => (\n            <Button\n              key={provider.id}\n              variant=\"outline\"\n              type=\"button\"\n              className={cn(\n                \"flex items-center justify-center gap-2 transition-colors\",\n                provider.className,\n              )}\n              onClick={() => handleSocialLogin(provider.id)}\n              disabled={isPending}\n              aria-label={`Sign in with ${provider.name}`}\n            >\n              {provider.icon}\n              <span className=\"hidden sm:inline\">{provider.name}</span>\n            </Button>\n          ))}\n        </div>\n        <div className=\"text-center text-sm mt-4\">\n          Don&apos;t have an account?{\" \"}\n          <Link\n            href={signupUrl}\n            className=\"text-primary hover:underline font-medium\"\n          >\n            Sign up\n          </Link>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n\nexport default LoginForm1;\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
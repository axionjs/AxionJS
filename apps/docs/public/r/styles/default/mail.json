{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "mail",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Mail functions for sending emails.",
  "dependencies": [
    "nodemailer",
    "@react-email/components",
    "@react-email/render"
  ],
  "registryDependencies": [
    "verification-email",
    "reset-password-email",
    "two-factor-email"
  ],
  "files": [
    {
      "path": "auth/lib/mail.ts",
      "content": "import nodemailer from \"nodemailer\";\nimport { render } from \"@react-email/render\";\nimport VerificationEmail from \"@/registry/default/auth/emails/verification-email\";\nimport ResetPasswordEmail from \"@/registry/default/auth/emails/reset-password-email\";\nimport TwoFactorAuthEmail from \"@/registry/default/auth/emails/two-factor-email\";\n\nexport const transporter = nodemailer.createTransport({\n  host: process.env.EMAIL_SERVER_HOST,\n  port: Number(process.env.EMAIL_SERVER_PORT),\n  auth: {\n    user: process.env.EMAIL_SERVER_USER,\n    pass: process.env.EMAIL_SERVER_PASSWORD,\n  },\n});\n\nexport const sendVerificationEmail = async (\n  email: string,\n  token: string,\n  isEmailChange = false,\n) => {\n  // Add emailChange parameter to the URL for email changes\n  const confirmLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/verify?token=${token}${isEmailChange ? \"&emailChange=true\" : \"\"}`;\n\n  const emailHtml = await render(VerificationEmail({ confirmLink }));\n\n  await transporter.sendMail({\n    from: `AxionJS - Test <${process.env.EMAIL_FROM}>`,\n    to: email,\n    subject: isEmailChange\n      ? \"Confirm your new email address\"\n      : \"Confirm your email address\",\n    html: emailHtml,\n  });\n};\n\nexport const sendPasswordResetEmail = async (email: string, token: string) => {\n  const resetLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/new-password?token=${token}`;\n\n  const emailHtml = await render(ResetPasswordEmail({ resetLink }));\n\n  await transporter.sendMail({\n    from: `AxionJS - Test <${process.env.EMAIL_FROM}>`,\n    to: email,\n    subject: \"Reset your password\",\n    html: emailHtml,\n  });\n};\n\nexport const sendTwoFactorTokenEmail = async (email: string, token: string) => {\n  const emailHtml = await render(\n    TwoFactorAuthEmail({ verificationToken: token }),\n  );\n\n  await transporter.sendMail({\n    from: `AxionJS - Test <${process.env.EMAIL_FROM}>`,\n    to: email,\n    subject: \"2FA Verification Code\",\n    html: emailHtml,\n  });\n};\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-infinite-scroll",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-infinite-scroll.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ninterface UseInfiniteScrollOptions {\n  threshold?: number;\n  rootMargin?: string;\n  enabled?: boolean;\n}\n\n/**\n * A hook for implementing infinite scrolling\n * @param callback Function to call when the bottom is reached\n * @param options Configuration options\n * @returns A ref to attach to the scrollable element\n */\nexport function useInfiniteScroll(\n  callback: () => void,\n  {\n    threshold = 0.8,\n    rootMargin = \"0px\",\n    enabled = true,\n  }: UseInfiniteScrollOptions = {},\n): React.RefObject<HTMLElement> {\n  const ref = React.useRef<HTMLElement>(null);\n\n  React.useEffect(() => {\n    if (!enabled || typeof window === \"undefined\") return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n          callback();\n        }\n      },\n      {\n        root: null,\n        rootMargin,\n        threshold,\n      },\n    );\n\n    const currentRef = ref.current;\n\n    if (currentRef) {\n      observer.observe(currentRef);\n    }\n\n    return () => {\n      if (currentRef) {\n        observer.unobserve(currentRef);\n      }\n    };\n  }, [callback, rootMargin, threshold, enabled]);\n\n  return ref;\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
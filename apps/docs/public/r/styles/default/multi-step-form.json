{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "multi-step-form",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A multi-step form with progress tracking and validation.",
  "dependencies": [
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "avatar",
    "form",
    "switch",
    "input",
    "textarea",
    "radio-group",
    "select",
    "separator",
    "progress",
    "use-toast"
  ],
  "files": [
    {
      "path": "dynamic-components/multi-step-form/actions/multi-step-form-actions.ts",
      "content": "\"use server\";\r\n\r\nimport { revalidatePath } from \"next/cache\";\r\nimport type { OnboardingFormValues } from \"@/registry/default/dynamic-components/multi-step-form/components/onboarding-wizard\";\r\nimport { db } from \"@/registry/default/lib/db\";\r\n\r\nexport async function saveOnboardingData(data: OnboardingFormValues) {\r\n  try {\r\n    // In actual implementation, you would have the user ID from the session\r\n    // For this example, we'll use a placeholder ID\r\n    const userId = \"user-placeholder-id\";\r\n\r\n    // Extract preferences from the form data\r\n    const preferences = {\r\n      theme: data.theme,\r\n      emailFrequency: data.emailFrequency,\r\n      marketingEmails: data.marketingEmails,\r\n      notifications: {\r\n        email: data.emailNotifications,\r\n        push: data.pushNotifications,\r\n        activitySummary: data.activitySummary,\r\n        newFeatures: data.newFeatures,\r\n        securityAlerts: data.securityAlerts,\r\n      },\r\n    };\r\n\r\n    // Update the user profile in the database\r\n    await db.userProfile.upsert({\r\n      where: { id: userId },\r\n      update: {\r\n        name: data.name,\r\n        bio: data.bio || null,\r\n        avatarUrl: data.avatarUrl || null,\r\n        preferences: preferences,\r\n        completedOnboarding: true,\r\n        updatedAt: new Date(),\r\n      },\r\n      create: {\r\n        id: userId,\r\n        email: \"user@example.com\", // This would come from auth\r\n        name: data.name,\r\n        bio: data.bio || null,\r\n        avatarUrl: data.avatarUrl || null,\r\n        preferences: preferences,\r\n        completedOnboarding: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/dashboard\");\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Error saving onboarding data:\", error);\r\n    return { success: false, error: \"Failed to save onboarding data\" };\r\n  }\r\n}\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalThis.prisma = db;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/components/onboarding-wizard.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport {\r\n  Loader2,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  UserIcon,\r\n  Settings,\r\n  BellRing,\r\n  Check,\r\n} from \"lucide-react\";\r\n\r\nimport { Form } from \"@/registry/default/ui/form\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { Progress } from \"@/registry/default/ui/progress\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Separator } from \"@/registry/default/ui/separator\";\r\nimport { saveOnboardingData } from \"@/registry/default/dynamic-components/multi-step-form/actions/multi-step-form-actions\";\r\nimport { PersonalInfoForm } from \"@/registry/default/dynamic-components/multi-step-form/components/personal-info-form\";\r\nimport { PreferencesForm } from \"@/registry/default/dynamic-components/multi-step-form/components/preferences-form\";\r\nimport { AvatarUploadForm } from \"@/registry/default/dynamic-components/multi-step-form/components/avatar-upload-form\";\r\nimport { NotificationsForm } from \"@/registry/default/dynamic-components/multi-step-form/components/notifications-form\";\r\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\r\n\r\n// Define the form validation schema\r\nconst formSchema = z.object({\r\n  // Step 1: Personal Information\r\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\r\n  bio: z\r\n    .string()\r\n    .max(500, { message: \"Bio must not exceed 500 characters\" })\r\n    .optional(),\r\n\r\n  // Step 2: Profile Picture\r\n  avatarUrl: z.string().optional(),\r\n\r\n  // Step 3: Preferences\r\n  theme: z.enum([\"light\", \"dark\", \"system\"], {\r\n    required_error: \"Please select a theme preference\",\r\n  }),\r\n  emailFrequency: z.enum([\"daily\", \"weekly\", \"monthly\", \"never\"], {\r\n    required_error: \"Please select an email frequency\",\r\n  }),\r\n  marketingEmails: z.boolean().default(false),\r\n\r\n  // Step 4: Notifications\r\n  emailNotifications: z.boolean().default(true),\r\n  pushNotifications: z.boolean().default(true),\r\n  activitySummary: z.boolean().default(true),\r\n  newFeatures: z.boolean().default(true),\r\n  securityAlerts: z.boolean().default(true),\r\n});\r\n\r\nexport type OnboardingFormValues = z.infer<typeof formSchema>;\r\n\r\ninterface OnboardingWizardProps {\r\n  /**\r\n   * URL to redirect to after successful submission\r\n   */\r\n  redirectUrl?: string;\r\n  /**\r\n   * Custom form action for server-side form processing\r\n   */\r\n  formAction?: string;\r\n  /**\r\n   * Onboarding title\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Custom CSS class for the container\r\n   */\r\n  className?: string;\r\n  /**\r\n   * Initial step to show (1-based)\r\n   */\r\n  initialStep?: number;\r\n  /**\r\n   * Show step indicators\r\n   */\r\n  showStepIndicator?: boolean;\r\n  /**\r\n   * Label for the submission button\r\n   */\r\n  submitButtonLabel?: string;\r\n  /**\r\n   * Function to call when onboarding is complete\r\n   */\r\n  onComplete?: (data: OnboardingFormValues) => void;\r\n}\r\n\r\nexport function OnboardingWizard({\r\n  redirectUrl = \"/dashboard\",\r\n  className,\r\n  initialStep = 1,\r\n  showStepIndicator = true,\r\n  submitButtonLabel = \"Complete Setup\",\r\n  onComplete,\r\n}: OnboardingWizardProps) {\r\n  const [step, setStep] = React.useState(initialStep);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\r\n  const { toast } = useToast();\r\n  const router = useRouter();\r\n\r\n  const totalSteps = 4; // Define the total number of steps\r\n  const progressPercentage = ((step - 1) / (totalSteps - 1)) * 100; // Calculate progress percentage\r\n\r\n  const formRef = React.useRef<HTMLFormElement>(null);\r\n  const step1Ref = React.useRef<HTMLDivElement>(null);\r\n  const step2Ref = React.useRef<HTMLDivElement>(null);\r\n  const step3Ref = React.useRef<HTMLDivElement>(null);\r\n  const step4Ref = React.useRef<HTMLDivElement>(null);\r\n  const successRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const form = useForm<OnboardingFormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      name: \"\",\r\n      bio: \"\",\r\n      avatarUrl: \"\",\r\n      theme: \"system\",\r\n      emailFrequency: \"weekly\",\r\n      marketingEmails: false,\r\n      emailNotifications: true,\r\n      pushNotifications: true,\r\n      activitySummary: true,\r\n      newFeatures: true,\r\n      securityAlerts: true,\r\n    },\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  // Step validation fields\r\n  const stepValidationFields = {\r\n    1: [\"name\", \"bio\"],\r\n    2: [\"avatarUrl\"],\r\n    3: [\"theme\", \"emailFrequency\", \"marketingEmails\"],\r\n    4: [\r\n      \"emailNotifications\",\r\n      \"pushNotifications\",\r\n      \"activitySummary\",\r\n      \"newFeatures\",\r\n      \"securityAlerts\",\r\n    ],\r\n  };\r\n\r\n  // Step titles and icons\r\n  const steps = [\r\n    {\r\n      id: 1,\r\n      title: \"Personal Info\",\r\n      icon: (\r\n        <UserIcon className=\"mr-2 h-5 w-5 text-primary\" aria-hidden=\"true\" />\r\n      ),\r\n      ref: step1Ref,\r\n      isOptional: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Profile Picture\",\r\n      icon: (\r\n        <svg\r\n          className=\"mr-2 h-5 w-5 text-primary\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\r\n          />\r\n        </svg>\r\n      ),\r\n      ref: step2Ref,\r\n      isOptional: true,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Preferences\",\r\n      icon: (\r\n        <Settings className=\"mr-2 h-5 w-5 text-primary\" aria-hidden=\"true\" />\r\n      ),\r\n      ref: step3Ref,\r\n      isOptional: false,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Notifications\",\r\n      icon: (\r\n        <BellRing className=\"mr-2 h-5 w-5 text-primary\" aria-hidden=\"true\" />\r\n      ),\r\n      ref: step4Ref,\r\n      isOptional: true,\r\n    },\r\n  ];\r\n\r\n  // Handle next step\r\n  const nextStep = async () => {\r\n    // Validate current step fields\r\n    const isValid = await form.trigger(\r\n      stepValidationFields[step as keyof typeof stepValidationFields] as any,\r\n    );\r\n\r\n    if (isValid || steps[step - 1].isOptional) {\r\n      // Check if we're already on the last step to prevent auto-advancing\r\n      if (step < totalSteps) {\r\n        // Move to next step\r\n        setStep((prev) => prev + 1);\r\n\r\n        // Focus management for screen readers\r\n        setTimeout(() => {\r\n          const nextStepRef = steps[step]?.ref.current;\r\n          if (nextStepRef) {\r\n            nextStepRef.focus();\r\n          }\r\n        }, 100);\r\n\r\n        // Scroll to top of form\r\n        if (formRef.current) {\r\n          formRef.current.scrollIntoView({\r\n            behavior: \"smooth\",\r\n            block: \"start\",\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle previous step\r\n  const prevStep = () => {\r\n    setStep((prev) => prev - 1);\r\n\r\n    // Focus management for screen readers\r\n    setTimeout(() => {\r\n      const prevStepRef = steps[step - 2]?.ref.current;\r\n      if (prevStepRef) {\r\n        prevStepRef.focus();\r\n      }\r\n    }, 100);\r\n\r\n    // Scroll to top of form\r\n    if (formRef.current) {\r\n      formRef.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n    }\r\n  };\r\n\r\n  // Handle skip step\r\n  const skipStep = () => {\r\n    // Move to next step without validation\r\n    setStep((prev) => prev + 1);\r\n\r\n    // Focus management for screen readers\r\n    setTimeout(() => {\r\n      const nextStepRef = steps[step]?.ref.current;\r\n      if (nextStepRef) {\r\n        nextStepRef.focus();\r\n      }\r\n    }, 100);\r\n\r\n    // Scroll to top of form\r\n    if (formRef.current) {\r\n      formRef.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n    }\r\n  };\r\n\r\n  const onFormSubmit = async () => {\r\n    try {\r\n      // Validate all fields before submission\r\n      const isValid = await form.trigger();\r\n\r\n      if (!isValid) {\r\n        toast({\r\n          title: \"Validation Error\",\r\n          description: \"Please check the form for errors.\",\r\n          variant: \"destructive\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      setIsLoading(true);\r\n\r\n      // Get form data\r\n      const data = form.getValues();\r\n\r\n      // Save onboarding data\r\n      await saveOnboardingData(data);\r\n\r\n      if (onComplete) {\r\n        onComplete(data);\r\n      }\r\n\r\n      setIsSubmitted(true);\r\n\r\n      toast({\r\n        title: \"Profile setup complete!\",\r\n        description: \"Your profile has been successfully set up.\",\r\n      });\r\n\r\n      // Focus success message for accessibility\r\n      setTimeout(() => {\r\n        if (successRef.current) {\r\n          successRef.current.focus();\r\n        }\r\n      }, 100);\r\n\r\n      // Redirect if specified\r\n      if (redirectUrl) {\r\n        setTimeout(() => {\r\n          router.push(redirectUrl);\r\n        }, 2000);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Submission error:\", error);\r\n\r\n      toast({\r\n        title: \"Submission failed\",\r\n        description:\r\n          \"There was a problem saving your profile. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"w-full max-w-2xl mx-auto bg-background text-foreground rounded-lg border shadow-md p-6\",\r\n        className,\r\n      )}\r\n    >\r\n      {/* Step indicator */}\r\n      {showStepIndicator && !isSubmitted && (\r\n        <div className=\"mb-8\">\r\n          {/* Progress bar */}\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between text-sm\">\r\n              <span className=\"text-primary font-medium\">\r\n                Step {step} of {totalSteps}\r\n              </span>\r\n              <span className=\"text-muted-foreground\">\r\n                {steps[step - 1].title}\r\n              </span>\r\n            </div>\r\n            <Progress value={progressPercentage} className=\"h-2\" />\r\n          </div>\r\n\r\n          {/* Step circles */}\r\n          <div className=\"hidden sm:flex justify-between items-center mt-4\">\r\n            {steps.map((stepItem) => (\r\n              <div key={stepItem.id} className=\"flex flex-col items-center\">\r\n                <div\r\n                  className={cn(\r\n                    \"w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors\",\r\n                    stepItem.id < step\r\n                      ? \"bg-primary text-primary-foreground\"\r\n                      : stepItem.id === step\r\n                        ? \"bg-primary/10 text-primary border-2 border-primary\"\r\n                        : \"bg-muted text-muted-foreground\",\r\n                  )}\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  {stepItem.id < step ? (\r\n                    <Check className=\"h-4 w-4\" />\r\n                  ) : (\r\n                    stepItem.id\r\n                  )}\r\n                </div>\r\n                <span\r\n                  className={cn(\r\n                    \"text-xs mt-1\",\r\n                    stepItem.id === step\r\n                      ? \"text-primary font-medium\"\r\n                      : \"text-muted-foreground\",\r\n                  )}\r\n                >\r\n                  {stepItem.title}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {isSubmitted ? (\r\n        <div\r\n          className=\"text-center space-y-4 py-6\"\r\n          ref={successRef}\r\n          tabIndex={-1}\r\n          role=\"alert\"\r\n          aria-live=\"polite\"\r\n        >\r\n          <div className=\"rounded-full w-16 h-16 bg-primary/20 mx-auto flex items-center justify-center\">\r\n            <Check className=\"w-8 h-8 text-primary\" aria-hidden=\"true\" />\r\n          </div>\r\n          <h3 className=\"text-lg font-medium\">Profile Setup Complete!</h3>\r\n          <p className=\"text-muted-foreground mt-2\">\r\n            Your profile has been set up successfully. You'll be redirected to\r\n            your dashboard shortly.\r\n          </p>\r\n\r\n          <div className=\"mt-4 bg-muted/50 rounded-lg p-4 max-w-md mx-auto\">\r\n            <h4 className=\"font-medium text-left mb-2\">Profile Summary</h4>\r\n            <div className=\"space-y-3 text-sm text-left\">\r\n              <div>\r\n                <p className=\"text-muted-foreground\">Name:</p>\r\n                <p className=\"font-medium\">{form.getValues().name}</p>\r\n              </div>\r\n              {form.getValues().bio && (\r\n                <div>\r\n                  <p className=\"text-muted-foreground\">Bio:</p>\r\n                  <p className=\"font-medium\">{form.getValues().bio}</p>\r\n                </div>\r\n              )}\r\n              <div>\r\n                <p className=\"text-muted-foreground\">Theme Preference:</p>\r\n                <p className=\"font-medium capitalize\">\r\n                  {form.getValues().theme}\r\n                </p>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-muted-foreground\">Email Frequency:</p>\r\n                <p className=\"font-medium capitalize\">\r\n                  {form.getValues().emailFrequency}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <Form {...form}>\r\n            <div ref={formRef} className=\"space-y-6\">\r\n              {/* Step 1: Personal Information */}\r\n              {step === 1 && (\r\n                <div\r\n                  className=\"space-y-4\"\r\n                  ref={step1Ref}\r\n                  tabIndex={-1}\r\n                  aria-labelledby=\"step1-heading\"\r\n                >\r\n                  <h3\r\n                    id=\"step1-heading\"\r\n                    className=\"text-lg font-medium flex items-center\"\r\n                  >\r\n                    {steps[0].icon}\r\n                    Personal Information\r\n                  </h3>\r\n                  <Separator className=\"my-4\" />\r\n\r\n                  <PersonalInfoForm form={form} />\r\n                </div>\r\n              )}\r\n\r\n              {/* Step 2: Profile Picture */}\r\n              {step === 2 && (\r\n                <div\r\n                  className=\"space-y-4\"\r\n                  ref={step2Ref}\r\n                  tabIndex={-1}\r\n                  aria-labelledby=\"step2-heading\"\r\n                >\r\n                  <h3\r\n                    id=\"step2-heading\"\r\n                    className=\"text-lg font-medium flex items-center\"\r\n                  >\r\n                    {steps[1].icon}\r\n                    Profile Picture\r\n                  </h3>\r\n                  <Separator className=\"my-4\" />\r\n\r\n                  <AvatarUploadForm form={form} />\r\n                </div>\r\n              )}\r\n\r\n              {/* Step 3: Preferences */}\r\n              {step === 3 && (\r\n                <div\r\n                  className=\"space-y-4\"\r\n                  ref={step3Ref}\r\n                  tabIndex={-1}\r\n                  aria-labelledby=\"step3-heading\"\r\n                >\r\n                  <h3\r\n                    id=\"step3-heading\"\r\n                    className=\"text-lg font-medium flex items-center\"\r\n                  >\r\n                    {steps[2].icon}\r\n                    Preferences\r\n                  </h3>\r\n                  <Separator className=\"my-4\" />\r\n\r\n                  <PreferencesForm form={form} />\r\n                </div>\r\n              )}\r\n\r\n              {/* Step 4: Notifications */}\r\n              {step === 4 && (\r\n                <div\r\n                  className=\"space-y-4\"\r\n                  ref={step4Ref}\r\n                  tabIndex={-1}\r\n                  aria-labelledby=\"step4-heading\"\r\n                >\r\n                  <h3\r\n                    id=\"step4-heading\"\r\n                    className=\"text-lg font-medium flex items-center\"\r\n                  >\r\n                    {steps[3].icon}\r\n                    Notifications\r\n                  </h3>\r\n                  <Separator className=\"my-4\" />\r\n\r\n                  <NotificationsForm form={form} />\r\n                </div>\r\n              )}\r\n\r\n              {/* Navigation buttons */}\r\n              <div className=\"flex justify-between mt-8\">\r\n                {step > 1 ? (\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    onClick={prevStep}\r\n                    className=\"flex items-center\"\r\n                  >\r\n                    <ChevronLeft className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n                    Previous\r\n                  </Button>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n\r\n                <div className=\"flex gap-2\">\r\n                  {steps[step - 1].isOptional && (\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"ghost\"\r\n                      onClick={skipStep}\r\n                      className=\"flex items-center\"\r\n                    >\r\n                      Skip\r\n                    </Button>\r\n                  )}\r\n\r\n                  {step < totalSteps ? (\r\n                    <Button\r\n                      type=\"button\"\r\n                      onClick={nextStep}\r\n                      variant=\"default\"\r\n                      className=\"flex items-center\"\r\n                    >\r\n                      Next\r\n                      <ChevronRight\r\n                        className=\"ml-2 h-4 w-4\"\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                    </Button>\r\n                  ) : (\r\n                    <Button\r\n                      type=\"button\"\r\n                      onClick={onFormSubmit}\r\n                      disabled={isLoading}\r\n                      className=\"flex items-center\"\r\n                    >\r\n                      {isLoading ? (\r\n                        <>\r\n                          <Loader2\r\n                            className=\"mr-2 h-4 w-4 animate-spin\"\r\n                            aria-hidden=\"true\"\r\n                          />\r\n                          <span>Submitting...</span>\r\n                        </>\r\n                      ) : (\r\n                        submitButtonLabel\r\n                      )}\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/components/avatar-upload-form.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport type { UseFormReturn } from \"react-hook-form\";\r\nimport { Upload, X } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Avatar,\r\n  AvatarFallback,\r\n  AvatarImage,\r\n} from \"@/registry/default/ui/avatar\";\r\nimport {\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\";\r\nimport type { OnboardingFormValues } from \"@/registry/default/dynamic-components/multi-step-form/components/onboarding-wizard\";\r\n\r\ninterface AvatarUploadFormProps {\r\n  form: UseFormReturn<OnboardingFormValues>;\r\n}\r\n\r\nexport function AvatarUploadForm({ form }: AvatarUploadFormProps) {\r\n  const [previewUrl, setPreviewUrl] = React.useState<string | null>(\r\n    form.getValues().avatarUrl || null,\r\n  );\r\n\r\n  // In a real implementation, this would upload to a storage service\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    // Create a preview URL\r\n    const url = URL.createObjectURL(file);\r\n    setPreviewUrl(url);\r\n\r\n    // In actual implementation, you would upload the file to a storage service\r\n    // and then set the returned URL as the avatarUrl\r\n    form.setValue(\"avatarUrl\", url);\r\n  };\r\n\r\n  const clearAvatar = () => {\r\n    setPreviewUrl(null);\r\n    form.setValue(\"avatarUrl\", \"\");\r\n  };\r\n\r\n  return (\r\n    <FormField\r\n      control={form.control}\r\n      name=\"avatarUrl\"\r\n      render={({ field }) => (\r\n        <FormItem>\r\n          <FormLabel>Profile Picture</FormLabel>\r\n          <FormControl>\r\n            <div className=\"flex flex-col items-center gap-4\">\r\n              <Avatar className=\"h-24 w-24\">\r\n                <AvatarImage src={previewUrl || \"\"} />\r\n                <AvatarFallback className=\"text-lg\">\r\n                  {form.getValues().name\r\n                    ? form.getValues().name.charAt(0).toUpperCase()\r\n                    : \"?\"}\r\n                </AvatarFallback>\r\n              </Avatar>\r\n\r\n              <div className=\"flex gap-2\">\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"outline\"\r\n                  onClick={() =>\r\n                    document.getElementById(\"avatar-upload\")?.click()\r\n                  }\r\n                >\r\n                  <Upload className=\"mr-2 h-4 w-4\" />\r\n                  Upload\r\n                </Button>\r\n\r\n                {previewUrl && (\r\n                  <Button type=\"button\" variant=\"outline\" onClick={clearAvatar}>\r\n                    <X className=\"mr-2 h-4 w-4\" />\r\n                    Remove\r\n                  </Button>\r\n                )}\r\n\r\n                <input\r\n                  id=\"avatar-upload\"\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  className=\"hidden\"\r\n                  onChange={handleFileChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </FormControl>\r\n          <FormDescription className=\"text-center\">\r\n            Upload a profile picture. This will be displayed on your profile.\r\n          </FormDescription>\r\n          <FormMessage />\r\n        </FormItem>\r\n      )}\r\n    />\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/components/notifications-form.tsx",
      "content": "\"use client\";\r\nimport type { UseFormReturn } from \"react-hook-form\";\r\nimport { Switch } from \"@/registry/default/ui/switch\";\r\nimport {\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n} from \"@/registry/default/ui/form\";\r\nimport type { OnboardingFormValues } from \"@/registry/default/dynamic-components/multi-step-form/components/onboarding-wizard\";\r\n\r\ninterface NotificationsFormProps {\r\n  form: UseFormReturn<OnboardingFormValues>;\r\n}\r\n\r\nexport function NotificationsForm({ form }: NotificationsFormProps) {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <FormField\r\n        control={form.control}\r\n        name=\"emailNotifications\"\r\n        render={({ field }) => (\r\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\r\n            <div className=\"space-y-0.5\">\r\n              <FormLabel>Email Notifications</FormLabel>\r\n              <FormDescription>\r\n                Receive notifications via email.\r\n              </FormDescription>\r\n            </div>\r\n            <FormControl>\r\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\r\n            </FormControl>\r\n          </FormItem>\r\n        )}\r\n      />\r\n\r\n      <FormField\r\n        control={form.control}\r\n        name=\"pushNotifications\"\r\n        render={({ field }) => (\r\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\r\n            <div className=\"space-y-0.5\">\r\n              <FormLabel>Push Notifications</FormLabel>\r\n              <FormDescription>\r\n                Receive notifications on your device.\r\n              </FormDescription>\r\n            </div>\r\n            <FormControl>\r\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\r\n            </FormControl>\r\n          </FormItem>\r\n        )}\r\n      />\r\n\r\n      <FormField\r\n        control={form.control}\r\n        name=\"activitySummary\"\r\n        render={({ field }) => (\r\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\r\n            <div className=\"space-y-0.5\">\r\n              <FormLabel>Activity Summary</FormLabel>\r\n              <FormDescription>\r\n                Receive weekly summaries of your activity.\r\n              </FormDescription>\r\n            </div>\r\n            <FormControl>\r\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\r\n            </FormControl>\r\n          </FormItem>\r\n        )}\r\n      />\r\n\r\n      <FormField\r\n        control={form.control}\r\n        name=\"newFeatures\"\r\n        render={({ field }) => (\r\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\r\n            <div className=\"space-y-0.5\">\r\n              <FormLabel>New Features</FormLabel>\r\n              <FormDescription>\r\n                Be the first to know about new features.\r\n              </FormDescription>\r\n            </div>\r\n            <FormControl>\r\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\r\n            </FormControl>\r\n          </FormItem>\r\n        )}\r\n      />\r\n\r\n      <FormField\r\n        control={form.control}\r\n        name=\"securityAlerts\"\r\n        render={({ field }) => (\r\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\r\n            <div className=\"space-y-0.5\">\r\n              <FormLabel>Security Alerts</FormLabel>\r\n              <FormDescription>\r\n                Receive alerts about security issues.\r\n              </FormDescription>\r\n            </div>\r\n            <FormControl>\r\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\r\n            </FormControl>\r\n          </FormItem>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/components/personal-info-form.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport type { UseFormReturn } from \"react-hook-form\";\r\nimport { UserIcon, FileText } from \"lucide-react\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Textarea } from \"@/registry/default/ui/textarea\";\r\nimport {\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\";\r\nimport type { OnboardingFormValues } from \"@/registry/default/dynamic-components/multi-step-form/components/onboarding-wizard\";\r\n\r\ninterface PersonalInfoFormProps {\r\n  form: UseFormReturn<OnboardingFormValues>;\r\n}\r\n\r\nexport function PersonalInfoForm({ form }: PersonalInfoFormProps) {\r\n  const nameId = React.useId();\r\n  const bioId = React.useId();\r\n\r\n  return (\r\n    <>\r\n      <FormField\r\n        control={form.control}\r\n        name=\"name\"\r\n        render={({ field }) => (\r\n          <FormItem>\r\n            <FormLabel htmlFor={nameId}>Full Name</FormLabel>\r\n            <FormControl>\r\n              <div className=\"relative\">\r\n                <Input\r\n                  id={nameId}\r\n                  placeholder=\"John Doe\"\r\n                  className=\"peer ps-9\"\r\n                  {...field}\r\n                  autoComplete=\"name\"\r\n                  aria-required=\"true\"\r\n                />\r\n                <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                  <UserIcon size={16} aria-hidden=\"true\" />\r\n                </div>\r\n              </div>\r\n            </FormControl>\r\n            <FormMessage />\r\n          </FormItem>\r\n        )}\r\n      />\r\n\r\n      <FormField\r\n        control={form.control}\r\n        name=\"bio\"\r\n        render={({ field }) => (\r\n          <FormItem>\r\n            <FormLabel htmlFor={bioId}>Bio</FormLabel>\r\n            <FormControl>\r\n              <div className=\"relative\">\r\n                <Textarea\r\n                  id={bioId}\r\n                  placeholder=\"Tell us a bit about yourself\"\r\n                  className=\"resize-none min-h-[120px] ps-9 pt-8\"\r\n                  {...field}\r\n                />\r\n                <div className=\"text-muted-foreground/80 pointer-events-none absolute top-3 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                  <FileText size={16} aria-hidden=\"true\" />\r\n                </div>\r\n              </div>\r\n            </FormControl>\r\n            <FormDescription>\r\n              This will be displayed on your profile\r\n            </FormDescription>\r\n            <FormMessage />\r\n            <div className=\"text-xs text-right text-muted-foreground mt-1\">\r\n              {field.value?.length || 0}/500 characters\r\n            </div>\r\n          </FormItem>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/components/preferences-form.tsx",
      "content": "\"use client\";\r\nimport type { UseFormReturn } from \"react-hook-form\";\r\nimport { Switch } from \"@/registry/default/ui/switch\";\r\nimport { RadioGroup, RadioGroupItem } from \"@/registry/default/ui/radio-group\";\r\nimport {\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport type { OnboardingFormValues } from \"@/registry/default/dynamic-components/multi-step-form/components/onboarding-wizard\";\r\n\r\ninterface PreferencesFormProps {\r\n  form: UseFormReturn<OnboardingFormValues>;\r\n}\r\n\r\nexport function PreferencesForm({ form }: PreferencesFormProps) {\r\n  return (\r\n    <>\r\n      <FormField\r\n        control={form.control}\r\n        name=\"theme\"\r\n        render={({ field }) => (\r\n          <FormItem>\r\n            <FormLabel>Theme Preference</FormLabel>\r\n            <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n              <FormControl>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select a theme preference\" />\r\n                </SelectTrigger>\r\n              </FormControl>\r\n              <SelectContent>\r\n                <SelectItem value=\"light\">Light</SelectItem>\r\n                <SelectItem value=\"dark\">Dark</SelectItem>\r\n                <SelectItem value=\"system\">System</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n            <FormDescription>\r\n              Choose how the application should appear.\r\n            </FormDescription>\r\n            <FormMessage />\r\n          </FormItem>\r\n        )}\r\n      />\r\n\r\n      <FormField\r\n        control={form.control}\r\n        name=\"emailFrequency\"\r\n        render={({ field }) => (\r\n          <FormItem className=\"space-y-3\">\r\n            <FormLabel id=\"email-frequency-label\">\r\n              Email Digest Frequency\r\n            </FormLabel>\r\n            <FormControl>\r\n              <RadioGroup\r\n                onValueChange={field.onChange}\r\n                defaultValue={field.value}\r\n                className=\"flex flex-col space-y-1\"\r\n                aria-labelledby=\"email-frequency-label\"\r\n              >\r\n                {[\r\n                  { value: \"daily\", label: \"Daily\" },\r\n                  { value: \"weekly\", label: \"Weekly\" },\r\n                  { value: \"monthly\", label: \"Monthly\" },\r\n                  { value: \"never\", label: \"Never\" },\r\n                ].map((option) => (\r\n                  <FormItem\r\n                    key={option.value}\r\n                    className=\"flex items-center space-x-3 space-y-0 rounded-md border p-3 hover:bg-muted/50 transition-colors\"\r\n                  >\r\n                    <FormControl>\r\n                      <RadioGroupItem\r\n                        value={option.value}\r\n                        id={`frequency-${option.value}`}\r\n                      />\r\n                    </FormControl>\r\n                    <FormLabel\r\n                      htmlFor={`frequency-${option.value}`}\r\n                      className=\"font-normal cursor-pointer flex-1\"\r\n                    >\r\n                      {option.label}\r\n                    </FormLabel>\r\n                  </FormItem>\r\n                ))}\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <FormMessage />\r\n          </FormItem>\r\n        )}\r\n      />\r\n\r\n      <FormField\r\n        control={form.control}\r\n        name=\"marketingEmails\"\r\n        render={({ field }) => (\r\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\r\n            <div className=\"space-y-0.5\">\r\n              <FormLabel className=\"text-base\">Marketing emails</FormLabel>\r\n              <FormDescription>\r\n                Receive emails about new features and special offers.\r\n              </FormDescription>\r\n            </div>\r\n            <FormControl>\r\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\r\n            </FormControl>\r\n          </FormItem>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/onboarding/page.tsx",
      "content": "import { OnboardingWizard } from \"@/registry/default/dynamic-components/multi-step-form/components/onboarding-wizard\";\r\n\r\nexport default function OnboardingPage() {\r\n  return (\r\n    <div className=\"container py-10\">\r\n      <h1 className=\"text-3xl font-bold text-center mb-8\">\r\n        Complete Your Profile\r\n      </h1>\r\n      <OnboardingWizard\r\n        redirectUrl=\"/dashboard\"\r\n        showStepIndicator={true}\r\n        submitButtonLabel=\"Complete Setup\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(multi-step-form)/onboarding/page.tsx"
    }
  ]
}
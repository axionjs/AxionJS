{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "reset-password-form-2",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A reset password form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "password-input",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/reset-password-form-2.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useId } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport Link from \"next/link\";\r\nimport { Loader2, AtSignIcon, ArrowLeft, Check } from \"lucide-react\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n  FormDescription,\r\n} from \"@/registry/default/ui/form\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport PasswordInput from \"@/registry/default/ui/password-input\";\r\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// Schema for the request step (email only)\r\nconst requestSchema = z.object({\r\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n});\r\n\r\n// Schema for the reset step (passwords)\r\nconst resetSchema = z\r\n  .object({\r\n    password: z\r\n      .string()\r\n      .min(8, { message: \"Password must be at least 8 characters\" })\r\n      .regex(/[A-Z]/, {\r\n        message: \"Password must contain at least one uppercase letter\",\r\n      })\r\n      .regex(/[a-z]/, {\r\n        message: \"Password must contain at least one lowercase letter\",\r\n      })\r\n      .regex(/[0-9]/, { message: \"Password must contain at least one number\" }),\r\n    confirmPassword: z\r\n      .string()\r\n      .min(8, { message: \"Confirm password must be at least 8 characters\" }),\r\n  })\r\n  .refine((data) => data.password === data.confirmPassword, {\r\n    message: \"Passwords do not match\",\r\n    path: [\"confirmPassword\"],\r\n  });\r\n\r\ntype RequestFormValues = z.infer<typeof requestSchema>;\r\ntype ResetFormValues = z.infer<typeof resetSchema>;\r\n\r\n// Define the different steps in the password reset flow\r\ntype ResetStep = \"request\" | \"reset\" | \"success\";\r\n\r\ninterface PasswordRequirementProps {\r\n  met: boolean;\r\n  text: string;\r\n}\r\n\r\n// Component to display password requirements with visual feedback\r\nfunction PasswordRequirement({ met, text }: PasswordRequirementProps) {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex items-center gap-2 text-sm transition-colors\",\r\n        met ? \"text-green-600 dark:text-green-400\" : \"text-muted-foreground\",\r\n      )}\r\n    >\r\n      <div\r\n        className={cn(\r\n          \"rounded-full p-1 transition-colors\",\r\n          met ? \"bg-green-100 dark:bg-green-900/30\" : \"bg-muted\",\r\n        )}\r\n      >\r\n        <Check className=\"h-3 w-3\" aria-hidden=\"true\" />\r\n      </div>\r\n      <span>{text}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface ResetPasswordFormProps {\r\n  /**\r\n   * Initial step to show\r\n   */\r\n  initialStep?: ResetStep;\r\n  /**\r\n   * Callback for when the request step is submitted\r\n   */\r\n  onRequestSubmit?: (data: RequestFormValues) => Promise<void>;\r\n  /**\r\n   * Callback for when the reset step is submitted\r\n   */\r\n  onResetSubmit?: (data: ResetFormValues) => Promise<void>;\r\n  /**\r\n   * URL to redirect to after successful reset\r\n   */\r\n  loginUrl?: string;\r\n  /**\r\n   * Form action for server-side form handling\r\n   */\r\n  formAction?: string;\r\n}\r\n\r\nexport default function ResetPasswordForm({\r\n  initialStep = \"request\",\r\n  onRequestSubmit,\r\n  onResetSubmit,\r\n  loginUrl = \"/login\",\r\n  formAction,\r\n}: ResetPasswordFormProps) {\r\n  const [step, setStep] = React.useState<ResetStep>(initialStep);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = React.useState(\"\");\r\n  const { toast } = useToast();\r\n\r\n  const emailId = useId();\r\n  const confirmPasswordId = useId();\r\n\r\n  // Refs for accessibility focus management\r\n  const requestFormRef = React.useRef<HTMLFormElement>(null);\r\n  const resetFormRef = React.useRef<HTMLFormElement>(null);\r\n  const successRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const requestForm = useForm<RequestFormValues>({\r\n    resolver: zodResolver(requestSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n    },\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const resetForm = useForm<ResetFormValues>({\r\n    resolver: zodResolver(resetSchema),\r\n    defaultValues: {\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n    },\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  // Calculate password strength\r\n  const hasMinLength = password.length >= 8;\r\n  const hasUppercase = /[A-Z]/.test(password);\r\n  const hasLowercase = /[a-z]/.test(password);\r\n  const hasNumber = /[0-9]/.test(password);\r\n  const isMatchingConfirm =\r\n    password === confirmPassword && confirmPassword !== \"\";\r\n\r\n  // Calculate overall strength\r\n  const passwordStrength =\r\n    (hasMinLength ? 1 : 0) +\r\n    (hasUppercase ? 1 : 0) +\r\n    (hasLowercase ? 1 : 0) +\r\n    (hasNumber ? 1 : 0);\r\n\r\n  // Get strength label and class\r\n  const getStrengthLabel = () => {\r\n    if (password === \"\") return \"\";\r\n    if (passwordStrength <= 2) return \"Weak\";\r\n    if (passwordStrength === 3) return \"Good\";\r\n    return \"Strong\";\r\n  };\r\n\r\n  const getStrengthClass = () => {\r\n    if (password === \"\") return \"bg-muted\";\r\n    if (passwordStrength <= 2) return \"bg-red-500\";\r\n    if (passwordStrength === 3) return \"bg-yellow-500\";\r\n    return \"bg-green-500\";\r\n  };\r\n\r\n  async function handleRequestSubmit(data: RequestFormValues) {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      // Use provided callback or simulate API call\r\n      if (onRequestSubmit) {\r\n        await onRequestSubmit(data);\r\n      } else {\r\n        // Simulate API call\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(\"Password reset request:\", data);\r\n      }\r\n\r\n      toast({\r\n        title: \"Reset link sent\",\r\n        description:\r\n          \"If an account exists with that email, you'll receive a reset link.\",\r\n      });\r\n\r\n      // Move to reset step (in a real app, this would typically happen when the user clicks the emailed link)\r\n      setStep(\"reset\");\r\n\r\n      // Focus the reset form for accessibility\r\n      setTimeout(() => {\r\n        if (resetFormRef.current) {\r\n          resetFormRef.current.focus();\r\n        }\r\n      }, 100);\r\n    } catch (error) {\r\n      console.error(\"Reset request error:\", error);\r\n\r\n      toast({\r\n        title: \"Request failed\",\r\n        description: \"We couldn't process your request. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  async function handleResetSubmit(data: ResetFormValues) {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      // Use provided callback or simulate API call\r\n      if (onResetSubmit) {\r\n        await onResetSubmit(data);\r\n      } else {\r\n        // Simulate API call\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(\"Password reset:\", data);\r\n      }\r\n\r\n      toast({\r\n        title: \"Password reset successful\",\r\n        description:\r\n          \"Your password has been updated. You can now log in with your new password.\",\r\n      });\r\n\r\n      setStep(\"success\");\r\n\r\n      // Focus the success message for accessibility\r\n      setTimeout(() => {\r\n        if (successRef.current) {\r\n          successRef.current.focus();\r\n        }\r\n      }, 100);\r\n    } catch (error) {\r\n      console.error(\"Reset error:\", error);\r\n\r\n      toast({\r\n        title: \"Reset failed\",\r\n        description: \"We couldn't reset your password. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full max-w-md mx-auto p-6 space-y-6\">\r\n      {step === \"request\" && (\r\n        <>\r\n          <div className=\"space-y-2 text-center\">\r\n            <h1 className=\"text-3xl font-bold\">Reset your password</h1>\r\n            <p className=\"text-muted-foreground\">\r\n              Enter your email address and we'll send you a link to reset your\r\n              password\r\n            </p>\r\n          </div>\r\n\r\n          <Form {...requestForm}>\r\n            <form\r\n              ref={requestFormRef}\r\n              onSubmit={requestForm.handleSubmit(handleRequestSubmit)}\r\n              className=\"space-y-4\"\r\n              action={formAction ? `${formAction}/request` : undefined}\r\n              noValidate\r\n            >\r\n              <FormField\r\n                control={requestForm.control}\r\n                name=\"email\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel htmlFor={emailId}>Email</FormLabel>\r\n                    <FormControl>\r\n                      <div className=\"relative\">\r\n                        <Input\r\n                          id={emailId}\r\n                          placeholder=\"name@example.com\"\r\n                          className=\"peer ps-9\"\r\n                          type=\"email\"\r\n                          autoComplete=\"email\"\r\n                          aria-required=\"true\"\r\n                          {...field}\r\n                        />\r\n                        <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                          <AtSignIcon size={16} aria-hidden=\"true\" />\r\n                        </div>\r\n                      </div>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isLoading}\r\n                variant=\"expandIcon\"\r\n                aria-label={\r\n                  isLoading ? \"Sending reset link...\" : \"Send reset link\"\r\n                }\r\n              >\r\n                {isLoading ? (\r\n                  <>\r\n                    <Loader2\r\n                      className=\"mr-2 h-4 w-4 animate-spin\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    <span>Sending reset link...</span>\r\n                  </>\r\n                ) : (\r\n                  \"Send reset link\"\r\n                )}\r\n              </Button>\r\n\r\n              <div className=\"text-center\">\r\n                <Link\r\n                  href={loginUrl}\r\n                  className=\"text-sm text-muted-foreground hover:text-foreground inline-flex items-center\"\r\n                >\r\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n                  <span>Back to login</span>\r\n                </Link>\r\n              </div>\r\n            </form>\r\n          </Form>\r\n        </>\r\n      )}\r\n\r\n      {step === \"reset\" && (\r\n        <>\r\n          <div className=\"space-y-2 text-center\">\r\n            <h1 className=\"text-3xl font-bold\">Set new password</h1>\r\n            <p className=\"text-muted-foreground\">\r\n              Please create a new secure password for your account\r\n            </p>\r\n          </div>\r\n\r\n          <Form {...resetForm}>\r\n            <form\r\n              ref={resetFormRef}\r\n              onSubmit={resetForm.handleSubmit(handleResetSubmit)}\r\n              className=\"space-y-4\"\r\n              action={formAction ? `${formAction}/reset` : undefined}\r\n              noValidate\r\n              tabIndex={-1}\r\n            >\r\n              <FormField\r\n                control={resetForm.control}\r\n                name=\"password\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"space-y-3\">\r\n                    <FormLabel htmlFor=\"new-password\">New Password</FormLabel>\r\n                    <FormControl>\r\n                      <PasswordInput\r\n                        id=\"new-password\"\r\n                        value={password}\r\n                        onChange={(value) => {\r\n                          setPassword(value);\r\n                          field.onChange(value);\r\n                        }}\r\n                        aria-required=\"true\"\r\n                        autoComplete=\"new-password\"\r\n                        aria-describedby=\"password-requirements\"\r\n                      />\r\n                    </FormControl>\r\n\r\n                    {/* Password strength meter */}\r\n                    <div className=\"space-y-2\" id=\"password-requirements\">\r\n                      <div className=\"h-1 w-full bg-muted rounded-full overflow-hidden\">\r\n                        <div\r\n                          className={cn(\r\n                            \"h-full transition-all duration-300\",\r\n                            getStrengthClass(),\r\n                          )}\r\n                          style={{ width: `${(passwordStrength / 4) * 100}%` }}\r\n                          aria-hidden=\"true\"\r\n                        />\r\n                      </div>\r\n\r\n                      {password && (\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          Password strength:{\" \"}\r\n                          <span\r\n                            className={cn(\r\n                              passwordStrength <= 2\r\n                                ? \"text-red-500\"\r\n                                : passwordStrength === 3\r\n                                  ? \"text-yellow-500\"\r\n                                  : \"text-green-500\",\r\n                            )}\r\n                          >\r\n                            {getStrengthLabel()}\r\n                          </span>\r\n                        </p>\r\n                      )}\r\n\r\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 pt-2\">\r\n                        <PasswordRequirement\r\n                          met={hasMinLength}\r\n                          text=\"At least 8 characters\"\r\n                        />\r\n                        <PasswordRequirement\r\n                          met={hasUppercase}\r\n                          text=\"One uppercase letter\"\r\n                        />\r\n                        <PasswordRequirement\r\n                          met={hasLowercase}\r\n                          text=\"One lowercase letter\"\r\n                        />\r\n                        <PasswordRequirement\r\n                          met={hasNumber}\r\n                          text=\"One number\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={resetForm.control}\r\n                name=\"confirmPassword\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel htmlFor={confirmPasswordId}>\r\n                      Confirm Password\r\n                    </FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        id={confirmPasswordId}\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm your password\"\r\n                        value={confirmPassword}\r\n                        onChange={(e) => {\r\n                          setConfirmPassword(e.target.value);\r\n                          field.onChange(e.target.value);\r\n                        }}\r\n                        aria-required=\"true\"\r\n                        autoComplete=\"new-password\"\r\n                      />\r\n                    </FormControl>\r\n                    <div className=\"h-5 flex items-center\">\r\n                      {confirmPassword && (\r\n                        <p\r\n                          className={cn(\r\n                            \"text-xs\",\r\n                            isMatchingConfirm\r\n                              ? \"text-green-600\"\r\n                              : \"text-red-500\",\r\n                          )}\r\n                        >\r\n                          {isMatchingConfirm\r\n                            ? \"Passwords match\"\r\n                            : \"Passwords don't match\"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isLoading}\r\n                variant=\"gooeyLeft\"\r\n                aria-label={\r\n                  isLoading ? \"Updating password...\" : \"Reset password\"\r\n                }\r\n              >\r\n                {isLoading ? (\r\n                  <>\r\n                    <Loader2\r\n                      className=\"mr-2 h-4 w-4 animate-spin\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    <span>Updating password...</span>\r\n                  </>\r\n                ) : (\r\n                  \"Reset password\"\r\n                )}\r\n              </Button>\r\n\r\n              <div className=\"text-center\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"text-sm text-muted-foreground hover:text-foreground inline-flex items-center\"\r\n                  onClick={() => setStep(\"request\")}\r\n                >\r\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n                  <span>Back to email step</span>\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </Form>\r\n        </>\r\n      )}\r\n\r\n      {step === \"success\" && (\r\n        <div\r\n          className=\"text-center space-y-4\"\r\n          ref={successRef}\r\n          tabIndex={-1}\r\n          role=\"alert\"\r\n        >\r\n          <div className=\"rounded-full w-16 h-16 bg-primary/10 mx-auto flex items-center justify-center\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth={1.5}\r\n              stroke=\"currentColor\"\r\n              className=\"w-8 h-8 text-primary\"\r\n              aria-hidden=\"true\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          <h1 className=\"text-2xl font-bold\">Password reset successful</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Your password has been reset successfully. You can now log in with\r\n            your new password.\r\n          </p>\r\n          <Button asChild className=\"mt-4\">\r\n            <Link href={loginUrl}>Go to login</Link>\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
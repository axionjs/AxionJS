{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "reset-password-form-2",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A reset password form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "password-input",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/reset-password-form-2.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useId } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Link from \"next/link\";\nimport { Loader2, AtSignIcon, ArrowLeft, Check } from \"lucide-react\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/registry/default/ui/form\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport PasswordInput from \"@/registry/default/ui/password-input\";\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\n\n// Schema for the request step (email only)\nconst requestSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n});\n\n// Schema for the reset step (passwords)\nconst resetSchema = z\n  .object({\n    password: z\n      .string()\n      .min(8, { message: \"Password must be at least 8 characters\" })\n      .regex(/[A-Z]/, {\n        message: \"Password must contain at least one uppercase letter\",\n      })\n      .regex(/[a-z]/, {\n        message: \"Password must contain at least one lowercase letter\",\n      })\n      .regex(/[0-9]/, { message: \"Password must contain at least one number\" }),\n    confirmPassword: z\n      .string()\n      .min(8, { message: \"Confirm password must be at least 8 characters\" }),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  });\n\ntype RequestFormValues = z.infer<typeof requestSchema>;\ntype ResetFormValues = z.infer<typeof resetSchema>;\n\n// Define the different steps in the password reset flow\ntype ResetStep = \"request\" | \"reset\" | \"success\";\n\ninterface PasswordRequirementProps {\n  met: boolean;\n  text: string;\n}\n\n// Component to display password requirements with visual feedback\nfunction PasswordRequirement({ met, text }: PasswordRequirementProps) {\n  return (\n    <div\n      className={cn(\n        \"flex items-center gap-2 text-sm transition-colors\",\n        met ? \"text-green-600 dark:text-green-400\" : \"text-muted-foreground\",\n      )}\n    >\n      <div\n        className={cn(\n          \"rounded-full p-1 transition-colors\",\n          met ? \"bg-green-100 dark:bg-green-900/30\" : \"bg-muted\",\n        )}\n      >\n        <Check className=\"h-3 w-3\" aria-hidden=\"true\" />\n      </div>\n      <span>{text}</span>\n    </div>\n  );\n}\n\ninterface ResetPasswordFormProps {\n  /**\n   * Initial step to show\n   */\n  initialStep?: ResetStep;\n  /**\n   * Callback for when the request step is submitted\n   */\n  onRequestSubmit?: (data: RequestFormValues) => Promise<void>;\n  /**\n   * Callback for when the reset step is submitted\n   */\n  onResetSubmit?: (data: ResetFormValues) => Promise<void>;\n  /**\n   * URL to redirect to after successful reset\n   */\n  loginUrl?: string;\n  /**\n   * Form action for server-side form handling\n   */\n  formAction?: string;\n}\n\nexport default function ResetPasswordForm({\n  initialStep = \"request\",\n  onRequestSubmit,\n  onResetSubmit,\n  loginUrl = \"/login\",\n  formAction,\n}: ResetPasswordFormProps) {\n  const [step, setStep] = React.useState<ResetStep>(initialStep);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [password, setPassword] = React.useState(\"\");\n  const [confirmPassword, setConfirmPassword] = React.useState(\"\");\n  const { toast } = useToast();\n\n  const emailId = useId();\n  const confirmPasswordId = useId();\n\n  // Refs for accessibility focus management\n  const requestFormRef = React.useRef<HTMLFormElement>(null);\n  const resetFormRef = React.useRef<HTMLFormElement>(null);\n  const successRef = React.useRef<HTMLDivElement>(null);\n\n  const requestForm = useForm<RequestFormValues>({\n    resolver: zodResolver(requestSchema),\n    defaultValues: {\n      email: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n  const resetForm = useForm<ResetFormValues>({\n    resolver: zodResolver(resetSchema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n  // Calculate password strength\n  const hasMinLength = password.length >= 8;\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasLowercase = /[a-z]/.test(password);\n  const hasNumber = /[0-9]/.test(password);\n  const isMatchingConfirm =\n    password === confirmPassword && confirmPassword !== \"\";\n\n  // Calculate overall strength\n  const passwordStrength =\n    (hasMinLength ? 1 : 0) +\n    (hasUppercase ? 1 : 0) +\n    (hasLowercase ? 1 : 0) +\n    (hasNumber ? 1 : 0);\n\n  // Get strength label and class\n  const getStrengthLabel = () => {\n    if (password === \"\") return \"\";\n    if (passwordStrength <= 2) return \"Weak\";\n    if (passwordStrength === 3) return \"Good\";\n    return \"Strong\";\n  };\n\n  const getStrengthClass = () => {\n    if (password === \"\") return \"bg-muted\";\n    if (passwordStrength <= 2) return \"bg-red-500\";\n    if (passwordStrength === 3) return \"bg-yellow-500\";\n    return \"bg-green-500\";\n  };\n\n  async function handleRequestSubmit(data: RequestFormValues) {\n    try {\n      setIsLoading(true);\n\n      // Use provided callback or simulate API call\n      if (onRequestSubmit) {\n        await onRequestSubmit(data);\n      } else {\n        // Simulate API call\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(\"Password reset request:\", data);\n      }\n\n      toast({\n        title: \"Reset link sent\",\n        description:\n          \"If an account exists with that email, you'll receive a reset link.\",\n      });\n\n      // Move to reset step (in a real app, this would typically happen when the user clicks the emailed link)\n      setStep(\"reset\");\n\n      // Focus the reset form for accessibility\n      setTimeout(() => {\n        if (resetFormRef.current) {\n          resetFormRef.current.focus();\n        }\n      }, 100);\n    } catch (error) {\n      console.error(\"Reset request error:\", error);\n\n      toast({\n        title: \"Request failed\",\n        description: \"We couldn't process your request. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function handleResetSubmit(data: ResetFormValues) {\n    try {\n      setIsLoading(true);\n\n      // Use provided callback or simulate API call\n      if (onResetSubmit) {\n        await onResetSubmit(data);\n      } else {\n        // Simulate API call\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(\"Password reset:\", data);\n      }\n\n      toast({\n        title: \"Password reset successful\",\n        description:\n          \"Your password has been updated. You can now log in with your new password.\",\n      });\n\n      setStep(\"success\");\n\n      // Focus the success message for accessibility\n      setTimeout(() => {\n        if (successRef.current) {\n          successRef.current.focus();\n        }\n      }, 100);\n    } catch (error) {\n      console.error(\"Reset error:\", error);\n\n      toast({\n        title: \"Reset failed\",\n        description: \"We couldn't reset your password. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"w-full max-w-md mx-auto p-6 space-y-6\">\n      {step === \"request\" && (\n        <>\n          <div className=\"space-y-2 text-center\">\n            <h1 className=\"text-3xl font-bold\">Reset your password</h1>\n            <p className=\"text-muted-foreground\">\n              Enter your email address and we'll send you a link to reset your\n              password\n            </p>\n          </div>\n\n          <Form {...requestForm}>\n            <form\n              ref={requestFormRef}\n              onSubmit={requestForm.handleSubmit(handleRequestSubmit)}\n              className=\"space-y-4\"\n              action={formAction ? `${formAction}/request` : undefined}\n              noValidate\n            >\n              <FormField\n                control={requestForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor={emailId}>Email</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          id={emailId}\n                          placeholder=\"name@example.com\"\n                          className=\"peer ps-9\"\n                          type=\"email\"\n                          autoComplete=\"email\"\n                          aria-required=\"true\"\n                          {...field}\n                        />\n                        <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                          <AtSignIcon size={16} aria-hidden=\"true\" />\n                        </div>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                variant=\"expandIcon\"\n                aria-label={\n                  isLoading ? \"Sending reset link...\" : \"Send reset link\"\n                }\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2\n                      className=\"mr-2 h-4 w-4 animate-spin\"\n                      aria-hidden=\"true\"\n                    />\n                    <span>Sending reset link...</span>\n                  </>\n                ) : (\n                  \"Send reset link\"\n                )}\n              </Button>\n\n              <div className=\"text-center\">\n                <Link\n                  href={loginUrl}\n                  className=\"text-sm text-muted-foreground hover:text-foreground inline-flex items-center\"\n                >\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\n                  <span>Back to login</span>\n                </Link>\n              </div>\n            </form>\n          </Form>\n        </>\n      )}\n\n      {step === \"reset\" && (\n        <>\n          <div className=\"space-y-2 text-center\">\n            <h1 className=\"text-3xl font-bold\">Set new password</h1>\n            <p className=\"text-muted-foreground\">\n              Please create a new secure password for your account\n            </p>\n          </div>\n\n          <Form {...resetForm}>\n            <form\n              ref={resetFormRef}\n              onSubmit={resetForm.handleSubmit(handleResetSubmit)}\n              className=\"space-y-4\"\n              action={formAction ? `${formAction}/reset` : undefined}\n              noValidate\n              tabIndex={-1}\n            >\n              <FormField\n                control={resetForm.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem className=\"space-y-3\">\n                    <FormLabel htmlFor=\"new-password\">New Password</FormLabel>\n                    <FormControl>\n                      <PasswordInput\n                        id=\"new-password\"\n                        value={password}\n                        onChange={(value) => {\n                          setPassword(value);\n                          field.onChange(value);\n                        }}\n                        aria-required=\"true\"\n                        autoComplete=\"new-password\"\n                        aria-describedby=\"password-requirements\"\n                      />\n                    </FormControl>\n\n                    {/* Password strength meter */}\n                    <div className=\"space-y-2\" id=\"password-requirements\">\n                      <div className=\"h-1 w-full bg-muted rounded-full overflow-hidden\">\n                        <div\n                          className={cn(\n                            \"h-full transition-all duration-300\",\n                            getStrengthClass(),\n                          )}\n                          style={{ width: `${(passwordStrength / 4) * 100}%` }}\n                          aria-hidden=\"true\"\n                        />\n                      </div>\n\n                      {password && (\n                        <p className=\"text-xs text-muted-foreground\">\n                          Password strength:{\" \"}\n                          <span\n                            className={cn(\n                              passwordStrength <= 2\n                                ? \"text-red-500\"\n                                : passwordStrength === 3\n                                  ? \"text-yellow-500\"\n                                  : \"text-green-500\",\n                            )}\n                          >\n                            {getStrengthLabel()}\n                          </span>\n                        </p>\n                      )}\n\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 pt-2\">\n                        <PasswordRequirement\n                          met={hasMinLength}\n                          text=\"At least 8 characters\"\n                        />\n                        <PasswordRequirement\n                          met={hasUppercase}\n                          text=\"One uppercase letter\"\n                        />\n                        <PasswordRequirement\n                          met={hasLowercase}\n                          text=\"One lowercase letter\"\n                        />\n                        <PasswordRequirement\n                          met={hasNumber}\n                          text=\"One number\"\n                        />\n                      </div>\n                    </div>\n\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={resetForm.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor={confirmPasswordId}>\n                      Confirm Password\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        id={confirmPasswordId}\n                        type=\"password\"\n                        placeholder=\"Confirm your password\"\n                        value={confirmPassword}\n                        onChange={(e) => {\n                          setConfirmPassword(e.target.value);\n                          field.onChange(e.target.value);\n                        }}\n                        aria-required=\"true\"\n                        autoComplete=\"new-password\"\n                      />\n                    </FormControl>\n                    <div className=\"h-5 flex items-center\">\n                      {confirmPassword && (\n                        <p\n                          className={cn(\n                            \"text-xs\",\n                            isMatchingConfirm\n                              ? \"text-green-600\"\n                              : \"text-red-500\",\n                          )}\n                        >\n                          {isMatchingConfirm\n                            ? \"Passwords match\"\n                            : \"Passwords don't match\"}\n                        </p>\n                      )}\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                variant=\"gooeyLeft\"\n                aria-label={\n                  isLoading ? \"Updating password...\" : \"Reset password\"\n                }\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2\n                      className=\"mr-2 h-4 w-4 animate-spin\"\n                      aria-hidden=\"true\"\n                    />\n                    <span>Updating password...</span>\n                  </>\n                ) : (\n                  \"Reset password\"\n                )}\n              </Button>\n\n              <div className=\"text-center\">\n                <button\n                  type=\"button\"\n                  className=\"text-sm text-muted-foreground hover:text-foreground inline-flex items-center\"\n                  onClick={() => setStep(\"request\")}\n                >\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\n                  <span>Back to email step</span>\n                </button>\n              </div>\n            </form>\n          </Form>\n        </>\n      )}\n\n      {step === \"success\" && (\n        <div\n          className=\"text-center space-y-4\"\n          ref={successRef}\n          tabIndex={-1}\n          role=\"alert\"\n        >\n          <div className=\"rounded-full w-16 h-16 bg-primary/10 mx-auto flex items-center justify-center\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              strokeWidth={1.5}\n              stroke=\"currentColor\"\n              className=\"w-8 h-8 text-primary\"\n              aria-hidden=\"true\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n              />\n            </svg>\n          </div>\n          <h1 className=\"text-2xl font-bold\">Password reset successful</h1>\n          <p className=\"text-muted-foreground\">\n            Your password has been reset successfully. You can now log in with\n            your new password.\n          </p>\n          <Button asChild className=\"mt-4\">\n            <Link href={loginUrl}>Go to login</Link>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
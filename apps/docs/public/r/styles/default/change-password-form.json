{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "change-password-form",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Form for changing a user's password.",
  "files": [
    {
      "path": "auth/components/change-password-form.tsx",
      "content": "\"use client\";\r\nimport { useState, useTransition } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as z from \"zod\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormControl,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\";\r\nimport { FormSuccess } from \"@/registry/default/auth/components/form-success\";\r\nimport { FormError } from \"@/registry/default/auth/components/form-error\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { changePassword } from \"@/registry/default/auth/actions/auth-actions\";\r\nimport { CardWrapper } from \"./card-wrapper\";\r\nimport { ChangePasswordSchema } from \"@/registry/default/auth/schemas\";\r\n\r\nexport const ChangePasswordForm = () => {\r\n  const [error, setError] = useState<string | undefined>();\r\n  const [success, setSuccess] = useState<string | undefined>();\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const form = useForm<z.infer<typeof ChangePasswordSchema>>({\r\n    resolver: zodResolver(ChangePasswordSchema),\r\n    defaultValues: {\r\n      currentPassword: \"\",\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof ChangePasswordSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n    startTransition(() => {\r\n      changePassword(values.currentPassword, values.newPassword)\r\n        .then((data) => {\r\n          if (data.error) {\r\n            setError(data.error);\r\n          }\r\n          if (data.success) {\r\n            setSuccess(data.success);\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setError(\"Something went wrong!\");\r\n        });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Change Password\"\r\n      subHeaderLabel=\"Update your account password\"\r\n      backButtonLabel=\"Back to Dashboard\"\r\n      backButtonHref=\"/dashboard\"\r\n    >\r\n      <Form {...form}>\r\n        <form className=\"space-y-6\" onSubmit={form.handleSubmit(onSubmit)}>\r\n          <div className=\"space-y-4\">\r\n            {/* Current Password Field */}\r\n            <FormField\r\n              control={form.control}\r\n              name=\"currentPassword\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      placeholder=\"******\"\r\n                      disabled={isPending}\r\n                      type=\"password\"\r\n                      className=\"w-full\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            {/* New Password Field */}\r\n            <FormField\r\n              control={form.control}\r\n              name=\"newPassword\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>New Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      placeholder=\"******\"\r\n                      disabled={isPending}\r\n                      type=\"password\"\r\n                      className=\"w-full\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            {/* Confirm Password Field */}\r\n            <FormField\r\n              control={form.control}\r\n              name=\"confirmPassword\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Confirm Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      placeholder=\"******\"\r\n                      disabled={isPending}\r\n                      type=\"password\"\r\n                      className=\"w-full\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          {/* Error and Success Messages */}\r\n          {error && <FormError message={error} />}\r\n          {success && <FormSuccess message={success} />}\r\n\r\n          {/* Save Button */}\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={isPending}\r\n            className=\"w-full bg-primary hover:bg-primary-dark\"\r\n          >\r\n            {isPending ? \"Changing Password...\" : \"Change Password\"}\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    }
  ]
}
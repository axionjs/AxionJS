{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "login-form-3",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A login form component.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/login-form-3.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport Link from \"next/link\";\r\nimport { motion } from \"motion/react\";\r\nimport { Loader2 } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\";\r\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\r\nimport PasswordInput from \"@/registry/default/ui/password-input\";\r\n\r\nconst formSchema = z.object({\r\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n  password: z\r\n    .string()\r\n    .min(8, { message: \"Password must be at least 8 characters\" }),\r\n  rememberMe: z.boolean().optional(),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\ninterface LoginFormProps {\r\n  /**\r\n   * Optional callback that runs after successful form submission\r\n   */\r\n  onLoginSuccess?: (data: FormValues) => void;\r\n  /**\r\n   * Optional callback that runs if login fails\r\n   */\r\n  onLoginError?: (error: unknown) => void;\r\n  /**\r\n   * Custom form action for server actions\r\n   */\r\n  formAction?: string;\r\n  /**\r\n   * Redirect URL after successful login\r\n   */\r\n  redirectTo?: string;\r\n}\r\n\r\nexport function LoginForm3({\r\n  onLoginSuccess,\r\n  onLoginError,\r\n  formAction,\r\n  redirectTo = \"/dashboard\",\r\n}: LoginFormProps) {\r\n  const router = useRouter();\r\n  const { toast } = useToast();\r\n  const [isPending, setIsPending] = React.useState(false);\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [rememberMe, setRememberMe] = React.useState(false);\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      rememberMe: false,\r\n    },\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  async function onSubmit(values: FormValues) {\r\n    try {\r\n      setIsPending(true);\r\n\r\n      // If formAction is provided, the form will be submitted there\r\n      // Otherwise, we handle submission client-side\r\n      if (!formAction) {\r\n        // Simulate API call, replace with your actual login API\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(values);\r\n      }\r\n\r\n      toast({\r\n        title: \"Login successful\",\r\n        description: \"You have been logged in successfully.\",\r\n      });\r\n\r\n      // Call success callback if provided\r\n      if (onLoginSuccess) {\r\n        onLoginSuccess(values);\r\n      }\r\n\r\n      // Redirect user after successful login\r\n      if (redirectTo) {\r\n        router.push(redirectTo);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n\r\n      toast({\r\n        title: \"Login failed\",\r\n        description: \"Please check your credentials and try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n\r\n      // Call error callback if provided\r\n      if (onLoginError) {\r\n        onLoginError(error);\r\n      }\r\n    } finally {\r\n      setIsPending(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 p-4 dark:from-gray-900 dark:to-gray-950\">\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.5 }}\r\n        className=\"w-full max-w-md rounded-2xl bg-white p-8 shadow-xl dark:bg-gray-800\"\r\n      >\r\n        <div className=\"mb-8 text-center\">\r\n          <div className=\"mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br from-teal-400 to-emerald-500 dark:from-teal-500 dark:to-emerald-600\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"28\"\r\n              height=\"28\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              className=\"text-white\"\r\n              aria-hidden=\"true\"\r\n            >\r\n              <path d=\"M2 20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8l-7 5V8l-7 5V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z\" />\r\n              <path d=\"M17 18h1\" />\r\n              <path d=\"M12 18h1\" />\r\n              <path d=\"M7 18h1\" />\r\n            </svg>\r\n          </div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n            Welcome back\r\n          </h1>\r\n          <p className=\"mt-1 text-gray-500 dark:text-gray-400\">\r\n            Sign in to continue to your account\r\n          </p>\r\n        </div>\r\n\r\n        <Form {...form}>\r\n          <form\r\n            onSubmit={form.handleSubmit(onSubmit)}\r\n            className=\"space-y-6\"\r\n            action={formAction}\r\n            noValidate\r\n          >\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormControl>\r\n                    <div className=\"group relative\">\r\n                      <input\r\n                        type=\"email\"\r\n                        className=\"peer h-14 w-full rounded-lg border border-gray-300 bg-transparent px-4 pt-4 pb-1.5 text-base text-gray-900 outline-none transition-all focus:border-emerald-500 focus:outline-none dark:border-gray-600 dark:text-white dark:focus:border-emerald-400\"\r\n                        placeholder=\" \"\r\n                        {...field}\r\n                        autoComplete=\"email\"\r\n                        aria-label=\"Email address\"\r\n                        aria-required=\"true\"\r\n                      />\r\n                      <label className=\"pointer-events-none absolute left-4 top-1 text-xs font-medium text-gray-400 transition-all peer-placeholder-shown:top-4 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-500 peer-focus:top-1 peer-focus:text-xs peer-focus:text-emerald-500 dark:text-gray-500 dark:peer-focus:text-emerald-400\">\r\n                        Email address\r\n                      </label>\r\n                    </div>\r\n                  </FormControl>\r\n                  <FormMessage className=\"text-xs text-red-500 mt-1\" />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"password\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormControl>\r\n                    <div className=\"relative\">\r\n                      <PasswordInput\r\n                        value={password}\r\n                        onChange={(value) => {\r\n                          setPassword(value);\r\n                          field.onChange(value);\r\n                        }}\r\n                        error={form.formState.errors.password?.message}\r\n                        aria-label=\"Password\"\r\n                        aria-required=\"true\"\r\n                        className=\"h-14\"\r\n                      />\r\n                    </div>\r\n                  </FormControl>\r\n                  <FormMessage className=\"text-xs text-red-500 mt-1\" />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"remember\"\r\n                  className=\"h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500 dark:border-gray-600 dark:bg-gray-700\"\r\n                  checked={rememberMe}\r\n                  onChange={(e) => setRememberMe(e.target.checked)}\r\n                  aria-label=\"Remember me\"\r\n                />\r\n                <label\r\n                  htmlFor=\"remember\"\r\n                  className=\"text-sm text-gray-600 dark:text-gray-300\"\r\n                >\r\n                  Remember me\r\n                </label>\r\n              </div>\r\n              <Link\r\n                href=\"/reset-password\"\r\n                className=\"text-sm font-medium text-emerald-600 hover:text-emerald-500 dark:text-emerald-400 dark:hover:text-emerald-300\"\r\n              >\r\n                Forgot password?\r\n              </Link>\r\n            </div>\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"gooeyRight\"\r\n              className=\"w-full h-12 bg-emerald-500 hover:bg-emerald-600 text-white dark:bg-emerald-600 dark:hover:bg-emerald-700\"\r\n              disabled={isPending}\r\n              aria-label=\"Sign in to your account\"\r\n            >\r\n              {isPending ? (\r\n                <>\r\n                  <Loader2\r\n                    className=\"mr-2 h-4 w-4 animate-spin\"\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                  <span>Signing in...</span>\r\n                </>\r\n              ) : (\r\n                \"Sign in\"\r\n              )}\r\n            </Button>\r\n\r\n            <div className=\"relative my-6\">\r\n              <div className=\"absolute inset-0 flex items-center\">\r\n                <div className=\"w-full border-t border-gray-300 dark:border-gray-600\"></div>\r\n              </div>\r\n              <div className=\"relative flex justify-center text-sm\">\r\n                <span className=\"bg-white px-2 text-gray-500 dark:bg-gray-800 dark:text-gray-400\">\r\n                  Or continue with\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-3 gap-3\">\r\n              <Button\r\n                variant=\"outline\"\r\n                type=\"button\"\r\n                className=\"h-12 border-gray-300 hover:bg-gray-50 dark:border-gray-600 dark:hover:bg-gray-700\"\r\n                aria-label=\"Sign in with GitHub\"\r\n              >\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"20\"\r\n                  height=\"20\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"2\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  className=\"text-gray-700 dark:text-gray-300\"\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  <path d=\"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4\" />\r\n                  <path d=\"M9 18c-4.51 2-5-2-7-2\" />\r\n                </svg>\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                type=\"button\"\r\n                className=\"h-12 border-gray-300 hover:bg-gray-50 dark:border-gray-600 dark:hover:bg-gray-700\"\r\n                aria-label=\"Sign in with Google\"\r\n              >\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"20\"\r\n                  height=\"20\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"2\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  className=\"text-gray-700 dark:text-gray-300\"\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n                  <path d=\"M12 8v8\" />\r\n                  <path d=\"M8 12h8\" />\r\n                </svg>\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                type=\"button\"\r\n                className=\"h-12 border-gray-300 hover:bg-gray-50 dark:border-gray-600 dark:hover:bg-gray-700\"\r\n                aria-label=\"Sign in with Twitter\"\r\n              >\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"20\"\r\n                  height=\"20\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"2\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  className=\"text-gray-700 dark:text-gray-300\"\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  <path d=\"M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z\" />\r\n                </svg>\r\n              </Button>\r\n            </div>\r\n\r\n            <div className=\"text-center text-sm text-gray-600 mt-6 dark:text-gray-400\">\r\n              Don&apos;t have an account?{\" \"}\r\n              <Link\r\n                href=\"/signup\"\r\n                className=\"font-medium text-emerald-600 hover:text-emerald-500 dark:text-emerald-400 dark:hover:text-emerald-300\"\r\n              >\r\n                Sign up\r\n              </Link>\r\n            </div>\r\n          </form>\r\n        </Form>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginForm3;\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
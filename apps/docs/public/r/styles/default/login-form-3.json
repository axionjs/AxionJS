{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "login-form-3",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A login form component.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/login-form-3.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { motion } from \"motion/react\";\nimport { Loader2 } from \"lucide-react\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\nimport PasswordInput from \"@/registry/default/ui/password-input\";\n\nconst formSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n  password: z\n    .string()\n    .min(8, { message: \"Password must be at least 8 characters\" }),\n  rememberMe: z.boolean().optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\ninterface LoginFormProps {\n  /**\n   * Optional callback that runs after successful form submission\n   */\n  onLoginSuccess?: (data: FormValues) => void;\n  /**\n   * Optional callback that runs if login fails\n   */\n  onLoginError?: (error: unknown) => void;\n  /**\n   * Custom form action for server actions\n   */\n  formAction?: string;\n  /**\n   * Redirect URL after successful login\n   */\n  redirectTo?: string;\n}\n\nexport function LoginForm3({\n  onLoginSuccess,\n  onLoginError,\n  formAction,\n  redirectTo = \"/dashboard\",\n}: LoginFormProps) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [isPending, setIsPending] = React.useState(false);\n  const [password, setPassword] = React.useState(\"\");\n  const [rememberMe, setRememberMe] = React.useState(false);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n    mode: \"onBlur\",\n  });\n\n  async function onSubmit(values: FormValues) {\n    try {\n      setIsPending(true);\n\n      // If formAction is provided, the form will be submitted there\n      // Otherwise, we handle submission client-side\n      if (!formAction) {\n        // Simulate API call, replace with your actual login API\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(values);\n      }\n\n      toast({\n        title: \"Login successful\",\n        description: \"You have been logged in successfully.\",\n      });\n\n      // Call success callback if provided\n      if (onLoginSuccess) {\n        onLoginSuccess(values);\n      }\n\n      // Redirect user after successful login\n      if (redirectTo) {\n        router.push(redirectTo);\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n\n      toast({\n        title: \"Login failed\",\n        description: \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n\n      // Call error callback if provided\n      if (onLoginError) {\n        onLoginError(error);\n      }\n    } finally {\n      setIsPending(false);\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 p-4 dark:from-gray-900 dark:to-gray-950\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"w-full max-w-md rounded-2xl bg-white p-8 shadow-xl dark:bg-gray-800\"\n      >\n        <div className=\"mb-8 text-center\">\n          <div className=\"mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br from-teal-400 to-emerald-500 dark:from-teal-500 dark:to-emerald-600\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"28\"\n              height=\"28\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"text-white\"\n              aria-hidden=\"true\"\n            >\n              <path d=\"M2 20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8l-7 5V8l-7 5V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z\" />\n              <path d=\"M17 18h1\" />\n              <path d=\"M12 18h1\" />\n              <path d=\"M7 18h1\" />\n            </svg>\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Welcome back\n          </h1>\n          <p className=\"mt-1 text-gray-500 dark:text-gray-400\">\n            Sign in to continue to your account\n          </p>\n        </div>\n\n        <Form {...form}>\n          <form\n            onSubmit={form.handleSubmit(onSubmit)}\n            className=\"space-y-6\"\n            action={formAction}\n            noValidate\n          >\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormControl>\n                    <div className=\"group relative\">\n                      <input\n                        type=\"email\"\n                        className=\"peer h-14 w-full rounded-lg border border-gray-300 bg-transparent px-4 pt-4 pb-1.5 text-base text-gray-900 outline-none transition-all focus:border-emerald-500 focus:outline-none dark:border-gray-600 dark:text-white dark:focus:border-emerald-400\"\n                        placeholder=\" \"\n                        {...field}\n                        autoComplete=\"email\"\n                        aria-label=\"Email address\"\n                        aria-required=\"true\"\n                      />\n                      <label className=\"pointer-events-none absolute left-4 top-1 text-xs font-medium text-gray-400 transition-all peer-placeholder-shown:top-4 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-500 peer-focus:top-1 peer-focus:text-xs peer-focus:text-emerald-500 dark:text-gray-500 dark:peer-focus:text-emerald-400\">\n                        Email address\n                      </label>\n                    </div>\n                  </FormControl>\n                  <FormMessage className=\"text-xs text-red-500 mt-1\" />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <PasswordInput\n                        value={password}\n                        onChange={(value) => {\n                          setPassword(value);\n                          field.onChange(value);\n                        }}\n                        error={form.formState.errors.password?.message}\n                        aria-label=\"Password\"\n                        aria-required=\"true\"\n                        className=\"h-14\"\n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage className=\"text-xs text-red-500 mt-1\" />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"remember\"\n                  className=\"h-4 w-4 rounded border-gray-300 text-emerald-600 focus:ring-emerald-500 dark:border-gray-600 dark:bg-gray-700\"\n                  checked={rememberMe}\n                  onChange={(e) => setRememberMe(e.target.checked)}\n                  aria-label=\"Remember me\"\n                />\n                <label\n                  htmlFor=\"remember\"\n                  className=\"text-sm text-gray-600 dark:text-gray-300\"\n                >\n                  Remember me\n                </label>\n              </div>\n              <Link\n                href=\"/reset-password\"\n                className=\"text-sm font-medium text-emerald-600 hover:text-emerald-500 dark:text-emerald-400 dark:hover:text-emerald-300\"\n              >\n                Forgot password?\n              </Link>\n            </div>\n\n            <Button\n              type=\"submit\"\n              variant=\"gooeyRight\"\n              className=\"w-full h-12 bg-emerald-500 hover:bg-emerald-600 text-white dark:bg-emerald-600 dark:hover:bg-emerald-700\"\n              disabled={isPending}\n              aria-label=\"Sign in to your account\"\n            >\n              {isPending ? (\n                <>\n                  <Loader2\n                    className=\"mr-2 h-4 w-4 animate-spin\"\n                    aria-hidden=\"true\"\n                  />\n                  <span>Signing in...</span>\n                </>\n              ) : (\n                \"Sign in\"\n              )}\n            </Button>\n\n            <div className=\"relative my-6\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-300 dark:border-gray-600\"></div>\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"bg-white px-2 text-gray-500 dark:bg-gray-800 dark:text-gray-400\">\n                  Or continue with\n                </span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-3\">\n              <Button\n                variant=\"outline\"\n                type=\"button\"\n                className=\"h-12 border-gray-300 hover:bg-gray-50 dark:border-gray-600 dark:hover:bg-gray-700\"\n                aria-label=\"Sign in with GitHub\"\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"text-gray-700 dark:text-gray-300\"\n                  aria-hidden=\"true\"\n                >\n                  <path d=\"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4\" />\n                  <path d=\"M9 18c-4.51 2-5-2-7-2\" />\n                </svg>\n              </Button>\n              <Button\n                variant=\"outline\"\n                type=\"button\"\n                className=\"h-12 border-gray-300 hover:bg-gray-50 dark:border-gray-600 dark:hover:bg-gray-700\"\n                aria-label=\"Sign in with Google\"\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"text-gray-700 dark:text-gray-300\"\n                  aria-hidden=\"true\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                  <path d=\"M12 8v8\" />\n                  <path d=\"M8 12h8\" />\n                </svg>\n              </Button>\n              <Button\n                variant=\"outline\"\n                type=\"button\"\n                className=\"h-12 border-gray-300 hover:bg-gray-50 dark:border-gray-600 dark:hover:bg-gray-700\"\n                aria-label=\"Sign in with Twitter\"\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"text-gray-700 dark:text-gray-300\"\n                  aria-hidden=\"true\"\n                >\n                  <path d=\"M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z\" />\n                </svg>\n              </Button>\n            </div>\n\n            <div className=\"text-center text-sm text-gray-600 mt-6 dark:text-gray-400\">\n              Don&apos;t have an account?{\" \"}\n              <Link\n                href=\"/signup\"\n                className=\"font-medium text-emerald-600 hover:text-emerald-500 dark:text-emerald-400 dark:hover:text-emerald-300\"\n              >\n                Sign up\n              </Link>\n            </div>\n          </form>\n        </Form>\n      </motion.div>\n    </div>\n  );\n}\n\nexport default LoginForm3;\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
{
  "$schema": "http://localhost:3000/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "path": "ui/dialog.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\n/* -----------------------------------------------------------------------------\n *  1. Dialog (Root)\n * -----------------------------------------------------------------------------\n *  The main Dialog wrapper. By default, Radix sets up role=\"dialog\" or\n *  role=\"alertdialog\" if it's set to `modal`. You can pass additional props\n *  like `aria-label`, `aria-describedby`, etc. here if needed.\n */\nconst Dialog = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>\n>(({ children, ...props }, ref) => (\n  <DialogPrimitive.Root ref={ref} {...props}>\n    {children}\n  </DialogPrimitive.Root>\n));\nDialog.displayName = \"Dialog\";\n\n/* -----------------------------------------------------------------------------\n *  2. DialogTrigger\n * -----------------------------------------------------------------------------\n *  The button/element that opens the dialog.\n *  You can pass `aria-label` or other attributes if your trigger is not textual.\n */\nconst DialogTrigger = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>\n>(({ children, ...props }, ref) => (\n  <DialogPrimitive.Trigger ref={ref} {...props}>\n    {children}\n  </DialogPrimitive.Trigger>\n));\nDialogTrigger.displayName = \"DialogTrigger\";\n\n/* -----------------------------------------------------------------------------\n *  3. DialogPortal\n * -----------------------------------------------------------------------------\n *  Renders the dialog outside the DOM hierarchy of the parent (e.g., a portal).\n */\nconst DialogPortal = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Portal>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Portal>\n>(({ children, ...props }, ref) => (\n  <DialogPrimitive.Portal ref={ref} {...props}>\n    {children}\n  </DialogPrimitive.Portal>\n));\nDialogPortal.displayName = \"DialogPortal\";\n\n/* -----------------------------------------------------------------------------\n *  4. DialogOverlay\n * -----------------------------------------------------------------------------\n *  The dimmed overlay behind the dialog. Radix sets aria-hidden automatically.\n */\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80\",\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = \"DialogOverlay\";\n\n/* -----------------------------------------------------------------------------\n *  5. DialogClose\n * -----------------------------------------------------------------------------\n *  A button that closes the dialog. Often used inside DialogContent.\n */\nconst DialogClose = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Close>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Close>\n>(({ children, ...props }, ref) => (\n  <DialogPrimitive.Close ref={ref} {...props}>\n    {children}\n  </DialogPrimitive.Close>\n));\nDialogClose.displayName = \"DialogClose\";\n\n/* -----------------------------------------------------------------------------\n *  6. DialogContent\n * -----------------------------------------------------------------------------\n *  The dialog itself. Radix automatically applies role=\"dialog\",\n *  aria-modal=\"true\", and focuses it when opened.\n */\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg\",\n        \"translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg\",\n        // Radix animations\n        \"duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]\",\n        \"data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\n        \"sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close\n        className={cn(\n          \"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background\",\n          \"transition-opacity hover:opacity-100 focus:outline-none focus:ring-2\",\n          \"focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none\",\n          \"data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\",\n        )}\n      >\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = \"DialogContent\";\n\n/* -----------------------------------------------------------------------------\n *  7. DialogHeader\n * -----------------------------------------------------------------------------\n *  Optional container for your dialog header. Typically holds <DialogTitle>.\n */\nconst DialogHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogHeader.displayName = \"DialogHeader\";\n\n/* -----------------------------------------------------------------------------\n *  8. DialogFooter\n * -----------------------------------------------------------------------------\n *  Optional container for your dialog footer (actions, buttons, etc.).\n */\nconst DialogFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogFooter.displayName = \"DialogFooter\";\n\n/* -----------------------------------------------------------------------------\n *  9. DialogTitle\n * -----------------------------------------------------------------------------\n *  The main title of your dialog. Radix automatically wires this up\n *  with the dialog for screen readers via `aria-labelledby`.\n */\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = \"DialogTitle\";\n\n/* -----------------------------------------------------------------------------\n *  10. DialogDescription\n * -----------------------------------------------------------------------------\n *  Additional descriptive text for your dialog. Radix connects this\n *  to the dialog for screen readers via `aria-describedby`.\n */\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = \"DialogDescription\";\n\n/* -----------------------------------------------------------------------------\n *  Exports\n * -----------------------------------------------------------------------------\n *  Exporting all sub-components to be used together in a cohesive dialog.\n */\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
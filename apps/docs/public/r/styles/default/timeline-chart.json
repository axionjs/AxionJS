{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "timeline-chart",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "registryDependencies": [
    "card",
    "chart"
  ],
  "files": [
    {
      "path": "charts/timeline-chart.tsx",
      "content": "\"use client\";\n\nimport { TrendingUp } from \"lucide-react\";\nimport {\n  Line,\n  LineChart,\n  ReferenceLine,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  CartesianGrid,\n} from \"recharts\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport {\n  type ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/default/ui/chart\";\n\nconst milestones = [\n  { date: \"2024-01-15\", event: \"Project Start\" },\n  { date: \"2024-02-10\", event: \"Design Phase Complete\" },\n  { date: \"2024-03-05\", event: \"Development Milestone 1\" },\n  { date: \"2024-04-20\", event: \"Testing Phase\" },\n  { date: \"2024-05-15\", event: \"Beta Release\" },\n  { date: \"2024-06-30\", event: \"Product Launch\" },\n];\n\nconst progressData = [\n  { date: \"2024-01-01\", progress: 0 },\n  { date: \"2024-01-15\", progress: 5 },\n  { date: \"2024-02-01\", progress: 15 },\n  { date: \"2024-02-10\", progress: 25 },\n  { date: \"2024-02-15\", progress: 30 },\n  { date: \"2024-03-01\", progress: 40 },\n  { date: \"2024-03-05\", progress: 45 },\n  { date: \"2024-03-15\", progress: 50 },\n  { date: \"2024-04-01\", progress: 60 },\n  { date: \"2024-04-20\", progress: 70 },\n  { date: \"2024-05-01\", progress: 80 },\n  { date: \"2024-05-15\", progress: 85 },\n  { date: \"2024-06-01\", progress: 95 },\n  { date: \"2024-06-30\", progress: 100 },\n];\n\nconst chartConfig = {\n  progress: {\n    label: \"Progress\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  milestone: {\n    label: \"Milestone\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig;\n\nexport function TimelineChart() {\n  // Function to determine optimal label position based on milestone index\n  const getLabelPosition = (index) => {\n    // Alternate positions to reduce overlap\n    return index % 2 === 0 ? \"top\" : \"bottom\";\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Timeline Chart</CardTitle>\n        <CardDescription>Project progress and milestones</CardDescription>\n      </CardHeader>\n      <CardContent className=\"h-auto\">\n        <ChartContainer config={chartConfig}>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n              accessibilityLayer\n              data={progressData}\n              margin={{ top: 40, right: 30, bottom: 40, left: 30 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"date\"\n                tickLine={false}\n                axisLine={false}\n                tickFormatter={(value) => {\n                  const date = new Date(value);\n                  return date.getMonth() + 1 + \"/\" + date.getDate();\n                }}\n              />\n              <YAxis\n                tickLine={false}\n                axisLine={false}\n                domain={[0, 100]}\n                tickFormatter={(value) => value + \"%\"}\n              />\n              <ChartTooltip\n                content={\n                  <ChartTooltipContent\n                    formatter={(value) => value + \"%\"}\n                    labelFormatter={(label) => {\n                      const date = new Date(label);\n                      return date.toLocaleDateString(\"en-US\", {\n                        month: \"short\",\n                        day: \"numeric\",\n                      });\n                    }}\n                  />\n                }\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"progress\"\n                stroke={chartConfig.progress.color}\n                strokeWidth={2}\n                dot={{ fill: chartConfig.progress.color, r: 4 }}\n              />\n              {milestones.map((milestone, index) => (\n                <ReferenceLine\n                  key={\"milestone-\" + index}\n                  x={milestone.date}\n                  stroke={chartConfig.milestone.color}\n                  strokeDasharray=\"3 3\"\n                  label={{\n                    value: milestone.event,\n                    position: getLabelPosition(index),\n                    fill: chartConfig.milestone.color,\n                    fontSize: 10,\n                    angle: -35,\n                    offset: 15,\n                  }}\n                />\n              ))}\n            </LineChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Project on track for June 30 launch <TrendingUp className=\"h-4 w-4\" />\n        </div>\n        <div className=\"leading-none text-muted-foreground\">\n          Vertical lines indicate key milestones\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
      "type": "registry:block",
      "target": ""
    }
  ],
  "categories": [
    "charts",
    "charts-timeline"
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "signup-form-2",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A signup form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "checkbox",
    "use-toast",
    "password-input",
    "separator",
    "badge"
  ],
  "files": [
    {
      "path": "blocks/signup-form-2.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useId } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport Link from \"next/link\";\r\nimport {\r\n  Loader2,\r\n  AtSignIcon,\r\n  UserIcon,\r\n  Check,\r\n  ArrowRight,\r\n  Shield,\r\n} from \"lucide-react\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n  FormDescription,\r\n} from \"@/registry/default/ui/form\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\r\nimport PasswordInput from \"@/registry/default/ui/password-input\";\r\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Separator } from \"@/registry/default/ui/separator\";\r\nimport { Badge } from \"@/registry/default/ui/badge\";\r\n\r\n// Define validation schema with strong password requirements\r\nconst formSchema = z\r\n  .object({\r\n    firstName: z\r\n      .string()\r\n      .min(2, { message: \"First name must be at least 2 characters\" }),\r\n    lastName: z\r\n      .string()\r\n      .min(2, { message: \"Last name must be at least 2 characters\" }),\r\n    email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n    password: z\r\n      .string()\r\n      .min(8, { message: \"Password must be at least 8 characters\" })\r\n      .regex(/[A-Z]/, {\r\n        message: \"Password must contain at least one uppercase letter\",\r\n      })\r\n      .regex(/[a-z]/, {\r\n        message: \"Password must contain at least one lowercase letter\",\r\n      })\r\n      .regex(/[0-9]/, { message: \"Password must contain at least one number\" }),\r\n    confirmPassword: z.string(),\r\n    terms: z.boolean().refine((val) => val === true, {\r\n      message: \"You must accept the terms and conditions\",\r\n    }),\r\n    marketingConsent: z.boolean().optional(),\r\n  })\r\n  .refine((data) => data.password === data.confirmPassword, {\r\n    message: \"Passwords do not match\",\r\n    path: [\"confirmPassword\"],\r\n  });\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\n// Define benefit items for the right panel\r\ninterface BenefitItem {\r\n  icon: React.ReactNode;\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nconst defaultBenefits: BenefitItem[] = [\r\n  {\r\n    icon: <Check className=\"h-5 w-5 text-primary\" />,\r\n    title: \"Free access to basic features\",\r\n    description: \"Get started with essential tools at no cost\",\r\n  },\r\n  {\r\n    icon: <Check className=\"h-5 w-5 text-primary\" />,\r\n    title: \"Premium support via email\",\r\n    description: \"Receive priority assistance when you need help\",\r\n  },\r\n  {\r\n    icon: <Check className=\"h-5 w-5 text-primary\" />,\r\n    title: \"Regular feature updates\",\r\n    description: \"Enjoy continuous improvements and new capabilities\",\r\n  },\r\n  {\r\n    icon: <Shield className=\"h-5 w-5 text-primary\" />,\r\n    title: \"Enhanced security features\",\r\n    description: \"Keep your data safe with advanced protection\",\r\n  },\r\n];\r\n\r\n// Social login providers\r\ninterface SocialProvider {\r\n  id: string;\r\n  name: string;\r\n  icon: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst defaultSocialProviders: SocialProvider[] = [\r\n  {\r\n    id: \"google\",\r\n    name: \"Google\",\r\n    icon: (\r\n      <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\r\n        <path\r\n          d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\r\n          fill=\"#4285F4\"\r\n        />\r\n        <path\r\n          d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\r\n          fill=\"#34A853\"\r\n        />\r\n        <path\r\n          d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\r\n          fill=\"#FBBC05\"\r\n        />\r\n        <path\r\n          d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\r\n          fill=\"#EA4335\"\r\n        />\r\n      </svg>\r\n    ),\r\n    className: \"hover:bg-red-50 hover:text-red-600 dark:hover:bg-red-950/30\",\r\n  },\r\n  {\r\n    id: \"facebook\",\r\n    name: \"Facebook\",\r\n    icon: (\r\n      <svg\r\n        className=\"mr-2 h-4 w-4\"\r\n        fill=\"currentColor\"\r\n        viewBox=\"0 0 24 24\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path d=\"M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z\" />\r\n      </svg>\r\n    ),\r\n    className: \"hover:bg-blue-50 hover:text-blue-600 dark:hover:bg-blue-950/30\",\r\n  },\r\n];\r\n\r\ninterface SignupFormProps {\r\n  /**\r\n   * Function to handle form submission\r\n   */\r\n  onSignup?: (data: FormValues) => Promise<void>;\r\n  /**\r\n   * Function to handle social login\r\n   */\r\n  onSocialSignup?: (provider: string) => Promise<void>;\r\n  /**\r\n   * URL to redirect to after successful signup\r\n   */\r\n  redirectTo?: string;\r\n  /**\r\n   * Custom form action for server-side form processing\r\n   */\r\n  formAction?: string;\r\n  /**\r\n   * URL for the login page\r\n   */\r\n  loginUrl?: string;\r\n  /**\r\n   * URL for the terms page\r\n   */\r\n  termsUrl?: string;\r\n  /**\r\n   * URL for the privacy policy page\r\n   */\r\n  privacyUrl?: string;\r\n  /**\r\n   * Custom title for the form\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Custom description for the form\r\n   */\r\n  description?: string;\r\n  /**\r\n   * Custom benefits to show on the right side\r\n   */\r\n  benefits?: BenefitItem[];\r\n  /**\r\n   * Social providers for alternative signup\r\n   */\r\n  socialProviders?: SocialProvider[];\r\n  /**\r\n   * Custom CSS class for the container\r\n   */\r\n  className?: string;\r\n  /**\r\n   * Custom promo title for the right panel\r\n   */\r\n  promoTitle?: string;\r\n  /**\r\n   * Custom promo description for the right panel\r\n   */\r\n  promoDescription?: string;\r\n  /**\r\n   * Whether to show marketing consent checkbox\r\n   */\r\n  showMarketingConsent?: boolean;\r\n  /**\r\n   * Custom color theme\r\n   */\r\n  colorTheme?: \"default\" | \"blue\" | \"green\" | \"purple\";\r\n}\r\n\r\nexport default function SignupForm({\r\n  onSignup,\r\n  onSocialSignup,\r\n  redirectTo,\r\n  formAction,\r\n  loginUrl = \"/login\",\r\n  termsUrl = \"/terms\",\r\n  privacyUrl = \"/privacy\",\r\n  title = \"Join our community\",\r\n  description = \"Create an account to get started\",\r\n  benefits = defaultBenefits,\r\n  socialProviders = defaultSocialProviders,\r\n  className,\r\n  promoTitle = \"Join thousands of users\",\r\n  promoDescription = \"Create your account today and get access to all features\",\r\n  showMarketingConsent = false,\r\n  colorTheme = \"default\",\r\n}: SignupFormProps) {\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = React.useState(\"\");\r\n  const { toast } = useToast();\r\n  const formRef = React.useRef<HTMLFormElement>(null);\r\n\r\n  const firstNameId = useId();\r\n  const lastNameId = useId();\r\n  const emailId = useId();\r\n  const passwordId = useId();\r\n  const confirmPasswordId = useId();\r\n\r\n  // Get theme classes based on color theme\r\n  const getThemeClasses = () => {\r\n    switch (colorTheme) {\r\n      case \"blue\":\r\n        return {\r\n          gradientFrom: \"from-blue-500/5\",\r\n          gradientTo: \"to-blue-500/30\",\r\n          textHighlight: \"text-blue-600 dark:text-blue-400\",\r\n          buttonHover: \"hover:bg-blue-600\",\r\n          accent: \"bg-blue-500/10\",\r\n        };\r\n      case \"green\":\r\n        return {\r\n          gradientFrom: \"from-green-500/5\",\r\n          gradientTo: \"to-green-500/30\",\r\n          textHighlight: \"text-green-600 dark:text-green-400\",\r\n          buttonHover: \"hover:bg-green-600\",\r\n          accent: \"bg-green-500/10\",\r\n        };\r\n      case \"purple\":\r\n        return {\r\n          gradientFrom: \"from-purple-500/5\",\r\n          gradientTo: \"to-purple-500/30\",\r\n          textHighlight: \"text-purple-600 dark:text-purple-400\",\r\n          buttonHover: \"hover:bg-purple-600\",\r\n          accent: \"bg-purple-500/10\",\r\n        };\r\n      default:\r\n        return {\r\n          gradientFrom: \"from-primary/5\",\r\n          gradientTo: \"to-primary/30\",\r\n          textHighlight: \"text-primary\",\r\n          buttonHover: \"hover:bg-primary/90\",\r\n          accent: \"bg-primary/10\",\r\n        };\r\n    }\r\n  };\r\n\r\n  const themeClasses = getThemeClasses();\r\n\r\n  // Password strength calculation\r\n  const calculatePasswordStrength = () => {\r\n    if (!password) return 0;\r\n\r\n    let strength = 0;\r\n\r\n    // Length check\r\n    if (password.length >= 8) strength += 1;\r\n\r\n    // Contains uppercase\r\n    if (/[A-Z]/.test(password)) strength += 1;\r\n\r\n    // Contains lowercase\r\n    if (/[a-z]/.test(password)) strength += 1;\r\n\r\n    // Contains number\r\n    if (/[0-9]/.test(password)) strength += 1;\r\n\r\n    // Contains special character\r\n    if (/[^A-Za-z0-9]/.test(password)) strength += 1;\r\n\r\n    return strength;\r\n  };\r\n\r\n  const passwordStrength = calculatePasswordStrength();\r\n  const passwordsMatch = password === confirmPassword && confirmPassword !== \"\";\r\n\r\n  // Form setup\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      terms: false,\r\n      marketingConsent: false,\r\n    },\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  // Handle social signup\r\n  const handleSocialSignup = async (providerId: string) => {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      if (onSocialSignup) {\r\n        await onSocialSignup(providerId);\r\n      } else {\r\n        // Simulate API call\r\n        await new Promise((resolve) => setTimeout(resolve, 1000));\r\n        console.log(`Signing up with ${providerId}`);\r\n\r\n        toast({\r\n          title: \"Account created\",\r\n          description: `Signed up with ${providerId}`,\r\n        });\r\n\r\n        if (redirectTo) {\r\n          window.location.href = redirectTo;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Social signup error with ${providerId}:`, error);\r\n\r\n      toast({\r\n        title: \"Signup failed\",\r\n        description: `Could not sign up with ${providerId}. Please try again.`,\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  async function handleSubmit(data: FormValues) {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      if (onSignup) {\r\n        await onSignup(data);\r\n      } else {\r\n        // Simulate API call\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(\"Signup data:\", data);\r\n\r\n        toast({\r\n          title: \"Account created\",\r\n          description: \"Your account has been created successfully.\",\r\n        });\r\n\r\n        if (redirectTo) {\r\n          window.location.href = redirectTo;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Signup error:\", error);\r\n\r\n      toast({\r\n        title: \"Signup failed\",\r\n        description:\r\n          \"There was a problem creating your account. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"flex min-h-screen flex-col lg:flex-row\", className)}>\r\n      {/* Left side - Form */}\r\n      <div className=\"w-full flex items-center justify-center p-4 sm:p-8\">\r\n        <div className=\"w-full max-w-md space-y-6\">\r\n          <div>\r\n            <h1 className=\"text-2xl sm:text-3xl font-bold\">{title}</h1>\r\n            <p className=\"text-muted-foreground mt-2\">{description}</p>\r\n          </div>\r\n\r\n          <Form {...form}>\r\n            <form\r\n              ref={formRef}\r\n              onSubmit={form.handleSubmit(handleSubmit)}\r\n              className=\"space-y-5\"\r\n              action={formAction}\r\n              noValidate\r\n            >\r\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"firstName\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor={firstNameId}>First name</FormLabel>\r\n                      <FormControl>\r\n                        <div className=\"relative\">\r\n                          <Input\r\n                            id={firstNameId}\r\n                            placeholder=\"John\"\r\n                            className=\"peer ps-9\"\r\n                            autoComplete=\"given-name\"\r\n                            aria-required=\"true\"\r\n                            {...field}\r\n                          />\r\n                          <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                            <UserIcon size={16} aria-hidden=\"true\" />\r\n                          </div>\r\n                        </div>\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"lastName\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor={lastNameId}>Last name</FormLabel>\r\n                      <FormControl>\r\n                        <div className=\"relative\">\r\n                          <Input\r\n                            id={lastNameId}\r\n                            placeholder=\"Doe\"\r\n                            className=\"peer ps-9\"\r\n                            autoComplete=\"family-name\"\r\n                            aria-required=\"true\"\r\n                            {...field}\r\n                          />\r\n                          <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                            <UserIcon size={16} aria-hidden=\"true\" />\r\n                          </div>\r\n                        </div>\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"email\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel htmlFor={emailId}>Email</FormLabel>\r\n                    <FormControl>\r\n                      <div className=\"relative\">\r\n                        <Input\r\n                          id={emailId}\r\n                          placeholder=\"name@example.com\"\r\n                          className=\"peer ps-9\"\r\n                          type=\"email\"\r\n                          autoComplete=\"email\"\r\n                          aria-required=\"true\"\r\n                          {...field}\r\n                        />\r\n                        <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                          <AtSignIcon size={16} aria-hidden=\"true\" />\r\n                        </div>\r\n                      </div>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"password\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel htmlFor={passwordId}>Password</FormLabel>\r\n                    <FormControl>\r\n                      <PasswordInput\r\n                        id={passwordId}\r\n                        value={password}\r\n                        onChange={(value) => {\r\n                          setPassword(value);\r\n                          field.onChange(value);\r\n                        }}\r\n                        autoComplete=\"new-password\"\r\n                        aria-required=\"true\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"confirmPassword\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel htmlFor={confirmPasswordId}>\r\n                      Confirm Password\r\n                    </FormLabel>\r\n                    <FormControl>\r\n                      <div className=\"relative\">\r\n                        <Input\r\n                          id={confirmPasswordId}\r\n                          type=\"password\"\r\n                          placeholder=\"••••••••\"\r\n                          className=\"peer ps-9\"\r\n                          value={confirmPassword}\r\n                          onChange={(e) => {\r\n                            setConfirmPassword(e.target.value);\r\n                            field.onChange(e.target.value);\r\n                          }}\r\n                          autoComplete=\"new-password\"\r\n                          aria-required=\"true\"\r\n                        />\r\n                        <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                          <Check size={16} aria-hidden=\"true\" />\r\n                        </div>\r\n                      </div>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"terms\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\r\n                    <FormControl>\r\n                      <Checkbox\r\n                        id=\"terms-checkbox\"\r\n                        checked={field.value}\r\n                        onCheckedChange={field.onChange}\r\n                        aria-required=\"true\"\r\n                      />\r\n                    </FormControl>\r\n                    <div className=\"space-y-1 leading-none\">\r\n                      <FormLabel\r\n                        htmlFor=\"terms-checkbox\"\r\n                        className=\"text-sm font-medium leading-none cursor-pointer\"\r\n                      >\r\n                        I agree to the{\" \"}\r\n                        <Link\r\n                          href={termsUrl}\r\n                          className={cn(\r\n                            \"hover:underline\",\r\n                            themeClasses.textHighlight,\r\n                          )}\r\n                          target=\"_blank\"\r\n                        >\r\n                          terms of service\r\n                        </Link>{\" \"}\r\n                        and{\" \"}\r\n                        <Link\r\n                          href={privacyUrl}\r\n                          className={cn(\r\n                            \"hover:underline\",\r\n                            themeClasses.textHighlight,\r\n                          )}\r\n                          target=\"_blank\"\r\n                        >\r\n                          privacy policy\r\n                        </Link>\r\n                      </FormLabel>\r\n                      <FormMessage />\r\n                    </div>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              {showMarketingConsent && (\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"marketingConsent\"\r\n                  render={({ field }) => (\r\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\r\n                      <FormControl>\r\n                        <Checkbox\r\n                          id=\"marketing-checkbox\"\r\n                          checked={field.value}\r\n                          onCheckedChange={field.onChange}\r\n                        />\r\n                      </FormControl>\r\n                      <div className=\"space-y-1 leading-none\">\r\n                        <FormLabel\r\n                          htmlFor=\"marketing-checkbox\"\r\n                          className=\"text-sm font-medium leading-none cursor-pointer\"\r\n                        >\r\n                          I agree to receive marketing emails and updates\r\n                        </FormLabel>\r\n                        <FormDescription className=\"text-xs\">\r\n                          We'll send occasional updates about new features and\r\n                          promotions\r\n                        </FormDescription>\r\n                      </div>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                className={cn(\"w-full h-11\", themeClasses.buttonHover)}\r\n                disabled={isLoading}\r\n                variant=\"linkHover\"\r\n                aria-label=\"Create account\"\r\n              >\r\n                {isLoading ? (\r\n                  <>\r\n                    <Loader2\r\n                      className=\"mr-2 h-4 w-4 animate-spin\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    <span>Creating account...</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <span>Create account</span>\r\n                    <ArrowRight className=\"ml-2 h-4 w-4\" aria-hidden=\"true\" />\r\n                  </>\r\n                )}\r\n              </Button>\r\n\r\n              <div className=\"relative\">\r\n                <div className=\"absolute inset-0 flex items-center\">\r\n                  <span className=\"w-full border-t\" />\r\n                </div>\r\n                <div className=\"relative flex justify-center text-xs uppercase\">\r\n                  <span className=\"bg-background px-2 text-muted-foreground\">\r\n                    Or sign up with\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                {socialProviders.map((provider) => (\r\n                  <Button\r\n                    key={provider.id}\r\n                    variant=\"outline\"\r\n                    type=\"button\"\r\n                    className={cn(\"h-11 transition-colors\", provider.className)}\r\n                    onClick={() => handleSocialSignup(provider.id)}\r\n                    disabled={isLoading}\r\n                    aria-label={`Sign up with ${provider.name}`}\r\n                  >\r\n                    {provider.icon}\r\n                    <span className=\"hidden xs:inline\">{provider.name}</span>\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n\r\n              <p className=\"text-center text-sm text-muted-foreground\">\r\n                Already have an account?{\" \"}\r\n                <Link\r\n                  href={loginUrl}\r\n                  className={cn(\r\n                    \"font-medium hover:underline\",\r\n                    themeClasses.textHighlight,\r\n                  )}\r\n                >\r\n                  Sign in\r\n                </Link>\r\n              </p>\r\n            </form>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Right side - Promotional content - hidden on small screens */}\r\n      <div className=\"hidden lg:block lg:w-1/2 bg-muted\">\r\n        <div\r\n          className={cn(\r\n            \"h-full flex items-center justify-center p-12 bg-gradient-to-br\",\r\n            themeClasses.gradientFrom,\r\n            themeClasses.gradientTo,\r\n          )}\r\n        >\r\n          <div className=\"max-w-md space-y-6 p-6 bg-background/80 backdrop-blur-sm rounded-xl shadow-lg\">\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center\">\r\n                <Badge variant=\"default\" className=\"mr-2 text-xs px-2 py-0.5\">\r\n                  New\r\n                </Badge>\r\n                <h2 className=\"text-2xl font-bold\">{promoTitle}</h2>\r\n              </div>\r\n              <p className=\"text-muted-foreground\">{promoDescription}</p>\r\n            </div>\r\n            <ul className=\"space-y-4\">\r\n              {benefits.map((benefit, index) => (\r\n                <li key={index} className=\"flex items-start gap-3\">\r\n                  <div\r\n                    className={cn(\r\n                      \"rounded-full p-1 mt-0.5\",\r\n                      themeClasses.accent,\r\n                    )}\r\n                  >\r\n                    {benefit.icon}\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"font-medium\">{benefit.title}</span>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      {benefit.description}\r\n                    </p>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <Separator />\r\n            <div>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                \"I've been using this platform for 3 months now, and it has\r\n                completely transformed how I work. The features are intuitive\r\n                and powerful.\"\r\n              </p>\r\n              <div className=\"mt-3 flex items-center\">\r\n                <div className=\"rounded-full bg-primary/10 h-8 w-8 flex items-center justify-center text-xs font-medium\">\r\n                  JD\r\n                </div>\r\n                <div className=\"ml-2\">\r\n                  <p className=\"text-sm font-medium\">Jane Doe</p>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    Product Designer\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
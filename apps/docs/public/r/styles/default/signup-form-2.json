{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "signup-form-2",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A signup form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "checkbox",
    "use-toast",
    "password-input",
    "separator",
    "badge"
  ],
  "files": [
    {
      "path": "blocks/signup-form-2.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useId } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Link from \"next/link\";\nimport {\n  Loader2,\n  AtSignIcon,\n  UserIcon,\n  Check,\n  ArrowRight,\n  Shield,\n} from \"lucide-react\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/registry/default/ui/form\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport PasswordInput from \"@/registry/default/ui/password-input\";\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\nimport { Separator } from \"@/registry/default/ui/separator\";\nimport { Badge } from \"@/registry/default/ui/badge\";\n\n// Define validation schema with strong password requirements\nconst formSchema = z\n  .object({\n    firstName: z\n      .string()\n      .min(2, { message: \"First name must be at least 2 characters\" }),\n    lastName: z\n      .string()\n      .min(2, { message: \"Last name must be at least 2 characters\" }),\n    email: z.string().email({ message: \"Please enter a valid email address\" }),\n    password: z\n      .string()\n      .min(8, { message: \"Password must be at least 8 characters\" })\n      .regex(/[A-Z]/, {\n        message: \"Password must contain at least one uppercase letter\",\n      })\n      .regex(/[a-z]/, {\n        message: \"Password must contain at least one lowercase letter\",\n      })\n      .regex(/[0-9]/, { message: \"Password must contain at least one number\" }),\n    confirmPassword: z.string(),\n    terms: z.boolean().refine((val) => val === true, {\n      message: \"You must accept the terms and conditions\",\n    }),\n    marketingConsent: z.boolean().optional(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  });\n\ntype FormValues = z.infer<typeof formSchema>;\n\n// Define benefit items for the right panel\ninterface BenefitItem {\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n}\n\nconst defaultBenefits: BenefitItem[] = [\n  {\n    icon: <Check className=\"h-5 w-5 text-primary\" />,\n    title: \"Free access to basic features\",\n    description: \"Get started with essential tools at no cost\",\n  },\n  {\n    icon: <Check className=\"h-5 w-5 text-primary\" />,\n    title: \"Premium support via email\",\n    description: \"Receive priority assistance when you need help\",\n  },\n  {\n    icon: <Check className=\"h-5 w-5 text-primary\" />,\n    title: \"Regular feature updates\",\n    description: \"Enjoy continuous improvements and new capabilities\",\n  },\n  {\n    icon: <Shield className=\"h-5 w-5 text-primary\" />,\n    title: \"Enhanced security features\",\n    description: \"Keep your data safe with advanced protection\",\n  },\n];\n\n// Social login providers\ninterface SocialProvider {\n  id: string;\n  name: string;\n  icon: React.ReactNode;\n  className?: string;\n}\n\nconst defaultSocialProviders: SocialProvider[] = [\n  {\n    id: \"google\",\n    name: \"Google\",\n    icon: (\n      <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n        <path\n          d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n          fill=\"#4285F4\"\n        />\n        <path\n          d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n          fill=\"#34A853\"\n        />\n        <path\n          d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n          fill=\"#FBBC05\"\n        />\n        <path\n          d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n          fill=\"#EA4335\"\n        />\n      </svg>\n    ),\n    className: \"hover:bg-red-50 hover:text-red-600 dark:hover:bg-red-950/30\",\n  },\n  {\n    id: \"facebook\",\n    name: \"Facebook\",\n    icon: (\n      <svg\n        className=\"mr-2 h-4 w-4\"\n        fill=\"currentColor\"\n        viewBox=\"0 0 24 24\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z\" />\n      </svg>\n    ),\n    className: \"hover:bg-blue-50 hover:text-blue-600 dark:hover:bg-blue-950/30\",\n  },\n];\n\ninterface SignupFormProps {\n  /**\n   * Function to handle form submission\n   */\n  onSignup?: (data: FormValues) => Promise<void>;\n  /**\n   * Function to handle social login\n   */\n  onSocialSignup?: (provider: string) => Promise<void>;\n  /**\n   * URL to redirect to after successful signup\n   */\n  redirectTo?: string;\n  /**\n   * Custom form action for server-side form processing\n   */\n  formAction?: string;\n  /**\n   * URL for the login page\n   */\n  loginUrl?: string;\n  /**\n   * URL for the terms page\n   */\n  termsUrl?: string;\n  /**\n   * URL for the privacy policy page\n   */\n  privacyUrl?: string;\n  /**\n   * Custom title for the form\n   */\n  title?: string;\n  /**\n   * Custom description for the form\n   */\n  description?: string;\n  /**\n   * Custom benefits to show on the right side\n   */\n  benefits?: BenefitItem[];\n  /**\n   * Social providers for alternative signup\n   */\n  socialProviders?: SocialProvider[];\n  /**\n   * Custom CSS class for the container\n   */\n  className?: string;\n  /**\n   * Custom promo title for the right panel\n   */\n  promoTitle?: string;\n  /**\n   * Custom promo description for the right panel\n   */\n  promoDescription?: string;\n  /**\n   * Whether to show marketing consent checkbox\n   */\n  showMarketingConsent?: boolean;\n  /**\n   * Custom color theme\n   */\n  colorTheme?: \"default\" | \"blue\" | \"green\" | \"purple\";\n}\n\nexport default function SignupForm({\n  onSignup,\n  onSocialSignup,\n  redirectTo,\n  formAction,\n  loginUrl = \"/login\",\n  termsUrl = \"/terms\",\n  privacyUrl = \"/privacy\",\n  title = \"Join our community\",\n  description = \"Create an account to get started\",\n  benefits = defaultBenefits,\n  socialProviders = defaultSocialProviders,\n  className,\n  promoTitle = \"Join thousands of users\",\n  promoDescription = \"Create your account today and get access to all features\",\n  showMarketingConsent = false,\n  colorTheme = \"default\",\n}: SignupFormProps) {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [password, setPassword] = React.useState(\"\");\n  const [confirmPassword, setConfirmPassword] = React.useState(\"\");\n  const { toast } = useToast();\n  const formRef = React.useRef<HTMLFormElement>(null);\n\n  const firstNameId = useId();\n  const lastNameId = useId();\n  const emailId = useId();\n  const passwordId = useId();\n  const confirmPasswordId = useId();\n\n  // Get theme classes based on color theme\n  const getThemeClasses = () => {\n    switch (colorTheme) {\n      case \"blue\":\n        return {\n          gradientFrom: \"from-blue-500/5\",\n          gradientTo: \"to-blue-500/30\",\n          textHighlight: \"text-blue-600 dark:text-blue-400\",\n          buttonHover: \"hover:bg-blue-600\",\n          accent: \"bg-blue-500/10\",\n        };\n      case \"green\":\n        return {\n          gradientFrom: \"from-green-500/5\",\n          gradientTo: \"to-green-500/30\",\n          textHighlight: \"text-green-600 dark:text-green-400\",\n          buttonHover: \"hover:bg-green-600\",\n          accent: \"bg-green-500/10\",\n        };\n      case \"purple\":\n        return {\n          gradientFrom: \"from-purple-500/5\",\n          gradientTo: \"to-purple-500/30\",\n          textHighlight: \"text-purple-600 dark:text-purple-400\",\n          buttonHover: \"hover:bg-purple-600\",\n          accent: \"bg-purple-500/10\",\n        };\n      default:\n        return {\n          gradientFrom: \"from-primary/5\",\n          gradientTo: \"to-primary/30\",\n          textHighlight: \"text-primary\",\n          buttonHover: \"hover:bg-primary/90\",\n          accent: \"bg-primary/10\",\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  // Password strength calculation\n  const calculatePasswordStrength = () => {\n    if (!password) return 0;\n\n    let strength = 0;\n\n    // Length check\n    if (password.length >= 8) strength += 1;\n\n    // Contains uppercase\n    if (/[A-Z]/.test(password)) strength += 1;\n\n    // Contains lowercase\n    if (/[a-z]/.test(password)) strength += 1;\n\n    // Contains number\n    if (/[0-9]/.test(password)) strength += 1;\n\n    // Contains special character\n    if (/[^A-Za-z0-9]/.test(password)) strength += 1;\n\n    return strength;\n  };\n\n  const passwordStrength = calculatePasswordStrength();\n  const passwordsMatch = password === confirmPassword && confirmPassword !== \"\";\n\n  // Form setup\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      terms: false,\n      marketingConsent: false,\n    },\n    mode: \"onBlur\",\n  });\n\n  // Handle social signup\n  const handleSocialSignup = async (providerId: string) => {\n    try {\n      setIsLoading(true);\n\n      if (onSocialSignup) {\n        await onSocialSignup(providerId);\n      } else {\n        // Simulate API call\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        console.log(`Signing up with ${providerId}`);\n\n        toast({\n          title: \"Account created\",\n          description: `Signed up with ${providerId}`,\n        });\n\n        if (redirectTo) {\n          window.location.href = redirectTo;\n        }\n      }\n    } catch (error) {\n      console.error(`Social signup error with ${providerId}:`, error);\n\n      toast({\n        title: \"Signup failed\",\n        description: `Could not sign up with ${providerId}. Please try again.`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle form submission\n  async function handleSubmit(data: FormValues) {\n    try {\n      setIsLoading(true);\n\n      if (onSignup) {\n        await onSignup(data);\n      } else {\n        // Simulate API call\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(\"Signup data:\", data);\n\n        toast({\n          title: \"Account created\",\n          description: \"Your account has been created successfully.\",\n        });\n\n        if (redirectTo) {\n          window.location.href = redirectTo;\n        }\n      }\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n\n      toast({\n        title: \"Signup failed\",\n        description:\n          \"There was a problem creating your account. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className={cn(\"flex min-h-screen flex-col lg:flex-row\", className)}>\n      {/* Left side - Form */}\n      <div className=\"w-full flex items-center justify-center p-4 sm:p-8\">\n        <div className=\"w-full max-w-md space-y-6\">\n          <div>\n            <h1 className=\"text-2xl sm:text-3xl font-bold\">{title}</h1>\n            <p className=\"text-muted-foreground mt-2\">{description}</p>\n          </div>\n\n          <Form {...form}>\n            <form\n              ref={formRef}\n              onSubmit={form.handleSubmit(handleSubmit)}\n              className=\"space-y-5\"\n              action={formAction}\n              noValidate\n            >\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor={firstNameId}>First name</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            id={firstNameId}\n                            placeholder=\"John\"\n                            className=\"peer ps-9\"\n                            autoComplete=\"given-name\"\n                            aria-required=\"true\"\n                            {...field}\n                          />\n                          <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                            <UserIcon size={16} aria-hidden=\"true\" />\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor={lastNameId}>Last name</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            id={lastNameId}\n                            placeholder=\"Doe\"\n                            className=\"peer ps-9\"\n                            autoComplete=\"family-name\"\n                            aria-required=\"true\"\n                            {...field}\n                          />\n                          <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                            <UserIcon size={16} aria-hidden=\"true\" />\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor={emailId}>Email</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          id={emailId}\n                          placeholder=\"name@example.com\"\n                          className=\"peer ps-9\"\n                          type=\"email\"\n                          autoComplete=\"email\"\n                          aria-required=\"true\"\n                          {...field}\n                        />\n                        <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                          <AtSignIcon size={16} aria-hidden=\"true\" />\n                        </div>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor={passwordId}>Password</FormLabel>\n                    <FormControl>\n                      <PasswordInput\n                        id={passwordId}\n                        value={password}\n                        onChange={(value) => {\n                          setPassword(value);\n                          field.onChange(value);\n                        }}\n                        autoComplete=\"new-password\"\n                        aria-required=\"true\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor={confirmPasswordId}>\n                      Confirm Password\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          id={confirmPasswordId}\n                          type=\"password\"\n                          placeholder=\"••••••••\"\n                          className=\"peer ps-9\"\n                          value={confirmPassword}\n                          onChange={(e) => {\n                            setConfirmPassword(e.target.value);\n                            field.onChange(e.target.value);\n                          }}\n                          autoComplete=\"new-password\"\n                          aria-required=\"true\"\n                        />\n                        <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                          <Check size={16} aria-hidden=\"true\" />\n                        </div>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"terms\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        id=\"terms-checkbox\"\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        aria-required=\"true\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel\n                        htmlFor=\"terms-checkbox\"\n                        className=\"text-sm font-medium leading-none cursor-pointer\"\n                      >\n                        I agree to the{\" \"}\n                        <Link\n                          href={termsUrl}\n                          className={cn(\n                            \"hover:underline\",\n                            themeClasses.textHighlight,\n                          )}\n                          target=\"_blank\"\n                        >\n                          terms of service\n                        </Link>{\" \"}\n                        and{\" \"}\n                        <Link\n                          href={privacyUrl}\n                          className={cn(\n                            \"hover:underline\",\n                            themeClasses.textHighlight,\n                          )}\n                          target=\"_blank\"\n                        >\n                          privacy policy\n                        </Link>\n                      </FormLabel>\n                      <FormMessage />\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              {showMarketingConsent && (\n                <FormField\n                  control={form.control}\n                  name=\"marketingConsent\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox\n                          id=\"marketing-checkbox\"\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel\n                          htmlFor=\"marketing-checkbox\"\n                          className=\"text-sm font-medium leading-none cursor-pointer\"\n                        >\n                          I agree to receive marketing emails and updates\n                        </FormLabel>\n                        <FormDescription className=\"text-xs\">\n                          We'll send occasional updates about new features and\n                          promotions\n                        </FormDescription>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <Button\n                type=\"submit\"\n                className={cn(\"w-full h-11\", themeClasses.buttonHover)}\n                disabled={isLoading}\n                variant=\"linkHover\"\n                aria-label=\"Create account\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2\n                      className=\"mr-2 h-4 w-4 animate-spin\"\n                      aria-hidden=\"true\"\n                    />\n                    <span>Creating account...</span>\n                  </>\n                ) : (\n                  <>\n                    <span>Create account</span>\n                    <ArrowRight className=\"ml-2 h-4 w-4\" aria-hidden=\"true\" />\n                  </>\n                )}\n              </Button>\n\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-background px-2 text-muted-foreground\">\n                    Or sign up with\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                {socialProviders.map((provider) => (\n                  <Button\n                    key={provider.id}\n                    variant=\"outline\"\n                    type=\"button\"\n                    className={cn(\"h-11 transition-colors\", provider.className)}\n                    onClick={() => handleSocialSignup(provider.id)}\n                    disabled={isLoading}\n                    aria-label={`Sign up with ${provider.name}`}\n                  >\n                    {provider.icon}\n                    <span className=\"hidden xs:inline\">{provider.name}</span>\n                  </Button>\n                ))}\n              </div>\n\n              <p className=\"text-center text-sm text-muted-foreground\">\n                Already have an account?{\" \"}\n                <Link\n                  href={loginUrl}\n                  className={cn(\n                    \"font-medium hover:underline\",\n                    themeClasses.textHighlight,\n                  )}\n                >\n                  Sign in\n                </Link>\n              </p>\n            </form>\n          </Form>\n        </div>\n      </div>\n\n      {/* Right side - Promotional content - hidden on small screens */}\n      <div className=\"hidden lg:block lg:w-1/2 bg-muted\">\n        <div\n          className={cn(\n            \"h-full flex items-center justify-center p-12 bg-gradient-to-br\",\n            themeClasses.gradientFrom,\n            themeClasses.gradientTo,\n          )}\n        >\n          <div className=\"max-w-md space-y-6 p-6 bg-background/80 backdrop-blur-sm rounded-xl shadow-lg\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center\">\n                <Badge variant=\"default\" className=\"mr-2 text-xs px-2 py-0.5\">\n                  New\n                </Badge>\n                <h2 className=\"text-2xl font-bold\">{promoTitle}</h2>\n              </div>\n              <p className=\"text-muted-foreground\">{promoDescription}</p>\n            </div>\n            <ul className=\"space-y-4\">\n              {benefits.map((benefit, index) => (\n                <li key={index} className=\"flex items-start gap-3\">\n                  <div\n                    className={cn(\n                      \"rounded-full p-1 mt-0.5\",\n                      themeClasses.accent,\n                    )}\n                  >\n                    {benefit.icon}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">{benefit.title}</span>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {benefit.description}\n                    </p>\n                  </div>\n                </li>\n              ))}\n            </ul>\n            <Separator />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">\n                \"I've been using this platform for 3 months now, and it has\n                completely transformed how I work. The features are intuitive\n                and powerful.\"\n              </p>\n              <div className=\"mt-3 flex items-center\">\n                <div className=\"rounded-full bg-primary/10 h-8 w-8 flex items-center justify-center text-xs font-medium\">\n                  JD\n                </div>\n                <div className=\"ml-2\">\n                  <p className=\"text-sm font-medium\">Jane Doe</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Product Designer\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-geolocation",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-geolocation.tsx",
      "content": "import { useState, useEffect, useCallback, useRef } from \"react\";\n\ninterface GeolocationOptions {\n  /** Whether to watch position continuously (default: false) */\n  watch?: boolean;\n  /** Geolocation API enableHighAccuracy option (default: false) */\n  enableHighAccuracy?: boolean;\n  /** Geolocation API timeout in milliseconds (default: 10000) */\n  timeout?: number;\n  /** Geolocation API maximumAge in milliseconds (default: 0) */\n  maximumAge?: number;\n  /** Automatically request permission on mount (default: true) */\n  autoRequest?: boolean;\n}\n\ninterface GeolocationPosition {\n  latitude: number;\n  longitude: number;\n  accuracy: number;\n  altitude: number | null;\n  altitudeAccuracy: number | null;\n  heading: number | null;\n  speed: number | null;\n  timestamp: number;\n}\n\ninterface GeolocationState {\n  isSupported: boolean;\n  position: GeolocationPosition | null;\n  error: GeolocationPositionError | null;\n  isLoading: boolean;\n  permissionState: PermissionState | null;\n}\n\n/**\n * Custom hook for accessing and watching browser geolocation\n *\n * @param options Configuration options for the geolocation API\n * @returns Object containing geolocation state and control functions\n */\nexport function useGeolocation(options: GeolocationOptions = {}) {\n  const {\n    watch = false,\n    enableHighAccuracy = false,\n    timeout = 10000,\n    maximumAge = 0,\n    autoRequest = true,\n  } = options;\n\n  const [state, setState] = useState<GeolocationState>({\n    isSupported: typeof navigator !== \"undefined\" && \"geolocation\" in navigator,\n    position: null,\n    error: null,\n    isLoading: false,\n    permissionState: null,\n  });\n\n  const watchIdRef = useRef<number | null>(null);\n  const isMountedRef = useRef(true);\n\n  // Check permission status\n  const checkPermission = useCallback(async () => {\n    if (typeof navigator === \"undefined\" || !(\"permissions\" in navigator)) {\n      return null;\n    }\n\n    try {\n      const permission = await navigator.permissions.query({\n        name: \"geolocation\" as PermissionName,\n      });\n\n      if (isMountedRef.current) {\n        setState((prev) => ({ ...prev, permissionState: permission.state }));\n      }\n\n      // Listen for permission changes\n      permission.addEventListener(\"change\", () => {\n        if (isMountedRef.current) {\n          setState((prev) => ({ ...prev, permissionState: permission.state }));\n        }\n      });\n\n      return permission.state;\n    } catch (error) {\n      console.error(\"Error checking geolocation permission:\", error);\n      return null;\n    }\n  }, []);\n\n  // Get current position\n  const getPosition = useCallback(() => {\n    if (!state.isSupported) {\n      setState((prev) => ({\n        ...prev,\n        error: {\n          code: 0,\n          message: \"Geolocation is not supported in this browser\",\n          PERMISSION_DENIED: 1,\n          POSITION_UNAVAILABLE: 2,\n          TIMEOUT: 3,\n        } as GeolocationPositionError,\n        isLoading: false,\n      }));\n      return;\n    }\n\n    setState((prev) => ({ ...prev, isLoading: true }));\n\n    const geoOptions: PositionOptions = {\n      enableHighAccuracy,\n      timeout,\n      maximumAge,\n    };\n\n    if (watch) {\n      if (watchIdRef.current) {\n        navigator.geolocation.clearWatch(watchIdRef.current);\n      }\n\n      watchIdRef.current = navigator.geolocation.watchPosition(\n        (position) => {\n          if (isMountedRef.current) {\n            setState((prev) => ({\n              ...prev,\n              position: {\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude,\n                accuracy: position.coords.accuracy,\n                altitude: position.coords.altitude,\n                altitudeAccuracy: position.coords.altitudeAccuracy,\n                heading: position.coords.heading,\n                speed: position.coords.speed,\n                timestamp: position.timestamp,\n              },\n              error: null,\n              isLoading: false,\n            }));\n          }\n        },\n        (error) => {\n          if (isMountedRef.current) {\n            setState((prev) => ({\n              ...prev,\n              error,\n              isLoading: false,\n            }));\n          }\n        },\n        geoOptions,\n      );\n    } else {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          if (isMountedRef.current) {\n            setState((prev) => ({\n              ...prev,\n              position: {\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude,\n                accuracy: position.coords.accuracy,\n                altitude: position.coords.altitude,\n                altitudeAccuracy: position.coords.altitudeAccuracy,\n                heading: position.coords.heading,\n                speed: position.coords.speed,\n                timestamp: position.timestamp,\n              },\n              error: null,\n              isLoading: false,\n            }));\n          }\n        },\n        (error) => {\n          if (isMountedRef.current) {\n            setState((prev) => ({\n              ...prev,\n              error,\n              isLoading: false,\n            }));\n          }\n        },\n        geoOptions,\n      );\n    }\n  }, [state.isSupported, enableHighAccuracy, timeout, maximumAge, watch]);\n\n  // Stop watching position\n  const stopWatching = useCallback(() => {\n    if (watchIdRef.current !== null) {\n      navigator.geolocation.clearWatch(watchIdRef.current);\n      watchIdRef.current = null;\n    }\n  }, []);\n\n  // Initialize\n  useEffect(() => {\n    isMountedRef.current = true;\n    checkPermission();\n\n    if (autoRequest) {\n      getPosition();\n    }\n\n    return () => {\n      isMountedRef.current = false;\n      stopWatching();\n    };\n  }, [autoRequest, checkPermission, getPosition, stopWatching]);\n\n  return {\n    ...state,\n    getPosition,\n    stopWatching,\n    checkPermission,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
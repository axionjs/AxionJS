{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "login-form",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Login form with email and password fields.",
  "dependencies": [
    "zod",
    "@hookform/resolvers"
  ],
  "registryDependencies": [
    "form",
    "input",
    "button",
    "label",
    "auth-actions",
    "two-factor-actions",
    "form-success",
    "form-error",
    "card-wrapper"
  ],
  "files": [
    {
      "path": "auth/components/login-form.tsx",
      "content": "\"use client\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { useState, useTransition } from \"react\";\r\nimport { useSearchParams, useRouter } from \"next/navigation\";\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormControl,\r\n  FormLabel,\r\n  FormItem,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\";\r\nimport { LoginSchema } from \"@/registry/default/auth/schemas\";\r\nimport { CardWrapper } from \"@/registry/default/auth/components/card-wrapper\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { FormError } from \"@/registry/default/auth/components/form-error\";\r\nimport { FormSuccess } from \"@/registry/default/auth/components/form-success\";\r\nimport { login } from \"@/registry/default/auth/actions/auth-actions\";\r\nimport Link from \"next/link\";\r\n\r\nexport const LoginForm = () => {\r\n  const searchParams = useSearchParams();\r\n  const callbackUrl = searchParams.get(\"callbackUrl\");\r\n  const urlError =\r\n    searchParams.get(\"error\") === \"OAuthAccountNotLinked\"\r\n      ? \"Email already in use with different provider!\"\r\n      : \"\";\r\n\r\n  const [showTwoFactor, setShowTwoFactor] = useState(false);\r\n  const [error, setError] = useState<string | undefined>(\"\");\r\n  const [success, setSuccess] = useState<string | undefined>(\"\");\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const router = useRouter();\r\n\r\n  const form = useForm<z.infer<typeof LoginSchema>>({\r\n    resolver: zodResolver(LoginSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      code: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof LoginSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    startTransition(() => {\r\n      login(values, callbackUrl)\r\n        .then((data) => {\r\n          if (data?.error) {\r\n            form.reset();\r\n            setError(data.error);\r\n          }\r\n\r\n          if (data?.success) {\r\n            form.reset();\r\n            setSuccess(data.success);\r\n            router.push(callbackUrl || \"/dashboard\");\r\n          }\r\n\r\n          if (data?.twoFactor) {\r\n            setShowTwoFactor(true);\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setError(\"\");\r\n        });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Login\"\r\n      subHeaderLabel=\"Welcome Back\"\r\n      backButtonLabel=\"Don't have an account?\"\r\n      backButtonHref=\"/auth/register\"\r\n      showSocial\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            {showTwoFactor && (\r\n              <>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"code\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Two Factor Code</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          disabled={isPending}\r\n                          {...field}\r\n                          placeholder=\"123456\"\r\n                          type=\"text\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <span className=\"text-sm text-gray-500\">\r\n                  Check your inbox for the 2FA Code\r\n                </span>\r\n              </>\r\n            )}\r\n            {!showTwoFactor && (\r\n              <>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Email</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          disabled={isPending}\r\n                          {...field}\r\n                          placeholder=\"jhon.doe@example.com\"\r\n                          type=\"email\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"password\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Password</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          disabled={isPending}\r\n                          {...field}\r\n                          placeholder=\"******\"\r\n                          type=\"password\"\r\n                        />\r\n                      </FormControl>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"link\"\r\n                        asChild\r\n                        className=\"px-0 font-normal\"\r\n                      >\r\n                        <Link href=\"/auth/reset\">Forgot password?</Link>\r\n                      </Button>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </>\r\n            )}\r\n          </div>\r\n          <FormError message={error || urlError} />\r\n          <FormSuccess message={success} />\r\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\r\n            {showTwoFactor ? \"Confirm\" : \"Login\"}\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "auth/schemas/index.ts",
      "content": "import * as z from \"zod\";\r\n\r\nexport const LoginSchema = z.object({\r\n  email: z.string().email({\r\n    message: \"Invalid email address\",\r\n  }),\r\n  password: z.string().min(1, {\r\n    message: \"Password is required\",\r\n  }),\r\n  code: z.optional(z.string()),\r\n});\r\n\r\nexport const RegisterSchema = z.object({\r\n  email: z.string().email({\r\n    message: \"Invalid email address\",\r\n  }),\r\n  password: z.string().min(6, {\r\n    message: \"Password must be at least 6 characters\",\r\n  }),\r\n  name: z.string().min(1, {\r\n    message: \"Name is required\",\r\n  }),\r\n});\r\n\r\nexport const ResetSchema = z.object({\r\n  email: z.string().email({\r\n    message: \"Email is required\",\r\n  }),\r\n});\r\n\r\nexport const NewPasswordSchema = z.object({\r\n  password: z.string().min(6, { message: \"Minimum 6 characters required\" }),\r\n});\r\n\r\nexport const SettingsSchema = z.object({\r\n  name: z.optional(z.string()),\r\n  isTwoFactorEnabled: z.optional(z.boolean()),\r\n  email: z.optional(z.string().email({ message: \"Invalid email\" })),\r\n});\r\n\r\nexport const ChangePasswordSchema = z\r\n  .object({\r\n    currentPassword: z.string().min(1, \"Current password is required\"),\r\n    newPassword: z\r\n      .string()\r\n      .min(6, \"New password must be at least 6 characters\"),\r\n    confirmPassword: z\r\n      .string()\r\n      .min(6, \"Confirm password must be at least 6 characters\"),\r\n  })\r\n  .refine((data) => data.newPassword === data.confirmPassword, {\r\n    message: \"Passwords do not match\",\r\n    path: [\"confirmPassword\"],\r\n  });\r\n",
      "type": "registry:schemas",
      "target": ""
    },
    {
      "path": "auth/route.ts",
      "content": "import { handlers } from \"@/registry/default/auth/lib/auth\";\r\nexport const { GET, POST } = handlers;\r\n",
      "type": "registry:api",
      "target": ""
    }
  ]
}
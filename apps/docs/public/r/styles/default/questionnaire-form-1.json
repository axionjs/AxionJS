{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "questionnaire-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A questionnaire form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card",
    "radio-group",
    "checkbox",
    "textarea",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/questionnaire-form-1.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Loader2 } from \"lucide-react\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/registry/default/ui/form\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/default/ui/radio-group\";\nimport { Textarea } from \"@/registry/default/ui/textarea\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\n\nconst formSchema = z.object({\n  satisfaction: z.enum(\n    [\n      \"very-satisfied\",\n      \"satisfied\",\n      \"neutral\",\n      \"dissatisfied\",\n      \"very-dissatisfied\",\n    ],\n    {\n      required_error: \"Please select your satisfaction level\",\n    },\n  ),\n  usability: z.enum(\n    [\"very-easy\", \"easy\", \"neutral\", \"difficult\", \"very-difficult\"],\n    {\n      required_error: \"Please select a usability rating\",\n    },\n  ),\n  features: z\n    .array(z.string())\n    .min(1, { message: \"Please select at least one feature\" }),\n  improvements: z\n    .string()\n    .min(10, { message: \"Please provide at least 10 characters\" })\n    .max(500, { message: \"Please keep your response under 500 characters\" }),\n  contactConsent: z.boolean().optional(),\n  email: z\n    .string()\n    .email({ message: \"Please enter a valid email address\" })\n    .optional()\n    .or(z.literal(\"\")),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\n// Define features list with proper type\ninterface Feature {\n  id: string;\n  label: string;\n  description?: string;\n}\n\nconst features: Feature[] = [\n  {\n    id: \"dashboard\",\n    label: \"Dashboard\",\n    description: \"Overview of your account and activity\",\n  },\n  {\n    id: \"analytics\",\n    label: \"Analytics\",\n    description: \"Data analysis and reporting tools\",\n  },\n  {\n    id: \"automation\",\n    label: \"Automation\",\n    description: \"Workflow and task automation features\",\n  },\n  {\n    id: \"integrations\",\n    label: \"Integrations\",\n    description: \"Connections with other services and tools\",\n  },\n  {\n    id: \"mobile-app\",\n    label: \"Mobile App\",\n    description: \"iOS and Android applications\",\n  },\n];\n\ninterface QuestionnaireFormProps {\n  /**\n   * Optional callback that runs after successful form submission\n   */\n  onSubmitSuccess?: (data: FormValues) => void;\n  /**\n   * Optional callback that runs if submission fails\n   */\n  onSubmitError?: (error: unknown) => void;\n  /**\n   * Custom form action for server submission\n   */\n  formAction?: string;\n  /**\n   * Product name to display in the title\n   */\n  productName?: string;\n  /**\n   * Whether to allow users to be contacted about their feedback\n   */\n  enableContactOption?: boolean;\n}\n\nexport default function QuestionnaireForm({\n  onSubmitSuccess,\n  onSubmitError,\n  formAction,\n  productName = \"Our Product\",\n  enableContactOption = true,\n}: QuestionnaireFormProps) {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  const { toast } = useToast();\n  const textareaRef = React.useRef<HTMLTextAreaElement>(null);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      satisfaction: undefined,\n      usability: undefined,\n      features: [],\n      improvements: \"\",\n      contactConsent: false,\n      email: \"\",\n    },\n    mode: \"onBlur\",\n  });\n\n  const watchContactConsent = form.watch(\"contactConsent\");\n  const watchImprovements = form.watch(\"improvements\");\n\n  // Focus email field when contact consent is checked\n  React.useEffect(() => {\n    if (watchContactConsent) {\n      const emailField = document.getElementById(\"email-input\");\n      if (emailField) {\n        emailField.focus();\n      }\n    }\n  }, [watchContactConsent]);\n\n  async function onSubmit(data: FormValues) {\n    try {\n      setIsLoading(true);\n\n      if (!formAction) {\n        // Simulate API call (replace with actual API call)\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(data);\n      }\n\n      setIsSubmitted(true);\n\n      toast({\n        title: \"Feedback submitted!\",\n        description: \"Thank you for your valuable feedback.\",\n      });\n\n      if (onSubmitSuccess) {\n        onSubmitSuccess(data);\n      }\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n\n      toast({\n        title: \"Submission failed\",\n        description:\n          \"There was a problem submitting your feedback. Please try again.\",\n        variant: \"destructive\",\n      });\n\n      if (onSubmitError) {\n        onSubmitError(error);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto shadow-md\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">{productName} Feedback</CardTitle>\n        <CardDescription>\n          Help us improve our product by sharing your experience\n        </CardDescription>\n      </CardHeader>\n      {isSubmitted ? (\n        <CardContent className=\"space-y-4\">\n          <div\n            className=\"rounded-md bg-primary/10 p-6 flex flex-col items-center justify-center text-center\"\n            role=\"alert\"\n          >\n            <div className=\"rounded-full bg-primary/20 p-3 mb-4\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                strokeWidth={1.5}\n                stroke=\"currentColor\"\n                className=\"w-8 h-8 text-primary\"\n                aria-hidden=\"true\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-medium\">Thank You!</h3>\n            <p className=\"text-muted-foreground mt-2\">\n              Your feedback has been submitted successfully. We appreciate your\n              time and input.\n            </p>\n          </div>\n          <Button\n            className=\"w-full\"\n            onClick={() => {\n              setIsSubmitted(false);\n              form.reset();\n            }}\n          >\n            Submit Another Response\n          </Button>\n        </CardContent>\n      ) : (\n        <Form {...form}>\n          <form\n            onSubmit={form.handleSubmit(onSubmit)}\n            className=\"space-y-0\"\n            action={formAction}\n            noValidate\n          >\n            <CardContent className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"satisfaction\"\n                render={({ field }) => (\n                  <FormItem className=\"space-y-3\">\n                    <FormLabel\n                      id=\"satisfaction-group-label\"\n                      className=\"text-base font-medium\"\n                    >\n                      How satisfied are you with {productName}?\n                    </FormLabel>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        className=\"flex flex-col space-y-1\"\n                        aria-labelledby=\"satisfaction-group-label\"\n                      >\n                        {[\n                          [\"very-satisfied\", \"Very Satisfied\"],\n                          [\"satisfied\", \"Satisfied\"],\n                          [\"neutral\", \"Neutral\"],\n                          [\"dissatisfied\", \"Dissatisfied\"],\n                          [\"very-dissatisfied\", \"Very Dissatisfied\"],\n                        ].map(([value, label]) => (\n                          <FormItem\n                            key={value}\n                            className=\"flex items-center space-x-3 space-y-0\"\n                          >\n                            <FormControl>\n                              <RadioGroupItem\n                                value={value}\n                                id={`satisfaction-${value}`}\n                                aria-label={label as string}\n                              />\n                            </FormControl>\n                            <FormLabel\n                              htmlFor={`satisfaction-${value}`}\n                              className=\"font-normal cursor-pointer\"\n                            >\n                              {label}\n                            </FormLabel>\n                          </FormItem>\n                        ))}\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"usability\"\n                render={({ field }) => (\n                  <FormItem className=\"space-y-3\">\n                    <FormLabel\n                      id=\"usability-group-label\"\n                      className=\"text-base font-medium\"\n                    >\n                      How easy is it to use {productName}?\n                    </FormLabel>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        className=\"flex flex-col space-y-1\"\n                        aria-labelledby=\"usability-group-label\"\n                      >\n                        {[\n                          [\"very-easy\", \"Very Easy\"],\n                          [\"easy\", \"Easy\"],\n                          [\"neutral\", \"Neutral\"],\n                          [\"difficult\", \"Difficult\"],\n                          [\"very-difficult\", \"Very Difficult\"],\n                        ].map(([value, label]) => (\n                          <FormItem\n                            key={value}\n                            className=\"flex items-center space-x-3 space-y-0\"\n                          >\n                            <FormControl>\n                              <RadioGroupItem\n                                value={value}\n                                id={`usability-${value}`}\n                                aria-label={label as string}\n                              />\n                            </FormControl>\n                            <FormLabel\n                              htmlFor={`usability-${value}`}\n                              className=\"font-normal cursor-pointer\"\n                            >\n                              {label}\n                            </FormLabel>\n                          </FormItem>\n                        ))}\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"features\"\n                render={() => (\n                  <FormItem>\n                    <div className=\"mb-4\">\n                      <FormLabel\n                        id=\"features-group-label\"\n                        className=\"text-base font-medium\"\n                      >\n                        Which features do you use the most?\n                      </FormLabel>\n                      <FormDescription>Select all that apply</FormDescription>\n                    </div>\n                    <div\n                      className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\"\n                      role=\"group\"\n                      aria-labelledby=\"features-group-label\"\n                    >\n                      {features.map((feature) => (\n                        <FormField\n                          key={feature.id}\n                          control={form.control}\n                          name=\"features\"\n                          render={({ field }) => {\n                            return (\n                              <FormItem\n                                key={feature.id}\n                                className=\"flex flex-row items-start space-x-3 space-y-0 border rounded-md p-3 hover:bg-muted/50 transition-colors\"\n                              >\n                                <FormControl>\n                                  <Checkbox\n                                    id={`feature-${feature.id}`}\n                                    checked={field.value?.includes(feature.id)}\n                                    onCheckedChange={(checked) => {\n                                      return checked\n                                        ? field.onChange([\n                                            ...field.value,\n                                            feature.id,\n                                          ])\n                                        : field.onChange(\n                                            field.value?.filter(\n                                              (value) => value !== feature.id,\n                                            ),\n                                          );\n                                    }}\n                                  />\n                                </FormControl>\n                                <div className=\"space-y-1 leading-none\">\n                                  <FormLabel\n                                    htmlFor={`feature-${feature.id}`}\n                                    className=\"font-medium cursor-pointer\"\n                                  >\n                                    {feature.label}\n                                  </FormLabel>\n                                  {feature.description && (\n                                    <p className=\"text-xs text-muted-foreground\">\n                                      {feature.description}\n                                    </p>\n                                  )}\n                                </div>\n                              </FormItem>\n                            );\n                          }}\n                        />\n                      ))}\n                    </div>\n                    <FormMessage className=\"mt-2\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"improvements\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel\n                      htmlFor=\"improvements-textarea\"\n                      className=\"text-base font-medium\"\n                    >\n                      What improvements would you like to see?\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Please share your suggestions...\"\n                        className=\"resize-none min-h-[120px]\"\n                        id=\"improvements-textarea\"\n                        ref={textareaRef}\n                        {...field}\n                        aria-describedby=\"character-count\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                    <p\n                      className={`text-xs ${\n                        watchImprovements.length > 450\n                          ? \"text-amber-500\"\n                          : \"text-muted-foreground\"\n                      } mt-1`}\n                      id=\"character-count\"\n                    >\n                      {watchImprovements.length}/500 characters\n                    </p>\n                  </FormItem>\n                )}\n              />\n\n              {enableContactOption && (\n                <>\n                  <FormField\n                    control={form.control}\n                    name=\"contactConsent\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            id=\"contact-consent\"\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel\n                            htmlFor=\"contact-consent\"\n                            className=\"cursor-pointer\"\n                          >\n                            I'm willing to be contacted about my feedback\n                          </FormLabel>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  {watchContactConsent && (\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel htmlFor=\"email-input\">Email</FormLabel>\n                          <FormControl>\n                            <Input\n                              id=\"email-input\"\n                              placeholder=\"name@example.com\"\n                              type=\"email\"\n                              autoComplete=\"email\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n                </>\n              )}\n            </CardContent>\n            <CardFooter>\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                variant=\"gooeyRight\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2\n                      className=\"mr-2 h-4 w-4 animate-spin\"\n                      aria-hidden=\"true\"\n                    />\n                    <span>Submitting...</span>\n                  </>\n                ) : (\n                  \"Submit Feedback\"\n                )}\n              </Button>\n            </CardFooter>\n          </form>\n        </Form>\n      )}\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
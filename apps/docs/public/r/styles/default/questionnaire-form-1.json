{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "questionnaire-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A questionnaire form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card",
    "radio-group",
    "checkbox",
    "textarea",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/questionnaire-form-1.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport { Loader2 } from \"lucide-react\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n  FormDescription,\r\n} from \"@/registry/default/ui/form\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/default/ui/card\";\r\nimport { RadioGroup, RadioGroupItem } from \"@/registry/default/ui/radio-group\";\r\nimport { Textarea } from \"@/registry/default/ui/textarea\";\r\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\r\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\r\n\r\nconst formSchema = z.object({\r\n  satisfaction: z.enum(\r\n    [\r\n      \"very-satisfied\",\r\n      \"satisfied\",\r\n      \"neutral\",\r\n      \"dissatisfied\",\r\n      \"very-dissatisfied\",\r\n    ],\r\n    {\r\n      required_error: \"Please select your satisfaction level\",\r\n    },\r\n  ),\r\n  usability: z.enum(\r\n    [\"very-easy\", \"easy\", \"neutral\", \"difficult\", \"very-difficult\"],\r\n    {\r\n      required_error: \"Please select a usability rating\",\r\n    },\r\n  ),\r\n  features: z\r\n    .array(z.string())\r\n    .min(1, { message: \"Please select at least one feature\" }),\r\n  improvements: z\r\n    .string()\r\n    .min(10, { message: \"Please provide at least 10 characters\" })\r\n    .max(500, { message: \"Please keep your response under 500 characters\" }),\r\n  contactConsent: z.boolean().optional(),\r\n  email: z\r\n    .string()\r\n    .email({ message: \"Please enter a valid email address\" })\r\n    .optional()\r\n    .or(z.literal(\"\")),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\n// Define features list with proper type\r\ninterface Feature {\r\n  id: string;\r\n  label: string;\r\n  description?: string;\r\n}\r\n\r\nconst features: Feature[] = [\r\n  {\r\n    id: \"dashboard\",\r\n    label: \"Dashboard\",\r\n    description: \"Overview of your account and activity\",\r\n  },\r\n  {\r\n    id: \"analytics\",\r\n    label: \"Analytics\",\r\n    description: \"Data analysis and reporting tools\",\r\n  },\r\n  {\r\n    id: \"automation\",\r\n    label: \"Automation\",\r\n    description: \"Workflow and task automation features\",\r\n  },\r\n  {\r\n    id: \"integrations\",\r\n    label: \"Integrations\",\r\n    description: \"Connections with other services and tools\",\r\n  },\r\n  {\r\n    id: \"mobile-app\",\r\n    label: \"Mobile App\",\r\n    description: \"iOS and Android applications\",\r\n  },\r\n];\r\n\r\ninterface QuestionnaireFormProps {\r\n  /**\r\n   * Optional callback that runs after successful form submission\r\n   */\r\n  onSubmitSuccess?: (data: FormValues) => void;\r\n  /**\r\n   * Optional callback that runs if submission fails\r\n   */\r\n  onSubmitError?: (error: unknown) => void;\r\n  /**\r\n   * Custom form action for server submission\r\n   */\r\n  formAction?: string;\r\n  /**\r\n   * Product name to display in the title\r\n   */\r\n  productName?: string;\r\n  /**\r\n   * Whether to allow users to be contacted about their feedback\r\n   */\r\n  enableContactOption?: boolean;\r\n}\r\n\r\nexport default function QuestionnaireForm({\r\n  onSubmitSuccess,\r\n  onSubmitError,\r\n  formAction,\r\n  productName = \"Our Product\",\r\n  enableContactOption = true,\r\n}: QuestionnaireFormProps) {\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\r\n  const { toast } = useToast();\r\n  const textareaRef = React.useRef<HTMLTextAreaElement>(null);\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      satisfaction: undefined,\r\n      usability: undefined,\r\n      features: [],\r\n      improvements: \"\",\r\n      contactConsent: false,\r\n      email: \"\",\r\n    },\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  const watchContactConsent = form.watch(\"contactConsent\");\r\n  const watchImprovements = form.watch(\"improvements\");\r\n\r\n  // Focus email field when contact consent is checked\r\n  React.useEffect(() => {\r\n    if (watchContactConsent) {\r\n      const emailField = document.getElementById(\"email-input\");\r\n      if (emailField) {\r\n        emailField.focus();\r\n      }\r\n    }\r\n  }, [watchContactConsent]);\r\n\r\n  async function onSubmit(data: FormValues) {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      if (!formAction) {\r\n        // Simulate API call (replace with actual API call)\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(data);\r\n      }\r\n\r\n      setIsSubmitted(true);\r\n\r\n      toast({\r\n        title: \"Feedback submitted!\",\r\n        description: \"Thank you for your valuable feedback.\",\r\n      });\r\n\r\n      if (onSubmitSuccess) {\r\n        onSubmitSuccess(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Submission error:\", error);\r\n\r\n      toast({\r\n        title: \"Submission failed\",\r\n        description:\r\n          \"There was a problem submitting your feedback. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n\r\n      if (onSubmitError) {\r\n        onSubmitError(error);\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-2xl mx-auto shadow-md\">\r\n      <CardHeader>\r\n        <CardTitle className=\"text-2xl\">{productName} Feedback</CardTitle>\r\n        <CardDescription>\r\n          Help us improve our product by sharing your experience\r\n        </CardDescription>\r\n      </CardHeader>\r\n      {isSubmitted ? (\r\n        <CardContent className=\"space-y-4\">\r\n          <div\r\n            className=\"rounded-md bg-primary/10 p-6 flex flex-col items-center justify-center text-center\"\r\n            role=\"alert\"\r\n          >\r\n            <div className=\"rounded-full bg-primary/20 p-3 mb-4\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                strokeWidth={1.5}\r\n                stroke=\"currentColor\"\r\n                className=\"w-8 h-8 text-primary\"\r\n                aria-hidden=\"true\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                />\r\n              </svg>\r\n            </div>\r\n            <h3 className=\"text-lg font-medium\">Thank You!</h3>\r\n            <p className=\"text-muted-foreground mt-2\">\r\n              Your feedback has been submitted successfully. We appreciate your\r\n              time and input.\r\n            </p>\r\n          </div>\r\n          <Button\r\n            className=\"w-full\"\r\n            onClick={() => {\r\n              setIsSubmitted(false);\r\n              form.reset();\r\n            }}\r\n          >\r\n            Submit Another Response\r\n          </Button>\r\n        </CardContent>\r\n      ) : (\r\n        <Form {...form}>\r\n          <form\r\n            onSubmit={form.handleSubmit(onSubmit)}\r\n            className=\"space-y-0\"\r\n            action={formAction}\r\n            noValidate\r\n          >\r\n            <CardContent className=\"space-y-6\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"satisfaction\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"space-y-3\">\r\n                    <FormLabel\r\n                      id=\"satisfaction-group-label\"\r\n                      className=\"text-base font-medium\"\r\n                    >\r\n                      How satisfied are you with {productName}?\r\n                    </FormLabel>\r\n                    <FormControl>\r\n                      <RadioGroup\r\n                        onValueChange={field.onChange}\r\n                        defaultValue={field.value}\r\n                        className=\"flex flex-col space-y-1\"\r\n                        aria-labelledby=\"satisfaction-group-label\"\r\n                      >\r\n                        {[\r\n                          [\"very-satisfied\", \"Very Satisfied\"],\r\n                          [\"satisfied\", \"Satisfied\"],\r\n                          [\"neutral\", \"Neutral\"],\r\n                          [\"dissatisfied\", \"Dissatisfied\"],\r\n                          [\"very-dissatisfied\", \"Very Dissatisfied\"],\r\n                        ].map(([value, label]) => (\r\n                          <FormItem\r\n                            key={value}\r\n                            className=\"flex items-center space-x-3 space-y-0\"\r\n                          >\r\n                            <FormControl>\r\n                              <RadioGroupItem\r\n                                value={value}\r\n                                id={`satisfaction-${value}`}\r\n                                aria-label={label as string}\r\n                              />\r\n                            </FormControl>\r\n                            <FormLabel\r\n                              htmlFor={`satisfaction-${value}`}\r\n                              className=\"font-normal cursor-pointer\"\r\n                            >\r\n                              {label}\r\n                            </FormLabel>\r\n                          </FormItem>\r\n                        ))}\r\n                      </RadioGroup>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"usability\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"space-y-3\">\r\n                    <FormLabel\r\n                      id=\"usability-group-label\"\r\n                      className=\"text-base font-medium\"\r\n                    >\r\n                      How easy is it to use {productName}?\r\n                    </FormLabel>\r\n                    <FormControl>\r\n                      <RadioGroup\r\n                        onValueChange={field.onChange}\r\n                        defaultValue={field.value}\r\n                        className=\"flex flex-col space-y-1\"\r\n                        aria-labelledby=\"usability-group-label\"\r\n                      >\r\n                        {[\r\n                          [\"very-easy\", \"Very Easy\"],\r\n                          [\"easy\", \"Easy\"],\r\n                          [\"neutral\", \"Neutral\"],\r\n                          [\"difficult\", \"Difficult\"],\r\n                          [\"very-difficult\", \"Very Difficult\"],\r\n                        ].map(([value, label]) => (\r\n                          <FormItem\r\n                            key={value}\r\n                            className=\"flex items-center space-x-3 space-y-0\"\r\n                          >\r\n                            <FormControl>\r\n                              <RadioGroupItem\r\n                                value={value}\r\n                                id={`usability-${value}`}\r\n                                aria-label={label as string}\r\n                              />\r\n                            </FormControl>\r\n                            <FormLabel\r\n                              htmlFor={`usability-${value}`}\r\n                              className=\"font-normal cursor-pointer\"\r\n                            >\r\n                              {label}\r\n                            </FormLabel>\r\n                          </FormItem>\r\n                        ))}\r\n                      </RadioGroup>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"features\"\r\n                render={() => (\r\n                  <FormItem>\r\n                    <div className=\"mb-4\">\r\n                      <FormLabel\r\n                        id=\"features-group-label\"\r\n                        className=\"text-base font-medium\"\r\n                      >\r\n                        Which features do you use the most?\r\n                      </FormLabel>\r\n                      <FormDescription>Select all that apply</FormDescription>\r\n                    </div>\r\n                    <div\r\n                      className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\"\r\n                      role=\"group\"\r\n                      aria-labelledby=\"features-group-label\"\r\n                    >\r\n                      {features.map((feature) => (\r\n                        <FormField\r\n                          key={feature.id}\r\n                          control={form.control}\r\n                          name=\"features\"\r\n                          render={({ field }) => {\r\n                            return (\r\n                              <FormItem\r\n                                key={feature.id}\r\n                                className=\"flex flex-row items-start space-x-3 space-y-0 border rounded-md p-3 hover:bg-muted/50 transition-colors\"\r\n                              >\r\n                                <FormControl>\r\n                                  <Checkbox\r\n                                    id={`feature-${feature.id}`}\r\n                                    checked={field.value?.includes(feature.id)}\r\n                                    onCheckedChange={(checked) => {\r\n                                      return checked\r\n                                        ? field.onChange([\r\n                                            ...field.value,\r\n                                            feature.id,\r\n                                          ])\r\n                                        : field.onChange(\r\n                                            field.value?.filter(\r\n                                              (value) => value !== feature.id,\r\n                                            ),\r\n                                          );\r\n                                    }}\r\n                                  />\r\n                                </FormControl>\r\n                                <div className=\"space-y-1 leading-none\">\r\n                                  <FormLabel\r\n                                    htmlFor={`feature-${feature.id}`}\r\n                                    className=\"font-medium cursor-pointer\"\r\n                                  >\r\n                                    {feature.label}\r\n                                  </FormLabel>\r\n                                  {feature.description && (\r\n                                    <p className=\"text-xs text-muted-foreground\">\r\n                                      {feature.description}\r\n                                    </p>\r\n                                  )}\r\n                                </div>\r\n                              </FormItem>\r\n                            );\r\n                          }}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                    <FormMessage className=\"mt-2\" />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"improvements\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel\r\n                      htmlFor=\"improvements-textarea\"\r\n                      className=\"text-base font-medium\"\r\n                    >\r\n                      What improvements would you like to see?\r\n                    </FormLabel>\r\n                    <FormControl>\r\n                      <Textarea\r\n                        placeholder=\"Please share your suggestions...\"\r\n                        className=\"resize-none min-h-[120px]\"\r\n                        id=\"improvements-textarea\"\r\n                        ref={textareaRef}\r\n                        {...field}\r\n                        aria-describedby=\"character-count\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                    <p\r\n                      className={`text-xs ${\r\n                        watchImprovements.length > 450\r\n                          ? \"text-amber-500\"\r\n                          : \"text-muted-foreground\"\r\n                      } mt-1`}\r\n                      id=\"character-count\"\r\n                    >\r\n                      {watchImprovements.length}/500 characters\r\n                    </p>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              {enableContactOption && (\r\n                <>\r\n                  <FormField\r\n                    control={form.control}\r\n                    name=\"contactConsent\"\r\n                    render={({ field }) => (\r\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\r\n                        <FormControl>\r\n                          <Checkbox\r\n                            id=\"contact-consent\"\r\n                            checked={field.value}\r\n                            onCheckedChange={field.onChange}\r\n                          />\r\n                        </FormControl>\r\n                        <div className=\"space-y-1 leading-none\">\r\n                          <FormLabel\r\n                            htmlFor=\"contact-consent\"\r\n                            className=\"cursor-pointer\"\r\n                          >\r\n                            I'm willing to be contacted about my feedback\r\n                          </FormLabel>\r\n                        </div>\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n\r\n                  {watchContactConsent && (\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"email\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel htmlFor=\"email-input\">Email</FormLabel>\r\n                          <FormControl>\r\n                            <Input\r\n                              id=\"email-input\"\r\n                              placeholder=\"name@example.com\"\r\n                              type=\"email\"\r\n                              autoComplete=\"email\"\r\n                              {...field}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n                  )}\r\n                </>\r\n              )}\r\n            </CardContent>\r\n            <CardFooter>\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isLoading}\r\n                variant=\"gooeyRight\"\r\n              >\r\n                {isLoading ? (\r\n                  <>\r\n                    <Loader2\r\n                      className=\"mr-2 h-4 w-4 animate-spin\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    <span>Submitting...</span>\r\n                  </>\r\n                ) : (\r\n                  \"Submit Feedback\"\r\n                )}\r\n              </Button>\r\n            </CardFooter>\r\n          </form>\r\n        </Form>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-scroll-position",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-scroll-position.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\ninterface ScrollPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n/**\r\n * A hook that tracks the scroll position\r\n * @param element The element to track (defaults to window)\r\n * @returns The current scroll position\r\n */\r\nexport function useScrollPosition(\r\n  element?: React.RefObject<HTMLElement>,\r\n): ScrollPosition {\r\n  const [scrollPosition, setScrollPosition] = React.useState<ScrollPosition>({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n\r\n  const updateScrollPosition = React.useCallback(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    if (element?.current) {\r\n      setScrollPosition({\r\n        x: element.current.scrollLeft,\r\n        y: element.current.scrollTop,\r\n      });\r\n    } else {\r\n      setScrollPosition({\r\n        x: window.scrollX,\r\n        y: window.scrollY,\r\n      });\r\n    }\r\n  }, [element]);\r\n\r\n  React.useEffect(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const target = element?.current ?? window;\r\n\r\n    target.addEventListener(\"scroll\", updateScrollPosition, { passive: true });\r\n    updateScrollPosition();\r\n\r\n    return () => target.removeEventListener(\"scroll\", updateScrollPosition);\r\n  }, [element, updateScrollPosition]);\r\n\r\n  return scrollPosition;\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
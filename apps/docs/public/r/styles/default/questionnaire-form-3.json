{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "questionnaire-form-3",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A questionnaire form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "checkbox",
    "textarea",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/questionnaire-form-3.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Loader2 } from \"lucide-react\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Textarea } from \"@/registry/default/ui/textarea\";\nimport { useToast } from \"@/lib/use-toast\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\n\nconst formSchema = z.object({\n  experience: z.enum([\"excellent\", \"good\", \"average\", \"poor\", \"terrible\"], {\n    required_error: \"Please rate your experience\",\n  }),\n  recommendation: z.enum(\n    [\"definitely\", \"probably\", \"not-sure\", \"probably-not\", \"definitely-not\"],\n    {\n      required_error: \"Please select how likely you are to recommend us\",\n    },\n  ),\n  improvements: z.array(z.string()).optional(),\n  comments: z.string().optional(),\n  email: z\n    .string()\n    .email({ message: \"Please enter a valid email address\" })\n    .optional()\n    .or(z.literal(\"\")),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst improvementOptions = [\n  { id: \"user-interface\", label: \"User Interface\" },\n  { id: \"performance\", label: \"Performance\" },\n  { id: \"features\", label: \"Features\" },\n  { id: \"customer-support\", label: \"Customer Support\" },\n  { id: \"pricing\", label: \"Pricing\" },\n  { id: \"documentation\", label: \"Documentation\" },\n];\n\nexport default function QuestionnaireForm3() {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      experience: undefined,\n      recommendation: undefined,\n      improvements: [],\n      comments: \"\",\n      email: \"\",\n    },\n  });\n\n  async function onSubmit(data: FormValues) {\n    setIsLoading(true);\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 1500));\n    console.log(data);\n    setIsLoading(false);\n    setIsSubmitted(true);\n\n    toast({\n      title: \"Survey submitted!\",\n      description: \"Thank you for completing our survey.\",\n    });\n  }\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto\">\n      <div className=\"bg-gradient-to-br from-primary/20 to-primary/5 rounded-xl p-8\">\n        {isSubmitted ? (\n          <div className=\"text-center space-y-4 py-6\">\n            <div className=\"rounded-full w-16 h-16 bg-primary/20 mx-auto flex items-center justify-center\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                strokeWidth={1.5}\n                stroke=\"currentColor\"\n                className=\"w-8 h-8 text-primary\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"text-2xl font-bold\">Thank You!</h3>\n            <p className=\"text-muted-foreground max-w-md mx-auto\">\n              Your feedback is invaluable to us and helps us improve our\n              products and services.\n            </p>\n            <Button\n              className=\"mt-4\"\n              onClick={() => {\n                setIsSubmitted(false);\n                form.reset();\n              }}\n            >\n              Submit Another Response\n            </Button>\n          </div>\n        ) : (\n          <>\n            <div className=\"text-center space-y-2 mb-6\">\n              <h2 className=\"text-2xl font-bold\">\n                Customer Satisfaction Survey\n              </h2>\n              <p className=\"text-muted-foreground\">\n                Please take a moment to share your thoughts with us\n              </p>\n            </div>\n\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-6\"\n              >\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">\n                    How would you rate your overall experience?\n                  </h3>\n                  <div className=\"grid grid-cols-5 gap-2\">\n                    {[\"terrible\", \"poor\", \"average\", \"good\", \"excellent\"].map(\n                      (value) => (\n                        <FormField\n                          key={value}\n                          control={form.control}\n                          name=\"experience\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-col items-center space-y-2\">\n                              <FormControl>\n                                <button\n                                  type=\"button\"\n                                  className={`w-full h-12 rounded-md flex items-center justify-center ${\n                                    field.value === value\n                                      ? \"bg-primary text-primary-foreground\"\n                                      : \"bg-background hover:bg-muted\"\n                                  }`}\n                                  onClick={() => field.onChange(value)}\n                                >\n                                  {value === \"excellent\" && \"üòÅ\"}\n                                  {value === \"good\" && \"üôÇ\"}\n                                  {value === \"average\" && \"üòê\"}\n                                  {value === \"poor\" && \"üôÅ\"}\n                                  {value === \"terrible\" && \"üòû\"}\n                                </button>\n                              </FormControl>\n                              <FormLabel className=\"text-xs capitalize\">\n                                {value}\n                              </FormLabel>\n                            </FormItem>\n                          )}\n                        />\n                      ),\n                    )}\n                  </div>\n                  <FormMessage className=\"text-center\">\n                    {form.formState.errors.experience?.message}\n                  </FormMessage>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">\n                    How likely are you to recommend us to others?\n                  </h3>\n                  <div className=\"grid grid-cols-5 gap-2\">\n                    {[\n                      { value: \"definitely-not\", label: \"Definitely Not\" },\n                      { value: \"probably-not\", label: \"Probably Not\" },\n                      { value: \"not-sure\", label: \"Not Sure\" },\n                      { value: \"probably\", label: \"Probably\" },\n                      { value: \"definitely\", label: \"Definitely\" },\n                    ].map((option) => (\n                      <FormField\n                        key={option.value}\n                        control={form.control}\n                        name=\"recommendation\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-col items-center space-y-2\">\n                            <FormControl>\n                              <button\n                                type=\"button\"\n                                className={`w-full h-12 rounded-md flex items-center justify-center ${\n                                  field.value === option.value\n                                    ? \"bg-primary text-primary-foreground\"\n                                    : \"bg-background hover:bg-muted\"\n                                }`}\n                                onClick={() => field.onChange(option.value)}\n                              >\n                                {option.value === \"definitely\" && \"5\"}\n                                {option.value === \"probably\" && \"4\"}\n                                {option.value === \"not-sure\" && \"3\"}\n                                {option.value === \"probably-not\" && \"2\"}\n                                {option.value === \"definitely-not\" && \"1\"}\n                              </button>\n                            </FormControl>\n                            <FormLabel className=\"text-xs text-center\">\n                              {option.label}\n                            </FormLabel>\n                          </FormItem>\n                        )}\n                      />\n                    ))}\n                  </div>\n                  <FormMessage className=\"text-center\">\n                    {form.formState.errors.recommendation?.message}\n                  </FormMessage>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"improvements\"\n                  render={() => (\n                    <FormItem>\n                      <div className=\"mb-4\">\n                        <FormLabel className=\"text-lg font-medium\">\n                          What areas could we improve?\n                        </FormLabel>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Select all that apply\n                        </p>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {improvementOptions.map((option) => (\n                          <FormField\n                            key={option.id}\n                            control={form.control}\n                            name=\"improvements\"\n                            render={({ field }) => {\n                              return (\n                                <FormItem\n                                  key={option.id}\n                                  className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                >\n                                  <FormControl>\n                                    <Checkbox\n                                      checked={field.value?.includes(option.id)}\n                                      onCheckedChange={(checked) => {\n                                        return checked\n                                          ? field.onChange([\n                                              ...(field.value || []),\n                                              option.id,\n                                            ])\n                                          : field.onChange(\n                                              field.value?.filter(\n                                                (value) => value !== option.id,\n                                              ) || [],\n                                            );\n                                      }}\n                                    />\n                                  </FormControl>\n                                  <FormLabel className=\"font-normal\">\n                                    {option.label}\n                                  </FormLabel>\n                                </FormItem>\n                              );\n                            }}\n                          />\n                        ))}\n                      </div>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"comments\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-medium\">\n                        Additional Comments\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Please share any additional thoughts or suggestions...\"\n                          className=\"resize-none min-h-[120px] bg-background/80 backdrop-blur-sm\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email (Optional)</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"For follow-up questions (optional)\"\n                          className=\"bg-background/80 backdrop-blur-sm\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full h-12\"\n                  disabled={isLoading}\n                  variant=\"gooeyLeft\"\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Submitting...\n                    </>\n                  ) : (\n                    \"Submit Survey\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
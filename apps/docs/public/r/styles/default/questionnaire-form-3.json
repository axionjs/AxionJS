{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "questionnaire-form-3",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A questionnaire form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "checkbox",
    "textarea",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/questionnaire-form-3.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport { Loader2 } from \"lucide-react\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { Textarea } from \"@/registry/default/ui/textarea\";\r\nimport { useToast } from \"@/lib/use-toast\";\r\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\r\n\r\nconst formSchema = z.object({\r\n  experience: z.enum([\"excellent\", \"good\", \"average\", \"poor\", \"terrible\"], {\r\n    required_error: \"Please rate your experience\",\r\n  }),\r\n  recommendation: z.enum(\r\n    [\"definitely\", \"probably\", \"not-sure\", \"probably-not\", \"definitely-not\"],\r\n    {\r\n      required_error: \"Please select how likely you are to recommend us\",\r\n    },\r\n  ),\r\n  improvements: z.array(z.string()).optional(),\r\n  comments: z.string().optional(),\r\n  email: z\r\n    .string()\r\n    .email({ message: \"Please enter a valid email address\" })\r\n    .optional()\r\n    .or(z.literal(\"\")),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\nconst improvementOptions = [\r\n  { id: \"user-interface\", label: \"User Interface\" },\r\n  { id: \"performance\", label: \"Performance\" },\r\n  { id: \"features\", label: \"Features\" },\r\n  { id: \"customer-support\", label: \"Customer Support\" },\r\n  { id: \"pricing\", label: \"Pricing\" },\r\n  { id: \"documentation\", label: \"Documentation\" },\r\n];\r\n\r\nexport default function QuestionnaireForm3() {\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\r\n  const { toast } = useToast();\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      experience: undefined,\r\n      recommendation: undefined,\r\n      improvements: [],\r\n      comments: \"\",\r\n      email: \"\",\r\n    },\r\n  });\r\n\r\n  async function onSubmit(data: FormValues) {\r\n    setIsLoading(true);\r\n    // Simulate API call\r\n    await new Promise((resolve) => setTimeout(resolve, 1500));\r\n    console.log(data);\r\n    setIsLoading(false);\r\n    setIsSubmitted(true);\r\n\r\n    toast({\r\n      title: \"Survey submitted!\",\r\n      description: \"Thank you for completing our survey.\",\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full max-w-2xl mx-auto\">\r\n      <div className=\"bg-gradient-to-br from-primary/20 to-primary/5 rounded-xl p-8\">\r\n        {isSubmitted ? (\r\n          <div className=\"text-center space-y-4 py-6\">\r\n            <div className=\"rounded-full w-16 h-16 bg-primary/20 mx-auto flex items-center justify-center\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                strokeWidth={1.5}\r\n                stroke=\"currentColor\"\r\n                className=\"w-8 h-8 text-primary\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  d=\"M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                />\r\n              </svg>\r\n            </div>\r\n            <h3 className=\"text-2xl font-bold\">Thank You!</h3>\r\n            <p className=\"text-muted-foreground max-w-md mx-auto\">\r\n              Your feedback is invaluable to us and helps us improve our\r\n              products and services.\r\n            </p>\r\n            <Button\r\n              className=\"mt-4\"\r\n              onClick={() => {\r\n                setIsSubmitted(false);\r\n                form.reset();\r\n              }}\r\n            >\r\n              Submit Another Response\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <div className=\"text-center space-y-2 mb-6\">\r\n              <h2 className=\"text-2xl font-bold\">\r\n                Customer Satisfaction Survey\r\n              </h2>\r\n              <p className=\"text-muted-foreground\">\r\n                Please take a moment to share your thoughts with us\r\n              </p>\r\n            </div>\r\n\r\n            <Form {...form}>\r\n              <form\r\n                onSubmit={form.handleSubmit(onSubmit)}\r\n                className=\"space-y-6\"\r\n              >\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"text-lg font-medium\">\r\n                    How would you rate your overall experience?\r\n                  </h3>\r\n                  <div className=\"grid grid-cols-5 gap-2\">\r\n                    {[\"terrible\", \"poor\", \"average\", \"good\", \"excellent\"].map(\r\n                      (value) => (\r\n                        <FormField\r\n                          key={value}\r\n                          control={form.control}\r\n                          name=\"experience\"\r\n                          render={({ field }) => (\r\n                            <FormItem className=\"flex flex-col items-center space-y-2\">\r\n                              <FormControl>\r\n                                <button\r\n                                  type=\"button\"\r\n                                  className={`w-full h-12 rounded-md flex items-center justify-center ${\r\n                                    field.value === value\r\n                                      ? \"bg-primary text-primary-foreground\"\r\n                                      : \"bg-background hover:bg-muted\"\r\n                                  }`}\r\n                                  onClick={() => field.onChange(value)}\r\n                                >\r\n                                  {value === \"excellent\" && \"üòÅ\"}\r\n                                  {value === \"good\" && \"üôÇ\"}\r\n                                  {value === \"average\" && \"üòê\"}\r\n                                  {value === \"poor\" && \"üôÅ\"}\r\n                                  {value === \"terrible\" && \"üòû\"}\r\n                                </button>\r\n                              </FormControl>\r\n                              <FormLabel className=\"text-xs capitalize\">\r\n                                {value}\r\n                              </FormLabel>\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n                      ),\r\n                    )}\r\n                  </div>\r\n                  <FormMessage className=\"text-center\">\r\n                    {form.formState.errors.experience?.message}\r\n                  </FormMessage>\r\n                </div>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"text-lg font-medium\">\r\n                    How likely are you to recommend us to others?\r\n                  </h3>\r\n                  <div className=\"grid grid-cols-5 gap-2\">\r\n                    {[\r\n                      { value: \"definitely-not\", label: \"Definitely Not\" },\r\n                      { value: \"probably-not\", label: \"Probably Not\" },\r\n                      { value: \"not-sure\", label: \"Not Sure\" },\r\n                      { value: \"probably\", label: \"Probably\" },\r\n                      { value: \"definitely\", label: \"Definitely\" },\r\n                    ].map((option) => (\r\n                      <FormField\r\n                        key={option.value}\r\n                        control={form.control}\r\n                        name=\"recommendation\"\r\n                        render={({ field }) => (\r\n                          <FormItem className=\"flex flex-col items-center space-y-2\">\r\n                            <FormControl>\r\n                              <button\r\n                                type=\"button\"\r\n                                className={`w-full h-12 rounded-md flex items-center justify-center ${\r\n                                  field.value === option.value\r\n                                    ? \"bg-primary text-primary-foreground\"\r\n                                    : \"bg-background hover:bg-muted\"\r\n                                }`}\r\n                                onClick={() => field.onChange(option.value)}\r\n                              >\r\n                                {option.value === \"definitely\" && \"5\"}\r\n                                {option.value === \"probably\" && \"4\"}\r\n                                {option.value === \"not-sure\" && \"3\"}\r\n                                {option.value === \"probably-not\" && \"2\"}\r\n                                {option.value === \"definitely-not\" && \"1\"}\r\n                              </button>\r\n                            </FormControl>\r\n                            <FormLabel className=\"text-xs text-center\">\r\n                              {option.label}\r\n                            </FormLabel>\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                  <FormMessage className=\"text-center\">\r\n                    {form.formState.errors.recommendation?.message}\r\n                  </FormMessage>\r\n                </div>\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"improvements\"\r\n                  render={() => (\r\n                    <FormItem>\r\n                      <div className=\"mb-4\">\r\n                        <FormLabel className=\"text-lg font-medium\">\r\n                          What areas could we improve?\r\n                        </FormLabel>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Select all that apply\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"grid grid-cols-2 gap-2\">\r\n                        {improvementOptions.map((option) => (\r\n                          <FormField\r\n                            key={option.id}\r\n                            control={form.control}\r\n                            name=\"improvements\"\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <FormItem\r\n                                  key={option.id}\r\n                                  className=\"flex flex-row items-start space-x-3 space-y-0\"\r\n                                >\r\n                                  <FormControl>\r\n                                    <Checkbox\r\n                                      checked={field.value?.includes(option.id)}\r\n                                      onCheckedChange={(checked) => {\r\n                                        return checked\r\n                                          ? field.onChange([\r\n                                              ...(field.value || []),\r\n                                              option.id,\r\n                                            ])\r\n                                          : field.onChange(\r\n                                              field.value?.filter(\r\n                                                (value) => value !== option.id,\r\n                                              ) || [],\r\n                                            );\r\n                                      }}\r\n                                    />\r\n                                  </FormControl>\r\n                                  <FormLabel className=\"font-normal\">\r\n                                    {option.label}\r\n                                  </FormLabel>\r\n                                </FormItem>\r\n                              );\r\n                            }}\r\n                          />\r\n                        ))}\r\n                      </div>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"comments\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"text-lg font-medium\">\r\n                        Additional Comments\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Textarea\r\n                          placeholder=\"Please share any additional thoughts or suggestions...\"\r\n                          className=\"resize-none min-h-[120px] bg-background/80 backdrop-blur-sm\"\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Email (Optional)</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          placeholder=\"For follow-up questions (optional)\"\r\n                          className=\"bg-background/80 backdrop-blur-sm\"\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  className=\"w-full h-12\"\r\n                  disabled={isLoading}\r\n                  variant=\"gooeyLeft\"\r\n                >\r\n                  {isLoading ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      Submitting...\r\n                    </>\r\n                  ) : (\r\n                    \"Submit Survey\"\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Form>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
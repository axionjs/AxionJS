{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "newsletter-form-2",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A newsletter form component.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "use-toast",
    "checkbox",
    "switch",
    "tooltip"
  ],
  "files": [
    {
      "path": "blocks/newsletter-form-2.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport { Loader2, Mail, Check, Info } from \"lucide-react\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n  FormDescription,\r\n} from \"@/registry/default/ui/form\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\r\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/registry/default/ui/tooltip\";\r\nimport { Switch } from \"@/registry/default/ui/switch\";\r\n\r\n// Define form validation schema\r\nconst formSchema = z.object({\r\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n  weeklyDigest: z.boolean().optional().default(true),\r\n  productUpdates: z.boolean().optional().default(false),\r\n  marketingEmails: z.boolean().optional().default(false),\r\n  eventInvites: z.boolean().optional().default(false),\r\n  subscribedToAll: z.boolean().optional().default(false),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\n// Define subscription preference options\r\ninterface SubscriptionOption {\r\n  id: keyof FormValues;\r\n  label: string;\r\n  description: string;\r\n  icon?: React.ReactNode;\r\n  frequency?: string;\r\n}\r\n\r\nconst defaultSubscriptionOptions: SubscriptionOption[] = [\r\n  {\r\n    id: \"weeklyDigest\",\r\n    label: \"Weekly digest newsletter\",\r\n    description: \"A roundup of the best content from our blog and community\",\r\n    frequency: \"Weekly\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-5 w-5\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path d=\"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    id: \"productUpdates\",\r\n    label: \"Product updates and announcements\",\r\n    description: \"Be the first to know about new features and improvements\",\r\n    frequency: \"Monthly\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-5 w-5\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\" />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    id: \"marketingEmails\",\r\n    label: \"Marketing and promotions\",\r\n    description: \"Exclusive offers, discounts, and special promotions\",\r\n    frequency: \"Occasionally\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-5 w-5\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path d=\"M16 21v-2a4 4 0 00-4-4H6a4 4 0 00-4 4v2\" />\r\n        <circle cx=\"9\" cy=\"7\" r=\"4\" />\r\n        <path d=\"M22 21v-2a4 4 0 00-3-3.87M16 3.13a4 4 0 010 7.75\" />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    id: \"eventInvites\",\r\n    label: \"Event invitations\",\r\n    description: \"Webinars, workshops, and other events we host\",\r\n    frequency: \"As scheduled\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-5 w-5\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"2\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\r\n        <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\" />\r\n        <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\" />\r\n        <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\" />\r\n      </svg>\r\n    ),\r\n  },\r\n];\r\n\r\ninterface NewsletterFormProps {\r\n  /**\r\n   * Function to handle form submission\r\n   */\r\n  onSubscribe?: (data: FormValues) => Promise<void>;\r\n  /**\r\n   * Custom form action for server-side form processing\r\n   */\r\n  formAction?: string;\r\n  /**\r\n   * Custom title for the form\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Custom description for the form\r\n   */\r\n  description?: string;\r\n  /**\r\n   * Custom subscription options\r\n   */\r\n  subscriptionOptions?: SubscriptionOption[];\r\n  /**\r\n   * Whether to allow subscribing to all newsletters at once\r\n   */\r\n  allowSubscribeAll?: boolean;\r\n  /**\r\n   * Custom button text\r\n   */\r\n  buttonText?: string;\r\n  /**\r\n   * Custom success message\r\n   */\r\n  successMessage?: string;\r\n  /**\r\n   * Custom CSS class for the container\r\n   */\r\n  className?: string;\r\n  /**\r\n   * Color theme\r\n   */\r\n  colorTheme?: \"default\" | \"blue\" | \"green\" | \"purple\";\r\n}\r\n\r\nexport default function NewsletterPreferencesForm({\r\n  onSubscribe,\r\n  formAction,\r\n  title = \"Stay in the loop\",\r\n  description = \"Subscribe to receive the latest updates\",\r\n  subscriptionOptions = defaultSubscriptionOptions,\r\n  allowSubscribeAll = true,\r\n  buttonText = \"Subscribe\",\r\n  successMessage = \"You've been added to our newsletter.\",\r\n  className,\r\n  colorTheme = \"default\",\r\n}: NewsletterFormProps) {\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\r\n  const [hasSubscriptions, setHasSubscriptions] = React.useState(false);\r\n  const { toast } = useToast();\r\n  const formRef = React.useRef<HTMLFormElement>(null);\r\n  const successRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  // Get color theme classes\r\n  const getThemeClasses = () => {\r\n    switch (colorTheme) {\r\n      case \"blue\":\r\n        return {\r\n          icon: \"text-blue-500\",\r\n          background: \"bg-blue-50 dark:bg-blue-900/20\",\r\n          highlight: \"text-blue-600 dark:text-blue-400\",\r\n          primary: \"bg-blue-600 hover:bg-blue-700 text-white\",\r\n          accent: \"bg-blue-500/10 text-blue-500\",\r\n          border: \"border-blue-200 dark:border-blue-700\",\r\n        };\r\n      case \"green\":\r\n        return {\r\n          icon: \"text-green-500\",\r\n          background: \"bg-green-50 dark:bg-green-900/20\",\r\n          highlight: \"text-green-600 dark:text-green-400\",\r\n          primary: \"bg-green-600 hover:bg-green-700 text-white\",\r\n          accent: \"bg-green-500/10 text-green-500\",\r\n          border: \"border-green-200 dark:border-green-700\",\r\n        };\r\n      case \"purple\":\r\n        return {\r\n          icon: \"text-purple-500\",\r\n          background: \"bg-purple-50 dark:bg-purple-900/20\",\r\n          highlight: \"text-purple-600 dark:text-purple-400\",\r\n          primary: \"bg-purple-600 hover:bg-purple-700 text-white\",\r\n          accent: \"bg-purple-500/10 text-purple-500\",\r\n          border: \"border-purple-200 dark:border-purple-700\",\r\n        };\r\n      default:\r\n        return {\r\n          icon: \"text-primary\",\r\n          background: \"bg-primary/10\",\r\n          highlight: \"text-primary\",\r\n          primary: \"\",\r\n          accent: \"bg-primary/10 text-primary\",\r\n          border: \"border-border\",\r\n        };\r\n    }\r\n  };\r\n\r\n  const themeClasses = getThemeClasses();\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      weeklyDigest: true,\r\n      productUpdates: false,\r\n      marketingEmails: false,\r\n      eventInvites: false,\r\n      subscribedToAll: false,\r\n    },\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  // Watch all subscription values\r\n  const subscriptionValues = form.watch([\r\n    \"weeklyDigest\",\r\n    \"productUpdates\",\r\n    \"marketingEmails\",\r\n    \"eventInvites\",\r\n  ]);\r\n\r\n  // Watch subscribedToAll value\r\n  const subscribedToAll = form.watch(\"subscribedToAll\");\r\n\r\n  // Update hasSubscriptions state based on subscription selections\r\n  React.useEffect(() => {\r\n    const hasAnySubscription = subscriptionValues.some((value) => !!value);\r\n    setHasSubscriptions(hasAnySubscription);\r\n  }, [subscriptionValues]);\r\n\r\n  // Handle subscribedToAll changes\r\n  React.useEffect(() => {\r\n    if (subscribedToAll) {\r\n      // Check all subscription boxes\r\n      subscriptionOptions.forEach((option) => {\r\n        if (option.id !== \"subscribedToAll\" && option.id !== \"email\") {\r\n          form.setValue(option.id as any, true);\r\n        }\r\n      });\r\n    }\r\n  }, [subscribedToAll, form, subscriptionOptions]);\r\n\r\n  async function onSubmit(data: FormValues) {\r\n    if (!hasSubscriptions) {\r\n      toast({\r\n        title: \"No preferences selected\",\r\n        description: \"Please select at least one subscription preference.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      if (onSubscribe) {\r\n        await onSubscribe(data);\r\n      } else {\r\n        // Simulate API call\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(\"Newsletter subscription:\", data);\r\n      }\r\n\r\n      setIsSubmitted(true);\r\n\r\n      toast({\r\n        title: \"Subscription successful!\",\r\n        description: successMessage,\r\n      });\r\n\r\n      // Focus success message for accessibility\r\n      setTimeout(() => {\r\n        if (successRef.current) {\r\n          successRef.current.focus();\r\n        }\r\n      }, 100);\r\n    } catch (error) {\r\n      console.error(\"Subscription error:\", error);\r\n\r\n      toast({\r\n        title: \"Subscription failed\",\r\n        description:\r\n          \"There was a problem with your subscription. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"w-full max-w-lg mx-auto p-6 rounded-xl\",\r\n        themeClasses.background,\r\n        className,\r\n      )}\r\n    >\r\n      {!isSubmitted ? (\r\n        <>\r\n          <div className=\"flex items-center gap-4 mb-6\">\r\n            <div className={cn(\"rounded-full p-2\", themeClasses.accent)}>\r\n              <Mail\r\n                className={cn(\"h-6 w-6\", themeClasses.highlight)}\r\n                aria-hidden=\"true\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <h2 className=\"text-xl font-bold\">{title}</h2>\r\n              <p className=\"text-muted-foreground\">{description}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <Form {...form}>\r\n            <form\r\n              ref={formRef}\r\n              onSubmit={form.handleSubmit(onSubmit)}\r\n              className=\"space-y-6\"\r\n              action={formAction}\r\n              noValidate\r\n            >\r\n              <FormField\r\n                control={form.control}\r\n                name=\"email\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel htmlFor=\"email-input\" className=\"sr-only\">\r\n                      Email\r\n                    </FormLabel>\r\n                    <FormControl>\r\n                      <div className=\"relative\">\r\n                        <Input\r\n                          id=\"email-input\"\r\n                          placeholder=\"Enter your email\"\r\n                          className=\"pr-32 h-12\"\r\n                          type=\"email\"\r\n                          autoComplete=\"email\"\r\n                          aria-required=\"true\"\r\n                          {...field}\r\n                        />\r\n                        <Button\r\n                          type=\"submit\"\r\n                          className={cn(\r\n                            \"absolute right-1 top-1 h-10\",\r\n                            themeClasses.primary,\r\n                          )}\r\n                          disabled={isLoading}\r\n                          variant=\"expandIcon\"\r\n                        >\r\n                          {isLoading ? (\r\n                            <Loader2\r\n                              className=\"h-4 w-4 animate-spin\"\r\n                              aria-hidden=\"true\"\r\n                            />\r\n                          ) : (\r\n                            <>{buttonText}</>\r\n                          )}\r\n                        </Button>\r\n                      </div>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              {allowSubscribeAll && (\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"subscribedToAll\"\r\n                  render={({ field }) => (\r\n                    <FormItem\r\n                      className={cn(\r\n                        \"flex flex-row items-center justify-between rounded-lg border p-4 space-y-0 mb-4\",\r\n                        themeClasses.border,\r\n                      )}\r\n                    >\r\n                      <div className=\"space-y-0.5\">\r\n                        <FormLabel\r\n                          htmlFor=\"subscribe-all\"\r\n                          className=\"text-base\"\r\n                        >\r\n                          Subscribe to all updates\r\n                        </FormLabel>\r\n                        <FormDescription>\r\n                          Receive all emails and notifications\r\n                        </FormDescription>\r\n                      </div>\r\n                      <FormControl>\r\n                        <Switch\r\n                          id=\"subscribe-all\"\r\n                          checked={field.value}\r\n                          onCheckedChange={field.onChange}\r\n                          aria-label=\"Subscribe to all updates\"\r\n                        />\r\n                      </FormControl>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <h3 className=\"text-sm font-medium\">\r\n                    Subscription preferences\r\n                  </h3>\r\n                  <TooltipProvider>\r\n                    <Tooltip>\r\n                      <TooltipTrigger asChild>\r\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\">\r\n                          <span className=\"sr-only\">Subscription info</span>\r\n                          <Info className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </TooltipTrigger>\r\n                      <TooltipContent>\r\n                        <p className=\"max-w-xs\">\r\n                          Choose which types of emails you'd like to receive.\r\n                          You can change your preferences anytime.\r\n                        </p>\r\n                      </TooltipContent>\r\n                    </Tooltip>\r\n                  </TooltipProvider>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  {subscriptionOptions.map((option) => {\r\n                    // Skip the subscribedToAll option as it's handled separately\r\n                    if (\r\n                      option.id === \"subscribedToAll\" ||\r\n                      option.id === \"email\"\r\n                    ) {\r\n                      return null;\r\n                    }\r\n\r\n                    return (\r\n                      <FormField\r\n                        key={option.id}\r\n                        control={form.control}\r\n                        name={option.id as any}\r\n                        render={({ field }) => (\r\n                          <FormItem\r\n                            className={cn(\r\n                              \"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 transition-colors\",\r\n                              field.value && \"bg-muted/50\",\r\n                              themeClasses.border,\r\n                            )}\r\n                          >\r\n                            <FormControl>\r\n                              <Checkbox\r\n                                id={`option-${option.id}`}\r\n                                checked={field.value as boolean}\r\n                                onCheckedChange={field.onChange}\r\n                                disabled={subscribedToAll}\r\n                              />\r\n                            </FormControl>\r\n                            <div className=\"space-y-1 leading-none w-full\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <FormLabel\r\n                                  htmlFor={`option-${option.id}`}\r\n                                  className=\"text-sm font-medium leading-none cursor-pointer flex items-center\"\r\n                                >\r\n                                  {option.icon && (\r\n                                    <span\r\n                                      className={cn(\"mr-2\", themeClasses.icon)}\r\n                                    >\r\n                                      {option.icon}\r\n                                    </span>\r\n                                  )}\r\n                                  {option.label}\r\n                                </FormLabel>\r\n                                {option.frequency && (\r\n                                  <span className=\"text-xs px-2 py-1 rounded-full bg-muted\">\r\n                                    {option.frequency}\r\n                                  </span>\r\n                                )}\r\n                              </div>\r\n                              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                                {option.description}\r\n                              </p>\r\n                            </div>\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"lg:hidden\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  className=\"w-full\"\r\n                  disabled={isLoading || !form.formState.isValid}\r\n                  variant=\"default\"\r\n                >\r\n                  {isLoading ? (\r\n                    <>\r\n                      <Loader2\r\n                        className=\"mr-2 h-4 w-4 animate-spin\"\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                      <span>Subscribing...</span>\r\n                    </>\r\n                  ) : (\r\n                    buttonText\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </Form>\r\n\r\n          <p className=\"text-xs text-center mt-4 text-muted-foreground\">\r\n            By subscribing, you agree to our Terms of Service and Privacy\r\n            Policy. You can unsubscribe at any time.\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <div\r\n          className=\"text-center space-y-4 py-6\"\r\n          ref={successRef}\r\n          tabIndex={-1}\r\n          role=\"alert\"\r\n          aria-live=\"polite\"\r\n        >\r\n          <div\r\n            className={cn(\r\n              \"rounded-full w-16 h-16 mx-auto flex items-center justify-center\",\r\n              themeClasses.accent,\r\n            )}\r\n          >\r\n            <Check\r\n              className={cn(\"w-8 h-8\", themeClasses.highlight)}\r\n              aria-hidden=\"true\"\r\n            />\r\n          </div>\r\n          <h2 className=\"text-2xl font-bold\">You're subscribed!</h2>\r\n          <p className=\"text-muted-foreground\">\r\n            Thank you for subscribing to our newsletter.\r\n            <br />\r\n            We've sent a confirmation email to{\" \"}\r\n            <strong>{form.getValues().email}</strong>.\r\n          </p>\r\n\r\n          <div className=\"mt-6 space-y-4\">\r\n            <div className={cn(\"p-4 rounded-lg\", themeClasses.background)}>\r\n              <h3 className=\"font-medium mb-2\">Your subscriptions:</h3>\r\n              <ul className=\"space-y-2\">\r\n                {subscriptionOptions.map((option) => {\r\n                  if (\r\n                    option.id === \"subscribedToAll\" ||\r\n                    option.id === \"email\"\r\n                  ) {\r\n                    return null;\r\n                  }\r\n\r\n                  const isSelected =\r\n                    form.getValues()[option.id as keyof FormValues];\r\n\r\n                  if (!isSelected) {\r\n                    return null;\r\n                  }\r\n\r\n                  return (\r\n                    <li key={option.id} className=\"flex items-center\">\r\n                      <Check\r\n                        className={cn(\"h-4 w-4 mr-2\", themeClasses.highlight)}\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                      <span>{option.label}</span>\r\n                    </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n\r\n            <Button\r\n              onClick={() => {\r\n                setIsSubmitted(false);\r\n                form.reset({\r\n                  email: \"\",\r\n                  weeklyDigest: true,\r\n                  productUpdates: false,\r\n                  marketingEmails: false,\r\n                  eventInvites: false,\r\n                  subscribedToAll: false,\r\n                });\r\n              }}\r\n              className=\"w-full\"\r\n              variant=\"outline\"\r\n            >\r\n              Subscribe another email\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
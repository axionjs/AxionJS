{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "rbac-auth",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A role-based authentication system with user management, email verification, and password reset functionality.",
  "dependencies": [
    "prisma",
    "@prisma/client",
    "@auth/prisma-adapter",
    "framer-motion",
    "nodemailer",
    "@react-email/components",
    "react-spinners",
    "next-auth@beta",
    "bcryptjs",
    "react-icons",
    "cloudinary",
    "uuid"
  ],
  "registryDependencies": [
    "badge",
    "form",
    "input",
    "button",
    "label",
    "card",
    "avatar",
    "switch",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "dynamic-components/auth/pages/auth/login/page.tsx",
      "content": "import { LoginForm } from \"@/registry/default/dynamic-components/auth/components/login-form\";\n\nconst LoginPage = () => {\n  return <LoginForm />;\n};\n\nexport default LoginPage;\n",
      "type": "registry:page",
      "target": "app/auth/login/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/auth/layout.tsx",
      "content": "import React from \"react\";\n\nconst AuthLayout = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className=\"h-[100vh] flex items-center justify-center \">\n      {children}\n    </div>\n  );\n};\nexport default AuthLayout;\n",
      "type": "registry:file",
      "target": "app/auth/layout.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/page.tsx",
      "content": "\"use client\";\n\nimport { motion } from \"framer-motion\";\nimport {\n  SiNextdotjs,\n  SiReact,\n  SiTypescript,\n  SiTailwindcss,\n  SiPrisma,\n  SiCloudinary,\n  SiPostgresql,\n} from \"react-icons/si\";\nimport { Shield } from \"lucide-react\";\nimport Image from \"next/image\";\n\nconst techStack = [\n  {\n    name: \"Next.js\",\n    icon: SiNextdotjs,\n    color: \"#000000\",\n    angle: 0,\n    isImage: false,\n  },\n  { name: \"React\", icon: SiReact, color: \"#61DAFB\", angle: 45, isImage: false },\n  {\n    name: \"TypeScript\",\n    icon: SiTypescript,\n    color: \"#3178C6\",\n    angle: 90,\n    isImage: false,\n  },\n  {\n    name: \"NextAuth.js\",\n    icon: null,\n    color: \"#000000\",\n    angle: 135,\n    isImage: true,\n  },\n  {\n    name: \"Tailwind CSS\",\n    icon: SiTailwindcss,\n    color: \"#06B6D4\",\n    angle: 180,\n    isImage: false,\n  },\n  {\n    name: \"Prisma\",\n    icon: SiPrisma,\n    color: \"#2D3748\",\n    angle: 225,\n    isImage: false,\n  },\n  {\n    name: \"PostgreSQL\",\n    icon: SiPostgresql,\n    color: \"#336791\",\n    angle: 270,\n    isImage: false,\n  },\n  {\n    name: \"Cloudinary\",\n    icon: SiCloudinary,\n    color: \"#3448C5\",\n    angle: 315,\n    isImage: false,\n  },\n];\n\nconst RevolvingTechStack = () => {\n  return (\n    <div className=\"relative w-[500px] h-[500px] mx-auto\">\n      {/* Multiple ripple circles */}\n      <motion.div\n        animate={{ scale: [1, 1.1, 1] }}\n        transition={{\n          duration: 3,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n        }}\n        className=\"absolute inset-8 border border-4 border-gray-100 rounded-full opacity-40\"\n      />\n      <motion.div\n        animate={{ scale: [1, 1.15, 1] }}\n        transition={{\n          duration: 3.5,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n          delay: 0.5,\n        }}\n        className=\"absolute inset-4 border-4 border-gray-100 rounded-full opacity-30\"\n      />\n      <motion.div\n        animate={{ scale: [1, 1.2, 1] }}\n        transition={{\n          duration: 4,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n          delay: 1,\n        }}\n        className=\"absolute inset-0 border-4 border-gray-100 rounded-full opacity-20\"\n      />\n      <motion.div\n        animate={{ scale: [1, 1.25, 1] }}\n        transition={{\n          duration: 4.5,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n          delay: 1.5,\n        }}\n        className=\"absolute -inset-4 border border-gray-100 rounded-full opacity-15\"\n      />\n      <motion.div\n        animate={{ scale: [1, 1.3, 1] }}\n        transition={{\n          duration: 5,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n          delay: 2,\n        }}\n        className=\"absolute -inset-8 border border-gray-100 rounded-full opacity-10\"\n      />\n      <motion.div\n        animate={{ scale: [1, 1.35, 1] }}\n        transition={{\n          duration: 5.5,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n          delay: 2.5,\n        }}\n        className=\"absolute -inset-12 border border-gray-100 rounded-full opacity-5\"\n      />\n\n      {/* Center logo */}\n      <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-28 h-28 bg-black rounded-full flex items-center justify-center z-10 shadow-xl\">\n        <Shield className=\"w-14 h-14 text-white\" />\n      </div>\n\n      {/* Revolving circle - only the container rotates */}\n      <motion.div\n        animate={{ rotate: 360 }}\n        transition={{\n          duration: 25,\n          repeat: Infinity,\n          ease: \"linear\",\n        }}\n        className=\"absolute inset-0\"\n      >\n        {techStack.map((tech, index) => {\n          const radius = 170;\n          const x = Math.cos((tech.angle * Math.PI) / 180) * radius;\n          const y = Math.sin((tech.angle * Math.PI) / 180) * radius;\n\n          return (\n            <motion.div\n              key={`${tech.name}-${index}`}\n              className=\"absolute w-18 h-18 bg-white rounded-2xl flex items-center justify-center border border-gray-200 hover:shadow-xl transition-all duration-300 group shadow-md\"\n              style={{\n                left: `calc(50% + ${x}px - 36px)`,\n                top: `calc(50% + ${y}px - 36px)`,\n                width: \"72px\",\n                height: \"72px\",\n              }}\n              // Counter-rotate to keep icons upright\n              animate={{ rotate: -360 }}\n              transition={{\n                duration: 25,\n                repeat: Infinity,\n                ease: \"linear\",\n              }}\n              whileHover={{ scale: 1.1 }}\n            >\n              {tech.isImage ? (\n                <div className=\"w-10 h-10 relative\">\n                  <Image\n                    src=\"/auth.png\"\n                    alt=\"NextAuth.js\"\n                    fill\n                    className=\"object-contain\"\n                    sizes=\"40px\"\n                  />\n                </div>\n              ) : (\n                <tech.icon\n                  className=\"w-10 h-10 transition-transform duration-300 group-hover:scale-110\"\n                  style={{ color: tech.color }}\n                />\n              )}\n            </motion.div>\n          );\n        })}\n      </motion.div>\n\n      {/* Main orbit circle */}\n      <div className=\"absolute inset-0 border border-gray-200 rounded-full opacity-30\"></div>\n\n      {/* Inner guide circle */}\n      <div className=\"absolute inset-16 border border-gray-150 rounded-full opacity-20\"></div>\n    </div>\n  );\n};\n\nexport default function HomePage() {\n  return (\n    <div className=\"min-h-screen w-full bg-white overflow-hidden\">\n      <div className=\"max-w-7xl mx-auto px-6 \">\n        {/* Hero Section - Two Column Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-20 items-center min-h-screen\">\n          {/* Left Column - Content */}\n          <div className=\"space-y-10\">\n            <div className=\"space-y-8\">\n              <motion.div\n                initial={{ opacity: 0, x: -50 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8 }}\n                className=\"inline-flex items-center px-4 py-2 bg-gray-100 rounded-full text-sm text-gray-600\"\n              >\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Enterprise Authentication System\n              </motion.div>\n\n              <motion.h1\n                initial={{ opacity: 0, x: -50 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8, delay: 0.1 }}\n                className=\"text-7xl font-light text-black leading-tight\"\n              >\n                Secure\n                <br />\n                <span className=\"font-medium\">RBAC Auth</span>\n              </motion.h1>\n\n              <motion.p\n                initial={{ opacity: 0, x: -50 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8, delay: 0.2 }}\n                className=\"text-xl text-gray-600 leading-relaxed max-w-lg\"\n              >\n                Modern authentication system with role-based access control.\n                Built with cutting-edge technologies for enterprise\n                applications.\n              </motion.p>\n\n              {/* Tech Stack Names */}\n              <motion.div\n                initial={{ opacity: 0, x: -50 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8, delay: 0.3 }}\n                className=\"space-y-4\"\n              >\n                <p className=\"text-sm text-gray-500 uppercase tracking-wider font-medium\">\n                  Powered by Modern Stack\n                </p>\n                <div className=\"flex flex-wrap gap-3\">\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\n                    Next.js\n                  </span>\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\n                    React\n                  </span>\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\n                    TypeScript\n                  </span>\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\n                    Tailwind CSS\n                  </span>\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\n                    Prisma\n                  </span>\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\n                    PostgreSQL\n                  </span>\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\n                    NextAuth.js\n                  </span>\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\n                    Cloudinary\n                  </span>\n                </div>\n              </motion.div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8, delay: 0.4 }}\n              className=\"flex items-center space-x-6\"\n            >\n              <div className=\"flex items-center space-x-2 text-gray-600\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <span className=\"text-sm\">Production Ready</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-gray-600\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                <span className=\"text-sm\">TypeScript</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-gray-600\">\n                <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                <span className=\"text-sm\">Secure</span>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Right Column - Revolving Tech Stack */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 1, delay: 0.5 }}\n            className=\"flex justify-center\"\n          >\n            <RevolvingTechStack />\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/auth/register/page.tsx",
      "content": "import { RegisterForm } from \"@/registry/default/dynamic-components/auth/components/register-form\";\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n",
      "type": "registry:page",
      "target": "app/auth/register/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/(protected)/profile/change-password/page.tsx",
      "content": "import { ChangePasswordForm } from \"@/registry/default/dynamic-components/auth/components/change-password-form\";\nimport { Suspense } from \"react\";\n\nexport default function ChangePasswordPage() {\n  return (\n    <Suspense>\n      <ChangePasswordForm />\n    </Suspense>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(protected)/profile/change-password/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/auth/verify/page.tsx",
      "content": "\"use client\";\n\nimport { NewVerificationForm } from \"@/registry/default/dynamic-components/auth/components/new-verification-form\";\n\nexport default function VerifyPage() {\n  return <NewVerificationForm />;\n}\n",
      "type": "registry:page",
      "target": "app/auth/verify/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/auth/new-password/page.tsx",
      "content": "import { NewPasswordForm } from \"@/registry/default/dynamic-components/auth/components/new-password-form\";\nimport { Suspense } from \"react\";\n\nexport default function NewPasswordPage() {\n  return (\n    <Suspense>\n      <NewPasswordForm />\n    </Suspense>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/auth/new-password/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/auth/reset/page.tsx",
      "content": "import { ResetForm } from \"@/registry/default/dynamic-components/auth/components/reset-form\";\n\nexport default function ResetPage() {\n  return (\n    <div className=\"flex h-screen items-center justify-center\">\n      <ResetForm />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/auth/reset/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/(protected)/admin/page.tsx",
      "content": "import {\n  Card,\n  CardHeader,\n  CardContent,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { RoleGate } from \"@/registry/default/dynamic-components/auth/components/role-gate\";\nimport { FormSuccess } from \"@/registry/default/dynamic-components/auth/components/form-success\";\nimport { UserRole } from \"@/lib/generated/prisma\";\nimport { currentRole } from \"@/registry/default/dynamic-components/auth/lib/get-user\";\n\nexport default async function AdminPage() {\n  const user = await currentRole();\n  if (user !== \"ADMIN\") {\n    return null;\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto py-8 px-4\">\n      <h1 className=\"text-3xl font-bold mb-8\">Admin Dashboard</h1>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card className=\"shadow-md\">\n          <CardHeader>\n            <CardTitle>Admin Access</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <RoleGate allowedRole={UserRole?.ADMIN}>\n              <FormSuccess message=\"You are allowed to view this content!\" />\n            </RoleGate>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              You have admin privileges. You can manage users and system\n              settings.\n            </p>\n            <div className=\"space-y-2\">\n              <Button className=\"w-full\" asChild variant=\"outline\">\n                <a href=\"#\">Manage Users</a>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"shadow-md\">\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Perform quick actions from the admin dashboard.\n            </p>\n            <div className=\"space-y-2\">\n              <Button className=\"w-full\" asChild variant=\"outline\">\n                <a href=\"/admin/create-user\">Create New User</a>\n              </Button>\n              <Button className=\"w-full\" asChild variant=\"outline\">\n                <a href=\"/admin/reports\">View Reports</a>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"mt-6\">\n        <Card className=\"shadow-md\">\n          <CardHeader>\n            <CardTitle>Admin Statistics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Overview of system statistics and performance.\n            </p>\n            <div className=\"space-y-2\">\n              <Button className=\"w-full\" asChild variant=\"outline\">\n                <a href=\"/admin/statistics\">View Statistics</a>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(protected)/admin/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/(protected)/layout.tsx",
      "content": "import { Navbar } from \"@/registry/default/dynamic-components/auth/components/navbar\";\nimport { SessionProvider } from \"next-auth/react\";\n\ninterface ProtectedLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function ProtectedLayout({ children }: ProtectedLayoutProps) {\n  return (\n    <SessionProvider>\n      <div className=\"grid items-center justify-center h-full grid-col-2 \">\n        <Navbar />\n        {children}\n      </div>\n    </SessionProvider>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/(protected)/layout.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/dashboard/page.tsx",
      "content": "import { redirect } from \"next/navigation\";\nimport { auth } from \"@/registry/default/dynamic-components/auth/lib/auth\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/default/ui/avatar\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { currentUser } from \"@/registry/default/dynamic-components/simple-auth/lib/get-user\";\nimport Link from \"next/link\";\n\nexport default async function UserDashboard() {\n  const session = await auth();\n  const userData = await currentUser();\n\n  if (!session) {\n    redirect(\"/auth/login\");\n  }\n\n  return (\n    <div className=\"h-screen w-screen bg-white overflow-hidden\">\n      <div className=\"h-full flex flex-col\">\n        {/* Compact Header */}\n        <div className=\"flex-shrink-0 px-6 py-4 border-b border-gray-100\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-medium text-gray-900\">Dashboard</h1>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                Welcome, {session?.user?.name}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-xs text-gray-600\">Online</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"grid gap-6 lg:grid-cols-2 h-full max-w-5xl mx-auto\">\n            {/* Profile Card */}\n            <Card className=\"border border-gray-200 bg-white h-fit\">\n              <CardHeader className=\"text-center pb-4 pt-6\">\n                <div className=\"flex justify-center mb-4\">\n                  <div className=\"relative\">\n                    <Avatar className=\"w-16 h-16 border border-gray-200\">\n                      <AvatarImage\n                        src={session?.user?.image || \"\"}\n                        className=\"object-cover\"\n                      />\n                      <AvatarFallback className=\"bg-gray-100 text-gray-700 text-lg font-medium\">\n                        {session?.user?.name?.charAt(0) || \"U\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"absolute -bottom-1 -right-1 w-5 h-5 bg-green-500 rounded-full border-2 border-white\"></div>\n                  </div>\n                </div>\n                <h2 className=\"text-xl font-semibold text-gray-900\">\n                  {session?.user?.name || \"User\"}\n                </h2>\n                <p className=\"text-sm text-gray-500\">Profile Information</p>\n              </CardHeader>\n\n              <CardContent className=\"space-y-3 px-6 pb-6\">\n                {/* User ID */}\n                <div className=\"flex items-center justify-between py-3 px-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\">User ID</p>\n                    <p className=\"text-xs text-gray-500\">Identifier</p>\n                  </div>\n                  <p className=\"text-xs text-gray-600 font-mono bg-white px-2 py-1 rounded border\">\n                    {session?.user?.id\n                      ? `${session.user.id.slice(0, 8)}...`\n                      : \"N/A\"}\n                  </p>\n                </div>\n\n                {/* Email */}\n                <div className=\"flex items-center justify-between py-3 px-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\">Email</p>\n                    <p className=\"text-xs text-gray-500\">Contact</p>\n                  </div>\n                  <p className=\"text-sm text-gray-700 truncate max-w-[150px]\">\n                    {session?.user?.email || \"Not provided\"}\n                  </p>\n                </div>\n\n                {/* Role */}\n                <div className=\"flex items-center justify-between py-3 px-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\">Role</p>\n                    <p className=\"text-xs text-gray-500\">Access level</p>\n                  </div>\n                  <Badge\n                    variant={\n                      session?.user?.role === \"ADMIN\" ? \"default\" : \"secondary\"\n                    }\n                    className={`text-xs ${\n                      session?.user?.role === \"ADMIN\"\n                        ? \"bg-gray-900 text-white\"\n                        : \"bg-gray-200 text-gray-700\"\n                    }`}\n                  >\n                    {session?.user?.role || \"USER\"}\n                  </Badge>\n                </div>\n\n                {/* Two Factor Authentication */}\n                {!userData?.isOAuth && (\n                  <div className=\"flex items-center justify-between py-3 px-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        Two-Factor Auth\n                      </p>\n                      <p className=\"text-xs text-gray-500\">Security</p>\n                    </div>\n                    <Badge\n                      className={`text-xs ${\n                        session?.user?.isTwoFactorEnabled\n                          ? \"bg-green-100 text-green-800\"\n                          : \"bg-red-100 text-red-800\"\n                      }`}\n                    >\n                      {session?.user?.isTwoFactorEnabled\n                        ? \"ENABLED\"\n                        : \"DISABLED\"}\n                    </Badge>\n                  </div>\n                )}\n\n                {/* Account Status */}\n                <div className=\"mt-4 p-3 bg-green-50 rounded-lg border border-green-100\">\n                  <div className=\"flex items-center justify-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <p className=\"text-sm font-medium text-green-800\">\n                      Account Active\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Actions & Settings */}\n            <div className=\"space-y-6\">\n              {/* Account Settings */}\n              <Card className=\"border border-gray-200 bg-white\">\n                <CardHeader className=\"pb-4 pt-6\">\n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <div className=\"w-6 h-6 border border-gray-400 rounded-full\"></div>\n                    </div>\n                    <CardTitle className=\"text-lg font-semibold text-gray-900\">\n                      Settings\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-500 mt-1\">Manage account</p>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3 px-6 pb-6\">\n                  <Link href=\"/profile\">\n                    <Button\n                      className=\"w-full justify-between bg-gray-50 hover:bg-gray-100 text-gray-900 border border-gray-200 h-10\"\n                      variant=\"outline\"\n                    >\n                      <span>Edit Profile</span>\n                      <span>→</span>\n                    </Button>\n                  </Link>\n\n                  {!session?.user?.isOAuth && (\n                    <Link href=\"/profile/change-password\">\n                      <Button\n                        className=\"w-full justify-between bg-gray-50 hover:bg-gray-100 text-gray-900 border border-gray-200 h-10\"\n                        variant=\"outline\"\n                      >\n                        <span>Change Password</span>\n                        <span>→</span>\n                      </Button>\n                    </Link>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Admin Access */}\n              {session.user.role === \"ADMIN\" && (\n                <Card className=\"border border-gray-300 bg-gray-50\">\n                  <CardHeader className=\"pb-4 pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-3\">\n                        <div className=\"w-6 h-6 bg-gray-600 rounded-full\"></div>\n                      </div>\n                      <CardTitle className=\"text-lg font-semibold text-gray-900\">\n                        Admin Panel\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        Administrative access\n                      </p>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"px-6 pb-6\">\n                    <p className=\"text-sm text-gray-600 mb-4 text-center\">\n                      Manage users and system settings\n                    </p>\n                    <Link href=\"/admin\">\n                      <Button className=\"w-full bg-gray-900 hover:bg-gray-800 text-white h-10\">\n                        <span>Admin Dashboard</span>\n                        <span className=\"ml-2\">→</span>\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/dashboard/page.tsx"
    },
    {
      "path": "dynamic-components/auth/lib/get-user.ts",
      "content": "import { auth } from \"@/registry/default/dynamic-components/simple-auth/lib/auth\";\n\nexport const currentUser = async () => {\n  const session = await auth();\n  return session?.user;\n};\n\nexport const currentRole = async () => {\n  const session = await auth();\n  return session?.user?.role;\n};\nexport const isCurrentAccountOAuth = async () => {\n  const session = await auth();\n  return session?.user?.isOAuth;\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/user-info.tsx",
      "content": "import { ExtendedUser } from \"@/registry/default/dynamic-components/auth/lib/next-auth\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { Card, CardContent, CardHeader } from \"@/registry/default/ui/card\";\nimport { currentUser } from \"@/registry/default/dynamic-components/auth/lib/get-user\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/default/ui/avatar\";\nimport { User } from \"lucide-react\";\n\ninterface UserInfoProps {\n  user?: ExtendedUser;\n  label: string;\n}\n\nexport async function UserInfo({ user, label }: UserInfoProps) {\n  const userData = await currentUser();\n  return (\n    <Card className=\"shadow-md\">\n      <CardHeader>\n        <p className=\"text-center text-2xl font-semibold\">{label}</p>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n          <p className=\"text-sm font-medium\">ID</p>\n          <p className=\"text-sm text-muted-foreground\">{user?.id}</p>\n        </div>\n        <div className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n          <p className=\"text-sm font-medium\">Name</p>\n          <p className=\"mtext-sm text-muted-foreground\">{user?.name}</p>\n        </div>\n\n        <Avatar>\n          <AvatarImage src={user?.image || \"\"} />\n          <AvatarFallback className=\"bg-sky-500\">\n            <User className=\"text-white\" />\n          </AvatarFallback>\n        </Avatar>\n\n        <div className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n          <p className=\"text-sm font-medium\">Email</p>\n          <p className=\"text-sm text-muted-foreground\">{user?.email}</p>\n        </div>\n        <div className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n          <p className=\"text-sm font-medium\">Role</p>\n          <p className=\"text-sm text-muted-foreground\">{user?.role}</p>\n        </div>\n        {!userData?.isOAuth && (\n          <div className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n            <p className=\"text-sm font-medium\">Two Factor Authentication</p>\n            <Badge\n              variant={user?.isTwoFactorEnabled ? \"default\" : \"destructive\"}\n            >\n              {user?.isTwoFactorEnabled ? \"ON\" : \"OFF\"}\n            </Badge>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/pages/(protected)/profile/page.tsx",
      "content": "import { SettingsForm } from \"@/registry/default/dynamic-components/auth/components/settings-form\";\n\nexport default function SettingsPage() {\n  return (\n    <div className=\"\">\n      <SettingsForm />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(protected)/profile/page.tsx"
    },
    {
      "path": "dynamic-components/auth/lib/mail.ts",
      "content": "import nodemailer from \"nodemailer\";\nimport { render } from \"@react-email/render\";\nimport VerificationEmail from \"@/registry/default/dynamic-components/auth/emails/verification-email\";\nimport ResetPasswordEmail from \"@/registry/default/dynamic-components/auth/emails/reset-password-email\";\nimport TwoFactorAuthEmail from \"@/registry/default/dynamic-components/auth/emails/two-factor-email\";\n\nexport const transporter = nodemailer.createTransport({\n  host: process.env.EMAIL_SERVER_HOST,\n  port: Number(process.env.EMAIL_SERVER_PORT),\n  auth: {\n    user: process.env.EMAIL_SERVER_USER,\n    pass: process.env.EMAIL_SERVER_PASSWORD,\n  },\n});\n\nexport const sendVerificationEmail = async (\n  email: string,\n  token: string,\n  isEmailChange = false,\n) => {\n  // Add emailChange parameter to the URL for email changes\n  const confirmLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/verify?token=${token}${isEmailChange ? \"&emailChange=true\" : \"\"}`;\n\n  const emailHtml = await render(VerificationEmail({ confirmLink }));\n\n  await transporter.sendMail({\n    from: `AxionJS - Test <${process.env.EMAIL_FROM}>`,\n    to: email,\n    subject: isEmailChange\n      ? \"Confirm your new email address\"\n      : \"Confirm your email address\",\n    html: emailHtml,\n  });\n};\n\nexport const sendPasswordResetEmail = async (email: string, token: string) => {\n  const resetLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/new-password?token=${token}`;\n\n  const emailHtml = await render(ResetPasswordEmail({ resetLink }));\n\n  await transporter.sendMail({\n    from: `AxionJS - Test <${process.env.EMAIL_FROM}>`,\n    to: email,\n    subject: \"Reset your password\",\n    html: emailHtml,\n  });\n};\n\nexport const sendTwoFactorTokenEmail = async (email: string, token: string) => {\n  const emailHtml = await render(\n    TwoFactorAuthEmail({ verificationToken: token }),\n  );\n\n  await transporter.sendMail({\n    from: `AxionJS - Test <${process.env.EMAIL_FROM}>`,\n    to: email,\n    subject: \"2FA Verification Code\",\n    html: emailHtml,\n  });\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/pages/auth/error/page.tsx",
      "content": "import { ErrorCard } from \"@/registry/default/dynamic-components/auth/components/error-card\";\n\nconst AuthErrorPage = () => {\n  return <ErrorCard />;\n};\n\nexport default AuthErrorPage;\n",
      "type": "registry:page",
      "target": "app/auth/error/page.tsx"
    },
    {
      "path": "dynamic-components/auth/middleware.ts",
      "content": "import authConfig from \"@/registry/default/dynamic-components/auth/lib/auth.config\";\nimport NextAuth from \"next-auth\";\n\nimport {\n  DEFAULT_LOGIN_REDIRECT,\n  apiAuthPrefix,\n  authRoutes,\n  publicRoutes,\n} from \"@/registry/default/dynamic-components/auth/lib/routes\";\n\nconst { auth } = NextAuth(authConfig);\nexport default auth((req) => {\n  const { nextUrl } = req;\n  const isLoggedIn = !!req.auth;\n\n  const isApiAuthRoute = nextUrl.pathname.startsWith(apiAuthPrefix);\n  const isPublicRoute = publicRoutes.includes(nextUrl.pathname);\n  const isAuthRoute = authRoutes.includes(nextUrl.pathname);\n\n  if (isApiAuthRoute) {\n    return;\n  }\n\n  if (isAuthRoute) {\n    if (isLoggedIn) {\n      return Response.redirect(new URL(DEFAULT_LOGIN_REDIRECT, nextUrl));\n    }\n    return;\n  }\n\n  if (!isLoggedIn && !isPublicRoute) {\n    return Response.redirect(new URL(\"/auth/login\", nextUrl));\n  }\n\n  return;\n});\n\nexport const config = {\n  matcher: [\n    // Skip Next.js internals and all static files, unless found in search params\n    \"/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)\",\n    // Always run for API routes\n    \"/(api|trpc)(.*)\",\n  ],\n};\n",
      "type": "registry:middleware",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/login-form.tsx",
      "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { useState, useTransition } from \"react\";\nimport { useSearchParams, useRouter } from \"next/navigation\";\nimport {\n  Form,\n  FormField,\n  FormControl,\n  FormLabel,\n  FormItem,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { LoginSchema } from \"@/registry/default/dynamic-components/auth/schemas\";\nimport { CardWrapper } from \"@/registry/default/dynamic-components/auth/components/card-wrapper\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { FormError } from \"@/registry/default/dynamic-components/auth/components/form-error\";\nimport { FormSuccess } from \"@/registry/default/dynamic-components/auth/components/form-success\";\nimport { login } from \"@/registry/default/dynamic-components/auth/actions/auth-actions\";\nimport Link from \"next/link\";\n\nexport const LoginForm = () => {\n  const searchParams = useSearchParams();\n  const callbackUrl = searchParams.get(\"callbackUrl\");\n  const urlError =\n    searchParams.get(\"error\") === \"OAuthAccountNotLinked\"\n      ? \"Email already in use with different provider!\"\n      : \"\";\n\n  const [showTwoFactor, setShowTwoFactor] = useState(false);\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const router = useRouter();\n\n  const form = useForm<z.infer<typeof LoginSchema>>({\n    resolver: zodResolver(LoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      code: \"\",\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof LoginSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      login(values, callbackUrl)\n        .then((data) => {\n          if (data?.error) {\n            form.reset();\n            setError(data.error);\n          }\n\n          if (data?.success) {\n            form.reset();\n            setSuccess(data.success);\n            router.push(callbackUrl || \"/dashboard\");\n          }\n\n          if (data?.twoFactor) {\n            setShowTwoFactor(true);\n          }\n        })\n        .catch(() => {\n          setError(\"\");\n        });\n    });\n  };\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Login\"\n      subHeaderLabel=\"Welcome Back\"\n      backButtonLabel=\"Don't have an account?\"\n      backButtonHref=\"/auth/register\"\n      showSocial\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            {showTwoFactor && (\n              <>\n                <FormField\n                  control={form.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Two Factor Code</FormLabel>\n                      <FormControl>\n                        <Input\n                          disabled={isPending}\n                          {...field}\n                          placeholder=\"123456\"\n                          type=\"text\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <span className=\"text-sm text-gray-500\">\n                  Check your inbox for the 2FA Code\n                </span>\n              </>\n            )}\n            {!showTwoFactor && (\n              <>\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          disabled={isPending}\n                          {...field}\n                          placeholder=\"jhon.doe@example.com\"\n                          type=\"email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          disabled={isPending}\n                          {...field}\n                          placeholder=\"******\"\n                          type=\"password\"\n                        />\n                      </FormControl>\n                      <Button\n                        size=\"sm\"\n                        variant=\"link\"\n                        asChild\n                        className=\"px-0 font-normal\"\n                      >\n                        <Link href=\"/auth/reset\">Forgot password?</Link>\n                      </Button>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </>\n            )}\n          </div>\n          <FormError message={error || urlError} />\n          <FormSuccess message={success} />\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n            {showTwoFactor ? \"Confirm\" : \"Login\"}\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/schemas/index.ts",
      "content": "import * as z from \"zod\";\n\nexport const LoginSchema = z.object({\n  email: z.string().email({\n    message: \"Invalid email address\",\n  }),\n  password: z.string().min(1, {\n    message: \"Password is required\",\n  }),\n  code: z.optional(z.string()),\n});\n\nexport const RegisterSchema = z.object({\n  email: z.string().email({\n    message: \"Invalid email address\",\n  }),\n  password: z.string().min(6, {\n    message: \"Password must be at least 6 characters\",\n  }),\n  name: z.string().min(1, {\n    message: \"Name is required\",\n  }),\n});\n\nexport const ResetSchema = z.object({\n  email: z.string().email({\n    message: \"Email is required\",\n  }),\n});\n\nexport const NewPasswordSchema = z.object({\n  password: z.string().min(6, { message: \"Minimum 6 characters required\" }),\n});\n\nexport const SettingsSchema = z.object({\n  name: z.optional(z.string()),\n  isTwoFactorEnabled: z.optional(z.boolean()),\n  email: z.optional(z.string().email({ message: \"Invalid email\" })),\n});\n\nexport const ChangePasswordSchema = z\n  .object({\n    currentPassword: z.string().min(1, \"Current password is required\"),\n    newPassword: z\n      .string()\n      .min(6, \"New password must be at least 6 characters\"),\n    confirmPassword: z\n      .string()\n      .min(6, \"Confirm password must be at least 6 characters\"),\n  })\n  .refine((data) => data.newPassword === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  });\n",
      "type": "registry:schemas",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/route.ts",
      "content": "import { handlers } from \"@/registry/default/dynamic-components/auth/lib/auth\";\nexport const { GET, POST } = handlers;\n",
      "type": "registry:api",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/register-form.tsx",
      "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { useState, useTransition } from \"react\";\n\nimport {\n  Form,\n  FormField,\n  FormControl,\n  FormLabel,\n  FormItem,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { RegisterSchema } from \"@/registry/default/dynamic-components/auth/schemas\";\nimport { CardWrapper } from \"@/registry/default/dynamic-components/auth/components/card-wrapper\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { FormError } from \"@/registry/default/dynamic-components/auth/components/form-error\";\nimport { FormSuccess } from \"@/registry/default/dynamic-components/auth/components/form-success\";\nimport { register } from \"@/registry/default/dynamic-components/auth/actions/auth-actions\";\n\nexport const RegisterForm = () => {\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<z.infer<typeof RegisterSchema>>({\n    resolver: zodResolver(RegisterSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      name: \"\",\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof RegisterSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      register(values).then((data) => {\n        setError(data.error);\n        setSuccess(data.success);\n      });\n    });\n  };\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Register\"\n      subHeaderLabel=\"Create an account\"\n      backButtonLabel=\"Already have an account?\"\n      backButtonHref=\"/auth/login\"\n      showSocial\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"Jhon Doe\"\n                      type=\"text\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"jhon.doe@example.com\"\n                      type=\"email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"******\"\n                      type=\"password\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <FormError message={error} />\n          <FormSuccess message={success} />\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n            Create an account\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/social.tsx",
      "content": "\"use client\";\n\nimport { FcGoogle } from \"react-icons/fc\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { loginWithOAuth } from \"@/registry/default/dynamic-components/auth/actions/auth-actions\";\nimport { useTransition } from \"react\";\nimport { useSearchParams } from \"next/navigation\";\n\nexport const Social = () => {\n  const searchParams = useSearchParams();\n  const callbackUrl = searchParams.get(\"callbackUrl\");\n  const [isPending, startTransition] = useTransition();\n  const onClick = async (provider: \"google\" | \"github\") => {\n    try {\n      startTransition(() => {\n        loginWithOAuth(provider, callbackUrl);\n      });\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center w-full gap-x-2\">\n      <Button\n        disabled={isPending}\n        size=\"lg\"\n        className=\"w-full\"\n        variant=\"outline\"\n        onClick={() => {\n          onClick(\"google\");\n        }}\n      >\n        <FcGoogle className=\"h-5 w-5\" />\n      </Button>\n\n      <Button\n        disabled={isPending}\n        size=\"lg\"\n        className=\"w-full\"\n        variant=\"outline\"\n        onClick={() => {\n          onClick(\"github\");\n        }}\n      >\n        <FaGithub className=\"h-5 w-5\" />\n      </Button>\n    </div>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/change-password-form.tsx",
      "content": "\"use client\";\nimport { useState, useTransition } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Form,\n  FormField,\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { FormSuccess } from \"@/registry/default/dynamic-components/auth/components/form-success\";\nimport { FormError } from \"@/registry/default/dynamic-components/auth/components/form-error\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { changePassword } from \"@/registry/default/dynamic-components/auth/actions/auth-actions\";\nimport { CardWrapper } from \"./card-wrapper\";\nimport { ChangePasswordSchema } from \"@/registry/default/dynamic-components/auth/schemas\";\n\nexport const ChangePasswordForm = () => {\n  const [error, setError] = useState<string | undefined>();\n  const [success, setSuccess] = useState<string | undefined>();\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<z.infer<typeof ChangePasswordSchema>>({\n    resolver: zodResolver(ChangePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof ChangePasswordSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n    startTransition(() => {\n      changePassword(values.currentPassword, values.newPassword)\n        .then((data) => {\n          if (data.error) {\n            setError(data.error);\n          }\n          if (data.success) {\n            setSuccess(data.success);\n          }\n        })\n        .catch(() => {\n          setError(\"Something went wrong!\");\n        });\n    });\n  };\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Change Password\"\n      subHeaderLabel=\"Update your account password\"\n      backButtonLabel=\"Back to Dashboard\"\n      backButtonHref=\"/dashboard\"\n    >\n      <Form {...form}>\n        <form className=\"space-y-6\" onSubmit={form.handleSubmit(onSubmit)}>\n          <div className=\"space-y-4\">\n            {/* Current Password Field */}\n            <FormField\n              control={form.control}\n              name=\"currentPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Current Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"******\"\n                      disabled={isPending}\n                      type=\"password\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* New Password Field */}\n            <FormField\n              control={form.control}\n              name=\"newPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>New Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"******\"\n                      disabled={isPending}\n                      type=\"password\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Confirm Password Field */}\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirm Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"******\"\n                      disabled={isPending}\n                      type=\"password\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          {/* Error and Success Messages */}\n          {error && <FormError message={error} />}\n          {success && <FormSuccess message={success} />}\n\n          {/* Save Button */}\n          <Button\n            type=\"submit\"\n            disabled={isPending}\n            className=\"w-full bg-primary hover:bg-primary-dark\"\n          >\n            {isPending ? \"Changing Password...\" : \"Change Password\"}\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/new-password-form.tsx",
      "content": "\"use client\";\n\nimport * as z from \"zod\";\nimport { useState, useTransition } from \"react\";\nimport { useSearchParams } from \"next/navigation\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport { CardWrapper } from \"@/registry/default/dynamic-components/auth/components/card-wrapper\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { FormSuccess } from \"@/registry/default/dynamic-components/auth/components/form-success\";\nimport { FormError } from \"@/registry/default/dynamic-components/auth/components/form-error\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { newPassword } from \"@/registry/default/dynamic-components/auth/actions/auth-actions\";\nimport { NewPasswordSchema } from \"@/registry/default/dynamic-components/auth/schemas\";\n\nexport function NewPasswordForm() {\n  const searchParams = useSearchParams();\n  const token = searchParams.get(\"token\");\n\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<z.infer<typeof NewPasswordSchema>>({\n    resolver: zodResolver(NewPasswordSchema),\n    defaultValues: { password: \"\" },\n  });\n\n  const onSubmit = (values: z.infer<typeof NewPasswordSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      newPassword(values, token).then((data) => {\n        setError(data?.error);\n        setSuccess(data?.success);\n      });\n    });\n  };\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"New Password\"\n      subHeaderLabel=\"Enter a new password\"\n      backButtonLabel=\"Back to login\"\n      backButtonHref=\"/auth/login\"\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      disabled={isPending}\n                      placeholder=\"******\"\n                      type=\"password\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <FormError message={error} />\n          <FormSuccess message={success} />\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n            Reset password\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n}\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/new-verification-form.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { BeatLoader } from \"react-spinners\";\nimport { useSearchParams, useRouter } from \"next/navigation\";\nimport { CardWrapper } from \"./card-wrapper\";\nimport { FormSuccess } from \"@/registry/default/dynamic-components/auth/components/form-success\";\nimport { FormError } from \"@/registry/default/dynamic-components/auth/components/form-error\";\nimport {\n  newVerification,\n  verifyEmailChange,\n} from \"@/registry/default/dynamic-components/auth/actions/auth-actions\";\n\nexport function NewVerificationForm() {\n  const router = useRouter();\n  const [error, setError] = useState<string | undefined>();\n  const [success, setSuccess] = useState<string | undefined>();\n\n  const searchParams = useSearchParams();\n  const token = searchParams.get(\"token\");\n  const isEmailChange = searchParams.get(\"emailChange\") === \"true\";\n\n  const onsubmit = useCallback(() => {\n    if (success || error) return;\n\n    if (!token) {\n      setError(\"Missing token!\");\n      return;\n    }\n\n    if (isEmailChange) {\n      verifyEmailChange(token)\n        .then((data) => {\n          setSuccess(data.success);\n          setError(data.error);\n          if (data.success) {\n            // Refresh the page after a short delay to reflect changes\n            setTimeout(() => {\n              router.refresh();\n            }, 2000);\n          }\n        })\n        .catch(() => {\n          setError(\"Something went wrong!\");\n        });\n    } else {\n      newVerification(token)\n        .then((data) => {\n          setSuccess(data.success);\n          setError(data.error);\n          if (data.success) {\n            // Refresh the page after a short delay to reflect changes\n            setTimeout(() => {\n              router.refresh();\n            }, 2000);\n          }\n        })\n        .catch(() => {\n          setError(\"Something went wrong!\");\n        });\n    }\n  }, [token, success, error, isEmailChange, router]);\n\n  useEffect(() => {\n    onsubmit();\n  }, [onsubmit]);\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Email Verification\"\n      subHeaderLabel={\n        isEmailChange\n          ? \"Confirming your email change\"\n          : \"Confirming your verification\"\n      }\n      backButtonHref={isEmailChange ? \"/profile\" : \"/login\"}\n      backButtonLabel={isEmailChange ? \"Back to Profile\" : \"Back to Login\"}\n    >\n      <div className=\"flex w-full items-center justify-center\">\n        {!success && !error && <BeatLoader />}\n        <FormSuccess message={success} />\n        {!success && <FormError message={error} />}\n      </div>\n    </CardWrapper>\n  );\n}\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/reset-form.tsx",
      "content": "\"use client\";\n\nimport * as z from \"zod\";\nimport { useState, useTransition } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { FormSuccess } from \"@/registry/default/dynamic-components/auth/components/form-success\";\nimport { FormError } from \"@/registry/default/dynamic-components/auth/components/form-error\";\nimport { Input } from \"@/registry/default/ui/input\";\n\nimport { ResetSchema } from \"@/registry/default/dynamic-components/auth/schemas\";\nimport { reset } from \"@/registry/default/dynamic-components/auth/actions/auth-actions\";\nimport { CardWrapper } from \"./card-wrapper\";\nimport { Button } from \"@/registry/default/ui/button\";\n\nexport function ResetForm() {\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<z.infer<typeof ResetSchema>>({\n    resolver: zodResolver(ResetSchema),\n    defaultValues: { email: \"\" },\n  });\n\n  const onSubmit = (values: z.infer<typeof ResetSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      reset(values).then((data) => {\n        setError(data?.error);\n        setSuccess(data?.success);\n      });\n    });\n  };\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Reset Password\"\n      subHeaderLabel=\"Forgot your password?\"\n      backButtonLabel=\"Back to login\"\n      backButtonHref=\"/auth/login\"\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      disabled={isPending}\n                      placeholder=\"john.doe@example.com\"\n                      type=\"email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <FormError message={error} />\n          <FormSuccess message={success} />\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n            Send reset email\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n}\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/card-wrapper.tsx",
      "content": "\"use client\";\n\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n} from \"@/registry/default/ui/card\";\nimport { Social } from \"@/registry/default/dynamic-components/auth/components/social\";\nimport { BackButton } from \"@/registry/default/dynamic-components/auth/components/back-button\";\n\ninterface HeaderProps {\n  mainLabel: string;\n  subLabel: string;\n}\n\nexport const Header = ({ mainLabel, subLabel }: HeaderProps) => {\n  return (\n    <div className=\"w-full flex flex-col gap-y-4 items-center justify-center\">\n      <h1 className=\"text-3xl font-bold\">{mainLabel}</h1>\n      <p className=\"text-muted-foreground text-sm\">{subLabel}</p>\n    </div>\n  );\n};\n\ninterface CardWrapperProps {\n  children: React.ReactNode;\n  mainHeaderLabel: string;\n  subHeaderLabel: string;\n  backButtonLabel: string;\n  backButtonHref: string;\n  showSocial?: boolean;\n}\n\nexport const CardWrapper = ({\n  children,\n  mainHeaderLabel,\n  subHeaderLabel,\n  backButtonLabel,\n  backButtonHref,\n  showSocial,\n}: CardWrapperProps) => {\n  return (\n    <Card className=\"w-[400px] shadow-lg\">\n      <CardHeader>\n        <Header mainLabel={mainHeaderLabel} subLabel={subHeaderLabel} />\n      </CardHeader>\n      <CardContent>{children}</CardContent>\n      {showSocial && (\n        <CardFooter>\n          <Social />\n        </CardFooter>\n      )}\n      <CardFooter>\n        <BackButton label={backButtonLabel} href={backButtonHref} />\n      </CardFooter>\n    </Card>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/back-button.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport Link from \"next/link\";\n\ninterface BackButtonProps {\n  href: string;\n  label: string;\n}\n\nexport const BackButton = ({ href, label }: BackButtonProps) => {\n  return (\n    <Button className=\"font-normal w-full\" size=\"sm\" variant=\"link\" asChild>\n      <Link href={href}>{label}</Link>\n    </Button>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/error-card.tsx",
      "content": "import { CardWrapper } from \"@/registry/default/dynamic-components/auth/components/card-wrapper\";\nimport { AlertTriangleIcon } from \"lucide-react\";\n\nexport function ErrorCard() {\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Error\"\n      subHeaderLabel=\"Oops! Something went wrong\"\n      backButtonHref=\"/auth/login\"\n      backButtonLabel=\"Back to login\"\n    >\n      <div className=\"flex w-full items-center justify-center\">\n        <AlertTriangleIcon className=\"text-destructive\" />\n      </div>\n    </CardWrapper>\n  );\n}\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/form-success.tsx",
      "content": "import { CheckCircleIcon } from \"lucide-react\";\n\ninterface FormSuccessProps {\n  message?: string;\n}\n\nexport const FormSuccess = ({ message }: FormSuccessProps) => {\n  if (!message) return null;\n  return (\n    <div className=\"flex items-center gap-x-2 bg-emerald-500/15 p-3 rounded-md text-sm text-emerald-500\">\n      <CheckCircleIcon className=\"h-4 w-4\" />\n      <p>{message}</p>\n    </div>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/form-error.tsx",
      "content": "import { AlertTriangleIcon } from \"lucide-react\";\n\ninterface FormErrorProps {\n  message?: string;\n}\n\nexport const FormError = ({ message }: FormErrorProps) => {\n  if (!message) return null;\n  return (\n    <div className=\"flex items-center gap-x-2 bg-destructive/15 p-3 rounded-md text-sm text-destructive\">\n      <AlertTriangleIcon className=\"h-4 w-4\" />\n      <p>{message}</p>\n    </div>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/navbar.tsx",
      "content": "import { UserButton } from \"@/registry/default/dynamic-components/auth/components/user-button\";\n\nexport const Navbar = async () => {\n  return (\n    <nav className=\"flex w-full mt-9 justify-end rounded-xl p-4 shadow-lg\">\n      <UserButton />\n    </nav>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/user-button.tsx",
      "content": "import { User } from \"lucide-react\";\nimport { LogOutIcon } from \"lucide-react\";\nimport { LogoutButton } from \"@/registry/default/dynamic-components/auth/components/logout-button\";\n\nimport {\n  Avatar,\n  AvatarImage,\n  AvatarFallback,\n} from \"@/registry/default/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport { currentUser } from \"@/registry/default/dynamic-components/auth/lib/get-user\";\n\nexport const UserButton = async () => {\n  const user = await currentUser();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger>\n        <Avatar>\n          <AvatarImage src={user?.image || \"\"} />\n          <AvatarFallback className=\"bg-sky-500\">\n            <User className=\"text-white\" />\n          </AvatarFallback>\n        </Avatar>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-40\" align=\"end\">\n        {/* tutorial code: cursor-pointer on LogoutButton won't work because DropdownMenuItem will override it */}\n        <LogoutButton>\n          <DropdownMenuItem>\n            <LogOutIcon className=\"mr-2 h-4 w-4\" />\n            Logout\n          </DropdownMenuItem>\n        </LogoutButton>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/logout-button.tsx",
      "content": "\"use client\";\n\nimport { logout } from \"@/registry/default/dynamic-components/auth/actions/auth-actions\";\n\n// alternatively, use client-side signOut() from next-auth/react\n// import { signOut } from \"next-auth/react\";\n\ninterface LogoutButtonProps {\n  children: React.ReactNode;\n}\n\nexport function LogoutButton({ children }: LogoutButtonProps) {\n  const onClick = () => {\n    logout();\n  };\n\n  return (\n    <span onClick={onClick} className=\"cursor-pointer\">\n      {children}\n    </span>\n  );\n}\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/actions/auth-actions.ts",
      "content": "\"use server\";\n\nimport * as z from \"zod\";\nimport { db } from \"@/registry/default/dynamic-components/auth/lib/db\";\nimport { v2 as cloudinary } from \"cloudinary\";\nimport {\n  LoginSchema,\n  NewPasswordSchema,\n  ResetSchema,\n  SettingsSchema,\n} from \"@/registry/default/dynamic-components/auth/schemas\";\nimport { RegisterSchema } from \"@/registry/default/dynamic-components/auth/schemas\";\nimport {\n  getUserByEmail,\n  getUserById,\n} from \"@/registry/default/dynamic-components/auth/lib/user\";\nimport {\n  signIn,\n  signOut,\n} from \"@/registry/default/dynamic-components/auth/lib/auth\";\nimport { DEFAULT_LOGIN_REDIRECT } from \"@/registry/default/dynamic-components/auth/lib/routes\";\nimport { AuthError } from \"next-auth\";\nimport {\n  generatePasswordResetToken,\n  generateVerificationToken,\n  getPasswordResetTokenByToken,\n  getVerificationTokenByToken,\n  hashPassword,\n  verifyPassword,\n} from \"@/registry/default/dynamic-components/auth/lib/auth-helpers\";\nimport {\n  sendPasswordResetEmail,\n  sendVerificationEmail,\n  sendTwoFactorTokenEmail,\n} from \"@/registry/default/dynamic-components/auth/lib/mail\";\nimport {\n  generateTwoFactorToken,\n  getTwoFactorConfirmationByUserId,\n  getTwoFactorTokenByEmail,\n} from \"@/registry/default/dynamic-components/auth/actions/two-factor\";\nimport { currentUser } from \"@/registry/default/dynamic-components/auth/lib/get-user\";\n\nexport const login = async (\n  values: z.infer<typeof LoginSchema>,\n  callbackUrl?: string | null,\n) => {\n  const validatedFields = LoginSchema.safeParse(values);\n  if (!validatedFields.success) {\n    return { error: \"Invalid fields!\" };\n  }\n\n  const { email, password, code } = validatedFields.data;\n\n  const existingUser = await getUserByEmail(email);\n  if (!existingUser || !existingUser.email || !existingUser.password) {\n    // Either user/email does not exist or user signed in with OAuth\n    return { error: \"Email does not exist! / Sign in with OAuth!\" };\n  }\n\n  const passwordsMatch = await verifyPassword(password, existingUser.password);\n\n  if (!existingUser.emailVerified) {\n    const verificationToken = await generateVerificationToken(\n      existingUser.email,\n    );\n\n    if (!passwordsMatch) {\n      return { error: \"Invalid credentials!\" };\n    }\n    await sendVerificationEmail(\n      verificationToken.email,\n      verificationToken.token,\n    );\n\n    return { success: \"Confirmation email sent!\" };\n  }\n  if (!passwordsMatch) {\n    return { error: \"Invalid credentials!\" };\n  }\n  //2FA\n  if (existingUser.isTwoFactorEnabled && existingUser.email) {\n    if (code) {\n      const twoFactorToken = await getTwoFactorTokenByEmail(existingUser.email);\n\n      if (!twoFactorToken) return { error: \"Invalid code!\" };\n\n      if (twoFactorToken.token !== code) return { error: \"Invalid code!\" };\n\n      const hasExpired = new Date(twoFactorToken.expires) < new Date();\n\n      if (hasExpired) return { error: \"Code expired!\" };\n\n      await db.twoFactorToken.delete({ where: { id: twoFactorToken.id } });\n\n      const existingConfirmation = await getTwoFactorConfirmationByUserId(\n        existingUser.id,\n      );\n\n      if (existingConfirmation) {\n        await db.twoFactorConfirmation.delete({\n          where: { id: existingConfirmation.id },\n        });\n      }\n\n      await db.twoFactorConfirmation.create({\n        data: {\n          userId: existingUser.id,\n        },\n      });\n    } else {\n      const twoFactorToken = await generateTwoFactorToken(existingUser.email);\n      await sendTwoFactorTokenEmail(twoFactorToken.email, twoFactorToken.token);\n\n      // when 2FA token has been emailed to user\n      return { twoFactor: true };\n    }\n  }\n\n  try {\n    await signIn(\"credentials\", {\n      email,\n      password,\n      redirectTo: callbackUrl || DEFAULT_LOGIN_REDIRECT,\n    }); // explicitly setting the redirect (for clarity), even though middleware will redirect if user is logged in\n\n    return { success: \"Logged in!\" };\n  } catch (error) {\n    if (error instanceof AuthError) {\n      switch (error.type) {\n        case \"CredentialsSignin\": {\n          return { error: \"Invalid credentials!\" };\n        }\n        default: {\n          return { error: \"Something went wrong!\" };\n        }\n      }\n    }\n    throw error;\n  }\n};\n\nexport const logout = async () => {\n  await signOut();\n};\n\nexport const register = async (values: z.infer<typeof RegisterSchema>) => {\n  const validatedFields = RegisterSchema.safeParse(values);\n  if (!validatedFields.success) {\n    return { error: \"Invalid fields!\" };\n  }\n\n  const { email, password, name } = validatedFields.data;\n  const hashedPassword = await hashPassword(password);\n\n  const existingUser = await getUserByEmail(email);\n\n  if (existingUser) {\n    return { error: \"Email already in use!\" };\n  }\n\n  await db.user.create({\n    data: {\n      email,\n      password: hashedPassword,\n      name,\n    },\n  });\n\n  const verificationToken = await generateVerificationToken(email);\n  await sendVerificationEmail(verificationToken.email, verificationToken.token);\n\n  return { success: \"Confirmation Email Sent!\" };\n};\n\nexport const loginWithOAuth = async (\n  provider: string,\n  callbackUrl?: string | null,\n) => {\n  try {\n    await signIn(provider, {\n      redirectTo: callbackUrl || DEFAULT_LOGIN_REDIRECT,\n    });\n\n    return { success: \"Logged in!\" };\n  } catch (error) {\n    if (error === \"NEXT_REDIRECT\") {\n      // This is a redirect, not an actual error\n      return { success: \"Redirecting to OAuth provider...\" };\n    } else if (error instanceof AuthError) {\n      switch (error.type) {\n        case \"OAuthAccountNotLinked\":\n          return {\n            error: \"Email is already in use with a different provider.\",\n          };\n        default:\n          return { error: \"Something went wrong.\" };\n      }\n    }\n    throw error;\n  }\n};\n\nexport const newVerification = async (token: string) => {\n  const existingToken = await getVerificationTokenByToken(token);\n  if (!existingToken) {\n    return { error: \"Token does not exist\" };\n  }\n\n  const hasExpired = new Date(existingToken.expires) < new Date();\n\n  if (hasExpired) {\n    return { error: \"Token has expired\" };\n  }\n\n  const existingUser = await getUserByEmail(existingToken.email);\n\n  // Handle case where user exists - normal email verification for new registration\n  if (existingUser) {\n    await db.user.update({\n      where: { id: existingUser.id },\n      data: {\n        emailVerified: new Date(),\n      },\n    });\n  } else {\n    // If we can't find a user with this email, it might be from a registration\n    // that created the user but didn't set the email yet\n    const pendingUser = await db.user.findFirst({\n      where: {\n        OR: [{ email: null }, { emailVerified: null }],\n      },\n      orderBy: {\n        id: \"desc\",\n      },\n    });\n\n    if (!pendingUser) {\n      return { error: \"User not found!\" };\n    }\n\n    await db.user.update({\n      where: { id: pendingUser.id },\n      data: {\n        email: existingToken.email,\n        emailVerified: new Date(),\n      },\n    });\n  }\n\n  await db.verificationToken.delete({\n    where: { id: existingToken.id },\n  });\n\n  return { success: \"Email verified!\" };\n};\n\nexport const reset = async (values: z.infer<typeof ResetSchema>) => {\n  const validatedFields = ResetSchema.safeParse(values);\n\n  if (!validatedFields.success) return { error: \"Invalid email!\" };\n\n  const { email } = validatedFields.data;\n\n  const existingUser = await getUserByEmail(email);\n  if (!existingUser) return { error: \"Email not found!\" };\n\n  const isOAuthAccount = await db.account.findFirst({\n    where: { userId: existingUser?.id },\n  });\n\n  if (isOAuthAccount)\n    return { error: \"Cannot reset password for OAuth account!\" };\n\n  const passwordResetToken = await generatePasswordResetToken(email);\n  await sendPasswordResetEmail(\n    passwordResetToken.email,\n    passwordResetToken.token,\n  );\n\n  return { success: \"Reset password email sent\" };\n};\n\nexport const newPassword = async (\n  values: z.infer<typeof NewPasswordSchema>,\n  token?: string | null,\n) => {\n  if (!token) return { error: \"Missing token!\" };\n\n  const validatedFields = NewPasswordSchema.safeParse(values);\n\n  if (!validatedFields.success) return { error: \"Invalid fields!\" };\n\n  const { password } = validatedFields.data;\n\n  const existingToken = await getPasswordResetTokenByToken(token);\n\n  if (!existingToken) return { error: \"Invalid token!\" };\n\n  const hasExpired = new Date(existingToken.expires) < new Date();\n\n  if (hasExpired) return { error: \"Token has expired!\" };\n\n  const existingUser = await getUserByEmail(existingToken.email);\n\n  if (!existingUser) return { error: \"Email does not exist!\" };\n\n  const hashedPassword = await hashPassword(password);\n\n  await db.user.update({\n    where: { id: existingUser.id },\n    data: { password: hashedPassword },\n  });\n\n  await db.passwordResetToken.delete({\n    where: { id: existingToken.id },\n  });\n\n  return { success: \"Password updated!\" };\n};\n\n// New action for email change\nexport async function changeEmail(userId: string, newEmail: string) {\n  const existingUser = await db.user.findUnique({\n    where: { id: userId },\n  });\n\n  if (!existingUser) {\n    return { error: \"User not found!\" };\n  }\n\n  // Check if the new email is already used by another account\n  const emailTaken = await getUserByEmail(newEmail);\n  if (emailTaken && emailTaken.id !== userId) {\n    return { error: \"Email already in use by another account!\" };\n  }\n\n  // Store the user ID in the verification token\n  const verificationToken = await generateVerificationToken(newEmail, userId);\n\n  // Send verification email to the NEW email address with emailChange flag\n  await sendVerificationEmail(\n    newEmail,\n    verificationToken.token,\n    true, // Indicate this is an email change\n  );\n\n  // Update user record to indicate pending email change\n  await db.user.update({\n    where: { id: userId },\n    data: {\n      pendingEmail: newEmail,\n    },\n  });\n\n  return { success: \"Verification email sent to new address!\" };\n}\n\n// Action to verify email change\nexport async function verifyEmailChange(token: string) {\n  const existingToken = await getVerificationTokenByToken(token);\n\n  if (!existingToken) {\n    return { error: \"Token does not exist!\" };\n  }\n\n  const hasExpired = new Date(existingToken.expires) < new Date();\n\n  if (hasExpired) {\n    return { error: \"Token has expired!\" };\n  }\n\n  // Find the user who requested this email change using the userId stored in the token\n  if (!existingToken.userId) {\n    return { error: \"Invalid email change request!\" };\n  }\n\n  const user = await db.user.findUnique({\n    where: { id: existingToken.userId },\n  });\n\n  if (!user) {\n    return { error: \"User not found!\" };\n  }\n\n  // Update the user's email\n  await db.user.update({\n    where: { id: user.id },\n    data: {\n      email: existingToken.email,\n      emailVerified: new Date(),\n      pendingEmail: null, // Clear the pending email field\n    },\n  });\n\n  // Delete the verification token\n  await db.verificationToken.delete({\n    where: { id: existingToken.id },\n  });\n\n  return { success: \"Email updated successfully!\" };\n}\n\nexport const settings = async (\n  userId: string | { id: string } | any,\n  values: z.infer<typeof SettingsSchema>,\n) => {\n  const user = await currentUser();\n\n  if (!user) return { error: \"Unauthorized!\" };\n  // Handle different userId formats\n  const actualUserId =\n    typeof userId === \"string\"\n      ? userId\n      : typeof userId === \"object\" && userId?.id\n        ? userId.id\n        : null;\n\n  if (!actualUserId) {\n    return { error: \"Invalid user ID!\" };\n  }\n\n  const dbUser = await getUserById(user.id as string);\n\n  if (!dbUser) return { error: \"Unauthorized!\" };\n\n  // users who signed in with OAuth should not be able to modify these fields\n  if (user.isOAuth) {\n    values.email = undefined;\n    values.isTwoFactorEnabled = undefined;\n  }\n\n  // Handle email change if provided\n  if (values.email && values.email !== user.email) {\n    return await changeEmail(actualUserId, values.email);\n  }\n\n  // Handle name update\n  if (values.name !== undefined && values.name !== user.name) {\n    await db.user.update({\n      where: { id: actualUserId },\n      data: { name: values.name },\n    });\n  }\n\n  // Handle two-factor authentication toggle\n  if (\n    typeof values.isTwoFactorEnabled !== \"undefined\" &&\n    values.isTwoFactorEnabled !== dbUser.isTwoFactorEnabled\n  ) {\n    await db.user.update({\n      where: { id: actualUserId },\n      data: { isTwoFactorEnabled: values.isTwoFactorEnabled },\n    });\n  }\n\n  return { success: \"Profile updated!\" };\n};\n\n// Configure Cloudinary\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\nexport async function updateUserImage(userId: string, imageData: string) {\n  try {\n    // Validate user ID\n    const user = await db.user.findUnique({\n      where: { id: userId },\n    });\n\n    if (!user) {\n      return { error: \"User not found!\" };\n    }\n\n    if (!imageData || !imageData.startsWith(\"data:image/\")) {\n      return { error: \"Invalid image data!\" };\n    }\n\n    // Upload to Cloudinary\n    const uploadResponse = await new Promise((resolve, reject) => {\n      cloudinary.uploader.upload(\n        imageData,\n        {\n          folder: \"user_profiles\",\n          // You can add transformation options here\n          // transformation: [{ width: 250, height: 250, crop: 'fill' }]\n        },\n        (error, result) => {\n          if (error) reject(error);\n          else resolve(result);\n        },\n      );\n    });\n\n    // Get the secure URL from the upload response\n    const imageUrl = (uploadResponse as { secure_url: string }).secure_url;\n\n    // Update the user's image URL in the database\n    await db.user.update({\n      where: { id: userId },\n      data: { image: imageUrl },\n    });\n\n    return { success: \"Profile picture updated!\" };\n  } catch (error) {\n    console.error(\"Error updating profile picture:\", error);\n    return { error: \"Failed to update profile picture.\" };\n  }\n}\n\nexport const changePassword = async (\n  currentPassword: string,\n  newPassword: string,\n) => {\n  const user = await currentUser();\n\n  if (!user) return { error: \"Unauthorized!\" };\n\n  // Block OAuth users from password changes\n  if (user.isOAuth) {\n    return { error: \"OAuth users cannot change password!\" };\n  }\n\n  const dbUser = await getUserById(user.id as string);\n\n  if (!dbUser) return { error: \"Unauthorized!\" };\n\n  const passwordsMatch = await verifyPassword(\n    currentPassword,\n    dbUser?.password!,\n  );\n\n  if (!passwordsMatch) {\n    return { error: \"Incorrect password!\" };\n  }\n\n  const hashedPassword = await hashPassword(newPassword);\n\n  await db.user.update({\n    where: { id: dbUser.id },\n    data: { password: hashedPassword },\n  });\n\n  return { success: \"Password updated!\" };\n};\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/auth-helpers.ts",
      "content": "import { db } from \"@/registry/default/dynamic-components/auth/lib/db\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport bcryptjs from \"bcryptjs\";\n\nexport const hashPassword = async (password: string) => {\n  return await bcryptjs.hash(password, 10);\n};\n\nexport const verifyPassword = async (\n  inputPassword: string,\n  hashedPassword: string,\n) => {\n  return await bcryptjs.compare(inputPassword, hashedPassword);\n};\n\nexport const getVerificationTokenByToken = async (token: string) => {\n  try {\n    const verificationToken = await db.verificationToken.findUnique({\n      where: { token },\n    });\n\n    return verificationToken;\n  } catch {\n    return null;\n  }\n};\n\nexport const getVerificationTokenByEmail = async (email: string) => {\n  try {\n    const verificationToken = await db.verificationToken.findFirst({\n      where: { email },\n    });\n\n    return verificationToken;\n  } catch {\n    return null;\n  }\n};\n\nexport const generateVerificationToken = async (\n  email: string,\n  userId?: string,\n) => {\n  const token = uuidv4();\n  const expires = new Date(new Date().getTime() + 3600 * 1000);\n\n  const existingToken = await getVerificationTokenByEmail(email);\n\n  if (existingToken) {\n    await db.verificationToken.delete({\n      where: { id: existingToken.id },\n    });\n  }\n\n  const verificationToken = await db.verificationToken.create({\n    data: {\n      email,\n      token,\n      expires,\n      userId, // Will be undefined for new registrations, populated for email changes\n    },\n  });\n\n  return verificationToken;\n};\n\nexport const getPasswordResetTokenByToken = async (token: string) => {\n  try {\n    const passwordResetToken = await db.passwordResetToken.findUnique({\n      where: {\n        token,\n      },\n    });\n    return passwordResetToken;\n  } catch {\n    return null;\n  }\n};\n\nexport const getPasswordResetTokenByEmail = async (email: string) => {\n  try {\n    const passwordResetToken = await db.passwordResetToken.findFirst({\n      where: {\n        email,\n      },\n    });\n    return passwordResetToken;\n  } catch {\n    return null;\n  }\n};\n\nexport const generatePasswordResetToken = async (email: string) => {\n  const token = uuidv4();\n  const expires = new Date(new Date().getTime() + 3600 * 1000);\n\n  const existingToken = await getPasswordResetTokenByEmail(email);\n\n  if (existingToken) {\n    await db.passwordResetToken.delete({\n      where: { id: existingToken.id },\n    });\n  }\n\n  const passwordResetToken = await db.passwordResetToken.create({\n    data: {\n      email,\n      token,\n      expires,\n    },\n  });\n\n  return passwordResetToken;\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/user.ts",
      "content": "import { db } from \"@/registry/default/dynamic-components/auth/lib/db\";\n\nexport const getUserByEmail = async (email: string) => {\n  try {\n    const user = await db.user.findFirst({\n      where: { email },\n    });\n    return user;\n  } catch (e) {\n    return null;\n  }\n};\nexport const getUpdatedEmailUser = async (email: string) => {\n  try {\n    const user = await db.verificationToken.findFirst({\n      where: { email },\n    });\n    return user;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const getUserById = async (id: string) => {\n  try {\n    const user = await db.user.findFirst({\n      where: { id },\n    });\n    return user;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const getAccountByUserId = async (userId: string) => {\n  try {\n    const account = await db.account.findFirst({\n      where: {\n        userId,\n      },\n    });\n\n    return account;\n  } catch {\n    return null;\n  }\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/auth.ts",
      "content": "import NextAuth from \"next-auth\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport authConfig from \"@/registry/default/dynamic-components/auth/lib/auth.config\";\nimport { db } from \"@/registry/default/dynamic-components/auth/lib/db\";\nimport {\n  getAccountByUserId,\n  getUserById,\n} from \"@/registry/default/dynamic-components/auth/lib/user\";\nimport { getTwoFactorConfirmationByUserId } from \"@/registry/default/dynamic-components/auth/actions/two-factor\";\n\nexport const { auth, handlers, signIn, signOut } = NextAuth({\n  pages: {\n    signIn: \"/auth/login\",\n    error: \"/auth/error\",\n  },\n  events: {\n    async linkAccount({ user }) {\n      await db.user.update({\n        where: { id: user.id },\n        data: { emailVerified: new Date() },\n      });\n    },\n  },\n  callbacks: {\n    async signIn({ user, account }) {\n      //Allow OAuth without email verification\n      if (account?.type !== \"credentials\") return true;\n      const existingUser = await getUserById(user.id!);\n\n      //Prevent login if email is not verified\n      if (!existingUser?.emailVerified) return false;\n\n      //2FA Check\n      if (existingUser.isTwoFactorEnabled) {\n        const twoFactorConfirmation = await getTwoFactorConfirmationByUserId(\n          existingUser.id,\n        );\n\n        if (!twoFactorConfirmation) return false;\n\n        // Delete two factor confirmation for next sign in\n        await db.twoFactorConfirmation.delete({\n          where: { id: twoFactorConfirmation.id },\n        });\n      }\n\n      return true;\n    },\n    async session({ session, token }) {\n      if (token.sub && session.user) {\n        session.user.id = token.sub;\n      }\n      if (token.role && session.user) {\n        session.user.role = token.role;\n      }\n\n      if (session.user) {\n        session.user.isTwoFactorEnabled = token.isTwoFactorEnabled;\n      }\n\n      // model fields that can be updated by the user in the settings page\n      if (session.user) {\n        session.user.name = token.name;\n        session.user.email = token.email as string;\n        session.user.isOAuth = token.isOAuth;\n        session.user.image = token.image as string;\n      }\n      return session;\n    },\n\n    async jwt({ token }) {\n      if (!token.sub) {\n        return token;\n      }\n\n      const existingUser = await getUserById(token.sub);\n\n      if (!existingUser) {\n        return token;\n      }\n      const existingAccount = await getAccountByUserId(existingUser.id);\n\n      token.role = existingUser.role;\n      token.isTwoFactorEnabled = existingUser.isTwoFactorEnabled;\n\n      // model fields that can be updated by the user in the settings page\n      token.name = existingUser.name;\n      token.email = existingUser.email;\n      token.image = existingUser.image;\n\n      // type conversion to boolean\n      token.isOAuth = !!existingAccount;\n\n      return token;\n    },\n  },\n  adapter: PrismaAdapter(db),\n  session: { strategy: \"jwt\" },\n  ...authConfig,\n});\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/next-auth.d.ts",
      "content": "import { UserRole } from \"@prisma/client\";\nimport NextAuth, { type DefaultSession } from \"next-auth\";\nimport { JWT } from \"next-auth/jwt\";\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    role: UserRole;\n    isTwoFactorEnabled: boolean;\n    isOAuth: boolean;\n  }\n}\n\nexport type ExtendedUser = DefaultSession[\"user\"] & {\n  role: UserRole;\n  isTwoFactorEnabled: boolean;\n  isOAuth: boolean;\n};\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user: ExtendedUser;\n  }\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/routes.ts",
      "content": "export const publicRoutes = [\"/\", \"/auth/verify\"];\n\n/**\n * An array of routes that are accessible only to authenticated users.\n * @type {string[]}\n */\nexport const authRoutes = [\n  \"/auth/login\",\n  \"/auth/register\",\n  \"/auth/error\",\n  \"/auth/reset\",\n  \"/auth/new-password\",\n];\n\n/**\n * An array of routes that are accessible only to admin users.\n * @type {string[]}\n */\nexport const adminRoutes = [\n  \"/admin\",\n  // Add other admin routes here\n];\n\n/**\n * The prefix for all API auth routes.\n * @type {string}\n */\nexport const apiAuthPrefix = \"/api/auth\";\n\n/**\n * The default redirect path after a successful login.\n * @type {string}\n */\nexport const DEFAULT_LOGIN_REDIRECT = \"/dashboard\";\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/auth.config.ts",
      "content": "import Credentials from \"next-auth/providers/credentials\";\n\nimport { LoginSchema } from \"@/registry/default/dynamic-components/auth/schemas\";\nimport GitHub from \"next-auth/providers/github\";\nimport type { NextAuthConfig } from \"next-auth\";\nimport Google from \"next-auth/providers/google\";\nimport { getUserByEmail } from \"@/registry/default/dynamic-components/auth/lib/user\";\nimport { verifyPassword } from \"@/registry/default/dynamic-components/auth/lib/auth-helpers\";\n\nexport default {\n  providers: [\n    Google({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n    GitHub({\n      clientId: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n    }),\n    Credentials({\n      async authorize(credentials) {\n        const validatedFields = LoginSchema.safeParse(credentials);\n\n        if (validatedFields.success) {\n          const { email, password } = validatedFields.data;\n          const user = await getUserByEmail(email);\n\n          if (!user || !user.password) return null;\n\n          const passwordsMatch = await verifyPassword(password, user.password);\n\n          if (passwordsMatch) return user;\n        }\n        return null;\n      },\n    }),\n  ],\n} satisfies NextAuthConfig;\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/actions/two-factor.ts",
      "content": "import { db } from \"@/registry/default/dynamic-components/auth/lib/db\";\nimport crypto from \"crypto\";\n\nexport const getTwoFactorTokenByToken = async (token: string) => {\n  try {\n    const twoFactorToken = await db.twoFactorToken.findUnique({\n      where: { token },\n    });\n\n    return twoFactorToken;\n  } catch {\n    return null;\n  }\n};\n\nexport const getTwoFactorTokenByEmail = async (email: string) => {\n  try {\n    const twoFactorToken = await db.twoFactorToken.findFirst({\n      where: { email },\n    });\n\n    return twoFactorToken;\n  } catch {\n    return null;\n  }\n};\n\nexport const getTwoFactorConfirmationByUserId = async (userId: string) => {\n  try {\n    const twoFactorConfirmation = await db.twoFactorConfirmation.findUnique({\n      where: { userId },\n    });\n\n    return twoFactorConfirmation;\n  } catch {\n    return null;\n  }\n};\n\nexport const generateTwoFactorToken = async (email: string) => {\n  const token = crypto.randomInt(100_000, 1_000_000).toString();\n\n  const expires = new Date(new Date().getTime() + 5 * 60 * 1000); // 5 minute expiry\n\n  const existingToken = await getTwoFactorTokenByEmail(email);\n\n  if (existingToken) {\n    await db.twoFactorToken.delete({\n      where: { id: existingToken.id },\n    });\n  }\n\n  const twoFactorToken = await db.twoFactorToken.create({\n    data: {\n      email,\n      token,\n      expires,\n    },\n  });\n\n  return twoFactorToken;\n};\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/settings-form.tsx",
      "content": "\"use client\";\nimport { useEffect, useTransition, useRef, useState } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { SettingsSchema } from \"@/registry/default/dynamic-components/auth/schemas\";\nimport {\n  settings,\n  updateUserImage,\n} from \"@/registry/default/dynamic-components/auth/actions/auth-actions\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Form,\n  FormField,\n  FormControl,\n  FormItem,\n  FormLabel,\n  FormDescription,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { FormSuccess } from \"@/registry/default/dynamic-components/auth/components/form-success\";\nimport { FormError } from \"@/registry/default/dynamic-components/auth/components/form-error\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Switch } from \"@/registry/default/ui/switch\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/default/ui/avatar\";\nimport { User } from \"lucide-react\";\n\nexport const SettingsForm = () => {\n  const user = useSession().data?.user;\n\n  const [error, setError] = useState<string | undefined>();\n  const [success, setSuccess] = useState<string | undefined>();\n  const { update } = useSession();\n  const [isPending, startTransition] = useTransition();\n  const [isImageUploading, setIsImageUploading] = useState(false);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const form = useForm<z.infer<typeof SettingsSchema>>({\n    resolver: zodResolver(SettingsSchema),\n    defaultValues: {\n      name: user?.name || \"\",\n      email: user?.email || \"\",\n      isTwoFactorEnabled: user?.isTwoFactorEnabled || undefined,\n    },\n  });\n\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        name: user?.name || \"\",\n        email: user?.email || \"\",\n        isTwoFactorEnabled: user?.isTwoFactorEnabled || undefined,\n      });\n      // Set the initial image preview if user has an image\n      setPreviewUrl(user.image || null);\n    }\n  }, [user, form]);\n\n  const onSubmit = (values: z.infer<typeof SettingsSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    const userId = user?.id;\n\n    if (!userId) {\n      setError(\"User ID is required!\");\n      return;\n    }\n\n    startTransition(() => {\n      settings(userId, values)\n        .then((data) => {\n          setError(data?.error);\n          setSuccess(data?.success);\n          if (data?.success) {\n            // Update the session to reflect changes\n            update();\n          }\n        })\n        .catch((error) => {\n          console.error(\"Settings update error:\", error);\n          setError(\"Something went wrong!\");\n        });\n    });\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n\n    if (!selectedFile) {\n      return;\n    }\n\n    if (!selectedFile.type.startsWith(\"image/\")) {\n      setError(\"Please select an image file\");\n      return;\n    }\n\n    if (selectedFile.size > 5 * 1024 * 1024) {\n      // 5MB limit\n      setError(\"Image must be less than 5MB\");\n      return;\n    }\n\n    setError(undefined);\n\n    // Create a preview\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setPreviewUrl(reader.result as string);\n    };\n    reader.readAsDataURL(selectedFile);\n  };\n\n  const handleImageUpload = async () => {\n    if (!previewUrl || !user?.id) {\n      setError(\"Please select an image file\");\n      return;\n    }\n\n    setIsImageUploading(true);\n    setError(undefined);\n    setSuccess(undefined);\n\n    try {\n      // Send the base64 string directly to our server action\n      const response = await updateUserImage(user.id, previewUrl);\n\n      if (response.error) {\n        setError(response.error);\n      } else if (response.success) {\n        setSuccess(response.success);\n        // Update the session to reflect changes\n        update();\n        // Clear the file input\n        if (fileInputRef.current) {\n          fileInputRef.current.value = \"\";\n        }\n      }\n    } catch (err) {\n      setError(\"An error occurred while uploading the image\");\n      console.error(err);\n    } finally {\n      setIsImageUploading(false);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form className=\"space-y-6\" onSubmit={form.handleSubmit(onSubmit)}>\n        <div className=\"space-y-4\">\n          {/* Profile Image */}\n          <div className=\"space-y-4\">\n            <FormLabel>Profile Picture</FormLabel>\n            <div className=\"flex flex-col items-center space-y-4\">\n              {previewUrl && (\n                <Avatar>\n                  <AvatarImage src={user?.image || \"\"} />\n                  <AvatarFallback className=\"bg-sky-500\">\n                    <User className=\"text-white\" />\n                  </AvatarFallback>\n                </Avatar>\n              )}\n\n              <div className=\"flex flex-col w-full space-y-2\">\n                <Input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileChange}\n                  disabled={isImageUploading}\n                  className=\"w-full\"\n                />\n\n                <Button\n                  type=\"button\"\n                  onClick={handleImageUpload}\n                  disabled={!previewUrl || isImageUploading}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  {isImageUploading ? \"Uploading...\" : \"Upload Image\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Name Field */}\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Name</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    placeholder=\"John Doe\"\n                    disabled={isPending}\n                    type=\"text\"\n                    className=\"w-full\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/* Email Field (Only for non-OAuth users) */}\n          {!user?.isOAuth && (\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"john.doe@mail.com\"\n                      disabled={isPending}\n                      type=\"email\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          )}\n\n          {/* Two-Factor Authentication (Only for non-OAuth users) */}\n          {!user?.isOAuth && (\n            <FormField\n              control={form.control}\n              name=\"isTwoFactorEnabled\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4 shadow-sm\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel>Two-Factor Authentication</FormLabel>\n                    <FormDescription>\n                      Enable two-factor authentication for your account.\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      disabled={isPending}\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n          )}\n        </div>\n\n        {/* Error and Success Messages */}\n        {error && <FormError message={error} />}\n        {success && <FormSuccess message={success} />}\n\n        {/* Save Button */}\n        <Button\n          type=\"submit\"\n          disabled={isPending}\n          className=\"w-full bg-primary hover:bg-primary-dark\"\n        >\n          {isPending ? \"Saving...\" : \"Save Changes\"}\n        </Button>\n      </form>\n    </Form>\n  );\n};\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/role-gate.tsx",
      "content": "import { currentRole } from \"@/registry/default/dynamic-components/auth/lib/get-user\";\nimport { UserRole } from \"@prisma/client\";\nimport { FormError } from \"@/registry/default/dynamic-components/auth/components/form-error\";\n\ninterface RoleGateProps {\n  children: React.ReactNode;\n  allowedRole: UserRole;\n}\n\nexport async function RoleGate({ children, allowedRole }: RoleGateProps) {\n  const role = await currentRole();\n\n  if (role !== allowedRole) {\n    return (\n      <FormError message=\"You do not have permission to view this content!\" />\n    );\n  }\n  return <>{children}</>;\n}\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/emails/reset-password-email.tsx",
      "content": "import {\n  Body,\n  Button,\n  Container,\n  Head,\n  Hr,\n  Html,\n  Preview,\n  Section,\n  Text,\n} from \"@react-email/components\";\nimport { Tailwind } from \"@react-email/tailwind\";\n\ninterface ResetPasswordEmailProps {\n  resetLink: string;\n}\n\nexport default function ResetPasswordEmail({\n  resetLink,\n}: ResetPasswordEmailProps) {\n  return (\n    <Html>\n      <Head />\n      <Preview>Reset your password</Preview>\n      <Tailwind>\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\n            <Section className=\"mt-[32px]\">\n              <Text className=\"text-black text-[24px] font-medium mb-[0] mt-[0] mx-[0]\">\n                Reset your password\n              </Text>\n              <Text className=\"text-black text-[14px] leading-[24px]\">\n                Click the button below to reset your password.\n              </Text>\n              <Button\n                className=\"bg-blue-600 rounded text-white font-medium py-[8px] px-[20px]\"\n                href={resetLink}\n              >\n                Reset Password\n              </Button>\n              <Text className=\"text-black text-[14px] leading-[24px]\">\n                If you did not request a password reset, you can safely ignore\n                this email.\n              </Text>\n              <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-[0] w-full\" />\n              <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\n                This link will expire in 1 hour.\n              </Text>\n            </Section>\n          </Container>\n        </Body>\n      </Tailwind>\n    </Html>\n  );\n}\n",
      "type": "registry:email",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/emails/verification-email.tsx",
      "content": "import {\n  Body,\n  Button,\n  Container,\n  Head,\n  Hr,\n  Html,\n  Preview,\n  Section,\n  Text,\n} from \"@react-email/components\";\nimport { Tailwind } from \"@react-email/tailwind\";\n\ninterface VerificationEmailProps {\n  confirmLink: string;\n}\n\nexport default function VerificationEmail({\n  confirmLink,\n}: VerificationEmailProps) {\n  return (\n    <Html>\n      <Head />\n      <Preview>Verify your email address</Preview>\n      <Tailwind>\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\n            <Section className=\"mt-[32px]\">\n              <Text className=\"text-black text-[24px] font-medium mb-[0] mt-[0] mx-[0]\">\n                Verify your email\n              </Text>\n              <Text className=\"text-black text-[14px] leading-[24px]\">\n                Click the button below to verify your email address.\n              </Text>\n              <Button\n                className=\"bg-blue-600 rounded text-white font-medium py-[8px] px-[20px]\"\n                href={confirmLink}\n              >\n                Confirm Email\n              </Button>\n              <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-[0] w-full\" />\n              <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\n                This link will expire in 24 hours.\n              </Text>\n            </Section>\n          </Container>\n        </Body>\n      </Tailwind>\n    </Html>\n  );\n}\n",
      "type": "registry:email",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/emails/two-factor-email.tsx",
      "content": "import {\n  Body,\n  Container,\n  Head,\n  Hr,\n  Html,\n  Preview,\n  Section,\n  Text,\n} from \"@react-email/components\";\nimport { Tailwind } from \"@react-email/tailwind\";\n\ninterface TwoFactorAuthEmailProps {\n  verificationToken: string;\n}\n\nexport default function TwoFactorAuthEmail({\n  verificationToken,\n}: TwoFactorAuthEmailProps) {\n  return (\n    <Html>\n      <Head />\n      <Preview>Your 2FA Verification Code</Preview>\n      <Tailwind>\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\n            <Section className=\"mt-[32px]\">\n              <Text className=\"text-black text-[24px] font-medium mb-[0] mt-[0] mx-[0]\">\n                Two-Factor Authentication\n              </Text>\n              <Text className=\"text-black text-[14px] leading-[24px]\">\n                Your verification code is:\n              </Text>\n              <Text className=\"text-black text-[24px] font-bold my-[20px] mx-[0]\">\n                {verificationToken}\n              </Text>\n              <Text className=\"text-black text-[14px] leading-[24px]\">\n                This code will expire in <strong>5 minutes</strong>. Please use\n                it to complete your login process.\n              </Text>\n              <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-[0] w-full\" />\n              <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\n                If you did not request this code, please ignore this email.\n              </Text>\n            </Section>\n          </Container>\n        </Body>\n      </Tailwind>\n    </Html>\n  );\n}\n",
      "type": "registry:email",
      "target": ""
    }
  ]
}
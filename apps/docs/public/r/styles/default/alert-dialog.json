{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "alert-dialog",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "@radix-ui/react-alert-dialog"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/alert-dialog.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { buttonVariants } from \"@/registry/default/ui/button\";\r\n\r\n// 1. Root\r\n// ------------------------------------------------------------\r\n// The AlertDialog root. Allows you to pass any additional props\r\n// (role, aria-labelledby, aria-label, etc.) if you need custom\r\n// behavior for your dialog container.\r\nconst AlertDialog = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Root>\r\n>(({ children, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Root ref={ref} {...props}>\r\n    {children}\r\n  </AlertDialogPrimitive.Root>\r\n));\r\nAlertDialog.displayName = \"AlertDialog\";\r\n\r\n// 2. Trigger\r\n// ------------------------------------------------------------\r\n// The button/element that opens the dialog. Since it's a Radix\r\n// primitive, it already supports keyboard and screen reader usage.\r\nconst AlertDialogTrigger = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Trigger>\r\n>(({ children, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Trigger ref={ref} {...props}>\r\n    {children}\r\n  </AlertDialogPrimitive.Trigger>\r\n));\r\nAlertDialogTrigger.displayName = \"AlertDialogTrigger\";\r\n\r\n// 3. Portal\r\n// ------------------------------------------------------------\r\n// Renders the dialog outside the DOM hierarchy of the parent.\r\n// Typically, you'll just keep this as is.\r\nconst AlertDialogPortal = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Portal>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Portal>\r\n>(({ children, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Portal ref={ref} {...props}>\r\n    {children}\r\n  </AlertDialogPrimitive.Portal>\r\n));\r\nAlertDialogPortal.displayName = \"AlertDialogPortal\";\r\n\r\n// 4. Overlay\r\n// ------------------------------------------------------------\r\n// Dimmed overlay behind the dialog. Pass any accessibility or styling\r\n// props through `className` or directly via `props`.\r\nconst AlertDialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Overlay\r\n    ref={ref}\r\n    className={cn(\r\n      \"fixed inset-0 z-50 bg-black/80\",\r\n      // Radix animations\r\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\r\n      \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogOverlay.displayName = \"AlertDialogOverlay\";\r\n\r\n// 5. Content\r\n// ------------------------------------------------------------\r\n// The dialog container itself. Radix automatically sets\r\n// `role=\"alertdialog\"` and manages focus and keyboard behavior.\r\n// We provide a portal and overlay, then wrap the content.\r\nconst AlertDialogContent = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => (\r\n  <AlertDialogPortal>\r\n    <AlertDialogOverlay />\r\n    <AlertDialogPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        // Positioning & styling\r\n        \"fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200\",\r\n        // Radix animations\r\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\r\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\r\n        \"data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]\",\r\n        \"data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\r\n        \"sm:rounded-lg\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </AlertDialogPrimitive.Content>\r\n  </AlertDialogPortal>\r\n));\r\nAlertDialogContent.displayName = \"AlertDialogContent\";\r\n\r\n// 6. Header\r\n// ------------------------------------------------------------\r\n// A simple wrapper for header content (title, optional close, etc.).\r\n// Not a Radix primitive, so we can define as a normal <div>.\r\nconst AlertDialogHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex flex-col space-y-2 text-center sm:text-left\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\r\n\r\n// 7. Footer\r\n// ------------------------------------------------------------\r\n// A simple footer wrapper for dialog actions (e.g., Cancel, OK).\r\nconst AlertDialogFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\r\n\r\n// 8. Title\r\n// ------------------------------------------------------------\r\n// The main heading of the dialog. Radix automatically connects this\r\n// title to the dialog for screen readers. You can pass additional\r\n// aria-* props as needed.\r\nconst AlertDialogTitle = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\"text-lg font-semibold\", className)}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogTitle.displayName = \"AlertDialogTitle\";\r\n\r\n// 9. Description\r\n// ------------------------------------------------------------\r\n// Additional descriptive text. Screen readers read this text in\r\n// context with the Title. Pass any extra aria-* if needed.\r\nconst AlertDialogDescription = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogDescription.displayName = \"AlertDialogDescription\";\r\n\r\n// 10. Action\r\n// ------------------------------------------------------------\r\n// Confirms the destructive or primary action. By default, uses\r\n// your `buttonVariants` style. You can override with any\r\n// className or style you like.\r\nconst AlertDialogAction = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Action\r\n    ref={ref}\r\n    className={cn(buttonVariants(), className)}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogAction.displayName = \"AlertDialogAction\";\r\n\r\n// 11. Cancel\r\n// ------------------------------------------------------------\r\n// Cancels or dismisses the action. By default, an outline button.\r\nconst AlertDialogCancel = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Cancel\r\n    ref={ref}\r\n    className={cn(\r\n      buttonVariants({ variant: \"outline\" }),\r\n      \"mt-2 sm:mt-0\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogCancel.displayName = \"AlertDialogCancel\";\r\n\r\nexport {\r\n  AlertDialog,\r\n  AlertDialogPortal,\r\n  AlertDialogOverlay,\r\n  AlertDialogTrigger,\r\n  AlertDialogContent,\r\n  AlertDialogHeader,\r\n  AlertDialogFooter,\r\n  AlertDialogTitle,\r\n  AlertDialogDescription,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n};\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
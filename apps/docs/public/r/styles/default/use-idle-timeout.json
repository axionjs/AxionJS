{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "use-idle-timeout",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-idle-timeout.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\ninterface UseIdleTimeoutOptions {\r\n  timeout: number;\r\n  onIdle: () => void;\r\n  onActive?: () => void;\r\n  events?: string[];\r\n  initialState?: boolean;\r\n}\r\n\r\n/**\r\n * A hook that detects when the user is idle\r\n * @param options Configuration options\r\n * @returns Whether the user is idle\r\n */\r\nexport function useIdleTimeout({\r\n  timeout,\r\n  onIdle,\r\n  onActive,\r\n  events = [\"mousedown\", \"mousemove\", \"keypress\", \"scroll\", \"touchstart\"],\r\n  initialState = false,\r\n}: UseIdleTimeoutOptions): boolean {\r\n  const [isIdle, setIsIdle] = React.useState<boolean>(initialState);\r\n  const timeoutRef = React.useRef<number | null>(null);\r\n\r\n  const resetTimer = React.useCallback(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    if (timeoutRef.current) {\r\n      window.clearTimeout(timeoutRef.current);\r\n    }\r\n\r\n    if (isIdle) {\r\n      setIsIdle(false);\r\n      onActive?.();\r\n    }\r\n\r\n    timeoutRef.current = window.setTimeout(() => {\r\n      setIsIdle(true);\r\n      onIdle();\r\n    }, timeout);\r\n  }, [isIdle, onActive, onIdle, timeout]);\r\n\r\n  React.useEffect(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    // Setup the timer initially\r\n    resetTimer();\r\n\r\n    // Add event listeners\r\n    const eventListeners = events.map((event) => {\r\n      return { event, handler: resetTimer };\r\n    });\r\n\r\n    eventListeners.forEach(({ event, handler }) => {\r\n      window.addEventListener(event, handler);\r\n    });\r\n\r\n    // Cleanup\r\n    return () => {\r\n      if (timeoutRef.current) {\r\n        window.clearTimeout(timeoutRef.current);\r\n      }\r\n\r\n      eventListeners.forEach(({ event, handler }) => {\r\n        window.removeEventListener(event, handler);\r\n      });\r\n    };\r\n  }, [events, resetTimer, timeout]);\r\n\r\n  return isIdle;\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
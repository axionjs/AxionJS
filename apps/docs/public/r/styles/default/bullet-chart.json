{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "bullet-chart",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "registryDependencies": [
    "card",
    "chart"
  ],
  "files": [
    {
      "path": "charts/bullet-chart.tsx",
      "content": "\"use client\";\r\n\r\nimport { TrendingUp } from \"lucide-react\";\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  Cell,\r\n  ReferenceLine,\r\n  XAxis,\r\n  YAxis,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/default/ui/card\";\r\nimport {\r\n  type ChartConfig,\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n} from \"@/registry/default/ui/chart\";\r\n\r\nconst chartData = [\r\n  {\r\n    name: \"Revenue\",\r\n    actual: 8200,\r\n    target: 8000,\r\n    poor: 6000,\r\n    satisfactory: 7000,\r\n    good: 8000,\r\n    excellent: 9000,\r\n    type: \"currency\",\r\n  },\r\n  {\r\n    name: \"Profit\",\r\n    actual: 4100,\r\n    target: 4000,\r\n    poor: 3000,\r\n    satisfactory: 3500,\r\n    good: 4000,\r\n    excellent: 4500,\r\n    type: \"currency\",\r\n  },\r\n  {\r\n    name: \"New Customers\",\r\n    actual: 950,\r\n    target: 1000,\r\n    poor: 800,\r\n    satisfactory: 900,\r\n    good: 1000,\r\n    excellent: 1100,\r\n    type: \"count\",\r\n  },\r\n];\r\n\r\nconst chartConfig = {\r\n  actual: {\r\n    label: \"Actual\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  target: {\r\n    label: \"Target\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n  poor: {\r\n    label: \"Poor\",\r\n    color: \"hsl(var(--chart-3) / 0.2)\",\r\n  },\r\n  satisfactory: {\r\n    label: \"Satisfactory\",\r\n    color: \"hsl(var(--chart-3) / 0.4)\",\r\n  },\r\n  good: {\r\n    label: \"Good\",\r\n    color: \"hsl(var(--chart-3) / 0.6)\",\r\n  },\r\n  excellent: {\r\n    label: \"Excellent\",\r\n    color: \"hsl(var(--chart-3) / 0.8)\",\r\n  },\r\n} satisfies ChartConfig;\r\n\r\n// Helper function for formatting values based on type\r\nconst formatValue = (value, type) => {\r\n  if (type === \"currency\") {\r\n    return \"$\" + value.toLocaleString();\r\n  }\r\n  return value.toLocaleString();\r\n};\r\n\r\nexport function BulletChart() {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Bullet Chart</CardTitle>\r\n        <CardDescription>Performance metrics against targets</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"h-auto px-0 pb-0\">\r\n        <ChartContainer config={chartConfig} className=\"w-full h-full\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart\r\n              accessibilityLayer\r\n              layout=\"vertical\"\r\n              data={chartData}\r\n              margin={{ top: 20, right: 20, bottom: 20, left: 70 }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" horizontal={false} />\r\n              <XAxis\r\n                type=\"number\"\r\n                tickLine={false}\r\n                axisLine={false}\r\n                tickFormatter={(value) => {\r\n                  // Format the tick based on the chart item it's closest to\r\n                  // We'll use a simple heuristic based on the value ranges\r\n                  if (value >= 5000) {\r\n                    return \"$\" + (value / 1000).toFixed(0) + \"k\";\r\n                  } else if (value >= 1000) {\r\n                    return \"$\" + (value / 1000).toFixed(1) + \"k\";\r\n                  } else {\r\n                    return value;\r\n                  }\r\n                }}\r\n              />\r\n              <YAxis\r\n                type=\"category\"\r\n                dataKey=\"name\"\r\n                tickLine={false}\r\n                axisLine={false}\r\n                width={70}\r\n              />\r\n              <ChartTooltip\r\n                content={\r\n                  <ChartTooltipContent\r\n                    formatter={(value, name, props) => {\r\n                      const item = props.payload;\r\n                      if (item && item.type) {\r\n                        return formatValue(value, item.type);\r\n                      }\r\n                      return value;\r\n                    }}\r\n                  />\r\n                }\r\n              />\r\n              <Bar\r\n                dataKey=\"excellent\"\r\n                fill={chartConfig.excellent.color}\r\n                radius={0}\r\n                barSize={20}\r\n              />\r\n              <Bar\r\n                dataKey=\"good\"\r\n                fill={chartConfig.good.color}\r\n                radius={0}\r\n                barSize={20}\r\n              />\r\n              <Bar\r\n                dataKey=\"satisfactory\"\r\n                fill={chartConfig.satisfactory.color}\r\n                radius={0}\r\n                barSize={20}\r\n              />\r\n              <Bar\r\n                dataKey=\"poor\"\r\n                fill={chartConfig.poor.color}\r\n                radius={0}\r\n                barSize={20}\r\n              />\r\n              <Bar\r\n                dataKey=\"actual\"\r\n                fill={chartConfig.actual.color}\r\n                radius={0}\r\n                barSize={10}\r\n              >\r\n                {chartData.map((entry, index) => (\r\n                  <Cell\r\n                    key={\"cell-\" + index}\r\n                    fill={\r\n                      entry.actual >= entry.target\r\n                        ? chartConfig.actual.color\r\n                        : \"hsl(var(--destructive))\"\r\n                    }\r\n                  />\r\n                ))}\r\n              </Bar>\r\n              {chartData.map((entry, index) => (\r\n                <ReferenceLine\r\n                  key={\"ref-\" + index}\r\n                  y={entry.name}\r\n                  x={entry.target}\r\n                  stroke={chartConfig.target.color}\r\n                  strokeWidth={2}\r\n                  isFront\r\n                />\r\n              ))}\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter className=\"flex-col items-start gap-2 text-sm\">\r\n        <div className=\"flex gap-2 font-medium leading-none\">\r\n          Revenue and profit exceeded targets <TrendingUp className=\"h-4 w-4\" />\r\n        </div>\r\n        <div className=\"leading-none text-muted-foreground\">\r\n          Q2 2024 performance metrics\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:block",
      "target": ""
    }
  ],
  "categories": [
    "charts",
    "charts-bullet"
  ]
}
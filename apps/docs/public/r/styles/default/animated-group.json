{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "animated-group",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A simple animated group block.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "blocks/animated-group.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { motion, type Variants } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype AnimatedGroupProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  variants?: {\r\n    container?: Variants;\r\n    item?: Variants;\r\n  };\r\n  initial?: string;\r\n  animate?: string;\r\n  exit?: string;\r\n  transition?: any;\r\n  delay?: number;\r\n  staggerChildren?: number;\r\n  as?: React.ElementType;\r\n};\r\n\r\nexport default function AnimatedGroup({\r\n  children,\r\n  className,\r\n  variants = {\r\n    container: {\r\n      hidden: { opacity: 0 },\r\n      visible: {\r\n        opacity: 1,\r\n        transition: {\r\n          staggerChildren: 0.1,\r\n        },\r\n      },\r\n    },\r\n    item: {\r\n      hidden: { opacity: 0, y: 20 },\r\n      visible: {\r\n        opacity: 1,\r\n        y: 0,\r\n        transition: {\r\n          duration: 0.5,\r\n        },\r\n      },\r\n    },\r\n  },\r\n  initial = \"hidden\",\r\n  animate = \"visible\",\r\n  exit = \"hidden\",\r\n  transition,\r\n  delay = 0,\r\n  staggerChildren = 0.1,\r\n  as: Component = motion.div,\r\n}: AnimatedGroupProps) {\r\n  // Apply delay to container transition if provided\r\n  const containerVariants = {\r\n    ...variants.container,\r\n    visible: {\r\n      ...variants.container?.visible,\r\n      transition: {\r\n        ...(variants.container?.visible as any)?.transition,\r\n        delayChildren: delay,\r\n        staggerChildren: staggerChildren,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Component\r\n      className={cn(className)}\r\n      initial={initial}\r\n      animate={animate}\r\n      exit={exit}\r\n      variants={containerVariants}\r\n      transition={transition}\r\n    >\r\n      {React.Children.map(children, (child, index) => {\r\n        if (React.isValidElement(child)) {\r\n          return React.cloneElement(child as React.ReactElement, {\r\n            variants: variants.item,\r\n            key: `animated-item-${index}`,\r\n          });\r\n        }\r\n        return (\r\n          <motion.div key={`animated-item-${index}`} variants={variants.item}>\r\n            {child}\r\n          </motion.div>\r\n        );\r\n      })}\r\n    </Component>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
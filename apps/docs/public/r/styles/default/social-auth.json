{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "social-auth",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A social authentication component that allows users to log in using OAuth provider (Github).",
  "dependencies": [
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "card",
    "alert"
  ],
  "files": [
    {
      "path": "dynamic-components/social-auth/actions/oauth-actions.ts",
      "content": "\"use server\";\r\n\r\nimport type React from \"react\";\r\nimport { generateOAuthUrl } from \"@/registry/default/dynamic-components/social-auth/lib/oauth-utils\";\r\nimport { db } from \"@/registry/default/lib/db\";\r\n\r\nexport interface OAuthActionResult {\r\n  success?: string;\r\n  error?: string;\r\n  redirectUrl?: string;\r\n  user?: any;\r\n}\r\n\r\nexport interface OAuthProvider {\r\n  id: string;\r\n  name: string;\r\n  icon: React.ComponentType<{ className?: string }>;\r\n  color: string;\r\n}\r\n\r\nexport interface OAuthConfig {\r\n  providers: {\r\n    github?: {\r\n      clientId: string;\r\n      clientSecret: string;\r\n    };\r\n  };\r\n  redirectUrl?: string;\r\n  onSuccess?: (provider: string, user: any) => void;\r\n  onError?: (error: string) => void;\r\n}\r\n\r\nexport const initiateOAuthLogin = async (\r\n  provider: \"github\",\r\n  redirectUrl?: string,\r\n): Promise<OAuthActionResult> => {\r\n  try {\r\n    if (![\"github\"].includes(provider)) {\r\n      return { error: \"Unsupported OAuth provider\" };\r\n    }\r\n\r\n    const clientId = process.env[`${provider.toUpperCase()}_CLIENT_ID`];\r\n    if (!clientId) {\r\n      return { error: `${provider} OAuth is not configured` };\r\n    }\r\n\r\n    const authUrl = generateOAuthUrl(provider, redirectUrl);\r\n\r\n    return {\r\n      success: \"Redirecting to OAuth provider\",\r\n      redirectUrl: authUrl,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"OAuth initiation error:\", error);\r\n    return { error: \"Failed to initiate OAuth login\" };\r\n  }\r\n};\r\n\r\n// Handle OAuth callback (you'll need to implement this in your API route)\r\nexport const handleOAuthCallback = async (\r\n  provider: string,\r\n  code: string,\r\n  state?: string,\r\n): Promise<OAuthActionResult> => {\r\n  try {\r\n    // This is a simplified example - you'll need to implement the full OAuth flow\r\n    // 1. Exchange code for access token\r\n    // 2. Use access token to get user info\r\n    // 3. Create or update user in database\r\n\r\n    console.log(\"Handling OAuth callback:\", { provider, code, state });\r\n\r\n    // Example OAuth token exchange (implement based on provider)\r\n    let userData;\r\n\r\n    if (provider === \"github\") {\r\n      // Implement GitHub OAuth token exchange\r\n      userData = await exchangeGitHubCode(code);\r\n    } else {\r\n      return { error: \"Unsupported provider\" };\r\n    }\r\n\r\n    if (!userData) {\r\n      return { error: \"Failed to get user data from OAuth provider\" };\r\n    }\r\n\r\n    const user = await createOrUpdateOAuthUser(provider, userData.id, {\r\n      email: userData.email,\r\n      name: userData.name,\r\n      image: userData.image,\r\n    });\r\n\r\n    return {\r\n      success: \"OAuth login successful\",\r\n      user,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"OAuth callback error:\", error);\r\n    return { error: \"OAuth authentication failed\" };\r\n  }\r\n};\r\n\r\nasync function exchangeGitHubCode(code: string) {\r\n  try {\r\n    // Exchange code for access token\r\n    const tokenResponse = await fetch(\r\n      \"https://github.com/login/oauth/access_token\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          client_id: process.env.GITHUB_CLIENT_ID!,\r\n          client_secret: process.env.GITHUB_CLIENT_SECRET!,\r\n          code,\r\n        }),\r\n      },\r\n    );\r\n\r\n    if (!tokenResponse.ok) {\r\n      throw new Error(\"Failed to exchange code for token\");\r\n    }\r\n\r\n    const tokenData = await tokenResponse.json();\r\n\r\n    if (tokenData.error) {\r\n      throw new Error(tokenData.error_description || \"OAuth error\");\r\n    }\r\n\r\n    // Get user info using access token\r\n    const userResponse = await fetch(\"https://api.github.com/user\", {\r\n      headers: {\r\n        Authorization: `Bearer ${tokenData.access_token}`,\r\n        \"User-Agent\": \"AxionJS/1.0\",\r\n      },\r\n    });\r\n\r\n    if (!userResponse.ok) {\r\n      throw new Error(\"Failed to get user info\");\r\n    }\r\n\r\n    const userData = await userResponse.json();\r\n\r\n    // Get user email (GitHub might not return email in user endpoint)\r\n    const emailResponse = await fetch(\"https://api.github.com/user/emails\", {\r\n      headers: {\r\n        Authorization: `Bearer ${tokenData.access_token}`,\r\n        \"User-Agent\": \"AxionJS/1.0\",\r\n      },\r\n    });\r\n\r\n    let email = userData.email;\r\n    if (!email && emailResponse.ok) {\r\n      const emails = await emailResponse.json();\r\n      const primaryEmail = emails.find((e: any) => e.primary && e.verified);\r\n      email = primaryEmail?.email || emails[0]?.email;\r\n    }\r\n\r\n    return {\r\n      id: userData.id.toString(),\r\n      email,\r\n      name: userData.name || userData.login,\r\n      image: userData.avatar_url,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"GitHub OAuth error:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Get OAuth providers configuration\r\nexport const getOAuthProviders = async () => {\r\n  const providers = [];\r\n\r\n  if (process.env.GITHUB_CLIENT_ID) {\r\n    providers.push({\r\n      id: \"github\",\r\n      name: \"GitHub\",\r\n      enabled: true,\r\n    });\r\n  }\r\n\r\n  return providers;\r\n};\r\n\r\n// Database operations for OAuth\r\nexport const createOrUpdateOAuthUser = async (\r\n  provider: string,\r\n  providerAccountId: string,\r\n  userData: {\r\n    email: string;\r\n    name?: string;\r\n    image?: string;\r\n  },\r\n) => {\r\n  try {\r\n    // Check if user exists with this email\r\n    const existingUser = await db.user.findUnique({\r\n      where: { email: userData.email },\r\n    });\r\n\r\n    let user;\r\n\r\n    if (!existingUser) {\r\n      // Create new user\r\n      user = await db.user.create({\r\n        data: {\r\n          email: userData.email,\r\n          name: userData.name,\r\n          image: userData.image,\r\n          emailVerified: new Date(),\r\n        },\r\n      });\r\n    } else {\r\n      user = existingUser;\r\n    }\r\n\r\n    // Check if account is already linked\r\n    const existingAccount = await db.account.findUnique({\r\n      where: {\r\n        provider_providerAccountId: {\r\n          provider,\r\n          providerAccountId,\r\n        },\r\n      },\r\n    });\r\n\r\n    // If account not linked, link it\r\n    if (!existingAccount) {\r\n      await db.account.create({\r\n        data: {\r\n          userId: user.id,\r\n          type: \"oauth\",\r\n          provider,\r\n          providerAccountId,\r\n        },\r\n      });\r\n    }\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\"OAuth user operation failed:\", error);\r\n    throw new Error(\"Failed to create or update user\");\r\n  }\r\n};\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalThis.prisma = db;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/social-auth/components/oauth-login.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState, useTransition } from \"react\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/default/ui/card\";\r\nimport { Alert, AlertDescription } from \"@/registry/default/ui/alert\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport { initiateOAuthLogin } from \"@/registry/default/dynamic-components/social-auth/actions/oauth-actions\";\r\n\r\nconst GitHubIcon = ({ className }: { className?: string }) => (\r\n  <svg className={className} fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n    <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\" />\r\n  </svg>\r\n);\r\n\r\ninterface OAuthLoginProps {\r\n  onSuccess?: (provider: string, user: any) => void;\r\n  onError?: (error: string) => void;\r\n  title?: string;\r\n  description?: string;\r\n  className?: string;\r\n  redirectUrl?: string;\r\n  providers?: \"github\"[];\r\n}\r\n\r\nexport function OAuthLogin({\r\n  onSuccess,\r\n  onError,\r\n  title = \"Welcome\",\r\n  description = \"Sign in to your account to continue\",\r\n  className = \"\",\r\n  redirectUrl,\r\n  providers = [\"github\"],\r\n}: OAuthLoginProps) {\r\n  const [message, setMessage] = useState<{\r\n    type: \"success\" | \"error\";\r\n    text: string;\r\n  } | null>(null);\r\n  const [loadingProvider, setLoadingProvider] = useState<string | null>(null);\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const handleOAuthLogin = (provider: \"github\") => {\r\n    setMessage(null);\r\n    setLoadingProvider(provider);\r\n\r\n    startTransition(async () => {\r\n      try {\r\n        const result = await initiateOAuthLogin(provider, redirectUrl);\r\n\r\n        if (result.error) {\r\n          setMessage({ type: \"error\", text: result.error });\r\n          onError?.(result.error);\r\n        } else if (result.redirectUrl) {\r\n          // Redirect to OAuth provider\r\n          window.location.href = result.redirectUrl;\r\n        } else if (result.user) {\r\n          setMessage({\r\n            type: \"success\",\r\n            text: result.success || \"Login successful\",\r\n          });\r\n          onSuccess?.(provider, result.user);\r\n        }\r\n      } catch (error) {\r\n        const errorMessage = \"Authentication failed. Please try again.\";\r\n        setMessage({ type: \"error\", text: errorMessage });\r\n        onError?.(errorMessage);\r\n      } finally {\r\n        setLoadingProvider(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  const getProviderConfig = (provider: \"github\") => {\r\n    const configs = {\r\n      github: {\r\n        name: \"GitHub\",\r\n        icon: GitHubIcon,\r\n        className: \"border-gray-300 hover:bg-gray-50 text-gray-900\",\r\n      },\r\n    };\r\n    return configs[provider];\r\n  };\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader className=\"text-center\">\r\n        <CardTitle>{title}</CardTitle>\r\n        <CardDescription>{description}</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {message && (\r\n          <Alert variant={message.type === \"error\" ? \"destructive\" : \"default\"}>\r\n            <AlertDescription>{message.text}</AlertDescription>\r\n          </Alert>\r\n        )}\r\n\r\n        <div className=\"space-y-3\">\r\n          {providers.map((provider) => {\r\n            const config = getProviderConfig(provider);\r\n            const isLoading = loadingProvider === provider && isPending;\r\n\r\n            return (\r\n              <Button\r\n                key={provider}\r\n                variant=\"outline\"\r\n                className={`w-full ${config.className}`}\r\n                onClick={() => handleOAuthLogin(provider)}\r\n                disabled={isPending}\r\n              >\r\n                {isLoading ? (\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                ) : (\r\n                  <config.icon className=\"mr-2 h-4 w-4\" />\r\n                )}\r\n                Continue with {config.name}\r\n              </Button>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"text-center text-sm text-gray-500\">\r\n          By continuing, you agree to our Terms of Service and Privacy Policy.\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/social-auth/lib/oauth-utils.ts",
      "content": "export const generateOAuthUrl = (\r\n  provider: string,\r\n  redirectUrl?: string,\r\n): string => {\r\n  const baseUrls = {\r\n    github: \"https://github.com/login/oauth/authorize\",\r\n  };\r\n\r\n  const params = new URLSearchParams({\r\n    client_id: process.env[`${provider.toUpperCase()}_CLIENT_ID`] || \"\",\r\n    redirect_uri:\r\n      redirectUrl ||\r\n      `${process.env.NEXT_PUBLIC_APP_URL}/api/auth/callback/${provider}`,\r\n    scope: \"user:email\",\r\n    response_type: \"code\",\r\n    state: crypto.randomUUID(), // Add CSRF protection\r\n  });\r\n\r\n  return `${baseUrls[provider as keyof typeof baseUrls]}?${params.toString()}`;\r\n};\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/social-auth/social/page.tsx",
      "content": "\"use client\";\r\nimport { OAuthLogin } from \"@/registry/default/dynamic-components/social-auth/components/oauth-login\";\r\n\r\nexport default function Social() {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-12\">\r\n      <div className=\"mx-auto max-w-xl px-4\">\r\n        <div className=\"space-y-4\">\r\n          <h2 className=\"text-xl font-semibold text-gray-800\">OAuth Login</h2>\r\n          <OAuthLogin\r\n            onSuccess={(provider, user) => {\r\n              console.log(\"OAuth Success:\", { provider, user });\r\n            }}\r\n            onError={(error) => {\r\n              console.error(\"OAuth Error:\", error);\r\n            }}\r\n            providers={[\"github\"]}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(social-auth)/social/page.tsx"
    }
  ]
}
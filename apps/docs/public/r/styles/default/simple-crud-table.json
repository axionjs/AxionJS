{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "simple-crud-table",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A simple CRUD table with create, read, update, and delete functionality.",
  "dependencies": [
    "nodemailer",
    "zod",
    "date-fns",
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "input",
    "table",
    "use-toast",
    "toaster"
  ],
  "files": [
    {
      "path": "dynamic-components/simple-crud-table/actions/crud-table-actions.ts",
      "content": "\"use server\";\r\n\r\nimport { db } from \"@/registry/default/lib/db\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\nexport type Product = {\r\n  id: string;\r\n  name: string;\r\n  description?: string | null;\r\n  price: number;\r\n  stock: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n};\r\n\r\nexport async function getProducts(\r\n  page: number = 1,\r\n  pageSize: number = 5,\r\n  sortField: string = \"name\",\r\n  sortOrder: \"asc\" | \"desc\" = \"asc\"\r\n) {\r\n  const skip = (page - 1) * pageSize;\r\n  const products = await db.product.findMany({\r\n    skip,\r\n    take: pageSize,\r\n    orderBy: {\r\n      [sortField]: sortOrder,\r\n    },\r\n  });\r\n  const totalCount = await db.product.count();\r\n  return { products, totalCount };\r\n}\r\n\r\nexport async function createProduct(\r\n  data: Omit<Product, \"id\" | \"createdAt\" | \"updatedAt\">\r\n) {\r\n  console.log(\"Creating product with data:\", data); // Debugging line\r\n  const product = await db.product.create({ data });\r\n  revalidatePath(\"/\");\r\n  return product;\r\n}\r\n\r\nexport async function updateProduct(data: Partial<Product> & { id: string }) {\r\n  const { id, ...updateData } = data;\r\n  const product = await db.product.update({\r\n    where: { id },\r\n    data: updateData,\r\n  });\r\n  revalidatePath(\"/\");\r\n  return product;\r\n}\r\n\r\nexport async function deleteProduct(id: string) {\r\n  await db.product.delete({ where: { id } });\r\n  revalidatePath(\"/\");\r\n}\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalThis.prisma = db;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-crud-table/hooks/use-crud-table.ts",
      "content": "\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  Product,\r\n  getProducts,\r\n  createProduct,\r\n  updateProduct,\r\n  deleteProduct,\r\n} from \"@/registry/default/dynamic-components/simple-crud-table/actions/crud-table-actions\";\r\n\r\nexport function useCrudTable(initialPageSize = 5) {\r\n  const [data, setData] = useState<{\r\n    products: Product[];\r\n    totalCount: number;\r\n  }>({ products: [], totalCount: 0 });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [page, setPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(initialPageSize);\r\n  const [sortConfig, setSortConfig] = useState<{\r\n    field: string;\r\n    direction: \"asc\" | \"desc\";\r\n  }>({ field: \"name\", direction: \"asc\" });\r\n\r\n  // Track individual operation loading states\r\n  const [operationLoading, setOperationLoading] = useState<{\r\n    creating: boolean;\r\n    updating: string | null;\r\n    deleting: string | null;\r\n  }>({\r\n    creating: false,\r\n    updating: null,\r\n    deleting: null,\r\n  });\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const result = await getProducts(\r\n        page,\r\n        pageSize,\r\n        sortConfig.field,\r\n        sortConfig.direction\r\n      );\r\n\r\n      setData(result);\r\n    } catch (err) {\r\n      setError(\"Failed to fetch products\");\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSort = (field: string) => {\r\n    let direction: \"asc\" | \"desc\" = \"asc\";\r\n    if (sortConfig.field === field && sortConfig.direction === \"asc\") {\r\n      direction = \"desc\";\r\n    }\r\n    setSortConfig({ field, direction });\r\n  };\r\n\r\n  const handleCreate = async (\r\n    productData: Omit<Product, \"id\" | \"createdAt\" | \"updatedAt\">\r\n  ) => {\r\n    setOperationLoading((prev) => ({ ...prev, creating: true }));\r\n    setError(null);\r\n\r\n    try {\r\n      if (!productData.name || !productData.price) {\r\n        setError(\"Name and price are required fields\");\r\n        return { success: false, error: \"Name and price are required fields\" };\r\n      }\r\n\r\n      if (productData.price <= 0) {\r\n        setError(\"Price must be greater than 0\");\r\n        return { success: false, error: \"Price must be greater than 0\" };\r\n      }\r\n\r\n      // Optimistic update - add temporary product\r\n      const tempProduct = {\r\n        id: `temp-${Date.now()}`,\r\n        ...productData,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      };\r\n\r\n      setData((prev) => ({\r\n        products: [tempProduct, ...prev.products],\r\n        totalCount: prev.totalCount + 1,\r\n      }));\r\n\r\n      await createProduct(productData);\r\n      await fetchData(); // Refresh to get real data\r\n      return { success: true };\r\n    } catch (err) {\r\n      // Revert optimistic update on error\r\n      await fetchData();\r\n      const errorMsg = \"Failed to create product\";\r\n      setError(errorMsg);\r\n      console.error(err);\r\n      return { success: false, error: errorMsg };\r\n    } finally {\r\n      setOperationLoading((prev) => ({ ...prev, creating: false }));\r\n    }\r\n  };\r\n\r\n  const handleUpdate = async (\r\n    productData: Partial<Product> & { id: string }\r\n  ) => {\r\n    setOperationLoading((prev) => ({ ...prev, updating: productData.id }));\r\n    setError(null);\r\n\r\n    try {\r\n      // Optimistic update\r\n      setData((prev) => ({\r\n        ...prev,\r\n        products: prev.products.map((product) =>\r\n          product.id === productData.id\r\n            ? { ...product, ...productData }\r\n            : product\r\n        ),\r\n      }));\r\n\r\n      await updateProduct(productData);\r\n      await fetchData(); // Refresh to get real data\r\n      return { success: true };\r\n    } catch (err) {\r\n      // Revert optimistic update on error\r\n      await fetchData();\r\n      const errorMsg = \"Failed to update product\";\r\n      setError(errorMsg);\r\n      console.error(err);\r\n      return { success: false, error: errorMsg };\r\n    } finally {\r\n      setOperationLoading((prev) => ({ ...prev, updating: null }));\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    setOperationLoading((prev) => ({ ...prev, deleting: id }));\r\n    setError(null);\r\n\r\n    try {\r\n      // Optimistic update - remove product immediately\r\n      const productToDelete = data.products.find((p) => p.id === id);\r\n      setData((prev) => ({\r\n        products: prev.products.filter((product) => product.id !== id),\r\n        totalCount: prev.totalCount - 1,\r\n      }));\r\n\r\n      await deleteProduct(id);\r\n      // Don't fetch data again since we already updated optimistically\r\n      return { success: true };\r\n    } catch (err) {\r\n      // Revert optimistic update on error\r\n      await fetchData();\r\n      const errorMsg = \"Failed to delete product\";\r\n      setError(errorMsg);\r\n      console.error(err);\r\n      return { success: false, error: errorMsg };\r\n    } finally {\r\n      setOperationLoading((prev) => ({ ...prev, deleting: null }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [page, pageSize, sortConfig]);\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    page,\r\n    pageSize,\r\n    sortConfig,\r\n    operationLoading,\r\n    setPage,\r\n    setPageSize,\r\n    handleSort,\r\n    handleCreate,\r\n    handleUpdate,\r\n    handleDelete,\r\n    fetchData,\r\n  };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-crud-table/components/simple-crud-table.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableFooter,\r\n} from \"@/registry/default/ui/table\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { useCrudTable } from \"@/registry/default/dynamic-components/simple-crud-table/hooks/use-crud-table\";\r\nimport { useState } from \"react\";\r\nimport { Skeleton } from \"@/registry/default/ui/skeleton\";\r\nimport { Loader2 } from \"lucide-react\";\r\n\r\nexport function SimpleCrudTable() {\r\n  const {\r\n    data,\r\n    loading,\r\n    error,\r\n    page,\r\n    pageSize,\r\n    sortConfig,\r\n    setPage,\r\n    handleSort,\r\n    handleCreate,\r\n    handleUpdate,\r\n    handleDelete,\r\n    operationLoading,\r\n  } = useCrudTable();\r\n\r\n  const [editingId, setEditingId] = useState<string | null>(null);\r\n  const [formData, setFormData] = useState<{\r\n    name: string;\r\n    description: string;\r\n    price: number;\r\n    stock: number;\r\n  }>({\r\n    name: \"\",\r\n    description: \"\",\r\n    price: 0,\r\n    stock: 0,\r\n  });\r\n\r\n  const totalPages = Math.ceil(data.totalCount / pageSize);\r\n\r\n  const startEditing = (product: any) => {\r\n    setEditingId(product.id);\r\n    setFormData({\r\n      name: product.name,\r\n      description: product.description || \"\",\r\n      price: Number(product.price),\r\n      stock: product.stock,\r\n    });\r\n  };\r\n\r\n  const cancelEditing = () => {\r\n    setEditingId(null);\r\n    setFormData({\r\n      name: \"\",\r\n      description: \"\",\r\n      price: 0,\r\n      stock: 0,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (editingId) {\r\n      await handleUpdate({ id: editingId, ...formData });\r\n    } else {\r\n      await handleCreate(formData);\r\n    }\r\n    cancelEditing();\r\n  };\r\n\r\n  const TableSkeleton = () => (\r\n    <>\r\n      {Array.from({ length: pageSize }).map((_, index) => (\r\n        <TableRow key={index}>\r\n          <TableCell>\r\n            <Skeleton className=\"h-4 w-[120px]\" />\r\n          </TableCell>\r\n          <TableCell>\r\n            <Skeleton className=\"h-4 w-[200px]\" />\r\n          </TableCell>\r\n          <TableCell className=\"text-right\">\r\n            <Skeleton className=\"h-4 w-[60px] ml-auto\" />\r\n          </TableCell>\r\n          <TableCell className=\"text-right\">\r\n            <Skeleton className=\"h-4 w-[40px] ml-auto\" />\r\n          </TableCell>\r\n          <TableCell className=\"text-right\">\r\n            <div className=\"flex justify-end space-x-2\">\r\n              <Skeleton className=\"h-8 w-12\" />\r\n              <Skeleton className=\"h-8 w-16\" />\r\n            </div>\r\n          </TableCell>\r\n        </TableRow>\r\n      ))}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Create/Edit Form */}\r\n      <div className=\"flex gap-2 flex-wrap\">\r\n        <Input\r\n          placeholder=\"Product name\"\r\n          value={formData.name}\r\n          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n          className=\"flex-1 min-w-[200px]\"\r\n          disabled={operationLoading.creating || operationLoading.updating}\r\n        />\r\n        <Input\r\n          placeholder=\"Description\"\r\n          value={formData.description}\r\n          onChange={(e) =>\r\n            setFormData({ ...formData, description: e.target.value })\r\n          }\r\n          className=\"flex-1 min-w-[200px]\"\r\n          disabled={operationLoading.creating || operationLoading.updating}\r\n        />\r\n        <Input\r\n          type=\"number\"\r\n          placeholder=\"Price\"\r\n          value={formData.price}\r\n          onChange={(e) =>\r\n            setFormData({\r\n              ...formData,\r\n              price: parseFloat(e.target.value) || 0,\r\n            })\r\n          }\r\n          className=\"w-[120px]\"\r\n          disabled={operationLoading.creating || operationLoading.updating}\r\n        />\r\n        <Input\r\n          type=\"number\"\r\n          placeholder=\"Stock\"\r\n          value={formData.stock}\r\n          onChange={(e) =>\r\n            setFormData({\r\n              ...formData,\r\n              stock: parseInt(e.target.value) || 0,\r\n            })\r\n          }\r\n          className=\"w-[120px]\"\r\n          disabled={operationLoading.creating || operationLoading.updating}\r\n        />\r\n        <div className=\"flex gap-2\">\r\n          <Button\r\n            onClick={handleSubmit}\r\n            disabled={operationLoading.creating || operationLoading.updating}\r\n          >\r\n            {(operationLoading.creating || operationLoading.updating) && (\r\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n            )}\r\n            {editingId ? \"Update\" : \"Create\"}\r\n          </Button>\r\n          {editingId && (\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={cancelEditing}\r\n              disabled={operationLoading.updating}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Error State */}\r\n      {error && <div className=\"text-red-500 text-sm\">{error}</div>}\r\n\r\n      {/* Product Table */}\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow>\r\n            <TableHead\r\n              className=\"cursor-pointer hover:bg-muted/50 transition-colors\"\r\n              onClick={() => handleSort(\"name\")}\r\n            >\r\n              Name{\" \"}\r\n              {sortConfig.field === \"name\" &&\r\n                (sortConfig.direction === \"asc\" ? \"↑\" : \"↓\")}\r\n            </TableHead>\r\n            <TableHead>Description</TableHead>\r\n            <TableHead\r\n              className=\"cursor-pointer text-right hover:bg-muted/50 transition-colors\"\r\n              onClick={() => handleSort(\"price\")}\r\n            >\r\n              Price{\" \"}\r\n              {sortConfig.field === \"price\" &&\r\n                (sortConfig.direction === \"asc\" ? \"↑\" : \"↓\")}\r\n            </TableHead>\r\n            <TableHead\r\n              className=\"cursor-pointer text-right hover:bg-muted/50 transition-colors\"\r\n              onClick={() => handleSort(\"stock\")}\r\n            >\r\n              Stock{\" \"}\r\n              {sortConfig.field === \"stock\" &&\r\n                (sortConfig.direction === \"asc\" ? \"↑\" : \"↓\")}\r\n            </TableHead>\r\n            <TableHead className=\"text-right\">Actions</TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {loading ? (\r\n            <TableSkeleton />\r\n          ) : (\r\n            data.products.map((product) => (\r\n              <TableRow\r\n                key={product.id}\r\n                className={`transition-all duration-200 ${\r\n                  operationLoading.deleting === product.id\r\n                    ? \"opacity-50 bg-destructive/10\"\r\n                    : \"hover:bg-muted/50\"\r\n                }`}\r\n              >\r\n                <TableCell>\r\n                  {operationLoading.updating === product.id ? (\r\n                    <Skeleton className=\"h-4 w-[120px]\" />\r\n                  ) : (\r\n                    product.name\r\n                  )}\r\n                </TableCell>\r\n                <TableCell>\r\n                  {operationLoading.updating === product.id ? (\r\n                    <Skeleton className=\"h-4 w-[200px]\" />\r\n                  ) : (\r\n                    product.description\r\n                  )}\r\n                </TableCell>\r\n                <TableCell className=\"text-right\">\r\n                  {operationLoading.updating === product.id ? (\r\n                    <Skeleton className=\"h-4 w-[60px] ml-auto\" />\r\n                  ) : (\r\n                    `$${product.price.toFixed(2)}`\r\n                  )}\r\n                </TableCell>\r\n                <TableCell className=\"text-right\">\r\n                  {operationLoading.updating === product.id ? (\r\n                    <Skeleton className=\"h-4 w-[40px] ml-auto\" />\r\n                  ) : (\r\n                    product.stock\r\n                  )}\r\n                </TableCell>\r\n                <TableCell className=\"text-right space-x-2\">\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"outline\"\r\n                    onClick={() => startEditing(product)}\r\n                    disabled={\r\n                      operationLoading.updating === product.id ||\r\n                      operationLoading.deleting === product.id ||\r\n                      operationLoading.creating\r\n                    }\r\n                  >\r\n                    {operationLoading.updating === product.id && (\r\n                      <Loader2 className=\"mr-1 h-3 w-3 animate-spin\" />\r\n                    )}\r\n                    Edit\r\n                  </Button>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"destructive\"\r\n                    onClick={() => handleDelete(product.id)}\r\n                    disabled={\r\n                      operationLoading.deleting === product.id ||\r\n                      operationLoading.updating === product.id ||\r\n                      operationLoading.creating\r\n                    }\r\n                  >\r\n                    {operationLoading.deleting === product.id && (\r\n                      <Loader2 className=\"mr-1 h-3 w-3 animate-spin\" />\r\n                    )}\r\n                    Delete\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))\r\n          )}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TableCell colSpan={5} className=\"text-center\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"text-sm text-muted-foreground\">\r\n                  {loading ? (\r\n                    <Skeleton className=\"h-4 w-[200px]\" />\r\n                  ) : (\r\n                    <>\r\n                      Showing {(page - 1) * pageSize + 1} to{\" \"}\r\n                      {Math.min(page * pageSize, data.totalCount)} of{\" \"}\r\n                      {data.totalCount} products\r\n                    </>\r\n                  )}\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => setPage(Math.max(1, page - 1))}\r\n                    disabled={page === 1 || loading}\r\n                  >\r\n                    Previous\r\n                  </Button>\r\n                  <span className=\"text-sm\">\r\n                    {loading ? (\r\n                      <Skeleton className=\"h-4 w-[80px]\" />\r\n                    ) : (\r\n                      <>\r\n                        Page {page} of {totalPages}\r\n                      </>\r\n                    )}\r\n                  </span>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => setPage(Math.min(totalPages, page + 1))}\r\n                    disabled={page === totalPages || loading}\r\n                  >\r\n                    Next\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
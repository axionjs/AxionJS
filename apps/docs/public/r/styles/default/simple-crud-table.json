{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "simple-crud-table",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A simple CRUD table with create, read, update, and delete functionality.",
  "dependencies": [
    "nodemailer",
    "zod",
    "date-fns",
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "input",
    "table",
    "use-toast",
    "toaster",
    "skeleton"
  ],
  "files": [
    {
      "path": "dynamic-components/simple-crud-table/actions/crud-table-actions.ts",
      "content": "\"use server\";\n\nimport { db } from \"@/registry/default/lib/db\";\nimport { revalidatePath } from \"next/cache\";\n\nexport type Product = {\n  id: string;\n  name: string;\n  description?: string | null;\n  price: number;\n  stock: number;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport async function getProducts(\n  page: number = 1,\n  pageSize: number = 5,\n  sortField: string = \"name\",\n  sortOrder: \"asc\" | \"desc\" = \"asc\",\n) {\n  const skip = (page - 1) * pageSize;\n  const products = await db.product.findMany({\n    skip,\n    take: pageSize,\n    orderBy: {\n      [sortField]: sortOrder,\n    },\n  });\n  const totalCount = await db.product.count();\n  return { products, totalCount };\n}\n\nexport async function createProduct(\n  data: Omit<Product, \"id\" | \"createdAt\" | \"updatedAt\">,\n) {\n  console.log(\"Creating product with data:\", data); // Debugging line\n  const product = await db.product.create({ data });\n  revalidatePath(\"/\");\n  return product;\n}\n\nexport async function updateProduct(data: Partial<Product> & { id: string }) {\n  const { id, ...updateData } = data;\n  const product = await db.product.update({\n    where: { id },\n    data: updateData,\n  });\n  revalidatePath(\"/\");\n  return product;\n}\n\nexport async function deleteProduct(id: string) {\n  await db.product.delete({ where: { id } });\n  revalidatePath(\"/\");\n}\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-crud-table/hooks/use-crud-table.ts",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport {\n  Product,\n  getProducts,\n  createProduct,\n  updateProduct,\n  deleteProduct,\n} from \"@/registry/default/dynamic-components/simple-crud-table/actions/crud-table-actions\";\n\nexport function useCrudTable(initialPageSize = 5) {\n  const [data, setData] = useState<{\n    products: Product[];\n    totalCount: number;\n  }>({ products: [], totalCount: 0 });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(initialPageSize);\n  const [sortConfig, setSortConfig] = useState<{\n    field: string;\n    direction: \"asc\" | \"desc\";\n  }>({ field: \"name\", direction: \"asc\" });\n\n  // Track individual operation loading states\n  const [operationLoading, setOperationLoading] = useState<{\n    creating: boolean;\n    updating: string | null;\n    deleting: string | null;\n  }>({\n    creating: false,\n    updating: null,\n    deleting: null,\n  });\n\n  const fetchData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await getProducts(\n        page,\n        pageSize,\n        sortConfig.field,\n        sortConfig.direction,\n      );\n\n      setData(result);\n    } catch (err) {\n      setError(\"Failed to fetch products\");\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSort = (field: string) => {\n    let direction: \"asc\" | \"desc\" = \"asc\";\n    if (sortConfig.field === field && sortConfig.direction === \"asc\") {\n      direction = \"desc\";\n    }\n    setSortConfig({ field, direction });\n  };\n\n  const handleCreate = async (\n    productData: Omit<Product, \"id\" | \"createdAt\" | \"updatedAt\">,\n  ) => {\n    setOperationLoading((prev) => ({ ...prev, creating: true }));\n    setError(null);\n\n    try {\n      if (!productData.name || !productData.price) {\n        setError(\"Name and price are required fields\");\n        return { success: false, error: \"Name and price are required fields\" };\n      }\n\n      if (productData.price <= 0) {\n        setError(\"Price must be greater than 0\");\n        return { success: false, error: \"Price must be greater than 0\" };\n      }\n\n      // Optimistic update - add temporary product\n      const tempProduct = {\n        id: `temp-${Date.now()}`,\n        ...productData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      setData((prev) => ({\n        products: [tempProduct, ...prev.products],\n        totalCount: prev.totalCount + 1,\n      }));\n\n      await createProduct(productData);\n      await fetchData(); // Refresh to get real data\n      return { success: true };\n    } catch (err) {\n      // Revert optimistic update on error\n      await fetchData();\n      const errorMsg = \"Failed to create product\";\n      setError(errorMsg);\n      console.error(err);\n      return { success: false, error: errorMsg };\n    } finally {\n      setOperationLoading((prev) => ({ ...prev, creating: false }));\n    }\n  };\n\n  const handleUpdate = async (\n    productData: Partial<Product> & { id: string },\n  ) => {\n    setOperationLoading((prev) => ({ ...prev, updating: productData.id }));\n    setError(null);\n\n    try {\n      // Optimistic update\n      setData((prev) => ({\n        ...prev,\n        products: prev.products.map((product) =>\n          product.id === productData.id\n            ? { ...product, ...productData }\n            : product,\n        ),\n      }));\n\n      await updateProduct(productData);\n      await fetchData(); // Refresh to get real data\n      return { success: true };\n    } catch (err) {\n      // Revert optimistic update on error\n      await fetchData();\n      const errorMsg = \"Failed to update product\";\n      setError(errorMsg);\n      console.error(err);\n      return { success: false, error: errorMsg };\n    } finally {\n      setOperationLoading((prev) => ({ ...prev, updating: null }));\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    setOperationLoading((prev) => ({ ...prev, deleting: id }));\n    setError(null);\n\n    try {\n      // Optimistic update - remove product immediately\n      const productToDelete = data.products.find((p) => p.id === id);\n      setData((prev) => ({\n        products: prev.products.filter((product) => product.id !== id),\n        totalCount: prev.totalCount - 1,\n      }));\n\n      await deleteProduct(id);\n      // Don't fetch data again since we already updated optimistically\n      return { success: true };\n    } catch (err) {\n      // Revert optimistic update on error\n      await fetchData();\n      const errorMsg = \"Failed to delete product\";\n      setError(errorMsg);\n      console.error(err);\n      return { success: false, error: errorMsg };\n    } finally {\n      setOperationLoading((prev) => ({ ...prev, deleting: null }));\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [page, pageSize, sortConfig]);\n\n  return {\n    data,\n    loading,\n    error,\n    page,\n    pageSize,\n    sortConfig,\n    operationLoading,\n    setPage,\n    setPageSize,\n    handleSort,\n    handleCreate,\n    handleUpdate,\n    handleDelete,\n    fetchData,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-crud-table/components/simple-crud-table.tsx",
      "content": "\"use client\";\n\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableFooter,\n} from \"@/registry/default/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useCrudTable } from \"@/registry/default/dynamic-components/simple-crud-table/hooks/use-crud-table\";\nimport { useState } from \"react\";\nimport { Skeleton } from \"@/registry/default/ui/skeleton\";\nimport { Loader2 } from \"lucide-react\";\n\nexport function SimpleCrudTable() {\n  const {\n    data,\n    loading,\n    error,\n    page,\n    pageSize,\n    sortConfig,\n    setPage,\n    handleSort,\n    handleCreate,\n    handleUpdate,\n    handleDelete,\n    operationLoading,\n  } = useCrudTable();\n\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [formData, setFormData] = useState<{\n    name: string;\n    description: string;\n    price: number;\n    stock: number;\n  }>({\n    name: \"\",\n    description: \"\",\n    price: 0,\n    stock: 0,\n  });\n\n  const totalPages = Math.ceil(data.totalCount / pageSize);\n\n  const startEditing = (product: any) => {\n    setEditingId(product.id);\n    setFormData({\n      name: product.name,\n      description: product.description || \"\",\n      price: Number(product.price),\n      stock: product.stock,\n    });\n  };\n\n  const cancelEditing = () => {\n    setEditingId(null);\n    setFormData({\n      name: \"\",\n      description: \"\",\n      price: 0,\n      stock: 0,\n    });\n  };\n\n  const handleSubmit = async () => {\n    if (editingId) {\n      await handleUpdate({ id: editingId, ...formData });\n    } else {\n      await handleCreate(formData);\n    }\n    cancelEditing();\n  };\n\n  const TableSkeleton = () => (\n    <>\n      {Array.from({ length: pageSize }).map((_, index) => (\n        <TableRow key={index}>\n          <TableCell>\n            <Skeleton className=\"h-4 w-[120px]\" />\n          </TableCell>\n          <TableCell>\n            <Skeleton className=\"h-4 w-[200px]\" />\n          </TableCell>\n          <TableCell className=\"text-right\">\n            <Skeleton className=\"h-4 w-[60px] ml-auto\" />\n          </TableCell>\n          <TableCell className=\"text-right\">\n            <Skeleton className=\"h-4 w-[40px] ml-auto\" />\n          </TableCell>\n          <TableCell className=\"text-right\">\n            <div className=\"flex justify-end space-x-2\">\n              <Skeleton className=\"h-8 w-12\" />\n              <Skeleton className=\"h-8 w-16\" />\n            </div>\n          </TableCell>\n        </TableRow>\n      ))}\n    </>\n  );\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Create/Edit Form */}\n      <div className=\"flex gap-2 flex-wrap\">\n        <Input\n          placeholder=\"Product name\"\n          value={formData.name}\n          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n          className=\"flex-1 min-w-[200px]\"\n          disabled={operationLoading.creating || operationLoading.updating}\n        />\n        <Input\n          placeholder=\"Description\"\n          value={formData.description}\n          onChange={(e) =>\n            setFormData({ ...formData, description: e.target.value })\n          }\n          className=\"flex-1 min-w-[200px]\"\n          disabled={operationLoading.creating || operationLoading.updating}\n        />\n        <Input\n          type=\"number\"\n          placeholder=\"Price\"\n          value={formData.price}\n          onChange={(e) =>\n            setFormData({\n              ...formData,\n              price: parseFloat(e.target.value) || 0,\n            })\n          }\n          className=\"w-[120px]\"\n          disabled={operationLoading.creating || operationLoading.updating}\n        />\n        <Input\n          type=\"number\"\n          placeholder=\"Stock\"\n          value={formData.stock}\n          onChange={(e) =>\n            setFormData({\n              ...formData,\n              stock: parseInt(e.target.value) || 0,\n            })\n          }\n          className=\"w-[120px]\"\n          disabled={operationLoading.creating || operationLoading.updating}\n        />\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={handleSubmit}\n            disabled={operationLoading.creating || operationLoading.updating}\n          >\n            {(operationLoading.creating || operationLoading.updating) && (\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            )}\n            {editingId ? \"Update\" : \"Create\"}\n          </Button>\n          {editingId && (\n            <Button\n              variant=\"outline\"\n              onClick={cancelEditing}\n              disabled={operationLoading.updating}\n            >\n              Cancel\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Error State */}\n      {error && <div className=\"text-red-500 text-sm\">{error}</div>}\n\n      {/* Product Table */}\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead\n              className=\"cursor-pointer hover:bg-muted/50 transition-colors\"\n              onClick={() => handleSort(\"name\")}\n            >\n              Name{\" \"}\n              {sortConfig.field === \"name\" &&\n                (sortConfig.direction === \"asc\" ? \"↑\" : \"↓\")}\n            </TableHead>\n            <TableHead>Description</TableHead>\n            <TableHead\n              className=\"cursor-pointer text-right hover:bg-muted/50 transition-colors\"\n              onClick={() => handleSort(\"price\")}\n            >\n              Price{\" \"}\n              {sortConfig.field === \"price\" &&\n                (sortConfig.direction === \"asc\" ? \"↑\" : \"↓\")}\n            </TableHead>\n            <TableHead\n              className=\"cursor-pointer text-right hover:bg-muted/50 transition-colors\"\n              onClick={() => handleSort(\"stock\")}\n            >\n              Stock{\" \"}\n              {sortConfig.field === \"stock\" &&\n                (sortConfig.direction === \"asc\" ? \"↑\" : \"↓\")}\n            </TableHead>\n            <TableHead className=\"text-right\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {loading ? (\n            <TableSkeleton />\n          ) : (\n            data.products.map((product) => (\n              <TableRow\n                key={product.id}\n                className={`transition-all duration-200 ${\n                  operationLoading.deleting === product.id\n                    ? \"opacity-50 bg-destructive/10\"\n                    : \"hover:bg-muted/50\"\n                }`}\n              >\n                <TableCell>\n                  {operationLoading.updating === product.id ? (\n                    <Skeleton className=\"h-4 w-[120px]\" />\n                  ) : (\n                    product.name\n                  )}\n                </TableCell>\n                <TableCell>\n                  {operationLoading.updating === product.id ? (\n                    <Skeleton className=\"h-4 w-[200px]\" />\n                  ) : (\n                    product.description\n                  )}\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  {operationLoading.updating === product.id ? (\n                    <Skeleton className=\"h-4 w-[60px] ml-auto\" />\n                  ) : (\n                    `$${product.price.toFixed(2)}`\n                  )}\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  {operationLoading.updating === product.id ? (\n                    <Skeleton className=\"h-4 w-[40px] ml-auto\" />\n                  ) : (\n                    product.stock\n                  )}\n                </TableCell>\n                <TableCell className=\"text-right space-x-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => startEditing(product)}\n                    disabled={\n                      operationLoading.updating === product.id ||\n                      operationLoading.deleting === product.id ||\n                      operationLoading.creating\n                    }\n                  >\n                    {operationLoading.updating === product.id && (\n                      <Loader2 className=\"mr-1 h-3 w-3 animate-spin\" />\n                    )}\n                    Edit\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={() => handleDelete(product.id)}\n                    disabled={\n                      operationLoading.deleting === product.id ||\n                      operationLoading.updating === product.id ||\n                      operationLoading.creating\n                    }\n                  >\n                    {operationLoading.deleting === product.id && (\n                      <Loader2 className=\"mr-1 h-3 w-3 animate-spin\" />\n                    )}\n                    Delete\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TableCell colSpan={5} className=\"text-center\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {loading ? (\n                    <Skeleton className=\"h-4 w-[200px]\" />\n                  ) : (\n                    <>\n                      Showing {(page - 1) * pageSize + 1} to{\" \"}\n                      {Math.min(page * pageSize, data.totalCount)} of{\" \"}\n                      {data.totalCount} products\n                    </>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setPage(Math.max(1, page - 1))}\n                    disabled={page === 1 || loading}\n                  >\n                    Previous\n                  </Button>\n                  <span className=\"text-sm\">\n                    {loading ? (\n                      <Skeleton className=\"h-4 w-[80px]\" />\n                    ) : (\n                      <>\n                        Page {page} of {totalPages}\n                      </>\n                    )}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setPage(Math.min(totalPages, page + 1))}\n                    disabled={page === totalPages || loading}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </TableCell>\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
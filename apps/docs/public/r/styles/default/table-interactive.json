{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "table-interactive",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "An interactive table component.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "table",
    "button",
    "input",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "blocks/table-interactive.tsx",
      "content": "\"use client\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Search, ChevronDown, ChevronUp } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\n\n// Invoice data\nconst invoices = [\n  {\n    id: \"INV001\",\n    paymentStatus: \"Paid\",\n    totalAmount: 250.0,\n    paymentMethod: \"Credit Card\",\n    customer: \"Alex Johnson\",\n    date: \"2023-01-15\",\n  },\n  {\n    id: \"INV002\",\n    paymentStatus: \"Pending\",\n    totalAmount: 150.0,\n    paymentMethod: \"PayPal\",\n    customer: \"Sarah Williams\",\n    date: \"2023-02-03\",\n  },\n  {\n    id: \"INV003\",\n    paymentStatus: \"Unpaid\",\n    totalAmount: 350.0,\n    paymentMethod: \"Bank Transfer\",\n    customer: \"Michael Brown\",\n    date: \"2023-02-18\",\n  },\n  {\n    id: \"INV004\",\n    paymentStatus: \"Paid\",\n    totalAmount: 450.0,\n    paymentMethod: \"Credit Card\",\n    customer: \"Emily Davis\",\n    date: \"2023-03-05\",\n  },\n  {\n    id: \"INV005\",\n    paymentStatus: \"Paid\",\n    totalAmount: 550.0,\n    paymentMethod: \"PayPal\",\n    customer: \"James Wilson\",\n    date: \"2023-03-22\",\n  },\n  {\n    id: \"INV006\",\n    paymentStatus: \"Pending\",\n    totalAmount: 200.0,\n    paymentMethod: \"Bank Transfer\",\n    customer: \"Olivia Martinez\",\n    date: \"2023-04-10\",\n  },\n];\n\ntype SortDirection = \"asc\" | \"desc\" | null;\ntype SortField =\n  | \"id\"\n  | \"customer\"\n  | \"date\"\n  | \"totalAmount\"\n  | \"paymentStatus\"\n  | \"paymentMethod\"\n  | null;\n\nexport default function TableInteractive() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortField, setSortField] = useState<SortField>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [statusFilter, setStatusFilter] = useState<string | null>(null);\n\n  // Handle sorting\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === \"asc\") {\n        setSortDirection(\"desc\");\n      } else if (sortDirection === \"desc\") {\n        setSortField(null);\n        setSortDirection(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  // Filter and sort invoices\n  const filteredInvoices = invoices\n    .filter((invoice) => {\n      // Apply search filter\n      if (searchTerm) {\n        const searchLower = searchTerm.toLowerCase();\n        return (\n          invoice.id.toLowerCase().includes(searchLower) ||\n          invoice.customer.toLowerCase().includes(searchLower) ||\n          invoice.paymentMethod.toLowerCase().includes(searchLower)\n        );\n      }\n      return true;\n    })\n    .filter((invoice) => {\n      // Apply status filter\n      if (statusFilter) {\n        return invoice.paymentStatus === statusFilter;\n      }\n      return true;\n    })\n    .sort((a, b) => {\n      // Apply sorting\n      if (!sortField || !sortDirection) return 0;\n\n      if (sortField === \"totalAmount\") {\n        return sortDirection === \"asc\"\n          ? a.totalAmount - b.totalAmount\n          : b.totalAmount - a.totalAmount;\n      }\n\n      if (sortField === \"date\") {\n        return sortDirection === \"asc\"\n          ? new Date(a.date).getTime() - new Date(b.date).getTime()\n          : new Date(b.date).getTime() - new Date(a.date).getTime();\n      }\n\n      const aValue = a[sortField].toLowerCase();\n      const bValue = b[sortField].toLowerCase();\n\n      if (sortDirection === \"asc\") {\n        return aValue.localeCompare(bValue);\n      } else {\n        return bValue.localeCompare(aValue);\n      }\n    });\n\n  // Calculate total amount\n  const totalAmount = filteredInvoices.reduce(\n    (sum, invoice) => sum + invoice.totalAmount,\n    0,\n  );\n\n  // Get status badge class\n  const getStatusClass = (status: string) => {\n    switch (status) {\n      case \"Paid\":\n        return \"inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"Pending\":\n        return \"inline-flex items-center rounded-full bg-yellow-100 px-2.5 py-0.5 text-xs font-medium text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"Unpaid\":\n        return \"inline-flex items-center rounded-full bg-red-100 px-2.5 py-0.5 text-xs font-medium text-red-800 dark:bg-red-900 dark:text-red-200\";\n      default:\n        return \"\";\n    }\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  return (\n    <div className=\"p-6 bg-background rounded-lg border\">\n      <h2 className=\"text-2xl font-bold mb-6\">Invoice Management</h2>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search invoices...\"\n            className=\"pl-8\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"w-full sm:w-auto\">\n              {statusFilter || \"All Statuses\"}{\" \"}\n              <ChevronDown className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            <DropdownMenuItem onClick={() => setStatusFilter(null)}>\n              All Statuses\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => setStatusFilter(\"Paid\")}>\n              Paid\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => setStatusFilter(\"Pending\")}>\n              Pending\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => setStatusFilter(\"Unpaid\")}>\n              Unpaid\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={`${searchTerm}-${statusFilter}-${sortField}-${sortDirection}`}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.2 }}\n          >\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead\n                    className=\"w-[100px] cursor-pointer\"\n                    onClick={() => handleSort(\"id\")}\n                  >\n                    <div className=\"flex items-center\">\n                      Invoice\n                      {sortField === \"id\" &&\n                        (sortDirection === \"asc\" ? (\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\n                        ) : (\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\n                        ))}\n                    </div>\n                  </TableHead>\n                  <TableHead\n                    className=\"cursor-pointer\"\n                    onClick={() => handleSort(\"customer\")}\n                  >\n                    <div className=\"flex items-center\">\n                      Customer\n                      {sortField === \"customer\" &&\n                        (sortDirection === \"asc\" ? (\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\n                        ) : (\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\n                        ))}\n                    </div>\n                  </TableHead>\n                  <TableHead\n                    className=\"cursor-pointer\"\n                    onClick={() => handleSort(\"date\")}\n                  >\n                    <div className=\"flex items-center\">\n                      Date\n                      {sortField === \"date\" &&\n                        (sortDirection === \"asc\" ? (\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\n                        ) : (\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\n                        ))}\n                    </div>\n                  </TableHead>\n                  <TableHead\n                    className=\"cursor-pointer\"\n                    onClick={() => handleSort(\"paymentStatus\")}\n                  >\n                    <div className=\"flex items-center\">\n                      Status\n                      {sortField === \"paymentStatus\" &&\n                        (sortDirection === \"asc\" ? (\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\n                        ) : (\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\n                        ))}\n                    </div>\n                  </TableHead>\n                  <TableHead\n                    className=\"cursor-pointer\"\n                    onClick={() => handleSort(\"paymentMethod\")}\n                  >\n                    <div className=\"flex items-center\">\n                      Method\n                      {sortField === \"paymentMethod\" &&\n                        (sortDirection === \"asc\" ? (\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\n                        ) : (\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\n                        ))}\n                    </div>\n                  </TableHead>\n                  <TableHead\n                    className=\"text-right cursor-pointer\"\n                    onClick={() => handleSort(\"totalAmount\")}\n                  >\n                    <div className=\"flex items-center justify-end\">\n                      Amount\n                      {sortField === \"totalAmount\" &&\n                        (sortDirection === \"asc\" ? (\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\n                        ) : (\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\n                        ))}\n                    </div>\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredInvoices.length === 0 ? (\n                  <TableRow>\n                    <TableCell\n                      colSpan={6}\n                      className=\"text-center py-8 text-muted-foreground\"\n                    >\n                      No invoices found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredInvoices.map((invoice, index) => (\n                    <motion.tr\n                      key={invoice.id}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      whileHover={{ backgroundColor: \"rgba(0,0,0,0.02)\" }}\n                      className=\"cursor-pointer\"\n                    >\n                      <TableCell className=\"font-medium\">\n                        {invoice.id}\n                      </TableCell>\n                      <TableCell>{invoice.customer}</TableCell>\n                      <TableCell>{formatDate(invoice.date)}</TableCell>\n                      <TableCell>\n                        <span className={getStatusClass(invoice.paymentStatus)}>\n                          {invoice.paymentStatus}\n                        </span>\n                      </TableCell>\n                      <TableCell>{invoice.paymentMethod}</TableCell>\n                      <TableCell className=\"text-right\">\n                        ${invoice.totalAmount.toFixed(2)}\n                      </TableCell>\n                    </motion.tr>\n                  ))\n                )}\n              </TableBody>\n              <TableFooter>\n                <TableRow>\n                  <TableCell colSpan={5}>Total</TableCell>\n                  <TableCell className=\"text-right\">\n                    ${totalAmount.toFixed(2)}\n                  </TableCell>\n                </TableRow>\n              </TableFooter>\n            </Table>\n          </motion.div>\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "table-interactive",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "An interactive table component.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "table",
    "button",
    "input",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "blocks/table-interactive.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableFooter,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/registry/default/ui/table\";\r\nimport { motion, AnimatePresence } from \"motion/react\";\r\nimport { useState } from \"react\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Search, ChevronDown, ChevronUp } from \"lucide-react\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/registry/default/ui/dropdown-menu\";\r\n\r\n// Invoice data\r\nconst invoices = [\r\n  {\r\n    id: \"INV001\",\r\n    paymentStatus: \"Paid\",\r\n    totalAmount: 250.0,\r\n    paymentMethod: \"Credit Card\",\r\n    customer: \"Alex Johnson\",\r\n    date: \"2023-01-15\",\r\n  },\r\n  {\r\n    id: \"INV002\",\r\n    paymentStatus: \"Pending\",\r\n    totalAmount: 150.0,\r\n    paymentMethod: \"PayPal\",\r\n    customer: \"Sarah Williams\",\r\n    date: \"2023-02-03\",\r\n  },\r\n  {\r\n    id: \"INV003\",\r\n    paymentStatus: \"Unpaid\",\r\n    totalAmount: 350.0,\r\n    paymentMethod: \"Bank Transfer\",\r\n    customer: \"Michael Brown\",\r\n    date: \"2023-02-18\",\r\n  },\r\n  {\r\n    id: \"INV004\",\r\n    paymentStatus: \"Paid\",\r\n    totalAmount: 450.0,\r\n    paymentMethod: \"Credit Card\",\r\n    customer: \"Emily Davis\",\r\n    date: \"2023-03-05\",\r\n  },\r\n  {\r\n    id: \"INV005\",\r\n    paymentStatus: \"Paid\",\r\n    totalAmount: 550.0,\r\n    paymentMethod: \"PayPal\",\r\n    customer: \"James Wilson\",\r\n    date: \"2023-03-22\",\r\n  },\r\n  {\r\n    id: \"INV006\",\r\n    paymentStatus: \"Pending\",\r\n    totalAmount: 200.0,\r\n    paymentMethod: \"Bank Transfer\",\r\n    customer: \"Olivia Martinez\",\r\n    date: \"2023-04-10\",\r\n  },\r\n];\r\n\r\ntype SortDirection = \"asc\" | \"desc\" | null;\r\ntype SortField =\r\n  | \"id\"\r\n  | \"customer\"\r\n  | \"date\"\r\n  | \"totalAmount\"\r\n  | \"paymentStatus\"\r\n  | \"paymentMethod\"\r\n  | null;\r\n\r\nexport default function TableInteractive() {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [sortField, setSortField] = useState<SortField>(null);\r\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\r\n  const [statusFilter, setStatusFilter] = useState<string | null>(null);\r\n\r\n  // Handle sorting\r\n  const handleSort = (field: SortField) => {\r\n    if (sortField === field) {\r\n      if (sortDirection === \"asc\") {\r\n        setSortDirection(\"desc\");\r\n      } else if (sortDirection === \"desc\") {\r\n        setSortField(null);\r\n        setSortDirection(null);\r\n      }\r\n    } else {\r\n      setSortField(field);\r\n      setSortDirection(\"asc\");\r\n    }\r\n  };\r\n\r\n  // Filter and sort invoices\r\n  const filteredInvoices = invoices\r\n    .filter((invoice) => {\r\n      // Apply search filter\r\n      if (searchTerm) {\r\n        const searchLower = searchTerm.toLowerCase();\r\n        return (\r\n          invoice.id.toLowerCase().includes(searchLower) ||\r\n          invoice.customer.toLowerCase().includes(searchLower) ||\r\n          invoice.paymentMethod.toLowerCase().includes(searchLower)\r\n        );\r\n      }\r\n      return true;\r\n    })\r\n    .filter((invoice) => {\r\n      // Apply status filter\r\n      if (statusFilter) {\r\n        return invoice.paymentStatus === statusFilter;\r\n      }\r\n      return true;\r\n    })\r\n    .sort((a, b) => {\r\n      // Apply sorting\r\n      if (!sortField || !sortDirection) return 0;\r\n\r\n      if (sortField === \"totalAmount\") {\r\n        return sortDirection === \"asc\"\r\n          ? a.totalAmount - b.totalAmount\r\n          : b.totalAmount - a.totalAmount;\r\n      }\r\n\r\n      if (sortField === \"date\") {\r\n        return sortDirection === \"asc\"\r\n          ? new Date(a.date).getTime() - new Date(b.date).getTime()\r\n          : new Date(b.date).getTime() - new Date(a.date).getTime();\r\n      }\r\n\r\n      const aValue = a[sortField].toLowerCase();\r\n      const bValue = b[sortField].toLowerCase();\r\n\r\n      if (sortDirection === \"asc\") {\r\n        return aValue.localeCompare(bValue);\r\n      } else {\r\n        return bValue.localeCompare(aValue);\r\n      }\r\n    });\r\n\r\n  // Calculate total amount\r\n  const totalAmount = filteredInvoices.reduce(\r\n    (sum, invoice) => sum + invoice.totalAmount,\r\n    0,\r\n  );\r\n\r\n  // Get status badge class\r\n  const getStatusClass = (status: string) => {\r\n    switch (status) {\r\n      case \"Paid\":\r\n        return \"inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:bg-green-900 dark:text-green-200\";\r\n      case \"Pending\":\r\n        return \"inline-flex items-center rounded-full bg-yellow-100 px-2.5 py-0.5 text-xs font-medium text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\r\n      case \"Unpaid\":\r\n        return \"inline-flex items-center rounded-full bg-red-100 px-2.5 py-0.5 text-xs font-medium text-red-800 dark:bg-red-900 dark:text-red-200\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  // Format date\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString(\"en-US\", {\r\n      year: \"numeric\",\r\n      month: \"short\",\r\n      day: \"numeric\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 bg-background rounded-lg border\">\r\n      <h2 className=\"text-2xl font-bold mb-6\">Invoice Management</h2>\r\n\r\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\r\n        <div className=\"relative flex-1\">\r\n          <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\r\n          <Input\r\n            placeholder=\"Search invoices...\"\r\n            className=\"pl-8\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button variant=\"outline\" className=\"w-full sm:w-auto\">\r\n              {statusFilter || \"All Statuses\"}{\" \"}\r\n              <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent>\r\n            <DropdownMenuItem onClick={() => setStatusFilter(null)}>\r\n              All Statuses\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem onClick={() => setStatusFilter(\"Paid\")}>\r\n              Paid\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem onClick={() => setStatusFilter(\"Pending\")}>\r\n              Pending\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem onClick={() => setStatusFilter(\"Unpaid\")}>\r\n              Unpaid\r\n            </DropdownMenuItem>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n\r\n      <div className=\"overflow-x-auto\">\r\n        <AnimatePresence mode=\"wait\">\r\n          <motion.div\r\n            key={`${searchTerm}-${statusFilter}-${sortField}-${sortDirection}`}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            transition={{ duration: 0.2 }}\r\n          >\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead\r\n                    className=\"w-[100px] cursor-pointer\"\r\n                    onClick={() => handleSort(\"id\")}\r\n                  >\r\n                    <div className=\"flex items-center\">\r\n                      Invoice\r\n                      {sortField === \"id\" &&\r\n                        (sortDirection === \"asc\" ? (\r\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\r\n                        ) : (\r\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\r\n                        ))}\r\n                    </div>\r\n                  </TableHead>\r\n                  <TableHead\r\n                    className=\"cursor-pointer\"\r\n                    onClick={() => handleSort(\"customer\")}\r\n                  >\r\n                    <div className=\"flex items-center\">\r\n                      Customer\r\n                      {sortField === \"customer\" &&\r\n                        (sortDirection === \"asc\" ? (\r\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\r\n                        ) : (\r\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\r\n                        ))}\r\n                    </div>\r\n                  </TableHead>\r\n                  <TableHead\r\n                    className=\"cursor-pointer\"\r\n                    onClick={() => handleSort(\"date\")}\r\n                  >\r\n                    <div className=\"flex items-center\">\r\n                      Date\r\n                      {sortField === \"date\" &&\r\n                        (sortDirection === \"asc\" ? (\r\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\r\n                        ) : (\r\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\r\n                        ))}\r\n                    </div>\r\n                  </TableHead>\r\n                  <TableHead\r\n                    className=\"cursor-pointer\"\r\n                    onClick={() => handleSort(\"paymentStatus\")}\r\n                  >\r\n                    <div className=\"flex items-center\">\r\n                      Status\r\n                      {sortField === \"paymentStatus\" &&\r\n                        (sortDirection === \"asc\" ? (\r\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\r\n                        ) : (\r\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\r\n                        ))}\r\n                    </div>\r\n                  </TableHead>\r\n                  <TableHead\r\n                    className=\"cursor-pointer\"\r\n                    onClick={() => handleSort(\"paymentMethod\")}\r\n                  >\r\n                    <div className=\"flex items-center\">\r\n                      Method\r\n                      {sortField === \"paymentMethod\" &&\r\n                        (sortDirection === \"asc\" ? (\r\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\r\n                        ) : (\r\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\r\n                        ))}\r\n                    </div>\r\n                  </TableHead>\r\n                  <TableHead\r\n                    className=\"text-right cursor-pointer\"\r\n                    onClick={() => handleSort(\"totalAmount\")}\r\n                  >\r\n                    <div className=\"flex items-center justify-end\">\r\n                      Amount\r\n                      {sortField === \"totalAmount\" &&\r\n                        (sortDirection === \"asc\" ? (\r\n                          <ChevronUp className=\"ml-1 h-4 w-4\" />\r\n                        ) : (\r\n                          <ChevronDown className=\"ml-1 h-4 w-4\" />\r\n                        ))}\r\n                    </div>\r\n                  </TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredInvoices.length === 0 ? (\r\n                  <TableRow>\r\n                    <TableCell\r\n                      colSpan={6}\r\n                      className=\"text-center py-8 text-muted-foreground\"\r\n                    >\r\n                      No invoices found\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : (\r\n                  filteredInvoices.map((invoice, index) => (\r\n                    <motion.tr\r\n                      key={invoice.id}\r\n                      initial={{ opacity: 0, y: 10 }}\r\n                      animate={{ opacity: 1, y: 0 }}\r\n                      transition={{ delay: index * 0.05 }}\r\n                      whileHover={{ backgroundColor: \"rgba(0,0,0,0.02)\" }}\r\n                      className=\"cursor-pointer\"\r\n                    >\r\n                      <TableCell className=\"font-medium\">\r\n                        {invoice.id}\r\n                      </TableCell>\r\n                      <TableCell>{invoice.customer}</TableCell>\r\n                      <TableCell>{formatDate(invoice.date)}</TableCell>\r\n                      <TableCell>\r\n                        <span className={getStatusClass(invoice.paymentStatus)}>\r\n                          {invoice.paymentStatus}\r\n                        </span>\r\n                      </TableCell>\r\n                      <TableCell>{invoice.paymentMethod}</TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        ${invoice.totalAmount.toFixed(2)}\r\n                      </TableCell>\r\n                    </motion.tr>\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n              <TableFooter>\r\n                <TableRow>\r\n                  <TableCell colSpan={5}>Total</TableCell>\r\n                  <TableCell className=\"text-right\">\r\n                    ${totalAmount.toFixed(2)}\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableFooter>\r\n            </Table>\r\n          </motion.div>\r\n        </AnimatePresence>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
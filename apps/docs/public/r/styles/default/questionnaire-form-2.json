{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "questionnaire-form-2",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A questionnaire form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "separator",
    "progress",
    "radio-group",
    "checkbox",
    "textarea",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/questionnaire-form-2.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useId } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport {\r\n  Loader2,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  UserIcon,\r\n  AtSignIcon,\r\n  Star,\r\n  Check,\r\n} from \"lucide-react\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n  FormDescription,\r\n} from \"@/registry/default/ui/form\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { RadioGroup, RadioGroupItem } from \"@/registry/default/ui/radio-group\";\r\nimport { Textarea } from \"@/registry/default/ui/textarea\";\r\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\r\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\r\nimport { Progress } from \"@/registry/default/ui/progress\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Separator } from \"@/registry/default/ui/separator\";\r\n\r\n// Define the form validation schema\r\nconst formSchema = z.object({\r\n  // Step 1: Personal Information\r\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\r\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n  age: z.string().min(1, { message: \"Age is required\" }),\r\n\r\n  // Step 2: Preferences\r\n  preferredContact: z.enum([\"email\", \"phone\", \"mail\"], {\r\n    required_error: \"Please select a preferred contact method\",\r\n  }),\r\n  interests: z\r\n    .array(z.string())\r\n    .min(1, { message: \"Please select at least one interest\" }),\r\n\r\n  // Step 3: Feedback\r\n  satisfaction: z.enum(\r\n    [\r\n      \"very-satisfied\",\r\n      \"satisfied\",\r\n      \"neutral\",\r\n      \"dissatisfied\",\r\n      \"very-dissatisfied\",\r\n    ],\r\n    {\r\n      required_error: \"Please rate your satisfaction\",\r\n    },\r\n  ),\r\n  feedback: z\r\n    .string()\r\n    .min(10, { message: \"Feedback must be at least 10 characters\" }),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\n// Define interest options\r\ninterface InterestOption {\r\n  id: string;\r\n  label: string;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nconst defaultInterestOptions: InterestOption[] = [\r\n  {\r\n    id: \"technology\",\r\n    label: \"Technology\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-4 w-4\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    id: \"sports\",\r\n    label: \"Sports\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-4 w-4\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n        />\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    id: \"music\",\r\n    label: \"Music\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-4 w-4\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    id: \"art\",\r\n    label: \"Art\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-4 w-4\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    id: \"travel\",\r\n    label: \"Travel\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-4 w-4\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    id: \"food\",\r\n    label: \"Food\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-4 w-4\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n];\r\n\r\ninterface QuestionnaireFormProps {\r\n  /**\r\n   * Function to handle form submission\r\n   */\r\n  onSubmit?: (data: FormValues) => Promise<void>;\r\n  /**\r\n   * URL to redirect to after successful submission\r\n   */\r\n  redirectTo?: string;\r\n  /**\r\n   * Custom form action for server-side form processing\r\n   */\r\n  formAction?: string;\r\n  /**\r\n   * Custom interest options\r\n   */\r\n  interestOptions?: InterestOption[];\r\n  /**\r\n   * Questionnaire title\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Custom CSS class for the container\r\n   */\r\n  className?: string;\r\n  /**\r\n   * Initial step to show (1-based)\r\n   */\r\n  initialStep?: number;\r\n  /**\r\n   * Show step indicators\r\n   */\r\n  showStepIndicator?: boolean;\r\n  /**\r\n   * Label for the submission button\r\n   */\r\n  submitButtonLabel?: string;\r\n}\r\n\r\nexport default function QuestionnaireForm({\r\n  onSubmit: onFormSubmit,\r\n  redirectTo,\r\n  formAction,\r\n  interestOptions = defaultInterestOptions,\r\n  title = \"Questionnaire\",\r\n  className,\r\n  initialStep = 1,\r\n  showStepIndicator = true,\r\n  submitButtonLabel = \"Submit\",\r\n}: QuestionnaireFormProps) {\r\n  const [step, setStep] = React.useState(initialStep);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\r\n  const { toast } = useToast();\r\n\r\n  const nameId = useId();\r\n  const emailId = useId();\r\n  const ageId = useId();\r\n\r\n  const totalSteps = 3; // Define the total number of steps\r\n  const progressPercentage = ((step - 1) / (totalSteps - 1)) * 100; // Calculate progress percentage\r\n\r\n  const formRef = React.useRef<HTMLFormElement>(null); // Define formRef\r\n  const step1Ref = React.useRef<HTMLDivElement>(null);\r\n  const step2Ref = React.useRef<HTMLDivElement>(null);\r\n  const step3Ref = React.useRef<HTMLDivElement>(null);\r\n  const successRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n      age: \"\",\r\n      preferredContact: \"email\",\r\n      interests: [],\r\n      satisfaction: \"neutral\",\r\n      feedback: \"\",\r\n    },\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  // Step validation fields\r\n  const stepValidationFields = {\r\n    1: [\"name\", \"email\", \"age\"],\r\n    2: [\"preferredContact\", \"interests\"],\r\n    3: [\"satisfaction\", \"feedback\"],\r\n  };\r\n\r\n  // Step titles\r\n  const stepTitles = {\r\n    1: \"Personal Information\",\r\n    2: \"Preferences\",\r\n    3: \"Feedback\",\r\n  };\r\n\r\n  // Handle next step\r\n  const nextStep = async () => {\r\n    // Validate current step fields\r\n    const isValid = await form.trigger(\r\n      stepValidationFields[step as keyof typeof stepValidationFields] as any,\r\n    );\r\n\r\n    if (isValid) {\r\n      // Move to next step\r\n      setStep((prev) => prev + 1);\r\n\r\n      // Focus management for screen readers\r\n      setTimeout(() => {\r\n        if (step === 1 && step2Ref.current) {\r\n          step2Ref.current.focus();\r\n        } else if (step === 2 && step3Ref.current) {\r\n          step3Ref.current.focus();\r\n        }\r\n      }, 100);\r\n\r\n      // Scroll to top of form\r\n      if (formRef.current) {\r\n        formRef.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle previous step\r\n  const prevStep = () => {\r\n    setStep((prev) => prev - 1);\r\n\r\n    // Focus management for screen readers\r\n    setTimeout(() => {\r\n      if (step === 2 && step1Ref.current) {\r\n        step1Ref.current.focus();\r\n      } else if (step === 3 && step2Ref.current) {\r\n        step2Ref.current.focus();\r\n      }\r\n    }, 100);\r\n\r\n    // Scroll to top of form\r\n    if (formRef.current) {\r\n      formRef.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  async function handleSubmit(data: FormValues) {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      // Use provided callback or simulate API call\r\n      if (onFormSubmit) {\r\n        await onFormSubmit(data);\r\n      } else {\r\n        // Simulate API call\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(\"Form data:\", data);\r\n      }\r\n\r\n      setIsSubmitted(true);\r\n\r\n      toast({\r\n        title: \"Questionnaire submitted!\",\r\n        description: \"Thank you for completing our questionnaire.\",\r\n      });\r\n\r\n      // Focus success message for accessibility\r\n      setTimeout(() => {\r\n        if (successRef.current) {\r\n          successRef.current.focus();\r\n        }\r\n      }, 100);\r\n\r\n      // Redirect if specified\r\n      if (redirectTo) {\r\n        window.location.href = redirectTo;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Submission error:\", error);\r\n\r\n      toast({\r\n        title: \"Submission failed\",\r\n        description:\r\n          \"There was a problem submitting your responses. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"w-full max-w-2xl mx-auto bg-background text-foreground rounded-lg border shadow-md p-6\",\r\n        className,\r\n      )}\r\n    >\r\n      {/* Step indicator */}\r\n      {showStepIndicator && !isSubmitted && (\r\n        <div className=\"mb-8\">\r\n          {/* Progress bar */}\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between text-sm\">\r\n              <span className=\"text-primary font-medium\">\r\n                Step {step} of {totalSteps}\r\n              </span>\r\n              <span className=\"text-muted-foreground\">\r\n                {stepTitles[step as keyof typeof stepTitles]}\r\n              </span>\r\n            </div>\r\n            <Progress value={progressPercentage} className=\"h-2\" />\r\n          </div>\r\n\r\n          {/* Step circles */}\r\n          <div className=\"hidden sm:flex justify-between items-center mt-4\">\r\n            {[1, 2, 3].map((stepNumber) => (\r\n              <div key={stepNumber} className=\"flex flex-col items-center\">\r\n                <div\r\n                  className={cn(\r\n                    \"w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors\",\r\n                    stepNumber < step\r\n                      ? \"bg-primary text-primary-foreground\"\r\n                      : stepNumber === step\r\n                        ? \"bg-primary/10 text-primary border-2 border-primary\"\r\n                        : \"bg-muted text-muted-foreground\",\r\n                  )}\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  {stepNumber < step ? (\r\n                    <Check className=\"h-4 w-4\" />\r\n                  ) : (\r\n                    stepNumber\r\n                  )}\r\n                </div>\r\n                <span\r\n                  className={cn(\r\n                    \"text-xs mt-1\",\r\n                    stepNumber === step\r\n                      ? \"text-primary font-medium\"\r\n                      : \"text-muted-foreground\",\r\n                  )}\r\n                >\r\n                  {stepTitles[stepNumber as keyof typeof stepTitles]}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {isSubmitted ? (\r\n        <div\r\n          className=\"text-center space-y-4 py-6\"\r\n          ref={successRef}\r\n          tabIndex={-1}\r\n          role=\"alert\"\r\n          aria-live=\"polite\"\r\n        >\r\n          <div className=\"rounded-full w-16 h-16 bg-primary/20 mx-auto flex items-center justify-center\">\r\n            <Check className=\"w-8 h-8 text-primary\" aria-hidden=\"true\" />\r\n          </div>\r\n          <h3 className=\"text-lg font-medium\">Thank You!</h3>\r\n          <p className=\"text-muted-foreground mt-2\">\r\n            Your feedback has been submitted successfully. We appreciate your\r\n            time and input.\r\n          </p>\r\n\r\n          <div className=\"mt-4 bg-muted/50 rounded-lg p-4 max-w-md mx-auto\">\r\n            <h4 className=\"font-medium text-left mb-2\">Your Responses</h4>\r\n            <div className=\"space-y-3 text-sm text-left\">\r\n              <div>\r\n                <p className=\"text-muted-foreground\">Name:</p>\r\n                <p className=\"font-medium\">{form.getValues().name}</p>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-muted-foreground\">Email:</p>\r\n                <p className=\"font-medium\">{form.getValues().email}</p>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-muted-foreground\">Interests:</p>\r\n                <div className=\"flex flex-wrap gap-1 mt-1\">\r\n                  {form.getValues().interests.map((interest) => (\r\n                    <span\r\n                      key={interest}\r\n                      className=\"inline-flex items-center rounded-full bg-primary/10 px-2 py-1 text-xs\"\r\n                    >\r\n                      {interestOptions.find((opt) => opt.id === interest)\r\n                        ?.label || interest}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <p className=\"text-muted-foreground\">Satisfaction:</p>\r\n                <p className=\"font-medium capitalize\">\r\n                  {form.getValues().satisfaction.replace(/-/g, \" \")}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <Button\r\n            className=\"mt-4\"\r\n            onClick={() => {\r\n              setIsSubmitted(false);\r\n              setStep(1);\r\n              form.reset();\r\n            }}\r\n          >\r\n            Submit Another Response\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <Form {...form}>\r\n          <form\r\n            ref={formRef}\r\n            onSubmit={form.handleSubmit(handleSubmit)}\r\n            className=\"space-y-6\"\r\n            action={formAction}\r\n            noValidate\r\n          >\r\n            {/* Step 1: Personal Information */}\r\n            {step === 1 && (\r\n              <div\r\n                className=\"space-y-4\"\r\n                ref={step1Ref}\r\n                tabIndex={-1}\r\n                aria-labelledby=\"step1-heading\"\r\n              >\r\n                <h3\r\n                  id=\"step1-heading\"\r\n                  className=\"text-lg font-medium flex items-center\"\r\n                >\r\n                  <UserIcon\r\n                    className=\"mr-2 h-5 w-5 text-primary\"\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                  Personal Information\r\n                </h3>\r\n                <Separator className=\"my-4\" />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"name\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor={nameId}>Full Name</FormLabel>\r\n                      <FormControl>\r\n                        <div className=\"relative\">\r\n                          <Input\r\n                            id={nameId}\r\n                            placeholder=\"John Doe\"\r\n                            className=\"peer ps-9\"\r\n                            {...field}\r\n                            autoComplete=\"name\"\r\n                            aria-required=\"true\"\r\n                          />\r\n                          <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                            <UserIcon size={16} aria-hidden=\"true\" />\r\n                          </div>\r\n                        </div>\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor={emailId}>Email</FormLabel>\r\n                      <FormControl>\r\n                        <div className=\"relative\">\r\n                          <Input\r\n                            id={emailId}\r\n                            placeholder=\"name@example.com\"\r\n                            className=\"peer ps-9\"\r\n                            type=\"email\"\r\n                            {...field}\r\n                            autoComplete=\"email\"\r\n                            aria-required=\"true\"\r\n                          />\r\n                          <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                            <AtSignIcon size={16} aria-hidden=\"true\" />\r\n                          </div>\r\n                        </div>\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"age\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor={ageId}>Age</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          id={ageId}\r\n                          placeholder=\"30\"\r\n                          type=\"number\"\r\n                          {...field}\r\n                          min=\"0\"\r\n                          max=\"120\"\r\n                          aria-required=\"true\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* Step 2: Preferences */}\r\n            {step === 2 && (\r\n              <div\r\n                className=\"space-y-4\"\r\n                ref={step2Ref}\r\n                tabIndex={-1}\r\n                aria-labelledby=\"step2-heading\"\r\n              >\r\n                <h3\r\n                  id=\"step2-heading\"\r\n                  className=\"text-lg font-medium flex items-center\"\r\n                >\r\n                  <Star\r\n                    className=\"mr-2 h-5 w-5 text-primary\"\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                  Preferences\r\n                </h3>\r\n                <Separator className=\"my-4\" />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"preferredContact\"\r\n                  render={({ field }) => (\r\n                    <FormItem className=\"space-y-3\">\r\n                      <FormLabel id=\"contact-method-label\">\r\n                        Preferred Contact Method\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <RadioGroup\r\n                          onValueChange={field.onChange}\r\n                          defaultValue={field.value}\r\n                          className=\"flex flex-col space-y-3\"\r\n                          aria-labelledby=\"contact-method-label\"\r\n                        >\r\n                          {[\r\n                            { value: \"email\", label: \"Email\" },\r\n                            { value: \"phone\", label: \"Phone\" },\r\n                            { value: \"mail\", label: \"Mail\" },\r\n                          ].map((option) => (\r\n                            <FormItem\r\n                              key={option.value}\r\n                              className=\"flex items-center space-x-3 space-y-0 rounded-md border p-3 hover:bg-muted/50 transition-colors\"\r\n                            >\r\n                              <FormControl>\r\n                                <RadioGroupItem\r\n                                  value={option.value}\r\n                                  id={`contact-${option.value}`}\r\n                                />\r\n                              </FormControl>\r\n                              <FormLabel\r\n                                htmlFor={`contact-${option.value}`}\r\n                                className=\"font-normal cursor-pointer flex-1\"\r\n                              >\r\n                                {option.label}\r\n                              </FormLabel>\r\n                            </FormItem>\r\n                          ))}\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"interests\"\r\n                  render={() => (\r\n                    <FormItem>\r\n                      <div className=\"mb-4\">\r\n                        <FormLabel id=\"interests-group-label\">\r\n                          Interests\r\n                        </FormLabel>\r\n                        <FormDescription>Select all that apply</FormDescription>\r\n                      </div>\r\n                      <div\r\n                        className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\"\r\n                        role=\"group\"\r\n                        aria-labelledby=\"interests-group-label\"\r\n                      >\r\n                        {interestOptions.map((option) => (\r\n                          <FormField\r\n                            key={option.id}\r\n                            control={form.control}\r\n                            name=\"interests\"\r\n                            render={({ field }) => {\r\n                              return (\r\n                                <FormItem\r\n                                  key={option.id}\r\n                                  className=\"flex items-start space-x-3 space-y-0 rounded-md border p-3 hover:bg-muted/50 transition-colors\"\r\n                                >\r\n                                  <FormControl>\r\n                                    <Checkbox\r\n                                      id={`interest-${option.id}`}\r\n                                      checked={field.value?.includes(option.id)}\r\n                                      onCheckedChange={(checked) => {\r\n                                        return checked\r\n                                          ? field.onChange([\r\n                                              ...field.value,\r\n                                              option.id,\r\n                                            ])\r\n                                          : field.onChange(\r\n                                              field.value?.filter(\r\n                                                (value) => value !== option.id,\r\n                                              ),\r\n                                            );\r\n                                      }}\r\n                                    />\r\n                                  </FormControl>\r\n                                  <div className=\"flex items-center space-x-2\">\r\n                                    {option.icon && (\r\n                                      <span className=\"text-muted-foreground\">\r\n                                        {option.icon}\r\n                                      </span>\r\n                                    )}\r\n                                    <FormLabel\r\n                                      htmlFor={`interest-${option.id}`}\r\n                                      className=\"font-normal cursor-pointer\"\r\n                                    >\r\n                                      {option.label}\r\n                                    </FormLabel>\r\n                                  </div>\r\n                                </FormItem>\r\n                              );\r\n                            }}\r\n                          />\r\n                        ))}\r\n                      </div>\r\n                      <FormMessage className=\"mt-2\" />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* Step 3: Feedback */}\r\n            {step === 3 && (\r\n              <div\r\n                className=\"space-y-4\"\r\n                ref={step3Ref}\r\n                tabIndex={-1}\r\n                aria-labelledby=\"step3-heading\"\r\n              >\r\n                <h3\r\n                  id=\"step3-heading\"\r\n                  className=\"text-lg font-medium flex items-center\"\r\n                >\r\n                  <svg\r\n                    className=\"mr-2 h-5 w-5 text-primary\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                    aria-hidden=\"true\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z\"\r\n                    />\r\n                  </svg>\r\n                  Feedback\r\n                </h3>\r\n                <Separator className=\"my-4\" />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"satisfaction\"\r\n                  render={({ field }) => (\r\n                    <FormItem className=\"space-y-3\">\r\n                      <FormLabel id=\"satisfaction-label\">\r\n                        How satisfied are you with our service?\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <RadioGroup\r\n                          onValueChange={field.onChange}\r\n                          defaultValue={field.value}\r\n                          className=\"flex flex-col space-y-3\"\r\n                          aria-labelledby=\"satisfaction-label\"\r\n                        >\r\n                          {[\r\n                            {\r\n                              value: \"very-satisfied\",\r\n                              label: \"Very Satisfied\",\r\n                              emoji: \"😁\",\r\n                            },\r\n                            {\r\n                              value: \"satisfied\",\r\n                              label: \"Satisfied\",\r\n                              emoji: \"🙂\",\r\n                            },\r\n                            { value: \"neutral\", label: \"Neutral\", emoji: \"😐\" },\r\n                            {\r\n                              value: \"dissatisfied\",\r\n                              label: \"Dissatisfied\",\r\n                              emoji: \"🙁\",\r\n                            },\r\n                            {\r\n                              value: \"very-dissatisfied\",\r\n                              label: \"Very Dissatisfied\",\r\n                              emoji: \"😞\",\r\n                            },\r\n                          ].map((option) => (\r\n                            <FormItem\r\n                              key={option.value}\r\n                              className={cn(\r\n                                \"flex items-center space-x-3 space-y-0 rounded-md border p-3 hover:bg-muted/50 transition-colors\",\r\n                                field.value === option.value &&\r\n                                  \"border-primary bg-primary/5\",\r\n                              )}\r\n                            >\r\n                              <FormControl>\r\n                                <RadioGroupItem\r\n                                  value={option.value}\r\n                                  id={`satisfaction-${option.value}`}\r\n                                />\r\n                              </FormControl>\r\n                              <FormLabel\r\n                                htmlFor={`satisfaction-${option.value}`}\r\n                                className=\"font-normal cursor-pointer flex-1 flex items-center\"\r\n                              >\r\n                                <span\r\n                                  className=\"mr-2 text-lg\"\r\n                                  aria-hidden=\"true\"\r\n                                >\r\n                                  {option.emoji}\r\n                                </span>\r\n                                {option.label}\r\n                              </FormLabel>\r\n                            </FormItem>\r\n                          ))}\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"feedback\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor=\"feedback-textarea\">\r\n                        Additional Feedback\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Textarea\r\n                          id=\"feedback-textarea\"\r\n                          placeholder=\"Please share any additional thoughts or suggestions\"\r\n                          className=\"resize-none min-h-[150px]\"\r\n                          {...field}\r\n                          aria-required=\"true\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormDescription>\r\n                        Your feedback helps us improve our services\r\n                      </FormDescription>\r\n                      <FormMessage />\r\n                      <div className=\"text-xs text-right text-muted-foreground mt-1\">\r\n                        {field.value.length} characters\r\n                      </div>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* Navigation buttons */}\r\n            <div className=\"flex justify-between mt-8\">\r\n              {step > 1 ? (\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"outline\"\r\n                  onClick={prevStep}\r\n                  className=\"flex items-center\"\r\n                >\r\n                  <ChevronLeft className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n                  Previous\r\n                </Button>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n\r\n              {step < totalSteps ? (\r\n                <Button\r\n                  type=\"button\"\r\n                  onClick={nextStep}\r\n                  variant=\"default\"\r\n                  className=\"flex items-center\"\r\n                >\r\n                  Next\r\n                  <ChevronRight className=\"ml-2 h-4 w-4\" aria-hidden=\"true\" />\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  type=\"submit\"\r\n                  disabled={isLoading}\r\n                  variant=\"shine\"\r\n                  className=\"flex items-center\"\r\n                >\r\n                  {isLoading ? (\r\n                    <>\r\n                      <Loader2\r\n                        className=\"mr-2 h-4 w-4 animate-spin\"\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                      <span>Submitting...</span>\r\n                    </>\r\n                  ) : (\r\n                    submitButtonLabel\r\n                  )}\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </Form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
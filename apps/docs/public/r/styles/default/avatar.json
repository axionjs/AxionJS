{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "@radix-ui/react-avatar"
  ],
  "devDependencies": [
    "@radix-ui/react-avatar"
  ],
  "files": [
    {
      "path": "ui/avatar.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n/* -------------------------------------------------------------------------------------\r\n *  1. Avatar\r\n * ----------------------------------------------------------------------------------- */\r\nconst Avatar = React.forwardRef<\r\n  React.ElementRef<typeof AvatarPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\r\n>(({ className, ...props }, ref) => (\r\n  <AvatarPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nAvatar.displayName = \"Avatar\";\r\n\r\n/* -------------------------------------------------------------------------------------\r\n *  2. AvatarImage\r\n * ----------------------------------------------------------------------------------- */\r\nconst AvatarImage = React.forwardRef<\r\n  React.ElementRef<typeof AvatarPrimitive.Image>,\r\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\r\n>(({ className, ...props }, ref) => (\r\n  <AvatarPrimitive.Image\r\n    ref={ref}\r\n    className={cn(\"aspect-square h-full w-full object-cover\", className)}\r\n    {...props}\r\n  />\r\n));\r\nAvatarImage.displayName = \"AvatarImage\";\r\n\r\n/* -------------------------------------------------------------------------------------\r\n *  3. AvatarFallback\r\n * ----------------------------------------------------------------------------------- */\r\nconst AvatarFallback = React.forwardRef<\r\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\r\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\r\n>(({ className, ...props }, ref) => (\r\n  <AvatarPrimitive.Fallback\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nAvatarFallback.displayName = \"AvatarFallback\";\r\n\r\ninterface AvatarGroupProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  overlap?: string;\r\n  hoverScale?: boolean;\r\n  limit?: number;\r\n  totalCount?: number;\r\n}\r\n\r\nconst AvatarGroup = React.forwardRef<HTMLDivElement, AvatarGroupProps>(\r\n  (\r\n    {\r\n      className,\r\n      overlap = \"-ml-2\",\r\n      hoverScale = false,\r\n      limit,\r\n      totalCount,\r\n      children,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    // Convert children to array for processing\r\n    const childrenArray = React.Children.toArray(children).filter((child) =>\r\n      React.isValidElement(child),\r\n    );\r\n\r\n    // Limit the number of displayed avatars if limit is set\r\n    const visibleChildren = limit\r\n      ? childrenArray.slice(0, limit)\r\n      : childrenArray;\r\n\r\n    // Calculate how many additional avatars are not shown\r\n    const hiddenCount =\r\n      limit && childrenArray.length > limit\r\n        ? childrenArray.length - limit\r\n        : totalCount && childrenArray.length > 0\r\n          ? totalCount - childrenArray.length\r\n          : 0;\r\n\r\n    return (\r\n      <div ref={ref} className={cn(\"flex items-center\", className)} {...props}>\r\n        {visibleChildren.map((child, index) => {\r\n          if (!React.isValidElement(child)) {\r\n            return child;\r\n          }\r\n\r\n          const overlapClass = index === 0 ? \"\" : overlap;\r\n\r\n          const borderClass =\r\n            \"ring-2 ring-background ring-offset-1 ring-primary/10\";\r\n\r\n          const scaleClass = hoverScale\r\n            ? \"transition-transform duration-200 ease-in-out hover:z-10 hover:scale-110 hover:-translate-y-1\"\r\n            : \"\";\r\n\r\n          return React.cloneElement(child, {\r\n            className: cn(\r\n              overlapClass,\r\n              borderClass,\r\n              scaleClass,\r\n              child.props.className,\r\n            ),\r\n          });\r\n        })}\r\n\r\n        {/* Show the count of additional avatars if any are hidden */}\r\n        {hiddenCount > 0 && (\r\n          <Avatar\r\n            className={cn(\r\n              overlap,\r\n              \"ring-2 ring-background ring-offset-1 ring-primary/10\",\r\n              hoverScale &&\r\n                \"transition-transform duration-200 ease-in-out hover:z-10 hover:scale-110 hover:-translate-y-1\",\r\n              \"bg-muted\",\r\n            )}\r\n          >\r\n            <AvatarFallback className=\"bg-primary/10 text-xs\">\r\n              +{hiddenCount}\r\n            </AvatarFallback>\r\n          </Avatar>\r\n        )}\r\n      </div>\r\n    );\r\n  },\r\n);\r\nAvatarGroup.displayName = \"AvatarGroup\";\r\n\r\nexport { Avatar, AvatarImage, AvatarFallback, AvatarGroup };\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
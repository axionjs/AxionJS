{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "heatmap-chart",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "registryDependencies": [
    "card",
    "chart"
  ],
  "files": [
    {
      "path": "charts/heatmap-chart.tsx",
      "content": "\"use client\";\n\nimport { TrendingUp } from \"lucide-react\";\nimport {\n  Cell,\n  XAxis,\n  YAxis,\n  Scatter,\n  ScatterChart,\n  Rectangle,\n  ResponsiveContainer,\n} from \"recharts\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport {\n  type ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/default/ui/chart\";\n\nconst chartData = [\n  { hour: \"00:00\", day: \"Mon\", value: 10 },\n  { hour: \"04:00\", day: \"Mon\", value: 15 },\n  { hour: \"08:00\", day: \"Mon\", value: 35 },\n  { hour: \"12:00\", day: \"Mon\", value: 45 },\n  { hour: \"16:00\", day: \"Mon\", value: 40 },\n  { hour: \"20:00\", day: \"Mon\", value: 30 },\n\n  { hour: \"00:00\", day: \"Tue\", value: 5 },\n  { hour: \"04:00\", day: \"Tue\", value: 10 },\n  { hour: \"08:00\", day: \"Tue\", value: 40 },\n  { hour: \"12:00\", day: \"Tue\", value: 50 },\n  { hour: \"16:00\", day: \"Tue\", value: 45 },\n  { hour: \"20:00\", day: \"Tue\", value: 25 },\n\n  { hour: \"00:00\", day: \"Wed\", value: 8 },\n  { hour: \"04:00\", day: \"Wed\", value: 12 },\n  { hour: \"08:00\", day: \"Wed\", value: 42 },\n  { hour: \"12:00\", day: \"Wed\", value: 55 },\n  { hour: \"16:00\", day: \"Wed\", value: 50 },\n  { hour: \"20:00\", day: \"Wed\", value: 28 },\n\n  { hour: \"00:00\", day: \"Thu\", value: 12 },\n  { hour: \"04:00\", day: \"Thu\", value: 18 },\n  { hour: \"08:00\", day: \"Thu\", value: 45 },\n  { hour: \"12:00\", day: \"Thu\", value: 60 },\n  { hour: \"16:00\", day: \"Thu\", value: 55 },\n  { hour: \"20:00\", day: \"Thu\", value: 35 },\n\n  { hour: \"00:00\", day: \"Fri\", value: 15 },\n  { hour: \"04:00\", day: \"Fri\", value: 20 },\n  { hour: \"08:00\", day: \"Fri\", value: 48 },\n  { hour: \"12:00\", day: \"Fri\", value: 58 },\n  { hour: \"16:00\", day: \"Fri\", value: 52 },\n  { hour: \"20:00\", day: \"Fri\", value: 32 },\n\n  { hour: \"00:00\", day: \"Sat\", value: 20 },\n  { hour: \"04:00\", day: \"Sat\", value: 15 },\n  { hour: \"08:00\", day: \"Sat\", value: 30 },\n  { hour: \"12:00\", day: \"Sat\", value: 40 },\n  { hour: \"16:00\", day: \"Sat\", value: 35 },\n  { hour: \"20:00\", day: \"Sat\", value: 25 },\n\n  { hour: \"00:00\", day: \"Sun\", value: 18 },\n  { hour: \"04:00\", day: \"Sun\", value: 12 },\n  { hour: \"08:00\", day: \"Sun\", value: 25 },\n  { hour: \"12:00\", day: \"Sun\", value: 35 },\n  { hour: \"16:00\", day: \"Sun\", value: 30 },\n  { hour: \"20:00\", day: \"Sun\", value: 20 },\n];\n\nconst hours = [\"00:00\", \"04:00\", \"08:00\", \"12:00\", \"16:00\", \"20:00\"];\nconst days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n\nconst chartConfig = {\n  value: {\n    label: \"Activity\",\n    color: \"hsl(var(--chart-1))\",\n  },\n} satisfies ChartConfig;\n\nconst getColor = (value: number) => {\n  if (value < 15) return \"hsl(var(--chart-1) / 0.2)\";\n  if (value < 30) return \"hsl(var(--chart-1) / 0.4)\";\n  if (value < 45) return \"hsl(var(--chart-1) / 0.7)\";\n  return \"hsl(var(--chart-1))\";\n};\n\nexport function HeatmapChart() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Heatmap Chart</CardTitle>\n        <CardDescription>Weekly activity by hour</CardDescription>\n      </CardHeader>\n      <CardContent className=\"h-auto\">\n        <ChartContainer\n          config={{\n            ...chartConfig,\n            \"value-10\": { label: \"Low\", color: \"hsl(var(--chart-1) / 0.2)\" },\n            \"value-30\": { label: \"Medium\", color: \"hsl(var(--chart-1) / 0.4)\" },\n            \"value-50\": { label: \"High\", color: \"hsl(var(--chart-1) / 0.7)\" },\n            \"value-70\": { label: \"Very High\", color: \"hsl(var(--chart-1))\" },\n          }}\n        >\n          <ResponsiveContainer width=\"100%\" height=\"85%\">\n            <ScatterChart\n              margin={{ top: 20, right: 20, bottom: 20, left: 10 }}\n              isAnimationActive={true}\n              animationDuration={800}\n            >\n              <XAxis\n                dataKey=\"hour\"\n                type=\"category\"\n                allowDuplicatedCategory={false}\n                tickLine={false}\n                axisLine={false}\n                ticks={hours}\n                interval={0}\n                tick={{ fontSize: 10 }}\n                padding={{ left: 10, right: 10 }}\n              />\n              <YAxis\n                dataKey=\"day\"\n                type=\"category\"\n                allowDuplicatedCategory={false}\n                tickLine={false}\n                axisLine={false}\n                ticks={days}\n                interval={0}\n                tick={{ fontSize: 10 }}\n                padding={{ top: 10, bottom: 10 }}\n                width={35}\n              />\n              <ChartTooltip\n                cursor={false}\n                content={\n                  <ChartTooltipContent\n                    formatter={(value) => value + \" activity points\"}\n                  />\n                }\n              />\n              <Scatter\n                data={chartData}\n                isAnimationActive={true}\n                animationDuration={800}\n                shape={(props: any) => {\n                  const { x, y, width, height, value } = props;\n                  return (\n                    <Rectangle\n                      x={x}\n                      y={y}\n                      width={width - 3}\n                      height={height - 3}\n                      fill={getColor(value)}\n                      className=\"transition-colors duration-300\"\n                      rx={3}\n                      ry={3}\n                      aria-label={\n                        props.day +\n                        \" at \" +\n                        props.hour +\n                        \": \" +\n                        value +\n                        \" activity points\"\n                      }\n                    />\n                  );\n                }}\n              >\n                {chartData.map((entry, index) => (\n                  <Cell key={\"cell-\" + index} fill={getColor(entry.value)} />\n                ))}\n              </Scatter>\n            </ScatterChart>\n          </ResponsiveContainer>\n\n          <div className=\"mt-2 flex flex-wrap justify-center gap-4\">\n            <div className=\"flex items-center\">\n              <div className=\"mr-1 h-3 w-3 rounded-sm bg-[hsl(var(--chart-1)/0.2)]\"></div>\n              <span className=\"text-xs\">Low</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"mr-1 h-3 w-3 rounded-sm bg-[hsl(var(--chart-1)/0.4)]\"></div>\n              <span className=\"text-xs\">Medium</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"mr-1 h-3 w-3 rounded-sm bg-[hsl(var(--chart-1)/0.7)]\"></div>\n              <span className=\"text-xs\">High</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"mr-1 h-3 w-3 rounded-sm bg-[hsl(var(--chart-1))]\"></div>\n              <span className=\"text-xs\">Very High</span>\n            </div>\n          </div>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Highest activity on Thursday at noon{\" \"}\n          <TrendingUp className=\"h-4 w-4\" />\n        </div>\n        <div className=\"leading-none text-muted-foreground\">\n          Data collected over the past month\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
      "type": "registry:block",
      "target": ""
    }
  ],
  "categories": [
    "charts",
    "charts-heatmap"
  ]
}
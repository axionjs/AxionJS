{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "use-async",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-async.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\ninterface UseAsyncState<T> {\r\n  value: T | null;\r\n  error: Error | null;\r\n  status: \"idle\" | \"pending\" | \"success\" | \"error\";\r\n}\r\n\r\ninterface UseAsyncActions<T> {\r\n  execute: (...args: any[]) => Promise<void>;\r\n  reset: () => void;\r\n}\r\n\r\n/**\r\n * A hook for handling async operations\r\n * @param asyncFunction The async function to execute\r\n * @param immediate Whether to execute immediately\r\n * @returns State and actions for the async operation\r\n */\r\nexport function useAsync<T>(\r\n  asyncFunction: (...args: any[]) => Promise<T>,\r\n  immediate = false,\r\n): [UseAsyncState<T>, UseAsyncActions<T>] {\r\n  const [state, setState] = React.useState<UseAsyncState<T>>({\r\n    value: null,\r\n    error: null,\r\n    status: \"idle\",\r\n  });\r\n\r\n  // The execute function wraps asyncFunction and\r\n  // handles setting state for pending, value, and error.\r\n  const execute = React.useCallback(\r\n    async (...args: any[]) => {\r\n      setState({ value: null, error: null, status: \"pending\" });\r\n\r\n      try {\r\n        const response = await asyncFunction(...args);\r\n        setState({ value: response, error: null, status: \"success\" });\r\n      } catch (error) {\r\n        setState({ value: null, error: error as Error, status: \"error\" });\r\n      }\r\n    },\r\n    [asyncFunction],\r\n  );\r\n\r\n  // Call execute if immediate is true\r\n  React.useEffect(() => {\r\n    if (immediate) {\r\n      execute();\r\n    }\r\n  }, [execute, immediate]);\r\n\r\n  const reset = React.useCallback(() => {\r\n    setState({ value: null, error: null, status: \"idle\" });\r\n  }, []);\r\n\r\n  return [state, { execute, reset }];\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
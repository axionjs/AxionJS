{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "reset-password-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A reset password form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card",
    "alert"
  ],
  "files": [
    {
      "path": "blocks/reset-password-form-1.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useId } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Link from \"next/link\";\nimport {\n  Loader2,\n  AtSignIcon,\n  ArrowLeft,\n  AlertCircle,\n  CheckCircle,\n} from \"lucide-react\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/registry/default/ui/form\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle,\n} from \"@/registry/default/ui/alert\";\nimport { cn } from \"@/lib/utils\";\n\n// Define validation schema\nconst formSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\n// Status for the password reset flow\ntype ResetStatus = \"idle\" | \"loading\" | \"success\" | \"error\";\n\ninterface ResetPasswordFormProps {\n  /**\n   * Function to handle form submission\n   */\n  onSubmit?: (data: FormValues) => Promise<void>;\n  /**\n   * Custom form action for server-side form processing\n   */\n  formAction?: string;\n  /**\n   * URL for the login page\n   */\n  loginUrl?: string;\n  /**\n   * Custom title for the form\n   */\n  title?: string;\n  /**\n   * Custom description for the form\n   */\n  description?: string;\n  /**\n   * Custom button text\n   */\n  buttonText?: string;\n  /**\n   * Custom CSS class for the container\n   */\n  className?: string;\n  /**\n   * Custom message for success state\n   */\n  successMessage?: string;\n  /**\n   * Custom error message\n   */\n  errorMessage?: string;\n  /**\n   * Show a loading skeleton while the form is loading\n   */\n  isLoading?: boolean;\n}\n\nexport default function ResetPasswordForm({\n  onSubmit,\n  formAction,\n  loginUrl = \"/login\",\n  title = \"Reset password\",\n  description = \"Enter your email address and we'll send you a link to reset your password\",\n  buttonText = \"Send reset link\",\n  className,\n  successMessage = \"We've sent a password reset link to your email address.\",\n  errorMessage = \"We couldn't process your request. Please try again.\",\n  isLoading = false,\n}: ResetPasswordFormProps) {\n  const [status, setStatus] = React.useState<ResetStatus>(\"idle\");\n  const [emailValue, setEmailValue] = React.useState(\"\");\n  const formRef = React.useRef<HTMLFormElement>(null);\n  const successRef = React.useRef<HTMLDivElement>(null);\n  const errorRef = React.useRef<HTMLDivElement>(null);\n\n  const emailId = useId();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n    },\n    mode: \"onBlur\",\n  });\n\n  // Focus success message for accessibility when status changes\n  React.useEffect(() => {\n    if (status === \"success\" && successRef.current) {\n      successRef.current.focus();\n    } else if (status === \"error\" && errorRef.current) {\n      errorRef.current.focus();\n    }\n  }, [status]);\n\n  async function handleSubmit(data: FormValues) {\n    try {\n      setStatus(\"loading\");\n      setEmailValue(data.email);\n\n      if (onSubmit) {\n        await onSubmit(data);\n      } else {\n        // Simulate API call\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(\"Reset password request:\", data);\n      }\n\n      setStatus(\"success\");\n\n      // Focus success message for screen readers\n      setTimeout(() => {\n        if (successRef.current) {\n          successRef.current.focus();\n        }\n      }, 100);\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      setStatus(\"error\");\n\n      // Focus error message for screen readers\n      setTimeout(() => {\n        if (errorRef.current) {\n          errorRef.current.focus();\n        }\n      }, 100);\n    }\n  }\n\n  // Function to handle resend\n  const handleResend = () => {\n    form.handleSubmit(handleSubmit)();\n  };\n\n  // Check if the form is in a loading state\n  const isFormLoading = status === \"loading\" || isLoading;\n\n  return (\n    <Card className={cn(\"w-full max-w-md mx-auto shadow-lg\", className)}>\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl font-bold\">{title}</CardTitle>\n        <CardDescription>{description}</CardDescription>\n      </CardHeader>\n\n      {status !== \"success\" ? (\n        <>\n          {status === \"error\" && (\n            <div className=\"px-6\">\n              <Alert\n                variant=\"destructive\"\n                ref={errorRef}\n                tabIndex={-1}\n                role=\"alert\"\n              >\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertTitle>Error</AlertTitle>\n                <AlertDescription>{errorMessage}</AlertDescription>\n              </Alert>\n            </div>\n          )}\n\n          <Form {...form}>\n            <form\n              ref={formRef}\n              onSubmit={form.handleSubmit(handleSubmit)}\n              className=\"space-y-4\"\n              action={formAction}\n              noValidate\n            >\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor={emailId}>Email</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            id={emailId}\n                            placeholder=\"name@example.com\"\n                            className=\"peer ps-9\"\n                            type=\"email\"\n                            autoComplete=\"email\"\n                            aria-required=\"true\"\n                            {...field}\n                            disabled={isFormLoading}\n                          />\n                          <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                            <AtSignIcon size={16} aria-hidden=\"true\" />\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormDescription>\n                        We'll send a password reset link to this email address\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n\n              <CardFooter className=\"flex flex-col\">\n                <Button\n                  type=\"submit\"\n                  className=\"w-full relative\"\n                  disabled={isFormLoading}\n                  variant=\"ringHover\"\n                  aria-label={\n                    isFormLoading ? \"Sending reset link...\" : buttonText\n                  }\n                >\n                  {isFormLoading ? (\n                    <>\n                      <Loader2\n                        className=\"mr-2 h-4 w-4 animate-spin\"\n                        aria-hidden=\"true\"\n                      />\n                      <span>Sending reset link...</span>\n                    </>\n                  ) : (\n                    <>\n                      <AtSignIcon className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\n                      <span>{buttonText}</span>\n                    </>\n                  )}\n                  <span className=\"absolute inset-0\" aria-hidden=\"true\" />\n                </Button>\n\n                <p className=\"mt-4 text-center text-sm text-muted-foreground\">\n                  Remember your password?{\" \"}\n                  <Link\n                    href={loginUrl}\n                    className=\"text-primary font-medium hover:underline\"\n                  >\n                    Sign in\n                  </Link>\n                </p>\n              </CardFooter>\n            </form>\n          </Form>\n        </>\n      ) : (\n        <CardContent className=\"space-y-4\">\n          <div\n            className=\"flex flex-col items-center text-center space-y-2\"\n            ref={successRef}\n            tabIndex={-1}\n            role=\"alert\"\n            aria-live=\"polite\"\n          >\n            <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-2\">\n              <CheckCircle\n                className=\"h-6 w-6 text-primary\"\n                aria-hidden=\"true\"\n              />\n            </div>\n            <h3 className=\"text-lg font-medium\">Check your email</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {successMessage}\n              {emailValue && (\n                <>\n                  <br />\n                  <br />\n                  We've sent an email to: <strong>{emailValue}</strong>\n                </>\n              )}\n            </p>\n          </div>\n\n          <div className=\"space-y-4 pt-4\">\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => setStatus(\"idle\")}\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\n              Back to reset password\n            </Button>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Didn't receive the email?\n              </p>\n              <Button\n                variant=\"link\"\n                type=\"button\"\n                className=\"text-primary font-medium text-sm hover:underline\"\n                onClick={handleResend}\n                disabled={isFormLoading}\n              >\n                {isFormLoading ? (\n                  <>\n                    <Loader2\n                      className=\"mr-2 h-3 w-3 animate-spin\"\n                      aria-hidden=\"true\"\n                    />\n                    Resending...\n                  </>\n                ) : (\n                  \"Click to resend\"\n                )}\n              </Button>\n              <p className=\"text-xs text-muted-foreground mt-4\">\n                Please check your spam folder if you don't see the email in your\n                inbox.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"pt-4 border-t\">\n            <p className=\"text-center text-sm text-muted-foreground\">\n              Remember your password?{\" \"}\n              <Link\n                href={loginUrl}\n                className=\"text-primary font-medium hover:underline\"\n              >\n                Sign in\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      )}\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
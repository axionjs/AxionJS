{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "reset-password-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A reset password form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card",
    "alert"
  ],
  "files": [
    {
      "path": "blocks/reset-password-form-1.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useId } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport Link from \"next/link\";\r\nimport {\r\n  Loader2,\r\n  AtSignIcon,\r\n  ArrowLeft,\r\n  AlertCircle,\r\n  CheckCircle,\r\n} from \"lucide-react\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n  FormDescription,\r\n} from \"@/registry/default/ui/form\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/default/ui/card\";\r\nimport {\r\n  Alert,\r\n  AlertDescription,\r\n  AlertTitle,\r\n} from \"@/registry/default/ui/alert\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// Define validation schema\r\nconst formSchema = z.object({\r\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\n// Status for the password reset flow\r\ntype ResetStatus = \"idle\" | \"loading\" | \"success\" | \"error\";\r\n\r\ninterface ResetPasswordFormProps {\r\n  /**\r\n   * Function to handle form submission\r\n   */\r\n  onSubmit?: (data: FormValues) => Promise<void>;\r\n  /**\r\n   * Custom form action for server-side form processing\r\n   */\r\n  formAction?: string;\r\n  /**\r\n   * URL for the login page\r\n   */\r\n  loginUrl?: string;\r\n  /**\r\n   * Custom title for the form\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Custom description for the form\r\n   */\r\n  description?: string;\r\n  /**\r\n   * Custom button text\r\n   */\r\n  buttonText?: string;\r\n  /**\r\n   * Custom CSS class for the container\r\n   */\r\n  className?: string;\r\n  /**\r\n   * Custom message for success state\r\n   */\r\n  successMessage?: string;\r\n  /**\r\n   * Custom error message\r\n   */\r\n  errorMessage?: string;\r\n  /**\r\n   * Show a loading skeleton while the form is loading\r\n   */\r\n  isLoading?: boolean;\r\n}\r\n\r\nexport default function ResetPasswordForm({\r\n  onSubmit,\r\n  formAction,\r\n  loginUrl = \"/login\",\r\n  title = \"Reset password\",\r\n  description = \"Enter your email address and we'll send you a link to reset your password\",\r\n  buttonText = \"Send reset link\",\r\n  className,\r\n  successMessage = \"We've sent a password reset link to your email address.\",\r\n  errorMessage = \"We couldn't process your request. Please try again.\",\r\n  isLoading = false,\r\n}: ResetPasswordFormProps) {\r\n  const [status, setStatus] = React.useState<ResetStatus>(\"idle\");\r\n  const [emailValue, setEmailValue] = React.useState(\"\");\r\n  const formRef = React.useRef<HTMLFormElement>(null);\r\n  const successRef = React.useRef<HTMLDivElement>(null);\r\n  const errorRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const emailId = useId();\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n    },\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  // Focus success message for accessibility when status changes\r\n  React.useEffect(() => {\r\n    if (status === \"success\" && successRef.current) {\r\n      successRef.current.focus();\r\n    } else if (status === \"error\" && errorRef.current) {\r\n      errorRef.current.focus();\r\n    }\r\n  }, [status]);\r\n\r\n  async function handleSubmit(data: FormValues) {\r\n    try {\r\n      setStatus(\"loading\");\r\n      setEmailValue(data.email);\r\n\r\n      if (onSubmit) {\r\n        await onSubmit(data);\r\n      } else {\r\n        // Simulate API call\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(\"Reset password request:\", data);\r\n      }\r\n\r\n      setStatus(\"success\");\r\n\r\n      // Focus success message for screen readers\r\n      setTimeout(() => {\r\n        if (successRef.current) {\r\n          successRef.current.focus();\r\n        }\r\n      }, 100);\r\n    } catch (error) {\r\n      console.error(\"Reset password error:\", error);\r\n      setStatus(\"error\");\r\n\r\n      // Focus error message for screen readers\r\n      setTimeout(() => {\r\n        if (errorRef.current) {\r\n          errorRef.current.focus();\r\n        }\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  // Function to handle resend\r\n  const handleResend = () => {\r\n    form.handleSubmit(handleSubmit)();\r\n  };\r\n\r\n  // Check if the form is in a loading state\r\n  const isFormLoading = status === \"loading\" || isLoading;\r\n\r\n  return (\r\n    <Card className={cn(\"w-full max-w-md mx-auto shadow-lg\", className)}>\r\n      <CardHeader className=\"space-y-1\">\r\n        <CardTitle className=\"text-2xl font-bold\">{title}</CardTitle>\r\n        <CardDescription>{description}</CardDescription>\r\n      </CardHeader>\r\n\r\n      {status !== \"success\" ? (\r\n        <>\r\n          {status === \"error\" && (\r\n            <div className=\"px-6\">\r\n              <Alert\r\n                variant=\"destructive\"\r\n                ref={errorRef}\r\n                tabIndex={-1}\r\n                role=\"alert\"\r\n              >\r\n                <AlertCircle className=\"h-4 w-4\" />\r\n                <AlertTitle>Error</AlertTitle>\r\n                <AlertDescription>{errorMessage}</AlertDescription>\r\n              </Alert>\r\n            </div>\r\n          )}\r\n\r\n          <Form {...form}>\r\n            <form\r\n              ref={formRef}\r\n              onSubmit={form.handleSubmit(handleSubmit)}\r\n              className=\"space-y-4\"\r\n              action={formAction}\r\n              noValidate\r\n            >\r\n              <CardContent>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor={emailId}>Email</FormLabel>\r\n                      <FormControl>\r\n                        <div className=\"relative\">\r\n                          <Input\r\n                            id={emailId}\r\n                            placeholder=\"name@example.com\"\r\n                            className=\"peer ps-9\"\r\n                            type=\"email\"\r\n                            autoComplete=\"email\"\r\n                            aria-required=\"true\"\r\n                            {...field}\r\n                            disabled={isFormLoading}\r\n                          />\r\n                          <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                            <AtSignIcon size={16} aria-hidden=\"true\" />\r\n                          </div>\r\n                        </div>\r\n                      </FormControl>\r\n                      <FormDescription>\r\n                        We'll send a password reset link to this email address\r\n                      </FormDescription>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </CardContent>\r\n\r\n              <CardFooter className=\"flex flex-col\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  className=\"w-full relative\"\r\n                  disabled={isFormLoading}\r\n                  variant=\"ringHover\"\r\n                  aria-label={\r\n                    isFormLoading ? \"Sending reset link...\" : buttonText\r\n                  }\r\n                >\r\n                  {isFormLoading ? (\r\n                    <>\r\n                      <Loader2\r\n                        className=\"mr-2 h-4 w-4 animate-spin\"\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                      <span>Sending reset link...</span>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <AtSignIcon className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n                      <span>{buttonText}</span>\r\n                    </>\r\n                  )}\r\n                  <span className=\"absolute inset-0\" aria-hidden=\"true\" />\r\n                </Button>\r\n\r\n                <p className=\"mt-4 text-center text-sm text-muted-foreground\">\r\n                  Remember your password?{\" \"}\r\n                  <Link\r\n                    href={loginUrl}\r\n                    className=\"text-primary font-medium hover:underline\"\r\n                  >\r\n                    Sign in\r\n                  </Link>\r\n                </p>\r\n              </CardFooter>\r\n            </form>\r\n          </Form>\r\n        </>\r\n      ) : (\r\n        <CardContent className=\"space-y-4\">\r\n          <div\r\n            className=\"flex flex-col items-center text-center space-y-2\"\r\n            ref={successRef}\r\n            tabIndex={-1}\r\n            role=\"alert\"\r\n            aria-live=\"polite\"\r\n          >\r\n            <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-2\">\r\n              <CheckCircle\r\n                className=\"h-6 w-6 text-primary\"\r\n                aria-hidden=\"true\"\r\n              />\r\n            </div>\r\n            <h3 className=\"text-lg font-medium\">Check your email</h3>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {successMessage}\r\n              {emailValue && (\r\n                <>\r\n                  <br />\r\n                  <br />\r\n                  We've sent an email to: <strong>{emailValue}</strong>\r\n                </>\r\n              )}\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"space-y-4 pt-4\">\r\n            <Button\r\n              variant=\"outline\"\r\n              className=\"w-full\"\r\n              onClick={() => setStatus(\"idle\")}\r\n            >\r\n              <ArrowLeft className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n              Back to reset password\r\n            </Button>\r\n\r\n            <div className=\"text-center\">\r\n              <p className=\"text-sm text-muted-foreground mb-2\">\r\n                Didn't receive the email?\r\n              </p>\r\n              <Button\r\n                variant=\"link\"\r\n                type=\"button\"\r\n                className=\"text-primary font-medium text-sm hover:underline\"\r\n                onClick={handleResend}\r\n                disabled={isFormLoading}\r\n              >\r\n                {isFormLoading ? (\r\n                  <>\r\n                    <Loader2\r\n                      className=\"mr-2 h-3 w-3 animate-spin\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    Resending...\r\n                  </>\r\n                ) : (\r\n                  \"Click to resend\"\r\n                )}\r\n              </Button>\r\n              <p className=\"text-xs text-muted-foreground mt-4\">\r\n                Please check your spam folder if you don't see the email in your\r\n                inbox.\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"pt-4 border-t\">\r\n            <p className=\"text-center text-sm text-muted-foreground\">\r\n              Remember your password?{\" \"}\r\n              <Link\r\n                href={loginUrl}\r\n                className=\"text-primary font-medium hover:underline\"\r\n              >\r\n                Sign in\r\n              </Link>\r\n            </p>\r\n          </div>\r\n        </CardContent>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
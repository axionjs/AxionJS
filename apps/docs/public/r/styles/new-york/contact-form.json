{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "contact-form",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A contact form with email sending functionality.",
  "dependencies": [
    "nodemailer",
    "zod",
    "date-fns",
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "textarea",
    "input",
    "form",
    "card",
    "dropdown-menu",
    "tabs",
    "badge",
    "use-toast",
    "toaster"
  ],
  "files": [
    {
      "path": "dynamic-components/contact-form/actions/contact-actions.ts",
      "content": "\"use server\";\r\n\r\nimport { z } from \"zod\";\r\nimport nodemailer from \"nodemailer\";\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { db } from \"@/registry/new-york/lib/db\";\r\n\r\n// Form validation schema\r\nconst formSchema = z.object({\r\n  name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\r\n  email: z.string().email({ message: \"Please enter a valid email address.\" }),\r\n  message: z\r\n    .string()\r\n    .min(10, { message: \"Message must be at least 10 characters.\" }),\r\n});\r\n\r\nexport async function getMessages() {\r\n  try {\r\n    const messages = await db.contactMessage.findMany({\r\n      orderBy: {\r\n        createdAt: \"desc\",\r\n      },\r\n    });\r\n    return messages;\r\n  } catch (error) {\r\n    console.error(\"Error fetching messages:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function sendEmail(data: unknown) {\r\n  // Validate form data\r\n  const result = formSchema.safeParse(data);\r\n\r\n  if (!result.success) {\r\n    return {\r\n      success: false,\r\n      error: \"Invalid form data. Please check your inputs.\",\r\n    };\r\n  }\r\n\r\n  const { name, email, message } = result.data;\r\n\r\n  try {\r\n    // 1. Store in database\r\n    await db.contactMessage.create({\r\n      data: {\r\n        name,\r\n        email,\r\n        message,\r\n        status: \"UNREAD\",\r\n        createdAt: new Date(),\r\n      },\r\n    });\r\n\r\n    // 2. Send email to admin\r\n    const transporter = nodemailer.createTransport({\r\n      host: process.env.EMAIL_SERVER_HOST,\r\n      port: Number(process.env.EMAIL_SERVER_PORT),\r\n      auth: {\r\n        user: process.env.EMAIL_SERVER_USER,\r\n        pass: process.env.EMAIL_SERVER_PASSWORD,\r\n      },\r\n    });\r\n\r\n    await transporter.sendMail({\r\n      from: process.env.EMAIL_FROM,\r\n      to: process.env.ADMIN_EMAIL,\r\n      subject: `New Contact Form Submission from ${name}`,\r\n      text: `\r\n        Name: ${name}\r\n        Email: ${email}\r\n        Message: ${message}\r\n      `,\r\n      html: `\r\n        <h2>New Contact Form Submission</h2>\r\n        <p><strong>Name:</strong> ${name}</p>\r\n        <p><strong>Email:</strong> ${email}</p>\r\n        <p><strong>Message:</strong> ${message}</p>\r\n      `,\r\n    });\r\n\r\n    revalidatePath(\"/admin/messages\");\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Error sending email:\", error);\r\n    return {\r\n      success: false,\r\n      error: \"Failed to send message. Please try again later.\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function updateMessageStatus(\r\n  id: string,\r\n  status: \"READ\" | \"UNREAD\",\r\n) {\r\n  try {\r\n    await db.contactMessage.update({\r\n      where: { id },\r\n      data: { status },\r\n    });\r\n\r\n    revalidatePath(\"/admin/messages\");\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Error updating message status:\", error);\r\n    return { success: false, error: \"Failed to update message status.\" };\r\n  }\r\n}\r\n\r\nexport async function deleteMessage(id: string) {\r\n  try {\r\n    await db.contactMessage.delete({\r\n      where: { id },\r\n    });\r\n\r\n    revalidatePath(\"/admin/messages\");\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Error deleting message:\", error);\r\n    return { success: false, error: \"Failed to delete message.\" };\r\n  }\r\n}\r\n\r\nexport async function getUnreadMessageCounts() {\r\n  const unreadCount = await db.contactMessage.count({\r\n    where: { status: \"UNREAD\" },\r\n  });\r\n  return {\r\n    unreadCount,\r\n  };\r\n}\r\nexport async function getTotalMessageCount() {\r\n  const totalMessages = await db.contactMessage.count();\r\n  return {\r\n    totalMessages,\r\n  };\r\n}\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalThis.prisma = db;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/contact-form/hooks/use-contact-form.ts",
      "content": "import { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\nimport { sendEmail } from \"@/registry/new-york/dynamic-components/contact-form/actions/contact-actions\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\n\r\nexport function useContactForm() {\r\n  const formSchema = z.object({\r\n    name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\r\n    email: z.string().email({ message: \"Please enter a valid email address.\" }),\r\n    message: z\r\n      .string()\r\n      .min(10, { message: \"Message must be at least 10 characters.\" }),\r\n  });\r\n\r\n  type FormValues = z.infer<typeof formSchema>;\r\n\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  async function onSubmit(data: FormValues) {\r\n    setIsPending(true);\r\n    setIsSuccess(false);\r\n\r\n    try {\r\n      const result = await sendEmail(data);\r\n      if (result.success) {\r\n        setIsSuccess(true);\r\n        toast({\r\n          title: \"Message sent!\",\r\n          description: \"We'll get back to you as soon as possible.\",\r\n          variant: \"default\",\r\n        });\r\n        form.reset();\r\n      } else {\r\n        toast({\r\n          title: \"Something went wrong\",\r\n          description: result.error || \"Please try again later.\",\r\n          variant: \"destructive\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to send\",\r\n        description: \"Please try again later.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsPending(false);\r\n    }\r\n  }\r\n\r\n  return { form, onSubmit, isPending, isSuccess };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "dynamic-components/contact-form/hooks/use-message-list.ts",
      "content": "import { useState } from \"react\";\r\n\r\nimport {\r\n  updateMessageStatus,\r\n  deleteMessage,\r\n} from \"@/registry/new-york/dynamic-components/contact-form/actions/contact-actions\";\r\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\n\r\nexport type Message = {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n  status: string;\r\n  createdAt: Date;\r\n};\r\n\r\nexport function useMessageList(initialMessages: Message[]) {\r\n  const [messages, setMessages] = useState(initialMessages);\r\n  const [activeTab, setActiveTab] = useState(\"all\");\r\n  const { toast } = useToast();\r\n\r\n  const filteredMessages = messages.filter((message) => {\r\n    if (activeTab === \"all\") return true;\r\n    if (activeTab === \"unread\") return message.status === \"UNREAD\";\r\n    if (activeTab === \"read\") return message.status === \"READ\";\r\n    return true;\r\n  });\r\n\r\n  const handleStatusUpdate = async (id: string, status: \"READ\" | \"UNREAD\") => {\r\n    const result = await updateMessageStatus(id, status);\r\n\r\n    if (result.success) {\r\n      setMessages(\r\n        messages.map((message) =>\r\n          message.id === id ? { ...message, status } : message,\r\n        ),\r\n      );\r\n\r\n      toast({\r\n        title: \"Status updated\",\r\n        description: `Message marked as ${status.toLowerCase()}`,\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"Error\",\r\n        description: result.error || \"Failed to update status\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    const result = await deleteMessage(id);\r\n\r\n    if (result.success) {\r\n      setMessages(messages.filter((message) => message.id !== id));\r\n\r\n      toast({\r\n        title: \"Message deleted\",\r\n        description: \"The message has been permanently deleted\",\r\n      });\r\n    } else {\r\n      toast({\r\n        title: \"Error\",\r\n        description: result.error || \"Failed to delete message\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return {\r\n    messages,\r\n    setActiveTab,\r\n    filteredMessages,\r\n    handleStatusUpdate,\r\n    handleDelete,\r\n  };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "dynamic-components/contact-form/components/contact-form.tsx",
      "content": "\"use client\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/registry/new-york/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\n\r\nimport { Loader2, ArrowRight, CheckCircle } from \"lucide-react\";\r\nimport { useContactForm } from \"@/registry/new-york/dynamic-components/contact-form/hooks/use-contact-form\";\r\n\r\nexport default function ContactForm() {\r\n  const { form, onSubmit, isPending, isSuccess } = useContactForm();\r\n\r\n  return (\r\n    <section className=\"w-full py-12 md:py-24 lg:py-32 bg-muted/30\">\r\n      <div className=\"container px-4 md:px-6\">\r\n        <div className=\"flex flex-col items-center justify-center space-y-4 text-center\">\r\n          <div className=\"space-y-2\">\r\n            <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl\">\r\n              Get in Touch\r\n            </h2>\r\n            <p className=\"max-w-[700px] text-muted-foreground md:text-xl/relaxed\">\r\n              Have questions or feedback? We'd love to hear from you.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"mx-auto max-w-[800px] mt-8\">\r\n          <Form {...form}>\r\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n              <div className=\"grid gap-6 sm:grid-cols-2\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"name\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"text-base\">Name</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          placeholder=\"Your name\"\r\n                          {...field}\r\n                          className=\"h-12 bg-background border-muted-foreground/20 focus-visible:ring-offset-0\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"text-base\">Email</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"email\"\r\n                          placeholder=\"your.email@example.com\"\r\n                          {...field}\r\n                          className=\"h-12 bg-background border-muted-foreground/20 focus-visible:ring-offset-0\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n              <FormField\r\n                control={form.control}\r\n                name=\"message\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel className=\"text-base\">Message</FormLabel>\r\n                    <FormControl>\r\n                      <Textarea\r\n                        placeholder=\"How can we help you?\"\r\n                        className=\"min-h-[150px] resize-none bg-background border-muted-foreground/20 focus-visible:ring-offset-0\"\r\n                        {...field}\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <div className=\"flex items-center justify-end\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  className=\"h-12 px-8 text-base transition-all duration-200 group\"\r\n                  disabled={isPending}\r\n                >\r\n                  {isPending ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      Sending...\r\n                    </>\r\n                  ) : isSuccess ? (\r\n                    <>\r\n                      <CheckCircle className=\"mr-2 h-4 w-4\" />\r\n                      Sent Successfully\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      Send Message\r\n                      <ArrowRight className=\"ml-2 h-4 w-4 transition-transform group-hover:translate-x-1\" />\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/contact-form/components/message-list.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/registry/new-york/ui/dropdown-menu\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { Badge } from \"@/registry/new-york/ui/badge\";\r\nimport {\r\n  Tabs,\r\n  TabsContent,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from \"@/registry/new-york/ui/tabs\";\r\n\r\nimport {\r\n  MoreVertical,\r\n  Mail,\r\n  MailOpen,\r\n  Trash2,\r\n  AlertCircle,\r\n} from \"lucide-react\";\r\nimport {\r\n  Message,\r\n  useMessageList,\r\n} from \"@/registry/new-york/dynamic-components/contact-form/hooks/use-message-list\";\r\n\r\nexport function MessageList({\r\n  initialMessages,\r\n}: {\r\n  initialMessages: Message[];\r\n}) {\r\n  const {\r\n    messages,\r\n    setActiveTab,\r\n    filteredMessages,\r\n    handleStatusUpdate,\r\n    handleDelete,\r\n  } = useMessageList(initialMessages);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Tabs defaultValue=\"all\" onValueChange={setActiveTab}>\r\n        <div className=\"flex justify-between items-center\">\r\n          <TabsList>\r\n            <TabsTrigger value=\"all\">All</TabsTrigger>\r\n            <TabsTrigger value=\"unread\">\r\n              Unread\r\n              <Badge variant=\"secondary\" className=\"ml-2\">\r\n                {messages.filter((m) => m.status === \"UNREAD\").length}\r\n              </Badge>\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"read\">Read</TabsTrigger>\r\n          </TabsList>\r\n        </div>\r\n\r\n        <TabsContent value=\"all\" className=\"mt-6\">\r\n          <MessageGrid\r\n            messages={filteredMessages}\r\n            onStatusUpdate={handleStatusUpdate}\r\n            onDelete={handleDelete}\r\n          />\r\n        </TabsContent>\r\n        <TabsContent value=\"unread\" className=\"mt-6\">\r\n          <MessageGrid\r\n            messages={filteredMessages}\r\n            onStatusUpdate={handleStatusUpdate}\r\n            onDelete={handleDelete}\r\n          />\r\n        </TabsContent>\r\n        <TabsContent value=\"read\" className=\"mt-6\">\r\n          <MessageGrid\r\n            messages={filteredMessages}\r\n            onStatusUpdate={handleStatusUpdate}\r\n            onDelete={handleDelete}\r\n          />\r\n        </TabsContent>\r\n        <TabsContent value=\"archived\" className=\"mt-6\">\r\n          <MessageGrid\r\n            messages={filteredMessages}\r\n            onStatusUpdate={handleStatusUpdate}\r\n            onDelete={handleDelete}\r\n          />\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {filteredMessages.length === 0 && (\r\n        <div className=\"flex flex-col items-center justify-center py-12 text-center\">\r\n          <AlertCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\r\n          <h3 className=\"text-lg font-medium\">No messages found</h3>\r\n          <p className=\"text-muted-foreground mt-2\">\r\n            There are no messages in this category.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MessageGrid({\r\n  messages,\r\n  onStatusUpdate,\r\n  onDelete,\r\n}: {\r\n  messages: Message[];\r\n  onStatusUpdate: (id: string, status: \"READ\" | \"UNREAD\") => void;\r\n  onDelete: (id: string) => void;\r\n}) {\r\n  return (\r\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n      {messages.map((message) => (\r\n        <MessageCard\r\n          key={message.id}\r\n          message={message}\r\n          onStatusUpdate={onStatusUpdate}\r\n          onDelete={onDelete}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MessageCard({\r\n  message,\r\n  onStatusUpdate,\r\n  onDelete,\r\n}: {\r\n  message: Message;\r\n  onStatusUpdate: (id: string, status: \"READ\" | \"UNREAD\") => void;\r\n  onDelete: (id: string) => void;\r\n}) {\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  return (\r\n    <Card className={message.status === \"UNREAD\" ? \"border-primary/50\" : \"\"}>\r\n      <CardHeader className=\"pb-3\">\r\n        <div className=\"flex justify-between items-start\">\r\n          <div>\r\n            <CardTitle className=\"text-base\">{message.name}</CardTitle>\r\n            <CardDescription className=\"text-sm truncate\">\r\n              {message.email}\r\n            </CardDescription>\r\n          </div>\r\n          <div className=\"flex items-center\">\r\n            {message.status === \"UNREAD\" && (\r\n              <Badge variant=\"default\" className=\"mr-2\">\r\n                New\r\n              </Badge>\r\n            )}\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger asChild>\r\n                <Button variant=\"ghost\" size=\"icon\">\r\n                  <MoreVertical className=\"h-4 w-4\" />\r\n                  <span className=\"sr-only\">Actions</span>\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n              <DropdownMenuContent align=\"end\">\r\n                {message.status === \"UNREAD\" ? (\r\n                  <DropdownMenuItem\r\n                    onClick={() => onStatusUpdate(message.id, \"READ\")}\r\n                  >\r\n                    <MailOpen className=\"h-4 w-4 mr-2\" />\r\n                    Mark as read\r\n                  </DropdownMenuItem>\r\n                ) : (\r\n                  <DropdownMenuItem\r\n                    onClick={() => onStatusUpdate(message.id, \"UNREAD\")}\r\n                  >\r\n                    <Mail className=\"h-4 w-4 mr-2\" />\r\n                    Mark as unread\r\n                  </DropdownMenuItem>\r\n                )}\r\n\r\n                <DropdownMenuItem\r\n                  onClick={() => onDelete(message.id)}\r\n                  className=\"text-destructive focus:text-destructive\"\r\n                >\r\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                  Delete\r\n                </DropdownMenuItem>\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <p className={`text-sm ${expanded ? \"\" : \"line-clamp-3\"}`}>\r\n          {message.message}\r\n        </p>\r\n        {message.message.length > 150 && (\r\n          <Button\r\n            variant=\"link\"\r\n            className=\"p-0 h-auto mt-1 text-xs\"\r\n            onClick={() => setExpanded(!expanded)}\r\n          >\r\n            {expanded ? \"Show less\" : \"Show more\"}\r\n          </Button>\r\n        )}\r\n      </CardContent>\r\n\r\n      <CardFooter className=\"pt-1 text-xs text-muted-foreground\">\r\n        {formatDistanceToNow(new Date(message.createdAt), { addSuffix: true })}\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/contact-form/admin/page.tsx",
      "content": "import {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport Link from \"next/link\";\r\nimport { MessageSquare, ArrowRight } from \"lucide-react\";\r\nimport {\r\n  getTotalMessageCount,\r\n  getUnreadMessageCounts,\r\n} from \"@/registry/new-york/dynamic-components/contact-form/actions/contact-actions\";\r\n\r\nexport default async function AdminDashboard() {\r\n  const { unreadCount } = await getUnreadMessageCounts();\r\n  const { totalMessages } = await getTotalMessageCount();\r\n\r\n  return (\r\n    <div className=\"container py-10\">\r\n      <h1 className=\"text-3xl font-bold mb-8\">Dashboard</h1>\r\n\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">\r\n              Unread Messages\r\n            </CardTitle>\r\n            <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{unreadCount}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              Out of {totalMessages} total messages\r\n            </p>\r\n            <div className=\"mt-4\">\r\n              <Link\r\n                href=\"/admin/messages\"\r\n                className=\"text-sm text-primary flex items-center\"\r\n              >\r\n                View all messages\r\n                <ArrowRight className=\"ml-1 h-4 w-4\" />\r\n              </Link>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(contact-form)/admin/page.tsx"
    },
    {
      "path": "dynamic-components/contact-form/admin/messages/page.tsx",
      "content": "import { getMessages } from \"@/registry/new-york/dynamic-components/contact-form/actions/contact-actions\";\r\nimport { MessageList } from \"@/registry/new-york/dynamic-components/contact-form/components/message-list\";\r\n\r\nexport default async function AdminMessagesPage() {\r\n  const messages = await getMessages();\r\n\r\n  return (\r\n    <div className=\"container py-10\">\r\n      <h1 className=\"text-3xl font-bold mb-8\">Contact Messages</h1>\r\n      <MessageList initialMessages={messages} />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(contact-form)/admin/messages/page.tsx"
    },
    {
      "path": "dynamic-components/contact-form/admin/layout.tsx",
      "content": "import type React from \"react\";\r\nimport type { Metadata } from \"next\";\r\nimport Link from \"next/link\";\r\nimport { LayoutDashboard, MessageSquare } from \"lucide-react\";\r\nimport { Toaster } from \"@/registry/new-york/ui/toaster\";\r\n\r\nexport const metadata: Metadata = {\r\n  title: \"Admin Dashboard\",\r\n  description:\r\n    \"Admin dashboard for managing contact messages and other admin tasks.\",\r\n};\r\n\r\nexport default function AdminLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  return (\r\n    <div className=\"flex min-h-screen flex-col\">\r\n      <header className=\"sticky top-0 z-10 border-b bg-background\">\r\n        <div className=\"container flex h-16 items-center justify-between py-4\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Link href=\"/admin\" className=\"font-bold\">\r\n              Admin Dashboard\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"container flex-1 items-start md:grid md:grid-cols-[220px_1fr] md:gap-6 lg:grid-cols-[240px_1fr] lg:gap-10\">\r\n        <aside className=\"fixed top-16 z-30 hidden h-[calc(100vh-4rem)] w-full shrink-0 overflow-y-auto border-r md:sticky md:block\">\r\n          <div className=\"py-6 pr-6\">\r\n            <nav className=\"flex flex-col gap-2\">\r\n              <Link\r\n                href=\"/admin\"\r\n                className=\"w-auto flex items-center justify-start gap-2 rounded-md bg-background px-4 py-2 font-medium transition-colors hover:bg-accent focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50 text-muted-foreground hover:text-foreground\"\r\n              >\r\n                <LayoutDashboard className=\"h-4 w-4\" />\r\n                Dashboard\r\n              </Link>\r\n              <Link\r\n                href=\"/admin/messages\"\r\n                className=\"w-auto flex items-center justify-start gap-2 rounded-md bg-background px-4 py-2 font-medium transition-colors hover:bg-accent focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50 text-muted-foreground hover:text-foreground\"\r\n              >\r\n                <MessageSquare className=\"h-4 w-4\" />\r\n                Messages\r\n              </Link>\r\n            </nav>\r\n          </div>\r\n        </aside>\r\n        <main className=\"flex w-full flex-col overflow-hidden\">{children}</main>\r\n        <Toaster />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:file",
      "target": "app/(contact-form)/admin/layout.tsx"
    }
  ]
}
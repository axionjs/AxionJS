{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "contact-form",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A contact form with email sending functionality.",
  "dependencies": [
    "nodemailer",
    "zod",
    "date-fns",
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "textarea",
    "input",
    "form",
    "card",
    "dropdown-menu",
    "tabs",
    "badge",
    "use-toast",
    "toaster"
  ],
  "files": [
    {
      "path": "dynamic-components/contact-form/actions/contact-actions.ts",
      "content": "\"use server\";\n\nimport { z } from \"zod\";\nimport nodemailer from \"nodemailer\";\nimport { revalidatePath } from \"next/cache\";\nimport { db } from \"@/registry/new-york/lib/db\";\n\n// Form validation schema\nconst formSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\n  email: z.string().email({ message: \"Please enter a valid email address.\" }),\n  message: z\n    .string()\n    .min(10, { message: \"Message must be at least 10 characters.\" }),\n});\n\nexport async function getMessages() {\n  try {\n    const messages = await db.contactMessage.findMany({\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n    return messages;\n  } catch (error) {\n    console.error(\"Error fetching messages:\", error);\n    return [];\n  }\n}\n\nexport async function sendEmail(data: unknown) {\n  // Validate form data\n  const result = formSchema.safeParse(data);\n\n  if (!result.success) {\n    return {\n      success: false,\n      error: \"Invalid form data. Please check your inputs.\",\n    };\n  }\n\n  const { name, email, message } = result.data;\n\n  try {\n    // 1. Store in database\n    await db.contactMessage.create({\n      data: {\n        name,\n        email,\n        message,\n        status: \"UNREAD\",\n        createdAt: new Date(),\n      },\n    });\n\n    // 2. Send email to admin\n    const transporter = nodemailer.createTransport({\n      host: process.env.EMAIL_SERVER_HOST,\n      port: Number(process.env.EMAIL_SERVER_PORT),\n      auth: {\n        user: process.env.EMAIL_SERVER_USER,\n        pass: process.env.EMAIL_SERVER_PASSWORD,\n      },\n    });\n\n    await transporter.sendMail({\n      from: process.env.EMAIL_FROM,\n      to: process.env.ADMIN_EMAIL,\n      subject: `New Contact Form Submission from ${name}`,\n      text: `\n        Name: ${name}\n        Email: ${email}\n        Message: ${message}\n      `,\n      html: `\n        <h2>New Contact Form Submission</h2>\n        <p><strong>Name:</strong> ${name}</p>\n        <p><strong>Email:</strong> ${email}</p>\n        <p><strong>Message:</strong> ${message}</p>\n      `,\n    });\n\n    revalidatePath(\"/admin/messages\");\n\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    return {\n      success: false,\n      error: \"Failed to send message. Please try again later.\",\n    };\n  }\n}\n\nexport async function updateMessageStatus(\n  id: string,\n  status: \"READ\" | \"UNREAD\",\n) {\n  try {\n    await db.contactMessage.update({\n      where: { id },\n      data: { status },\n    });\n\n    revalidatePath(\"/admin/messages\");\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error updating message status:\", error);\n    return { success: false, error: \"Failed to update message status.\" };\n  }\n}\n\nexport async function deleteMessage(id: string) {\n  try {\n    await db.contactMessage.delete({\n      where: { id },\n    });\n\n    revalidatePath(\"/admin/messages\");\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error deleting message:\", error);\n    return { success: false, error: \"Failed to delete message.\" };\n  }\n}\n\nexport async function getUnreadMessageCounts() {\n  const unreadCount = await db.contactMessage.count({\n    where: { status: \"UNREAD\" },\n  });\n  return {\n    unreadCount,\n  };\n}\nexport async function getTotalMessageCount() {\n  const totalMessages = await db.contactMessage.count();\n  return {\n    totalMessages,\n  };\n}\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/contact-form/hooks/use-contact-form.ts",
      "content": "import { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport { sendEmail } from \"@/registry/new-york/dynamic-components/contact-form/actions/contact-actions\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nexport function useContactForm() {\n  const formSchema = z.object({\n    name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\n    email: z.string().email({ message: \"Please enter a valid email address.\" }),\n    message: z\n      .string()\n      .min(10, { message: \"Message must be at least 10 characters.\" }),\n  });\n\n  type FormValues = z.infer<typeof formSchema>;\n\n  const [isPending, setIsPending] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      message: \"\",\n    },\n  });\n\n  async function onSubmit(data: FormValues) {\n    setIsPending(true);\n    setIsSuccess(false);\n\n    try {\n      const result = await sendEmail(data);\n      if (result.success) {\n        setIsSuccess(true);\n        toast({\n          title: \"Message sent!\",\n          description: \"We'll get back to you as soon as possible.\",\n          variant: \"default\",\n        });\n        form.reset();\n      } else {\n        toast({\n          title: \"Something went wrong\",\n          description: result.error || \"Please try again later.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Failed to send\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsPending(false);\n    }\n  }\n\n  return { form, onSubmit, isPending, isSuccess };\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "dynamic-components/contact-form/hooks/use-message-list.ts",
      "content": "import { useState } from \"react\";\n\nimport {\n  updateMessageStatus,\n  deleteMessage,\n} from \"@/registry/new-york/dynamic-components/contact-form/actions/contact-actions\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\n\nexport type Message = {\n  id: string;\n  name: string;\n  email: string;\n  message: string;\n  status: string;\n  createdAt: Date;\n};\n\nexport function useMessageList(initialMessages: Message[]) {\n  const [messages, setMessages] = useState(initialMessages);\n  const [activeTab, setActiveTab] = useState(\"all\");\n  const { toast } = useToast();\n\n  const filteredMessages = messages.filter((message) => {\n    if (activeTab === \"all\") return true;\n    if (activeTab === \"unread\") return message.status === \"UNREAD\";\n    if (activeTab === \"read\") return message.status === \"READ\";\n    return true;\n  });\n\n  const handleStatusUpdate = async (id: string, status: \"READ\" | \"UNREAD\") => {\n    const result = await updateMessageStatus(id, status);\n\n    if (result.success) {\n      setMessages(\n        messages.map((message) =>\n          message.id === id ? { ...message, status } : message,\n        ),\n      );\n\n      toast({\n        title: \"Status updated\",\n        description: `Message marked as ${status.toLowerCase()}`,\n      });\n    } else {\n      toast({\n        title: \"Error\",\n        description: result.error || \"Failed to update status\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    const result = await deleteMessage(id);\n\n    if (result.success) {\n      setMessages(messages.filter((message) => message.id !== id));\n\n      toast({\n        title: \"Message deleted\",\n        description: \"The message has been permanently deleted\",\n      });\n    } else {\n      toast({\n        title: \"Error\",\n        description: result.error || \"Failed to delete message\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return {\n    messages,\n    setActiveTab,\n    filteredMessages,\n    handleStatusUpdate,\n    handleDelete,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "dynamic-components/contact-form/components/contact-form.tsx",
      "content": "\"use client\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/registry/new-york/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\n\nimport { Loader2, ArrowRight, CheckCircle } from \"lucide-react\";\nimport { useContactForm } from \"@/registry/new-york/dynamic-components/contact-form/hooks/use-contact-form\";\n\nexport default function ContactForm() {\n  const { form, onSubmit, isPending, isSuccess } = useContactForm();\n\n  return (\n    <section className=\"w-full py-12 md:py-24 lg:py-32  mx-auto\">\n      <div className=\"container px-4 md:px-6\">\n        <div className=\"flex flex-col items-center justify-center space-y-4 text-center\">\n          <div className=\"space-y-2\">\n            <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl\">\n              Get in Touch\n            </h2>\n            <p className=\"max-w-[700px] text-muted-foreground md:text-xl/relaxed\">\n              Have questions or feedback? We'd love to hear from you.\n            </p>\n          </div>\n        </div>\n        <div className=\"mx-auto max-w-[800px] mt-8\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              <div className=\"grid gap-6 sm:grid-cols-2\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-base\">Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Your name\"\n                          {...field}\n                          className=\"h-12 bg-background border-muted-foreground/20 focus-visible:ring-offset-0\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-base\">Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"your.email@example.com\"\n                          {...field}\n                          className=\"h-12 bg-background border-muted-foreground/20 focus-visible:ring-offset-0\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={form.control}\n                name=\"message\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-base\">Message</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"How can we help you?\"\n                        className=\"min-h-[150px] resize-none bg-background border-muted-foreground/20 focus-visible:ring-offset-0\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex items-center justify-end\">\n                <Button\n                  type=\"submit\"\n                  className=\"h-12 px-8 text-base transition-all duration-200 group\"\n                  disabled={isPending}\n                >\n                  {isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Sending...\n                    </>\n                  ) : isSuccess ? (\n                    <>\n                      <CheckCircle className=\"mr-2 h-4 w-4\" />\n                      Sent Successfully\n                    </>\n                  ) : (\n                    <>\n                      Send Message\n                      <ArrowRight className=\"ml-2 h-4 w-4 transition-transform group-hover:translate-x-1\" />\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </div>\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/contact-form/components/message-list.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Badge } from \"@/registry/new-york/ui/badge\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/registry/new-york/ui/tabs\";\n\nimport {\n  MoreVertical,\n  Mail,\n  MailOpen,\n  Trash2,\n  AlertCircle,\n} from \"lucide-react\";\nimport {\n  Message,\n  useMessageList,\n} from \"@/registry/new-york/dynamic-components/contact-form/hooks/use-message-list\";\n\nexport function MessageList({\n  initialMessages,\n}: {\n  initialMessages: Message[];\n}) {\n  const {\n    messages,\n    setActiveTab,\n    filteredMessages,\n    handleStatusUpdate,\n    handleDelete,\n  } = useMessageList(initialMessages);\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs defaultValue=\"all\" onValueChange={setActiveTab}>\n        <div className=\"flex justify-between items-center\">\n          <TabsList>\n            <TabsTrigger value=\"all\">All</TabsTrigger>\n            <TabsTrigger value=\"unread\">\n              Unread\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                {messages.filter((m) => m.status === \"UNREAD\").length}\n              </Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"read\">Read</TabsTrigger>\n          </TabsList>\n        </div>\n\n        <TabsContent value=\"all\" className=\"mt-6\">\n          <MessageGrid\n            messages={filteredMessages}\n            onStatusUpdate={handleStatusUpdate}\n            onDelete={handleDelete}\n          />\n        </TabsContent>\n        <TabsContent value=\"unread\" className=\"mt-6\">\n          <MessageGrid\n            messages={filteredMessages}\n            onStatusUpdate={handleStatusUpdate}\n            onDelete={handleDelete}\n          />\n        </TabsContent>\n        <TabsContent value=\"read\" className=\"mt-6\">\n          <MessageGrid\n            messages={filteredMessages}\n            onStatusUpdate={handleStatusUpdate}\n            onDelete={handleDelete}\n          />\n        </TabsContent>\n        <TabsContent value=\"archived\" className=\"mt-6\">\n          <MessageGrid\n            messages={filteredMessages}\n            onStatusUpdate={handleStatusUpdate}\n            onDelete={handleDelete}\n          />\n        </TabsContent>\n      </Tabs>\n\n      {filteredMessages.length === 0 && (\n        <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n          <AlertCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium\">No messages found</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            There are no messages in this category.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction MessageGrid({\n  messages,\n  onStatusUpdate,\n  onDelete,\n}: {\n  messages: Message[];\n  onStatusUpdate: (id: string, status: \"READ\" | \"UNREAD\") => void;\n  onDelete: (id: string) => void;\n}) {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n      {messages.map((message) => (\n        <MessageCard\n          key={message.id}\n          message={message}\n          onStatusUpdate={onStatusUpdate}\n          onDelete={onDelete}\n        />\n      ))}\n    </div>\n  );\n}\n\nfunction MessageCard({\n  message,\n  onStatusUpdate,\n  onDelete,\n}: {\n  message: Message;\n  onStatusUpdate: (id: string, status: \"READ\" | \"UNREAD\") => void;\n  onDelete: (id: string) => void;\n}) {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <Card className={message.status === \"UNREAD\" ? \"border-primary/50\" : \"\"}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle className=\"text-base\">{message.name}</CardTitle>\n            <CardDescription className=\"text-sm truncate\">\n              {message.email}\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center\">\n            {message.status === \"UNREAD\" && (\n              <Badge variant=\"default\" className=\"mr-2\">\n                New\n              </Badge>\n            )}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\">\n                  <MoreVertical className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">Actions</span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {message.status === \"UNREAD\" ? (\n                  <DropdownMenuItem\n                    onClick={() => onStatusUpdate(message.id, \"READ\")}\n                  >\n                    <MailOpen className=\"h-4 w-4 mr-2\" />\n                    Mark as read\n                  </DropdownMenuItem>\n                ) : (\n                  <DropdownMenuItem\n                    onClick={() => onStatusUpdate(message.id, \"UNREAD\")}\n                  >\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    Mark as unread\n                  </DropdownMenuItem>\n                )}\n\n                <DropdownMenuItem\n                  onClick={() => onDelete(message.id)}\n                  className=\"text-destructive focus:text-destructive\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <p className={`text-sm ${expanded ? \"\" : \"line-clamp-3\"}`}>\n          {message.message}\n        </p>\n        {message.message.length > 150 && (\n          <Button\n            variant=\"link\"\n            className=\"p-0 h-auto mt-1 text-xs\"\n            onClick={() => setExpanded(!expanded)}\n          >\n            {expanded ? \"Show less\" : \"Show more\"}\n          </Button>\n        )}\n      </CardContent>\n\n      <CardFooter className=\"pt-1 text-xs text-muted-foreground\">\n        {formatDistanceToNow(new Date(message.createdAt), { addSuffix: true })}\n      </CardFooter>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/contact-form/admin/page.tsx",
      "content": "import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport Link from \"next/link\";\nimport { MessageSquare, ArrowRight } from \"lucide-react\";\nimport {\n  getTotalMessageCount,\n  getUnreadMessageCounts,\n} from \"@/registry/new-york/dynamic-components/contact-form/actions/contact-actions\";\n\nexport default async function AdminDashboard() {\n  const { unreadCount } = await getUnreadMessageCounts();\n  const { totalMessages } = await getTotalMessageCount();\n\n  return (\n    <div className=\"container py-10\">\n      <h1 className=\"text-3xl font-bold mb-8\">Dashboard</h1>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm font-medium\">\n              Unread Messages\n            </CardTitle>\n            <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{unreadCount}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Out of {totalMessages} total messages\n            </p>\n            <div className=\"mt-4\">\n              <Link\n                href=\"/admin/messages\"\n                className=\"text-sm text-primary flex items-center\"\n              >\n                View all messages\n                <ArrowRight className=\"ml-1 h-4 w-4\" />\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(contact-form)/admin/page.tsx"
    },
    {
      "path": "dynamic-components/contact-form/admin/messages/page.tsx",
      "content": "import { getMessages } from \"@/registry/new-york/dynamic-components/contact-form/actions/contact-actions\";\nimport { MessageList } from \"@/registry/new-york/dynamic-components/contact-form/components/message-list\";\n\nexport default async function AdminMessagesPage() {\n  const messages = await getMessages();\n\n  return (\n    <div className=\"container py-10\">\n      <h1 className=\"text-3xl font-bold mb-8\">Contact Messages</h1>\n      <MessageList initialMessages={messages} />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(contact-form)/admin/messages/page.tsx"
    },
    {
      "path": "dynamic-components/contact-form/admin/layout.tsx",
      "content": "import type React from \"react\";\nimport type { Metadata } from \"next\";\nimport Link from \"next/link\";\nimport { LayoutDashboard, MessageSquare } from \"lucide-react\";\nimport { Toaster } from \"@/registry/new-york/ui/toaster\";\n\nexport const metadata: Metadata = {\n  title: \"Admin Dashboard\",\n  description:\n    \"Admin dashboard for managing contact messages and other admin tasks.\",\n};\n\nexport default function AdminLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <div className=\"flex min-h-screen flex-col\">\n      <header className=\"sticky top-0 z-10 border-b bg-background\">\n        <div className=\"container flex h-16 items-center justify-between py-4\">\n          <div className=\"flex items-center gap-2\">\n            <Link href=\"/admin\" className=\"font-bold\">\n              Admin Dashboard\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container flex-1 items-start md:grid md:grid-cols-[220px_1fr] md:gap-6 lg:grid-cols-[240px_1fr] lg:gap-10\">\n        <aside className=\"fixed top-16 z-30 hidden h-[calc(100vh-4rem)] w-full shrink-0 overflow-y-auto border-r md:sticky md:block\">\n          <div className=\"py-6 pr-6\">\n            <nav className=\"flex flex-col gap-2\">\n              <Link\n                href=\"/admin\"\n                className=\"w-auto flex items-center justify-start gap-2 rounded-md bg-background px-4 py-2 font-medium transition-colors hover:bg-accent focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50 text-muted-foreground hover:text-foreground\"\n              >\n                <LayoutDashboard className=\"h-4 w-4\" />\n                Dashboard\n              </Link>\n              <Link\n                href=\"/admin/messages\"\n                className=\"w-auto flex items-center justify-start gap-2 rounded-md bg-background px-4 py-2 font-medium transition-colors hover:bg-accent focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50 text-muted-foreground hover:text-foreground\"\n              >\n                <MessageSquare className=\"h-4 w-4\" />\n                Messages\n              </Link>\n            </nav>\n          </div>\n        </aside>\n        <main className=\"flex w-full flex-col overflow-hidden\">{children}</main>\n        <Toaster />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/(contact-form)/admin/layout.tsx"
    }
  ]
}
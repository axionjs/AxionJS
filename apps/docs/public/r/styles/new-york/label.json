{
  "$schema": "http://localhost:3000/schema/registry-item.json",
  "name": "label",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "@radix-ui/react-label"
  ],
  "files": [
    {
      "path": "ui/label.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { cva, VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n  {\n    variants: {\n      variant: {\n        default: \"text-foreground\",\n        error: \"text-destructive\",\n      },\n      size: {\n        default: \"text-sm\",\n        large: \"text-base\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\ninterface LabelProps\n  extends React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>,\n    VariantProps<typeof labelVariants> {\n  helperText?: string;\n  error?: string;\n  required?: boolean;\n  htmlFor?: any;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst Label = React.forwardRef<HTMLLabelElement, LabelProps>(\n  (\n    {\n      className,\n      children,\n      variant,\n      size,\n      htmlFor,\n      required,\n      error,\n      helperText,\n      ...props\n    },\n    ref,\n  ) => {\n    const id = React.useId();\n    const errorId = `${id}-error`;\n    const helperId = `${id}-helper`;\n\n    return (\n      <div className=\"flex flex-col space-y-1\">\n        <LabelPrimitive.Root\n          ref={ref}\n          htmlFor={htmlFor}\n          className={cn(labelVariants({ variant, size, className }))}\n          {...props}\n        >\n          {children}\n          {required && (\n            <span className=\"ml-1 text-destructive\" aria-hidden=\"true\">\n              *\n            </span>\n          )}\n        </LabelPrimitive.Root>\n        {helperText && !error && (\n          <p id={helperId} className=\"text-sm text-muted-foreground\">\n            {helperText}\n          </p>\n        )}\n        {error && (\n          <p id={errorId} className=\"text-sm font-medium text-destructive\">\n            {error}\n          </p>\n        )}\n      </div>\n    );\n  },\n);\nLabel.displayName = \"Label\";\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "event-registration-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A form for event registration.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card",
    "radio-group",
    "checkbox",
    "select",
    "use-toast",
    "badge",
    "tooltip"
  ],
  "files": [
    {
      "path": "blocks/event-registration-form-1.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Loader2, Calendar, MapPin, Users, CheckCircle2 } from \"lucide-react\";\n\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\";\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport { Badge } from \"@/registry/new-york/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/new-york/ui/tooltip\";\n\n// Define registration form validation schema\nconst formSchema = z.object({\n  firstName: z\n    .string()\n    .min(2, { message: \"First name must be at least 2 characters\" }),\n  lastName: z\n    .string()\n    .min(2, { message: \"Last name must be at least 2 characters\" }),\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n  ticketType: z.enum([\"standard\", \"vip\", \"premium\"], {\n    required_error: \"Please select a ticket type\",\n  }),\n  dietaryRequirements: z.string().optional(),\n  marketingEmails: z.boolean().optional(),\n  companyName: z.string().optional(),\n  specialRequests: z.string().optional(),\n  emergencyContact: z.string().optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\n// Define ticket types with additional information\ninterface TicketType {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  features: string[];\n  badge?: {\n    text: string;\n    variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\";\n  };\n}\n\nconst defaultTickets: TicketType[] = [\n  {\n    id: \"standard\",\n    name: \"Standard Ticket\",\n    description: \"Access to all sessions and workshops\",\n    price: 99,\n    features: [\"All sessions\", \"Workshop access\", \"Event app access\"],\n  },\n  {\n    id: \"premium\",\n    name: \"Premium Ticket\",\n    description: \"Standard + lunch and networking event\",\n    price: 199,\n    features: [\n      \"All sessions\",\n      \"Workshop access\",\n      \"Event app access\",\n      \"Lunch included\",\n      \"Networking event\",\n    ],\n    badge: {\n      text: \"Popular\",\n      variant: \"default\",\n    },\n  },\n  {\n    id: \"vip\",\n    name: \"VIP Ticket\",\n    description: \"Premium + exclusive Q&A session with speakers\",\n    price: 299,\n    features: [\n      \"All sessions\",\n      \"Workshop access\",\n      \"Event app access\",\n      \"Lunch included\",\n      \"Networking event\",\n      \"Exclusive Q&A session\",\n      \"VIP lounge access\",\n    ],\n    badge: {\n      text: \"Best Value\",\n      variant: \"secondary\",\n    },\n  },\n];\n\n// Define dietary requirements options\nconst dietaryOptions = [\n  { value: \"none\", label: \"None\" },\n  { value: \"vegetarian\", label: \"Vegetarian\" },\n  { value: \"vegan\", label: \"Vegan\" },\n  { value: \"gluten-free\", label: \"Gluten-free\" },\n  { value: \"dairy-free\", label: \"Dairy-free\" },\n  { value: \"other\", label: \"Other (please specify)\" },\n];\n\ninterface EventRegistrationFormProps {\n  /**\n   * Function to handle form submission\n   */\n  onRegister?: (values: FormValues) => Promise<void>;\n  /**\n   * URL to redirect to after successful registration\n   */\n  redirectTo?: string;\n  /**\n   * Custom form action for server-side form processing\n   */\n  formAction?: string;\n  /**\n   * Available ticket types\n   */\n  ticketTypes?: TicketType[];\n  /**\n   * Event date string\n   */\n  eventDate?: string;\n  /**\n   * Event location\n   */\n  eventLocation?: string;\n  /**\n   * Max number of attendees\n   */\n  maxAttendees?: number;\n  /**\n   * Currency symbol for ticket prices\n   */\n  currencySymbol?: string;\n  /**\n   * Whether to show additional fields\n   */\n  showAdditionalFields?: boolean;\n  /**\n   * Whether to show dietary requirements field\n   */\n  showDietaryRequirements?: boolean;\n  /**\n   * Custom CSS class name\n   */\n  className?: string;\n}\n\nexport default function EventRegistrationForm({\n  onRegister,\n  redirectTo,\n  formAction,\n  ticketTypes = defaultTickets,\n  eventDate = \"April 15-16, 2025\",\n  eventLocation = \"Tech Convention Center, San Francisco, CA\",\n  maxAttendees = 500,\n  currencySymbol = \"$\",\n  showAdditionalFields = false,\n  showDietaryRequirements = true,\n  className,\n}: EventRegistrationFormProps) {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  const { toast } = useToast();\n  const formRef = React.useRef<HTMLFormElement>(null);\n  const successRef = React.useRef<HTMLDivElement>(null);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      ticketType: undefined,\n      dietaryRequirements: \"\",\n      marketingEmails: false,\n      companyName: \"\",\n      specialRequests: \"\",\n      emergencyContact: \"\",\n    },\n    mode: \"onBlur\",\n  });\n\n  // Get the selected ticket type\n  const selectedTicketType = form.watch(\"ticketType\");\n\n  // Get the selected ticket details\n  const selectedTicket = React.useMemo(() => {\n    if (!selectedTicketType) return null;\n    return (\n      ticketTypes.find((ticket) => ticket.id === selectedTicketType) || null\n    );\n  }, [selectedTicketType, ticketTypes]);\n\n  // Format currency\n  const formatCurrency = (amount: number) => {\n    return `${currencySymbol}${amount}`;\n  };\n\n  async function onSubmit(data: FormValues) {\n    try {\n      setIsLoading(true);\n\n      // Use provided callback or simulate API call\n      if (onRegister) {\n        await onRegister(data);\n      } else {\n        // Simulate API call\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(\"Registration data:\", data);\n      }\n\n      setIsSubmitted(true);\n\n      toast({\n        title: \"Registration successful!\",\n        description: \"You've been registered for the event.\",\n      });\n\n      // Focus success message for accessibility\n      setTimeout(() => {\n        if (successRef.current) {\n          successRef.current.focus();\n        }\n      }, 100);\n\n      // Redirect if specified\n      if (redirectTo) {\n        window.location.href = redirectTo;\n      }\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n\n      toast({\n        title: \"Registration failed\",\n        description:\n          \"There was a problem with your registration. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <Card className={cn(\"w-full max-w-2xl mx-auto shadow-lg\", className)}>\n      <CardHeader className=\"space-y-1 md:relative flex flex-col items-start\">\n        <CardTitle className=\"text-2xl font-bold\">Event Registration</CardTitle>\n        <CardDescription>\n          Register for our upcoming event on {eventDate}\n        </CardDescription>\n\n        {/* Capacity indicator */}\n        <div className=\"md:absolute top-5 right-5\">\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <Users className=\"h-4 w-4 mr-1\" aria-hidden=\"true\" />\n                  <span>Limited Capacity</span>\n                </div>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Only {maxAttendees} spots available</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </CardHeader>\n\n      {isSubmitted ? (\n        <div\n          ref={successRef}\n          tabIndex={-1}\n          role=\"alert\"\n          aria-live=\"polite\"\n          className=\"p-6 space-y-4 flex flex-col items-center text-center\"\n        >\n          <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center\">\n            <CheckCircle2 className=\"h-8 w-8 text-primary\" aria-hidden=\"true\" />\n          </div>\n          <h2 className=\"text-xl font-bold\">Registration Confirmed!</h2>\n          <p className=\"text-muted-foreground\">\n            Thank you for registering for our event. We've sent a confirmation\n            email to {form.getValues().email} with all the details.\n          </p>\n\n          <div className=\"mt-4 w-full max-w-md p-4 border rounded-md bg-muted/50\">\n            <div className=\"text-left\">\n              <p className=\"font-medium mb-2\">Registration Details:</p>\n              <ul className=\"space-y-2 text-sm\">\n                <li>\n                  <span className=\"text-muted-foreground\">Name:</span>{\" \"}\n                  {form.getValues().firstName} {form.getValues().lastName}\n                </li>\n                <li>\n                  <span className=\"text-muted-foreground\">Email:</span>{\" \"}\n                  {form.getValues().email}\n                </li>\n                <li>\n                  <span className=\"text-muted-foreground\">Ticket Type:</span>{\" \"}\n                  {\n                    ticketTypes.find(\n                      (t) => t.id === form.getValues().ticketType,\n                    )?.name\n                  }\n                </li>\n                {form.getValues().dietaryRequirements && (\n                  <li>\n                    <span className=\"text-muted-foreground\">\n                      Dietary Requirements:\n                    </span>{\" \"}\n                    {\n                      dietaryOptions.find(\n                        (o) => o.value === form.getValues().dietaryRequirements,\n                      )?.label\n                    }\n                  </li>\n                )}\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"mt-6 flex flex-col sm:flex-row gap-3\">\n            <Button\n              onClick={() => {\n                setIsSubmitted(false);\n                form.reset();\n              }}\n              variant=\"outline\"\n            >\n              Register Another Attendee\n            </Button>\n\n            <Button\n              onClick={() => {\n                if (redirectTo) {\n                  window.location.href = redirectTo;\n                } else {\n                  window.location.href = \"/\";\n                }\n              }}\n            >\n              View Event Details\n            </Button>\n          </div>\n        </div>\n      ) : (\n        <Form {...form}>\n          <form\n            ref={formRef}\n            onSubmit={form.handleSubmit(onSubmit)}\n            action={formAction}\n            noValidate\n          >\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor=\"firstName-input\">\n                        First Name\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          id=\"firstName-input\"\n                          placeholder=\"John\"\n                          {...field}\n                          autoComplete=\"given-name\"\n                          aria-required=\"true\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor=\"lastName-input\">Last Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          id=\"lastName-input\"\n                          placeholder=\"Doe\"\n                          {...field}\n                          autoComplete=\"family-name\"\n                          aria-required=\"true\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor=\"email-input\">Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        id=\"email-input\"\n                        placeholder=\"name@example.com\"\n                        {...field}\n                        type=\"email\"\n                        autoComplete=\"email\"\n                        aria-required=\"true\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {showAdditionalFields && (\n                <div className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"companyName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel htmlFor=\"company-input\">\n                          Company (Optional)\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            id=\"company-input\"\n                            placeholder=\"Company name\"\n                            {...field}\n                            autoComplete=\"organization\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"emergencyContact\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel htmlFor=\"emergency-input\">\n                          Emergency Contact (Optional)\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            id=\"emergency-input\"\n                            placeholder=\"Contact name and phone number\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Please provide a contact in case of emergency\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"ticketType\"\n                render={({ field }) => (\n                  <FormItem className=\"space-y-3\">\n                    <FormLabel id=\"ticket-type-label\">Ticket Type</FormLabel>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        className=\"flex flex-col space-y-3\"\n                        aria-labelledby=\"ticket-type-label\"\n                      >\n                        {ticketTypes.map((ticket) => (\n                          <FormItem\n                            key={ticket.id}\n                            className={cn(\n                              \"flex items-start space-x-3 space-y-0 rounded-md border p-4 transition-colors\",\n                              field.value === ticket.id &&\n                                \"border-primary bg-primary/5\",\n                            )}\n                          >\n                            <FormControl>\n                              <RadioGroupItem\n                                value={ticket.id}\n                                id={`ticket-${ticket.id}`}\n                                className=\"mt-1\"\n                              />\n                            </FormControl>\n                            <div className=\"w-full space-y-1\">\n                              <div className=\"flex items-center justify-between\">\n                                <FormLabel\n                                  htmlFor={`ticket-${ticket.id}`}\n                                  className=\"text-base font-medium cursor-pointer\"\n                                >\n                                  {ticket.name}\n                                  {ticket.badge && (\n                                    <Badge\n                                      variant={ticket.badge.variant}\n                                      className=\"ml-2\"\n                                    >\n                                      {ticket.badge.text}\n                                    </Badge>\n                                  )}\n                                </FormLabel>\n                                <div className=\"font-medium text-lg\">\n                                  {formatCurrency(ticket.price)}\n                                </div>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {ticket.description}\n                              </p>\n                              <ul className=\"mt-2 grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-1\">\n                                {ticket.features.map((feature, index) => (\n                                  <li\n                                    key={index}\n                                    className=\"text-xs flex items-center\"\n                                  >\n                                    <CheckCircle2\n                                      className=\"h-3 w-3 mr-2 text-primary\"\n                                      aria-hidden=\"true\"\n                                    />\n                                    {feature}\n                                  </li>\n                                ))}\n                              </ul>\n                            </div>\n                          </FormItem>\n                        ))}\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {showDietaryRequirements && (\n                <FormField\n                  control={form.control}\n                  name=\"dietaryRequirements\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor=\"dietary-select\">\n                        Dietary Requirements\n                      </FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger id=\"dietary-select\">\n                            <SelectValue placeholder=\"Select dietary requirements\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {dietaryOptions.map((option) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {showAdditionalFields && (\n                <FormField\n                  control={form.control}\n                  name=\"specialRequests\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor=\"special-requests\">\n                        Special Requests (Optional)\n                      </FormLabel>\n                      <FormControl>\n                        <textarea\n                          id=\"special-requests\"\n                          className=\"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                          placeholder=\"Any additional requests or accommodations\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"marketingEmails\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        id=\"marketing-checkbox\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel\n                        htmlFor=\"marketing-checkbox\"\n                        className=\"text-sm font-medium cursor-pointer\"\n                      >\n                        Marketing Communications\n                      </FormLabel>\n                      <FormDescription>\n                        Receive emails about future events and promotions\n                      </FormDescription>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              {/* Event information summary */}\n              <div className=\"bg-muted p-4 rounded-lg space-y-3\">\n                <h3 className=\"text-sm font-medium\">Event Information</h3>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm\">\n                  <div className=\"flex items-start space-x-2\">\n                    <Calendar\n                      className=\"h-4 w-4 text-primary mt-0.5\"\n                      aria-hidden=\"true\"\n                    />\n                    <div>\n                      <p className=\"font-medium\">Date and Time</p>\n                      <p className=\"text-muted-foreground\">{eventDate}</p>\n                      <p className=\"text-muted-foreground\">9:00 AM - 5:00 PM</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <MapPin\n                      className=\"h-4 w-4 text-primary mt-0.5\"\n                      aria-hidden=\"true\"\n                    />\n                    <div>\n                      <p className=\"font-medium\">Location</p>\n                      <p className=\"text-muted-foreground\">{eventLocation}</p>\n                    </div>\n                  </div>\n                </div>\n\n                {selectedTicket && (\n                  <div className=\"pt-2 border-t\">\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"font-medium\">\n                        Selected Ticket: {selectedTicket.name}\n                      </div>\n                      <div className=\"font-bold text-lg\">\n                        {formatCurrency(selectedTicket.price)}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n            <CardFooter>\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                variant=\"gooeyRight\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2\n                      className=\"mr-2 h-4 w-4 animate-spin\"\n                      aria-hidden=\"true\"\n                    />\n                    <span>Processing...</span>\n                  </>\n                ) : (\n                  \"Complete Registration\"\n                )}\n              </Button>\n            </CardFooter>\n          </form>\n        </Form>\n      )}\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
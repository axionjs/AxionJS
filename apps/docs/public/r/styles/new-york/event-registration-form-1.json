{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "event-registration-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A form for event registration.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card",
    "radio-group",
    "checkbox",
    "select",
    "use-toast",
    "badge",
    "tooltip"
  ],
  "files": [
    {
      "path": "blocks/event-registration-form-1.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport { Loader2, Calendar, MapPin, Users, CheckCircle2 } from \"lucide-react\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/registry/new-york/ui/select\";\r\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\r\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\nimport { Badge } from \"@/registry/new-york/ui/badge\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/registry/new-york/ui/tooltip\";\r\n\r\n// Define registration form validation schema\r\nconst formSchema = z.object({\r\n  firstName: z\r\n    .string()\r\n    .min(2, { message: \"First name must be at least 2 characters\" }),\r\n  lastName: z\r\n    .string()\r\n    .min(2, { message: \"Last name must be at least 2 characters\" }),\r\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n  ticketType: z.enum([\"standard\", \"vip\", \"premium\"], {\r\n    required_error: \"Please select a ticket type\",\r\n  }),\r\n  dietaryRequirements: z.string().optional(),\r\n  marketingEmails: z.boolean().optional(),\r\n  companyName: z.string().optional(),\r\n  specialRequests: z.string().optional(),\r\n  emergencyContact: z.string().optional(),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\n// Define ticket types with additional information\r\ninterface TicketType {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  features: string[];\r\n  badge?: {\r\n    text: string;\r\n    variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\";\r\n  };\r\n}\r\n\r\nconst defaultTickets: TicketType[] = [\r\n  {\r\n    id: \"standard\",\r\n    name: \"Standard Ticket\",\r\n    description: \"Access to all sessions and workshops\",\r\n    price: 99,\r\n    features: [\"All sessions\", \"Workshop access\", \"Event app access\"],\r\n  },\r\n  {\r\n    id: \"premium\",\r\n    name: \"Premium Ticket\",\r\n    description: \"Standard + lunch and networking event\",\r\n    price: 199,\r\n    features: [\r\n      \"All sessions\",\r\n      \"Workshop access\",\r\n      \"Event app access\",\r\n      \"Lunch included\",\r\n      \"Networking event\",\r\n    ],\r\n    badge: {\r\n      text: \"Popular\",\r\n      variant: \"default\",\r\n    },\r\n  },\r\n  {\r\n    id: \"vip\",\r\n    name: \"VIP Ticket\",\r\n    description: \"Premium + exclusive Q&A session with speakers\",\r\n    price: 299,\r\n    features: [\r\n      \"All sessions\",\r\n      \"Workshop access\",\r\n      \"Event app access\",\r\n      \"Lunch included\",\r\n      \"Networking event\",\r\n      \"Exclusive Q&A session\",\r\n      \"VIP lounge access\",\r\n    ],\r\n    badge: {\r\n      text: \"Best Value\",\r\n      variant: \"secondary\",\r\n    },\r\n  },\r\n];\r\n\r\n// Define dietary requirements options\r\nconst dietaryOptions = [\r\n  { value: \"none\", label: \"None\" },\r\n  { value: \"vegetarian\", label: \"Vegetarian\" },\r\n  { value: \"vegan\", label: \"Vegan\" },\r\n  { value: \"gluten-free\", label: \"Gluten-free\" },\r\n  { value: \"dairy-free\", label: \"Dairy-free\" },\r\n  { value: \"other\", label: \"Other (please specify)\" },\r\n];\r\n\r\ninterface EventRegistrationFormProps {\r\n  /**\r\n   * Function to handle form submission\r\n   */\r\n  onRegister?: (values: FormValues) => Promise<void>;\r\n  /**\r\n   * URL to redirect to after successful registration\r\n   */\r\n  redirectTo?: string;\r\n  /**\r\n   * Custom form action for server-side form processing\r\n   */\r\n  formAction?: string;\r\n  /**\r\n   * Available ticket types\r\n   */\r\n  ticketTypes?: TicketType[];\r\n  /**\r\n   * Event date string\r\n   */\r\n  eventDate?: string;\r\n  /**\r\n   * Event location\r\n   */\r\n  eventLocation?: string;\r\n  /**\r\n   * Max number of attendees\r\n   */\r\n  maxAttendees?: number;\r\n  /**\r\n   * Currency symbol for ticket prices\r\n   */\r\n  currencySymbol?: string;\r\n  /**\r\n   * Whether to show additional fields\r\n   */\r\n  showAdditionalFields?: boolean;\r\n  /**\r\n   * Whether to show dietary requirements field\r\n   */\r\n  showDietaryRequirements?: boolean;\r\n  /**\r\n   * Custom CSS class name\r\n   */\r\n  className?: string;\r\n}\r\n\r\nexport default function EventRegistrationForm({\r\n  onRegister,\r\n  redirectTo,\r\n  formAction,\r\n  ticketTypes = defaultTickets,\r\n  eventDate = \"April 15-16, 2025\",\r\n  eventLocation = \"Tech Convention Center, San Francisco, CA\",\r\n  maxAttendees = 500,\r\n  currencySymbol = \"$\",\r\n  showAdditionalFields = false,\r\n  showDietaryRequirements = true,\r\n  className,\r\n}: EventRegistrationFormProps) {\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\r\n  const { toast } = useToast();\r\n  const formRef = React.useRef<HTMLFormElement>(null);\r\n  const successRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      ticketType: undefined,\r\n      dietaryRequirements: \"\",\r\n      marketingEmails: false,\r\n      companyName: \"\",\r\n      specialRequests: \"\",\r\n      emergencyContact: \"\",\r\n    },\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  // Get the selected ticket type\r\n  const selectedTicketType = form.watch(\"ticketType\");\r\n\r\n  // Get the selected ticket details\r\n  const selectedTicket = React.useMemo(() => {\r\n    if (!selectedTicketType) return null;\r\n    return (\r\n      ticketTypes.find((ticket) => ticket.id === selectedTicketType) || null\r\n    );\r\n  }, [selectedTicketType, ticketTypes]);\r\n\r\n  // Format currency\r\n  const formatCurrency = (amount: number) => {\r\n    return `${currencySymbol}${amount}`;\r\n  };\r\n\r\n  async function onSubmit(data: FormValues) {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      // Use provided callback or simulate API call\r\n      if (onRegister) {\r\n        await onRegister(data);\r\n      } else {\r\n        // Simulate API call\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(\"Registration data:\", data);\r\n      }\r\n\r\n      setIsSubmitted(true);\r\n\r\n      toast({\r\n        title: \"Registration successful!\",\r\n        description: \"You've been registered for the event.\",\r\n      });\r\n\r\n      // Focus success message for accessibility\r\n      setTimeout(() => {\r\n        if (successRef.current) {\r\n          successRef.current.focus();\r\n        }\r\n      }, 100);\r\n\r\n      // Redirect if specified\r\n      if (redirectTo) {\r\n        window.location.href = redirectTo;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Registration error:\", error);\r\n\r\n      toast({\r\n        title: \"Registration failed\",\r\n        description:\r\n          \"There was a problem with your registration. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className={cn(\"w-full max-w-2xl mx-auto shadow-lg\", className)}>\r\n      <CardHeader className=\"space-y-1 md:relative flex flex-col items-start\">\r\n        <CardTitle className=\"text-2xl font-bold\">Event Registration</CardTitle>\r\n        <CardDescription>\r\n          Register for our upcoming event on {eventDate}\r\n        </CardDescription>\r\n\r\n        {/* Capacity indicator */}\r\n        <div className=\"md:absolute top-5 right-5\">\r\n          <TooltipProvider>\r\n            <Tooltip>\r\n              <TooltipTrigger asChild>\r\n                <div className=\"flex items-center text-sm text-muted-foreground\">\r\n                  <Users className=\"h-4 w-4 mr-1\" aria-hidden=\"true\" />\r\n                  <span>Limited Capacity</span>\r\n                </div>\r\n              </TooltipTrigger>\r\n              <TooltipContent>\r\n                <p>Only {maxAttendees} spots available</p>\r\n              </TooltipContent>\r\n            </Tooltip>\r\n          </TooltipProvider>\r\n        </div>\r\n      </CardHeader>\r\n\r\n      {isSubmitted ? (\r\n        <div\r\n          ref={successRef}\r\n          tabIndex={-1}\r\n          role=\"alert\"\r\n          aria-live=\"polite\"\r\n          className=\"p-6 space-y-4 flex flex-col items-center text-center\"\r\n        >\r\n          <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center\">\r\n            <CheckCircle2 className=\"h-8 w-8 text-primary\" aria-hidden=\"true\" />\r\n          </div>\r\n          <h2 className=\"text-xl font-bold\">Registration Confirmed!</h2>\r\n          <p className=\"text-muted-foreground\">\r\n            Thank you for registering for our event. We've sent a confirmation\r\n            email to {form.getValues().email} with all the details.\r\n          </p>\r\n\r\n          <div className=\"mt-4 w-full max-w-md p-4 border rounded-md bg-muted/50\">\r\n            <div className=\"text-left\">\r\n              <p className=\"font-medium mb-2\">Registration Details:</p>\r\n              <ul className=\"space-y-2 text-sm\">\r\n                <li>\r\n                  <span className=\"text-muted-foreground\">Name:</span>{\" \"}\r\n                  {form.getValues().firstName} {form.getValues().lastName}\r\n                </li>\r\n                <li>\r\n                  <span className=\"text-muted-foreground\">Email:</span>{\" \"}\r\n                  {form.getValues().email}\r\n                </li>\r\n                <li>\r\n                  <span className=\"text-muted-foreground\">Ticket Type:</span>{\" \"}\r\n                  {\r\n                    ticketTypes.find(\r\n                      (t) => t.id === form.getValues().ticketType,\r\n                    )?.name\r\n                  }\r\n                </li>\r\n                {form.getValues().dietaryRequirements && (\r\n                  <li>\r\n                    <span className=\"text-muted-foreground\">\r\n                      Dietary Requirements:\r\n                    </span>{\" \"}\r\n                    {\r\n                      dietaryOptions.find(\r\n                        (o) => o.value === form.getValues().dietaryRequirements,\r\n                      )?.label\r\n                    }\r\n                  </li>\r\n                )}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-6 flex flex-col sm:flex-row gap-3\">\r\n            <Button\r\n              onClick={() => {\r\n                setIsSubmitted(false);\r\n                form.reset();\r\n              }}\r\n              variant=\"outline\"\r\n            >\r\n              Register Another Attendee\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={() => {\r\n                if (redirectTo) {\r\n                  window.location.href = redirectTo;\r\n                } else {\r\n                  window.location.href = \"/\";\r\n                }\r\n              }}\r\n            >\r\n              View Event Details\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Form {...form}>\r\n          <form\r\n            ref={formRef}\r\n            onSubmit={form.handleSubmit(onSubmit)}\r\n            action={formAction}\r\n            noValidate\r\n          >\r\n            <CardContent className=\"space-y-6\">\r\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"firstName\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor=\"firstName-input\">\r\n                        First Name\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          id=\"firstName-input\"\r\n                          placeholder=\"John\"\r\n                          {...field}\r\n                          autoComplete=\"given-name\"\r\n                          aria-required=\"true\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"lastName\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor=\"lastName-input\">Last Name</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          id=\"lastName-input\"\r\n                          placeholder=\"Doe\"\r\n                          {...field}\r\n                          autoComplete=\"family-name\"\r\n                          aria-required=\"true\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"email\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel htmlFor=\"email-input\">Email</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        id=\"email-input\"\r\n                        placeholder=\"name@example.com\"\r\n                        {...field}\r\n                        type=\"email\"\r\n                        autoComplete=\"email\"\r\n                        aria-required=\"true\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              {showAdditionalFields && (\r\n                <div className=\"space-y-4\">\r\n                  <FormField\r\n                    control={form.control}\r\n                    name=\"companyName\"\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormLabel htmlFor=\"company-input\">\r\n                          Company (Optional)\r\n                        </FormLabel>\r\n                        <FormControl>\r\n                          <Input\r\n                            id=\"company-input\"\r\n                            placeholder=\"Company name\"\r\n                            {...field}\r\n                            autoComplete=\"organization\"\r\n                          />\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n\r\n                  <FormField\r\n                    control={form.control}\r\n                    name=\"emergencyContact\"\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormLabel htmlFor=\"emergency-input\">\r\n                          Emergency Contact (Optional)\r\n                        </FormLabel>\r\n                        <FormControl>\r\n                          <Input\r\n                            id=\"emergency-input\"\r\n                            placeholder=\"Contact name and phone number\"\r\n                            {...field}\r\n                          />\r\n                        </FormControl>\r\n                        <FormDescription>\r\n                          Please provide a contact in case of emergency\r\n                        </FormDescription>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n                </div>\r\n              )}\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"ticketType\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"space-y-3\">\r\n                    <FormLabel id=\"ticket-type-label\">Ticket Type</FormLabel>\r\n                    <FormControl>\r\n                      <RadioGroup\r\n                        onValueChange={field.onChange}\r\n                        defaultValue={field.value}\r\n                        className=\"flex flex-col space-y-3\"\r\n                        aria-labelledby=\"ticket-type-label\"\r\n                      >\r\n                        {ticketTypes.map((ticket) => (\r\n                          <FormItem\r\n                            key={ticket.id}\r\n                            className={cn(\r\n                              \"flex items-start space-x-3 space-y-0 rounded-md border p-4 transition-colors\",\r\n                              field.value === ticket.id &&\r\n                                \"border-primary bg-primary/5\",\r\n                            )}\r\n                          >\r\n                            <FormControl>\r\n                              <RadioGroupItem\r\n                                value={ticket.id}\r\n                                id={`ticket-${ticket.id}`}\r\n                                className=\"mt-1\"\r\n                              />\r\n                            </FormControl>\r\n                            <div className=\"w-full space-y-1\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <FormLabel\r\n                                  htmlFor={`ticket-${ticket.id}`}\r\n                                  className=\"text-base font-medium cursor-pointer\"\r\n                                >\r\n                                  {ticket.name}\r\n                                  {ticket.badge && (\r\n                                    <Badge\r\n                                      variant={ticket.badge.variant}\r\n                                      className=\"ml-2\"\r\n                                    >\r\n                                      {ticket.badge.text}\r\n                                    </Badge>\r\n                                  )}\r\n                                </FormLabel>\r\n                                <div className=\"font-medium text-lg\">\r\n                                  {formatCurrency(ticket.price)}\r\n                                </div>\r\n                              </div>\r\n                              <p className=\"text-sm text-muted-foreground\">\r\n                                {ticket.description}\r\n                              </p>\r\n                              <ul className=\"mt-2 grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-1\">\r\n                                {ticket.features.map((feature, index) => (\r\n                                  <li\r\n                                    key={index}\r\n                                    className=\"text-xs flex items-center\"\r\n                                  >\r\n                                    <CheckCircle2\r\n                                      className=\"h-3 w-3 mr-2 text-primary\"\r\n                                      aria-hidden=\"true\"\r\n                                    />\r\n                                    {feature}\r\n                                  </li>\r\n                                ))}\r\n                              </ul>\r\n                            </div>\r\n                          </FormItem>\r\n                        ))}\r\n                      </RadioGroup>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              {showDietaryRequirements && (\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"dietaryRequirements\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor=\"dietary-select\">\r\n                        Dietary Requirements\r\n                      </FormLabel>\r\n                      <Select\r\n                        onValueChange={field.onChange}\r\n                        defaultValue={field.value}\r\n                      >\r\n                        <FormControl>\r\n                          <SelectTrigger id=\"dietary-select\">\r\n                            <SelectValue placeholder=\"Select dietary requirements\" />\r\n                          </SelectTrigger>\r\n                        </FormControl>\r\n                        <SelectContent>\r\n                          {dietaryOptions.map((option) => (\r\n                            <SelectItem key={option.value} value={option.value}>\r\n                              {option.label}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n\r\n              {showAdditionalFields && (\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"specialRequests\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor=\"special-requests\">\r\n                        Special Requests (Optional)\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <textarea\r\n                          id=\"special-requests\"\r\n                          className=\"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\r\n                          placeholder=\"Any additional requests or accommodations\"\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"marketingEmails\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\r\n                    <FormControl>\r\n                      <Checkbox\r\n                        checked={field.value}\r\n                        onCheckedChange={field.onChange}\r\n                        id=\"marketing-checkbox\"\r\n                      />\r\n                    </FormControl>\r\n                    <div className=\"space-y-1 leading-none\">\r\n                      <FormLabel\r\n                        htmlFor=\"marketing-checkbox\"\r\n                        className=\"text-sm font-medium cursor-pointer\"\r\n                      >\r\n                        Marketing Communications\r\n                      </FormLabel>\r\n                      <FormDescription>\r\n                        Receive emails about future events and promotions\r\n                      </FormDescription>\r\n                    </div>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              {/* Event information summary */}\r\n              <div className=\"bg-muted p-4 rounded-lg space-y-3\">\r\n                <h3 className=\"text-sm font-medium\">Event Information</h3>\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm\">\r\n                  <div className=\"flex items-start space-x-2\">\r\n                    <Calendar\r\n                      className=\"h-4 w-4 text-primary mt-0.5\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    <div>\r\n                      <p className=\"font-medium\">Date and Time</p>\r\n                      <p className=\"text-muted-foreground\">{eventDate}</p>\r\n                      <p className=\"text-muted-foreground\">9:00 AM - 5:00 PM</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-start space-x-2\">\r\n                    <MapPin\r\n                      className=\"h-4 w-4 text-primary mt-0.5\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    <div>\r\n                      <p className=\"font-medium\">Location</p>\r\n                      <p className=\"text-muted-foreground\">{eventLocation}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {selectedTicket && (\r\n                  <div className=\"pt-2 border-t\">\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <div className=\"font-medium\">\r\n                        Selected Ticket: {selectedTicket.name}\r\n                      </div>\r\n                      <div className=\"font-bold text-lg\">\r\n                        {formatCurrency(selectedTicket.price)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </CardContent>\r\n            <CardFooter>\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isLoading}\r\n                variant=\"gooeyRight\"\r\n              >\r\n                {isLoading ? (\r\n                  <>\r\n                    <Loader2\r\n                      className=\"mr-2 h-4 w-4 animate-spin\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    <span>Processing...</span>\r\n                  </>\r\n                ) : (\r\n                  \"Complete Registration\"\r\n                )}\r\n              </Button>\r\n            </CardFooter>\r\n          </form>\r\n        </Form>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
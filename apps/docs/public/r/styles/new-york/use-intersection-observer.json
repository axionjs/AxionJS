{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-intersection-observer",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-intersection-observer.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\ninterface UseIntersectionObserverProps {\r\n  root?: Element | null;\r\n  rootMargin?: string;\r\n  threshold?: number | number[];\r\n  onIntersect?: () => void;\r\n  enabled?: boolean;\r\n}\r\n\r\n/**\r\n * A hook that observes when an element intersects with the viewport\r\n * @param options The IntersectionObserver options\r\n * @returns A ref to attach to the element and whether it's intersecting\r\n */\r\nexport function useIntersectionObserver({\r\n  root = null,\r\n  rootMargin = \"0px\",\r\n  threshold = 0,\r\n  onIntersect,\r\n  enabled = true,\r\n}: UseIntersectionObserverProps = {}) {\r\n  const [isIntersecting, setIsIntersecting] = React.useState(false);\r\n  const ref = React.useRef<Element | null>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (!enabled || typeof window === \"undefined\") return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        setIsIntersecting(entry.isIntersecting);\r\n\r\n        if (entry.isIntersecting && onIntersect) {\r\n          onIntersect();\r\n        }\r\n      },\r\n      { root, rootMargin, threshold },\r\n    );\r\n\r\n    if (ref.current) {\r\n      observer.observe(ref.current);\r\n    }\r\n\r\n    return () => {\r\n      if (ref.current) {\r\n        observer.unobserve(ref.current);\r\n      }\r\n    };\r\n  }, [enabled, root, rootMargin, threshold, onIntersect]);\r\n\r\n  return { ref, isIntersecting };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "input",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "zod"
  ],
  "files": [
    {
      "path": "ui/input.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { cva, VariantProps } from \"class-variance-authority\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { z } from \"zod\";\r\n\r\nconst inputVariants = cva(\r\n  \"flex w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"\",\r\n        error: \"border-destructive focus-visible:ring-destructive\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\ninterface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement>,\r\n    VariantProps<typeof inputVariants> {\r\n  helperText?: string;\r\n  error?: string;\r\n  startIcon?: React.ReactNode;\r\n  endIcon?: React.ReactNode;\r\n  characterLimit?: number;\r\n}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  (\r\n    {\r\n      className,\r\n      variant,\r\n      type,\r\n      helperText,\r\n      error,\r\n      startIcon,\r\n      endIcon,\r\n      characterLimit,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const [characterCount, setCharacterCount] = React.useState(0);\r\n    const [localError, setLocalError] = React.useState<string | undefined>(\r\n      error,\r\n    );\r\n\r\n    const schema = React.useMemo(() => {\r\n      return characterLimit\r\n        ? z\r\n            .string()\r\n            .max(characterLimit, `Maximum ${characterLimit} characters allowed`)\r\n        : z.string();\r\n    }, [characterLimit]);\r\n\r\n    const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = (\r\n      e,\r\n    ) => {\r\n      const newValue = e.target.value;\r\n      setCharacterCount(newValue.length);\r\n\r\n      try {\r\n        schema.parse(newValue);\r\n        setLocalError(undefined);\r\n      } catch (err) {\r\n        if (err instanceof z.ZodError) {\r\n          setLocalError(err.errors[0].message);\r\n        }\r\n      }\r\n\r\n      if (characterLimit && newValue.length > characterLimit) {\r\n        e.target.value = newValue.slice(0, characterLimit);\r\n      }\r\n\r\n      props.onChange?.(e);\r\n    };\r\n\r\n    return (\r\n      <div className=\"space-y-2\">\r\n        <div className=\"relative\">\r\n          {startIcon && (\r\n            <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2\">\r\n              {startIcon}\r\n            </div>\r\n          )}\r\n          <input\r\n            type={type}\r\n            className={cn(\r\n              inputVariants({ variant }),\r\n              startIcon && \"pl-10\",\r\n              endIcon && \"pr-10\",\r\n              className,\r\n            )}\r\n            ref={ref}\r\n            aria-invalid={!!localError}\r\n            aria-describedby={`${props.id}-helper ${props.id}-error`}\r\n            onChange={handleInputChange}\r\n            {...props}\r\n          />\r\n          {endIcon && (\r\n            <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\r\n              {endIcon}\r\n            </div>\r\n          )}\r\n        </div>\r\n        {helperText && (\r\n          <p\r\n            id={`${props.id}-helper`}\r\n            className=\"text-sm text-muted-foreground\"\r\n          >\r\n            {helperText}\r\n          </p>\r\n        )}\r\n        {localError && (\r\n          <p\r\n            id={`${props.id}-error`}\r\n            className=\"text-sm text-destructive\"\r\n            role=\"alert\"\r\n          >\r\n            {localError}\r\n          </p>\r\n        )}\r\n        {characterLimit && (\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {characterCount}/{characterLimit} characters\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  },\r\n);\r\nInput.displayName = \"Input\";\r\n\r\nexport { Input };\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
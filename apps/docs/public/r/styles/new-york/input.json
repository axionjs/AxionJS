{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "input",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "zod"
  ],
  "files": [
    {
      "path": "ui/input.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cva, VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { z } from \"zod\";\n\nconst inputVariants = cva(\n  \"flex w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        error: \"border-destructive focus-visible:ring-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\ninterface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    VariantProps<typeof inputVariants> {\n  helperText?: string;\n  error?: string;\n  startIcon?: React.ReactNode;\n  endIcon?: React.ReactNode;\n  characterLimit?: number;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      variant,\n      type,\n      helperText,\n      error,\n      startIcon,\n      endIcon,\n      characterLimit,\n      ...props\n    },\n    ref,\n  ) => {\n    const [characterCount, setCharacterCount] = React.useState(0);\n    const [localError, setLocalError] = React.useState<string | undefined>(\n      error,\n    );\n\n    const schema = React.useMemo(() => {\n      return characterLimit\n        ? z\n            .string()\n            .max(characterLimit, `Maximum ${characterLimit} characters allowed`)\n        : z.string();\n    }, [characterLimit]);\n\n    const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = (\n      e,\n    ) => {\n      const newValue = e.target.value;\n      setCharacterCount(newValue.length);\n\n      try {\n        schema.parse(newValue);\n        setLocalError(undefined);\n      } catch (err) {\n        if (err instanceof z.ZodError) {\n          setLocalError(err.errors[0].message);\n        }\n      }\n\n      if (characterLimit && newValue.length > characterLimit) {\n        e.target.value = newValue.slice(0, characterLimit);\n      }\n\n      props.onChange?.(e);\n    };\n\n    return (\n      <div className=\"space-y-2\">\n        <div className=\"relative\">\n          {startIcon && (\n            <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2\">\n              {startIcon}\n            </div>\n          )}\n          <input\n            type={type}\n            className={cn(\n              inputVariants({ variant }),\n              startIcon && \"pl-10\",\n              endIcon && \"pr-10\",\n              className,\n            )}\n            ref={ref}\n            aria-invalid={!!localError}\n            aria-describedby={`${props.id}-helper ${props.id}-error`}\n            onChange={handleInputChange}\n            {...props}\n          />\n          {endIcon && (\n            <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n              {endIcon}\n            </div>\n          )}\n        </div>\n        {helperText && (\n          <p\n            id={`${props.id}-helper`}\n            className=\"text-sm text-muted-foreground\"\n          >\n            {helperText}\n          </p>\n        )}\n        {localError && (\n          <p\n            id={`${props.id}-error`}\n            className=\"text-sm text-destructive\"\n            role=\"alert\"\n          >\n            {localError}\n          </p>\n        )}\n        {characterLimit && (\n          <p className=\"text-sm text-muted-foreground\">\n            {characterCount}/{characterLimit} characters\n          </p>\n        )}\n      </div>\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
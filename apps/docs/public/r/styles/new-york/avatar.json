{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "@radix-ui/react-avatar"
  ],
  "devDependencies": [
    "@radix-ui/react-avatar"
  ],
  "files": [
    {
      "path": "ui/avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\n/* -------------------------------------------------------------------------------------\n *  1. Avatar\n * ----------------------------------------------------------------------------------- */\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = \"Avatar\";\n\n/* -------------------------------------------------------------------------------------\n *  2. AvatarImage\n * ----------------------------------------------------------------------------------- */\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full object-cover\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = \"AvatarImage\";\n\n/* -------------------------------------------------------------------------------------\n *  3. AvatarFallback\n * ----------------------------------------------------------------------------------- */\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = \"AvatarFallback\";\n\ninterface AvatarGroupProps extends React.HTMLAttributes<HTMLDivElement> {\n  overlap?: string;\n  hoverScale?: boolean;\n  limit?: number;\n  totalCount?: number;\n}\n\nconst AvatarGroup = React.forwardRef<HTMLDivElement, AvatarGroupProps>(\n  (\n    {\n      className,\n      overlap = \"-ml-2\",\n      hoverScale = false,\n      limit,\n      totalCount,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    // Convert children to array for processing\n    const childrenArray = React.Children.toArray(children).filter((child) =>\n      React.isValidElement(child),\n    );\n\n    // Limit the number of displayed avatars if limit is set\n    const visibleChildren = limit\n      ? childrenArray.slice(0, limit)\n      : childrenArray;\n\n    // Calculate how many additional avatars are not shown\n    const hiddenCount =\n      limit && childrenArray.length > limit\n        ? childrenArray.length - limit\n        : totalCount && childrenArray.length > 0\n          ? totalCount - childrenArray.length\n          : 0;\n\n    return (\n      <div ref={ref} className={cn(\"flex items-center\", className)} {...props}>\n        {visibleChildren.map((child, index) => {\n          if (!React.isValidElement(child)) {\n            return child;\n          }\n\n          const overlapClass = index === 0 ? \"\" : overlap;\n\n          const borderClass =\n            \"ring-2 ring-background ring-offset-1 ring-primary/10\";\n\n          const scaleClass = hoverScale\n            ? \"transition-transform duration-200 ease-in-out hover:z-10 hover:scale-110 hover:-translate-y-1\"\n            : \"\";\n\n          return React.cloneElement(child, {\n            className: cn(\n              overlapClass,\n              borderClass,\n              scaleClass,\n              child.props.className,\n            ),\n          });\n        })}\n\n        {/* Show the count of additional avatars if any are hidden */}\n        {hiddenCount > 0 && (\n          <Avatar\n            className={cn(\n              overlap,\n              \"ring-2 ring-background ring-offset-1 ring-primary/10\",\n              hoverScale &&\n                \"transition-transform duration-200 ease-in-out hover:z-10 hover:scale-110 hover:-translate-y-1\",\n              \"bg-muted\",\n            )}\n          >\n            <AvatarFallback className=\"bg-primary/10 text-xs\">\n              +{hiddenCount}\n            </AvatarFallback>\n          </Avatar>\n        )}\n      </div>\n    );\n  },\n);\nAvatarGroup.displayName = \"AvatarGroup\";\n\nexport { Avatar, AvatarImage, AvatarFallback, AvatarGroup };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
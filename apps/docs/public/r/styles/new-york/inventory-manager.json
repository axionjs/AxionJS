{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "inventory-manager",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "An inventory manager with CRUD functionality.",
  "dependencies": [
    "prisma",
    "@prisma/client",
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "button",
    "alert",
    "alert-dialog",
    "dialog",
    "toaster",
    "skeleton",
    "badge",
    "dropdown-menu",
    "table",
    "input",
    "select",
    "use-toast",
    "form"
  ],
  "files": [
    {
      "path": "dynamic-components/inventory-manager/actions/inventory.ts",
      "content": "\"use server\";\r\n\r\nimport { db } from \"@/registry/new-york/lib/db\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\nimport { z } from \"zod\";\r\n\r\nconst inventoryFormSchema = z.object({\r\n  name: z.string().min(2),\r\n  category: z.string().min(1),\r\n  price: z.number().positive(),\r\n  stock: z.number().int().nonnegative(),\r\n  sku: z.string().min(3),\r\n});\r\n\r\nexport async function getInventoryItems({\r\n  page = 1,\r\n  pageSize = 10,\r\n  sortBy = \"updatedAt\",\r\n  sortOrder = \"desc\",\r\n  filters = {},\r\n  lowStockOnly = false,\r\n}: {\r\n  page?: number;\r\n  pageSize?: number;\r\n  sortBy?: string;\r\n  sortOrder?: \"asc\" | \"desc\";\r\n  filters?: Record<string, any>;\r\n  lowStockOnly?: boolean;\r\n} = {}) {\r\n  try {\r\n    // Calculate pagination values\r\n    const skip = (page - 1) * pageSize;\r\n    const take = pageSize;\r\n\r\n    // Build where clause based on filters\r\n    const where: any = {};\r\n\r\n    if (filters.name) {\r\n      where.name = {\r\n        contains: filters.name,\r\n        mode: \"insensitive\",\r\n      };\r\n    }\r\n\r\n    if (filters.category && filters.category !== \"\") {\r\n      where.category = filters.category;\r\n    }\r\n\r\n    // Add low stock filter if requested\r\n    if (lowStockOnly) {\r\n      where.stock = {\r\n        lt: 10, // Items with stock less than 10\r\n      };\r\n    }\r\n\r\n    // Get paginated items with sorting\r\n    const items = await db.inventoryItem.findMany({\r\n      where,\r\n      orderBy: {\r\n        [sortBy]: sortOrder,\r\n      },\r\n      skip,\r\n      take,\r\n    });\r\n\r\n    // Get total count for pagination\r\n    const totalItems = await db.inventoryItem.count({ where });\r\n    const totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n    // Get count of low stock items for the alert\r\n    const lowStockCount = await db.inventoryItem.count({\r\n      where: {\r\n        stock: {\r\n          lt: 10,\r\n        },\r\n      },\r\n    });\r\n\r\n    return {\r\n      items,\r\n      meta: {\r\n        currentPage: page,\r\n        pageSize,\r\n        totalItems,\r\n        totalPages,\r\n        lowStockCount,\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch inventory items:\", error);\r\n    throw new Error(\"Failed to fetch inventory items\");\r\n  }\r\n}\r\n\r\nexport async function getInventoryItem(id: string) {\r\n  try {\r\n    const item = await db.inventoryItem.findUnique({\r\n      where: { id },\r\n    });\r\n\r\n    if (!item) {\r\n      throw new Error(\"Inventory item not found\");\r\n    }\r\n\r\n    return item;\r\n  } catch (error) {\r\n    console.error(`Failed to fetch inventory item ${id}:`, error);\r\n    throw new Error(\"Failed to fetch inventory item\");\r\n  }\r\n}\r\n\r\nexport async function createInventoryItem(\r\n  values: z.infer<typeof inventoryFormSchema>,\r\n) {\r\n  try {\r\n    const validatedFields = inventoryFormSchema.parse(values);\r\n\r\n    // Check if SKU already exists\r\n    const existingItem = await db.inventoryItem.findUnique({\r\n      where: { sku: validatedFields.sku },\r\n    });\r\n    if (existingItem) {\r\n      return { error: \"SKU already exists\" };\r\n    }\r\n\r\n    await db.inventoryItem.create({\r\n      data: {\r\n        name: validatedFields.name,\r\n        category: validatedFields.category,\r\n        price: validatedFields.price,\r\n        stock: validatedFields.stock,\r\n        sku: validatedFields.sku,\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/inventory\");\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Failed to create inventory item:\", error);\r\n    return { error: \"Failed to create inventory item\" };\r\n  }\r\n}\r\n\r\nexport async function updateInventoryItem(\r\n  id: string,\r\n  values: z.infer<typeof inventoryFormSchema>,\r\n) {\r\n  try {\r\n    const validatedFields = inventoryFormSchema.parse(values);\r\n\r\n    //Check if same sku exists\r\n    const existingItem = await db.inventoryItem.findUnique({\r\n      where: { sku: validatedFields.sku },\r\n    });\r\n    if (existingItem && existingItem.id !== id) {\r\n      return { error: \"SKU already exists\" };\r\n    }\r\n\r\n    // Update the inventory item\r\n    await db.inventoryItem.update({\r\n      where: { id },\r\n      data: {\r\n        name: validatedFields.name,\r\n        category: validatedFields.category,\r\n        price: validatedFields.price,\r\n        stock: validatedFields.stock,\r\n        sku: validatedFields.sku,\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/inventory\");\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(`Failed to update inventory item ${id}:`, error);\r\n    return { error: \"Failed to update inventory item\" };\r\n  }\r\n}\r\n\r\nexport async function deleteInventoryItem(id: string) {\r\n  try {\r\n    await db.inventoryItem.delete({\r\n      where: { id },\r\n    });\r\n\r\n    revalidatePath(\"/inventory\");\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(`Failed to delete inventory item ${id}:`, error);\r\n    return { error: \"Failed to delete inventory item\" };\r\n  }\r\n}\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalThis.prisma = db;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/components/inventory-form.tsx",
      "content": "\"use client\";\r\n\r\nimport type React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport type { InventoryItem } from \"@prisma/client\";\r\nimport { Plus } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/registry/new-york/ui/dialog\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/registry/new-york/ui/select\";\r\nimport {\r\n  createInventoryItem,\r\n  updateInventoryItem,\r\n} from \"@/registry/new-york/dynamic-components/inventory-manager/actions/inventory\";\r\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\nimport { useInventory } from \"@/registry/new-york/dynamic-components/inventory-manager/lib/context\";\r\n\r\nconst formSchema = z.object({\r\n  name: z.string().min(2, {\r\n    message: \"Name must be at least 2 characters.\",\r\n  }),\r\n  category: z.string().min(1, {\r\n    message: \"Please select a category.\",\r\n  }),\r\n  price: z.coerce.number().positive({\r\n    message: \"Price must be a positive number.\",\r\n  }),\r\n  stock: z.coerce.number().int().nonnegative({\r\n    message: \"Stock must be a non-negative integer.\",\r\n  }),\r\n  sku: z.string().min(3, {\r\n    message: \"SKU must be at least 3 characters.\",\r\n  }),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\ninterface InventoryFormProps {\r\n  item?: InventoryItem;\r\n  onSuccess?: () => void;\r\n}\r\n\r\nexport function InventoryForm({ item, onSuccess }: InventoryFormProps) {\r\n  const { toast } = useToast();\r\n  const { refreshData } = useInventory();\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const isEditing = !!item;\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      name: item?.name || \"\",\r\n      category: item?.category || \"\",\r\n      price: item?.price || 0,\r\n      stock: item?.stock || 0,\r\n      sku: item?.sku || \"\",\r\n    },\r\n  });\r\n\r\n  async function onSubmit(values: FormValues) {\r\n    try {\r\n      setIsSubmitting(true);\r\n      if (isEditing && item) {\r\n        const response = await updateInventoryItem(item.id, values);\r\n        if (response.error) {\r\n          toast({\r\n            title: \"Error\",\r\n            description: response.error,\r\n            variant: \"destructive\",\r\n          });\r\n        } else {\r\n          toast({\r\n            title: \"Item updated\",\r\n            description: \"The inventory item has been updated successfully.\",\r\n          });\r\n        }\r\n      } else {\r\n        const response = await createInventoryItem(values);\r\n        if (response.error) {\r\n          toast({\r\n            title: \"Error\",\r\n            description: response.error,\r\n            variant: \"destructive\",\r\n          });\r\n        } else {\r\n          toast({\r\n            title: \"Item created\",\r\n            description: \"The new inventory item has been added successfully.\",\r\n          });\r\n        }\r\n      }\r\n      form.reset();\r\n      onSuccess?.();\r\n      await refreshData();\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to save inventory item. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n        <FormField\r\n          control={form.control}\r\n          name=\"name\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Name</FormLabel>\r\n              <FormControl>\r\n                <Input placeholder=\"Item name\" {...field} />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <FormField\r\n          control={form.control}\r\n          name=\"category\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Category</FormLabel>\r\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                <FormControl>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select a category\" />\r\n                  </SelectTrigger>\r\n                </FormControl>\r\n                <SelectContent>\r\n                  <SelectItem value=\"Electronics\">Electronics</SelectItem>\r\n                  <SelectItem value=\"Clothing\">Clothing</SelectItem>\r\n                  <SelectItem value=\"Food\">Food</SelectItem>\r\n                  <SelectItem value=\"Other\">Other</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <FormField\r\n            control={form.control}\r\n            name=\"price\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Price</FormLabel>\r\n                <FormControl>\r\n                  <Input type=\"number\" step=\"0.01\" min=\"0\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"stock\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Stock</FormLabel>\r\n                <FormControl>\r\n                  <Input type=\"number\" min=\"0\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        <FormField\r\n          control={form.control}\r\n          name=\"sku\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>SKU</FormLabel>\r\n              <FormControl>\r\n                <Input placeholder=\"SKU000123\" {...field} />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <DialogFooter>\r\n          <Button type=\"submit\" disabled={isSubmitting}>\r\n            {isSubmitting ? (\r\n              <>\r\n                <span className=\"animate-spin mr-2\">⟳</span>\r\n                {isEditing ? \"Updating...\" : \"Creating...\"}\r\n              </>\r\n            ) : (\r\n              <>{isEditing ? \"Update\" : \"Create\"} Item</>\r\n            )}\r\n          </Button>\r\n        </DialogFooter>\r\n      </form>\r\n    </Form>\r\n  );\r\n}\r\n\r\n// Create Item Dialog\r\nexport function CreateInventoryItem() {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={setOpen}>\r\n      <DialogTrigger asChild>\r\n        <Button>\r\n          <Plus className=\"mr-2 h-4 w-4\" />\r\n          Add Item\r\n        </Button>\r\n      </DialogTrigger>\r\n      <DialogContent className=\"sm:max-w-[425px]\">\r\n        <DialogHeader>\r\n          <DialogTitle>Add Inventory Item</DialogTitle>\r\n          <DialogDescription>\r\n            Create a new item in your inventory. Click save when you're done.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n        <InventoryForm onSuccess={() => setOpen(false)} />\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\n// Edit Item Dialog\r\ninterface EditInventoryItemProps {\r\n  item: InventoryItem;\r\n  trigger: React.ReactNode;\r\n}\r\n\r\nexport function EditInventoryItem({ item, trigger }: EditInventoryItemProps) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={setOpen}>\r\n      <DialogTrigger asChild>{trigger}</DialogTrigger>\r\n      <DialogContent className=\"sm:max-w-[425px]\">\r\n        <DialogHeader>\r\n          <DialogTitle>Edit Inventory Item</DialogTitle>\r\n          <DialogDescription>\r\n            Make changes to your inventory item. Click save when you're done.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n        <InventoryForm item={item} onSuccess={() => setOpen(false)} />\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/components/inventory-data-table.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  Alert,\r\n  AlertDescription,\r\n  AlertTitle,\r\n} from \"@/registry/new-york/ui/alert\";\r\nimport { AlertTriangle, AlertCircle } from \"lucide-react\";\r\nimport { Input } from \"@/components/ui/input\";\r\n\r\nimport { InventoryContext } from \"@/registry/new-york/dynamic-components/inventory-manager/lib/context\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/registry/new-york/ui/select\";\r\nimport { DataTable } from \"./data-table\";\r\nimport { useInventoryDataTable } from \"@/registry/new-york/dynamic-components/inventory-manager/hooks/use-inventory-data-table\";\r\n\r\nexport function InventoryDataTable() {\r\n  const {\r\n    data,\r\n    pageCount,\r\n    totalItems,\r\n    lowStockCount,\r\n    isLoading,\r\n    isPending,\r\n    columns,\r\n    pageIndex,\r\n    pageSize,\r\n    nameFilter,\r\n    categoryFilter,\r\n    lowStockOnly,\r\n    handlePaginationChange,\r\n    handleNameFilterChange,\r\n    handleCategoryFilterChange,\r\n    toggleLowStockFilter,\r\n    contextValue,\r\n    refreshData,\r\n  } = useInventoryDataTable();\r\n  return (\r\n    <InventoryContext.Provider value={contextValue}>\r\n      <div>\r\n        {lowStockCount > 0 && (\r\n          <Alert\r\n            variant=\"destructive\"\r\n            className=\"mb-4 cursor-pointer\"\r\n            onClick={toggleLowStockFilter}\r\n          >\r\n            <AlertCircle className=\"h-4 w-4\" />\r\n            <AlertTitle>Low Stock Alert</AlertTitle>\r\n            <AlertDescription className=\"flex justify-between items-center\">\r\n              <span>\r\n                {lowStockCount} {lowStockCount === 1 ? \"item\" : \"items\"} in your\r\n                inventory {lowStockCount === 1 ? \"is\" : \"are\"} running low on\r\n                stock.\r\n              </span>\r\n              <Button\r\n                variant=\"destructive\"\r\n                size=\"sm\"\r\n                className=\"ml-2 border-primary text-secondary hover:text-white hover:bg-red-600\"\r\n              >\r\n                {lowStockOnly ? \"Show All Items\" : \"View Low Stock Items\"}\r\n              </Button>\r\n            </AlertDescription>\r\n          </Alert>\r\n        )}\r\n\r\n        {lowStockOnly && (\r\n          <div className=\"bg-muted p-2 rounded-md mb-4 flex justify-between items-center\">\r\n            <div className=\"flex items-center\">\r\n              <AlertTriangle className=\"h-4 w-4 mr-2 text-destructive\" />\r\n              <span>Showing low stock items only</span>\r\n            </div>\r\n            <Button variant=\"outline\" size=\"sm\" onClick={toggleLowStockFilter}>\r\n              Show All Items\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"flex items-center py-4 gap-2\">\r\n          <div className=\"flex-1\">\r\n            <Input\r\n              placeholder=\"Filter by name...\"\r\n              value={nameFilter}\r\n              onChange={(e) => handleNameFilterChange(e.target.value)}\r\n              className=\"max-w-sm\"\r\n            />\r\n          </div>\r\n          <div className=\"w-[180px]\">\r\n            <Select\r\n              value={categoryFilter || \"all\"}\r\n              onValueChange={handleCategoryFilterChange}\r\n            >\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Category\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">All Categories</SelectItem>\r\n                <SelectItem value=\"Electronics\">Electronics</SelectItem>\r\n                <SelectItem value=\"Clothing\">Clothing</SelectItem>\r\n                <SelectItem value=\"Food\">Food</SelectItem>\r\n                <SelectItem value=\"Other\">Other</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </div>\r\n\r\n        {isLoading ? (\r\n          <div className=\"h-[400px] w-full flex items-center justify-center\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\r\n          </div>\r\n        ) : (\r\n          <DataTable\r\n            columns={columns}\r\n            data={data}\r\n            pageCount={pageCount}\r\n            pageSize={pageSize}\r\n            pageIndex={pageIndex}\r\n            totalItems={totalItems}\r\n            onPaginationChange={handlePaginationChange}\r\n            onRefresh={refreshData}\r\n            isRefreshing={isPending}\r\n          />\r\n        )}\r\n      </div>\r\n    </InventoryContext.Provider>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/components/data-table.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  type ColumnDef,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  useReactTable,\r\n} from \"@tanstack/react-table\";\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/registry/new-york/ui/table\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\n\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/registry/new-york/ui/select\";\r\nimport { RotateCcw } from \"lucide-react\";\r\n\r\ninterface DataTableProps<TData, TValue> {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n  pageCount: number;\r\n  pageSize: number;\r\n  pageIndex: number;\r\n  totalItems: number;\r\n  onPaginationChange: (page: number, pageSize: number) => void;\r\n  onRefresh: () => void;\r\n  isRefreshing: boolean;\r\n}\r\n\r\nexport function DataTable<TData, TValue>({\r\n  columns,\r\n  data,\r\n  pageCount,\r\n  pageSize,\r\n  pageIndex,\r\n  totalItems,\r\n  onPaginationChange,\r\n  onRefresh,\r\n  isRefreshing,\r\n}: DataTableProps<TData, TValue>) {\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    manualPagination: true,\r\n    pageCount,\r\n    state: {\r\n      pagination: {\r\n        pageIndex,\r\n        pageSize,\r\n      },\r\n    },\r\n  });\r\n\r\n  // Calculate the range of items being displayed\r\n  const startItem = pageIndex * pageSize + 1;\r\n  const endItem = Math.min((pageIndex + 1) * pageSize, totalItems);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"rounded-md border\">\r\n        <Table>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => {\r\n                  return (\r\n                    <TableHead key={header.id}>\r\n                      {header.isPlaceholder\r\n                        ? null\r\n                        : flexRender(\r\n                            header.column.columnDef.header,\r\n                            header.getContext(),\r\n                          )}\r\n                    </TableHead>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {table.getRowModel().rows.length > 0 ? (\r\n              table.getRowModel().rows.map((row) => (\r\n                <TableRow key={row.id}>\r\n                  {row.getVisibleCells().map((cell) => (\r\n                    <TableCell key={cell.id}>\r\n                      {flexRender(\r\n                        cell.column.columnDef.cell,\r\n                        cell.getContext(),\r\n                      )}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={columns.length}\r\n                  className=\"h-24 text-center\"\r\n                >\r\n                  No results.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      <div className=\"flex items-center justify-between space-x-2 py-4\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <div className=\"text-sm text-muted-foreground\">\r\n            Showing <span className=\"font-medium\">{startItem}</span> to{\" \"}\r\n            <span className=\"font-medium\">{endItem}</span> of{\" \"}\r\n            <span className=\"font-medium\">{totalItems}</span> items\r\n          </div>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={onRefresh}\r\n            disabled={isRefreshing}\r\n            title=\"Refresh data\"\r\n          >\r\n            <RotateCcw\r\n              className={`h-4 w-4 ${isRefreshing ? \"animate-spin\" : \"\"}`}\r\n            />\r\n            <span className=\"sr-only\">Refresh</span>\r\n          </Button>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => onPaginationChange(pageIndex - 1, pageSize)}\r\n            disabled={pageIndex === 0}\r\n          >\r\n            Previous\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => onPaginationChange(pageIndex + 1, pageSize)}\r\n            disabled={pageIndex === pageCount - 1 || pageCount === 0}\r\n          >\r\n            Next\r\n          </Button>\r\n          <Select\r\n            value={`${pageSize}`}\r\n            onValueChange={(value) => onPaginationChange(0, Number(value))}\r\n          >\r\n            <SelectTrigger className=\"w-[80px]\">\r\n              <SelectValue placeholder={pageSize} />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {[5, 10, 20, 30, 40, 50].map((size) => (\r\n                <SelectItem key={size} value={`${size}`}>\r\n                  {size}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/components/columns.tsx",
      "content": "\"use client\";\r\n\r\nimport type { ColumnDef } from \"@tanstack/react-table\";\r\nimport { MoreHorizontal, AlertTriangle, ArrowUpDown } from \"lucide-react\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { Badge } from \"@/registry/new-york/ui/badge\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuTrigger,\r\n} from \"@/registry/new-york/ui/dropdown-menu\";\r\nimport { EditInventoryItem } from \"./inventory-form\";\r\nimport type { InventoryItem } from \"@prisma/client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from \"@/registry/new-york/ui/alert-dialog\";\r\nimport { deleteInventoryItem } from \"@/registry/new-york/dynamic-components/inventory-manager/actions/inventory\";\r\nimport { useInventory } from \"@/registry/new-york/dynamic-components/inventory-manager/lib/context\";\r\n\r\ninterface ColumnProps {\r\n  onSort: (column: string) => void;\r\n}\r\n\r\nexport const createColumns = ({\r\n  onSort,\r\n}: ColumnProps): ColumnDef<InventoryItem>[] => [\r\n  {\r\n    accessorKey: \"name\",\r\n    header: ({ column }) => {\r\n      return (\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={() => onSort(\"name\")}\r\n          className=\"-ml-4 h-8 data-[state=open]:bg-accent\"\r\n        >\r\n          Name\r\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    accessorKey: \"category\",\r\n    header: ({ column }) => {\r\n      return (\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={() => onSort(\"category\")}\r\n          className=\"-ml-4 h-8 data-[state=open]:bg-accent\"\r\n        >\r\n          Category\r\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n        </Button>\r\n      );\r\n    },\r\n    cell: ({ row }) => {\r\n      const category = row.getValue(\"category\") as string;\r\n      return <Badge variant=\"outline\">{category}</Badge>;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: \"sku\",\r\n    header: ({ column }) => {\r\n      return (\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={() => onSort(\"sku\")}\r\n          className=\"-ml-4 h-8 data-[state=open]:bg-accent\"\r\n        >\r\n          SKU\r\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    accessorKey: \"price\",\r\n    header: ({ column }) => {\r\n      return (\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={() => onSort(\"price\")}\r\n          className=\"-ml-4 h-8 data-[state=open]:bg-accent\"\r\n        >\r\n          Price\r\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n        </Button>\r\n      );\r\n    },\r\n    cell: ({ row }) => {\r\n      const price = Number.parseFloat(row.getValue(\"price\"));\r\n      const formatted = new Intl.NumberFormat(\"en-US\", {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n      }).format(price);\r\n      return formatted;\r\n    },\r\n  },\r\n  {\r\n    accessorKey: \"stock\",\r\n    header: ({ column }) => {\r\n      return (\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={() => onSort(\"stock\")}\r\n          className=\"-ml-4 h-8 data-[state=open]:bg-accent\"\r\n        >\r\n          Stock\r\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n        </Button>\r\n      );\r\n    },\r\n    cell: ({ row }) => {\r\n      const stock = Number.parseInt(row.getValue(\"stock\"));\r\n\r\n      return (\r\n        <div className=\"flex items-center gap-2\">\r\n          <span className={stock < 10 ? \"font-bold text-red-500\" : \"\"}>\r\n            {stock}\r\n          </span>\r\n          {stock < 10 && (\r\n            <Badge variant=\"destructive\" className=\"whitespace-nowrap\">\r\n              <AlertTriangle className=\"h-3 w-3 mr-1\" />\r\n              Low Stock\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      );\r\n    },\r\n  },\r\n  {\r\n    id: \"actions\",\r\n    cell: ({ row }) => {\r\n      const item = row.original;\r\n\r\n      return <ActionCell item={item} />;\r\n    },\r\n  },\r\n];\r\n\r\nfunction ActionCell({ item }: { item: InventoryItem }) {\r\n  const [isDeleteAlertOpen, setIsDeleteAlertOpen] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const { toast } = useToast();\r\n  const { refreshData } = useInventory();\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      setIsDeleting(true);\r\n      const response = await deleteInventoryItem(item.id);\r\n      //if response gets an error, show error toast\r\n      if (response.error) {\r\n        toast({\r\n          title: \"Error\",\r\n          description: response.error,\r\n          variant: \"destructive\",\r\n        });\r\n      } else {\r\n        toast({\r\n          title: \"Item deleted\",\r\n          description: `${item.name} has been removed from inventory.`,\r\n        });\r\n        // Refresh data instead of reloading the page\r\n        await refreshData();\r\n      }\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to delete item. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsDeleting(false);\r\n      setIsDeleteAlertOpen(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\r\n            <span className=\"sr-only\">Open menu</span>\r\n            <MoreHorizontal className=\"h-4 w-4\" />\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent align=\"end\">\r\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\r\n          <EditInventoryItem\r\n            item={item}\r\n            trigger={\r\n              <DropdownMenuItem onSelect={(e) => e.preventDefault()}>\r\n                Edit\r\n              </DropdownMenuItem>\r\n            }\r\n          />\r\n          <DropdownMenuItem onClick={() => setIsDeleteAlertOpen(true)}>\r\n            Delete\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n\r\n      <AlertDialog open={isDeleteAlertOpen} onOpenChange={setIsDeleteAlertOpen}>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              This will permanently delete {item.name} from your inventory. This\r\n              action cannot be undone.\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\r\n            <AlertDialogAction\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                handleDelete();\r\n              }}\r\n              disabled={isDeleting}\r\n              className={isDeleting ? \"opacity-50 cursor-not-allowed\" : \"\"}\r\n            >\r\n              {isDeleting ? \"Deleting...\" : \"Delete\"}\r\n            </AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/inventory/page.tsx",
      "content": "import { InventoryDataTable } from \"@/registry/new-york/dynamic-components/inventory-manager/components/inventory-data-table\";\r\nimport { CreateInventoryItem } from \"@/registry/new-york/dynamic-components/inventory-manager/components/inventory-form\";\r\nimport { Skeleton } from \"@/registry/new-york/ui/skeleton\";\r\nimport { Package } from \"lucide-react\";\r\nimport { Suspense } from \"react\";\r\n\r\nexport default function InventoryPage() {\r\n  return (\r\n    <div className=\"min-h-screen bg-background\">\r\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8 lg:py-12\">\r\n        {/* Header Section */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"p-2 bg-primary/10 rounded-lg\">\r\n                <Package className=\"h-12 w-12 text-primary\" />\r\n              </div>\r\n              <div>\r\n                <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-foreground\">\r\n                  Inventory Management\r\n                </h1>\r\n                <p className=\"text-muted-foreground mt-1\">\r\n                  Manage your inventory items and stock levels\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex-shrink-0\">\r\n              <CreateInventoryItem />\r\n            </div>\r\n          </div>\r\n          <Separator />\r\n        </div>\r\n\r\n        {/* Data Table Section */}\r\n        <div className=\"bg-card p-6 rounded-xl shadow-sm border overflow-hidden\">\r\n          <Suspense\r\n            fallback={\r\n              <div className=\"p-6 space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <Skeleton className=\"h-8 w-48\" />\r\n                  <Skeleton className=\"h-10 w-32\" />\r\n                </div>\r\n                <Skeleton className=\"h-12 w-full\" />\r\n                {Array.from({ length: 8 }).map((_, i) => (\r\n                  <div key={i} className=\"flex items-center space-x-4\">\r\n                    <Skeleton className=\"h-12 w-12 rounded\" />\r\n                    <div className=\"flex-1 space-y-2\">\r\n                      <Skeleton className=\"h-4 w-full\" />\r\n                      <Skeleton className=\"h-4 w-3/4\" />\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            }\r\n          >\r\n            <InventoryDataTable />\r\n          </Suspense>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(inventory-manager)/inventory/page.tsx"
    },
    {
      "path": "dynamic-components/inventory-manager/lib/context.tsx",
      "content": "import { createContext, useContext } from \"react\";\r\n\r\ninterface InventoryContextType {\r\n  refreshData: () => Promise<void>;\r\n  isRefreshing: boolean;\r\n}\r\n\r\nexport const InventoryContext = createContext<InventoryContextType>({\r\n  refreshData: async () => {},\r\n  isRefreshing: false,\r\n});\r\n\r\nexport const useInventory = () => useContext(InventoryContext);\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/hooks/use-inventory-data-table.ts",
      "content": "import { useState, useEffect, useTransition } from \"react\";\r\nimport { useRouter, usePathname, useSearchParams } from \"next/navigation\";\r\nimport type { InventoryItem } from \"@prisma/client\";\r\nimport { getInventoryItems } from \"@/registry/new-york/dynamic-components/inventory-manager/actions/inventory\";\r\nimport { createColumns } from \"@/registry/new-york/dynamic-components/inventory-manager/components/columns\";\r\n\r\nexport const useInventoryDataTable = () => {\r\n  const [data, setData] = useState<InventoryItem[]>([]);\r\n  const [pageCount, setPageCount] = useState(0);\r\n  const [totalItems, setTotalItems] = useState(0);\r\n  const [lowStockCount, setLowStockCount] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  // Filters\r\n  const [nameFilter, setNameFilter] = useState(\"\");\r\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\r\n  const [lowStockOnly, setLowStockOnly] = useState(false);\r\n\r\n  // Sorting\r\n  const [sortBy, setSortBy] = useState(\"updatedAt\");\r\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\r\n\r\n  // Pagination state\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [pageSize, setPageSize] = useState(10);\r\n\r\n  // For URL state management\r\n  const router = useRouter();\r\n  const pathname = usePathname();\r\n  const searchParams = useSearchParams();\r\n\r\n  // Handle sorting\r\n  const handleSort = (column: string) => {\r\n    // If clicking the same column, toggle sort order\r\n    if (sortBy === column) {\r\n      const newOrder = sortOrder === \"asc\" ? \"desc\" : \"asc\";\r\n      setSortOrder(newOrder);\r\n\r\n      // Update URL params\r\n      const params = new URLSearchParams(searchParams);\r\n      params.set(\"sort\", column);\r\n      params.set(\"order\", newOrder);\r\n      router.push(`${pathname}?${params.toString()}`);\r\n    } else {\r\n      // New column, set as default desc\r\n      setSortBy(column);\r\n      setSortOrder(\"desc\");\r\n\r\n      // Update URL params\r\n      const params = new URLSearchParams(searchParams);\r\n      params.set(\"sort\", column);\r\n      params.set(\"order\", \"desc\");\r\n      router.push(`${pathname}?${params.toString()}`);\r\n    }\r\n  };\r\n\r\n  // Load data based on current pagination, filters, and sorting\r\n  const loadData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const result = await getInventoryItems({\r\n        page: pageIndex + 1, // API uses 1-based indexing\r\n        pageSize,\r\n        sortBy,\r\n        sortOrder,\r\n        filters: {\r\n          name: nameFilter,\r\n          category: categoryFilter,\r\n        },\r\n        lowStockOnly,\r\n      });\r\n\r\n      setData(result.items);\r\n      setPageCount(result.meta.totalPages);\r\n      setTotalItems(result.meta.totalItems);\r\n      setLowStockCount(result.meta.lowStockCount);\r\n    } catch (error) {\r\n      console.error(\"Failed to load inventory data:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to refresh data without changing state\r\n  const refreshData = async () => {\r\n    startTransition(async () => {\r\n      try {\r\n        const result = await getInventoryItems({\r\n          page: pageIndex + 1,\r\n          pageSize,\r\n          sortBy,\r\n          sortOrder,\r\n          filters: {\r\n            name: nameFilter,\r\n            category: categoryFilter,\r\n          },\r\n          lowStockOnly,\r\n        });\r\n\r\n        setData(result.items);\r\n        setPageCount(result.meta.totalPages);\r\n        setTotalItems(result.meta.totalItems);\r\n        setLowStockCount(result.meta.lowStockCount);\r\n      } catch (error) {\r\n        console.error(\"Failed to refresh inventory data:\", error);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Handle pagination changes\r\n  const handlePaginationChange = (\r\n    newPageIndex: number,\r\n    newPageSize: number,\r\n  ) => {\r\n    setPageIndex(newPageIndex);\r\n    setPageSize(newPageSize);\r\n\r\n    // Update URL params\r\n    const params = new URLSearchParams(searchParams);\r\n    params.set(\"page\", String(newPageIndex + 1));\r\n    params.set(\"pageSize\", String(newPageSize));\r\n    router.push(`${pathname}?${params.toString()}`);\r\n  };\r\n\r\n  // Handle filter changes\r\n  const handleNameFilterChange = (value: string) => {\r\n    setNameFilter(value);\r\n    setPageIndex(0); // Reset to first page when filtering\r\n\r\n    // Update URL params\r\n    const params = new URLSearchParams(searchParams);\r\n    params.set(\"name\", value);\r\n    params.set(\"page\", \"1\");\r\n    router.push(`${pathname}?${params.toString()}`);\r\n  };\r\n\r\n  const handleCategoryFilterChange = (value: string) => {\r\n    setCategoryFilter(value === \"all\" ? \"\" : value);\r\n    setPageIndex(0); // Reset to first page when filtering\r\n\r\n    // Update URL params\r\n    const params = new URLSearchParams(searchParams);\r\n    if (value !== \"all\") {\r\n      params.set(\"category\", value);\r\n    } else {\r\n      params.delete(\"category\");\r\n    }\r\n    params.set(\"page\", \"1\");\r\n    router.push(`${pathname}?${params.toString()}`);\r\n  };\r\n\r\n  // Handle low stock filter\r\n  const toggleLowStockFilter = () => {\r\n    const newValue = !lowStockOnly;\r\n    setLowStockOnly(newValue);\r\n    setPageIndex(0); // Reset to first page when filtering\r\n\r\n    // Update URL params\r\n    const params = new URLSearchParams(searchParams);\r\n    if (newValue) {\r\n      params.set(\"lowStock\", \"true\");\r\n    } else {\r\n      params.delete(\"lowStock\");\r\n    }\r\n    params.set(\"page\", \"1\");\r\n    router.push(`${pathname}?${params.toString()}`);\r\n  };\r\n\r\n  // Initialize from URL params on first load\r\n  useEffect(() => {\r\n    const page = searchParams.get(\"page\")\r\n      ? Number(searchParams.get(\"page\")) - 1\r\n      : 0;\r\n    const size = searchParams.get(\"pageSize\")\r\n      ? Number(searchParams.get(\"pageSize\"))\r\n      : 10;\r\n    const name = searchParams.get(\"name\") || \"\";\r\n    const category = searchParams.get(\"category\") || \"\";\r\n    const sort = searchParams.get(\"sort\") || \"updatedAt\";\r\n    const order = searchParams.get(\"order\") === \"asc\" ? \"asc\" : \"desc\";\r\n    const lowStock = searchParams.get(\"lowStock\") === \"true\";\r\n\r\n    setPageIndex(page);\r\n    setPageSize(size);\r\n    setNameFilter(name);\r\n    setCategoryFilter(category);\r\n    setSortBy(sort);\r\n    setSortOrder(order);\r\n    setLowStockOnly(lowStock);\r\n  }, [searchParams]);\r\n\r\n  // Load data when pagination, filters, or sorting change\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [\r\n    pageIndex,\r\n    pageSize,\r\n    nameFilter,\r\n    categoryFilter,\r\n    sortBy,\r\n    sortOrder,\r\n    lowStockOnly,\r\n  ]);\r\n\r\n  // Create context value\r\n  const contextValue = {\r\n    refreshData,\r\n    isRefreshing: isPending,\r\n  };\r\n\r\n  // Create columns with sort handler\r\n  const columns = createColumns({ onSort: handleSort });\r\n\r\n  return {\r\n    data,\r\n    pageCount,\r\n    totalItems,\r\n    lowStockCount,\r\n    isLoading,\r\n    isPending,\r\n    columns,\r\n    pageIndex,\r\n    pageSize,\r\n    nameFilter,\r\n    categoryFilter,\r\n    lowStockOnly,\r\n    handlePaginationChange,\r\n    handleNameFilterChange,\r\n    handleCategoryFilterChange,\r\n    toggleLowStockFilter,\r\n    contextValue,\r\n    refreshData,\r\n  };\r\n};\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
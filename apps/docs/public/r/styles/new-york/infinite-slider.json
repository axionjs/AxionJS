{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "infinite-slider",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "An infinite slider component.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "blocks/infinite-slider.tsx",
      "content": "\"use client\";\r\n\r\nimport type React from \"react\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport { motion, useAnimationControls, useMotionValue } from \"framer-motion\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface InfiniteSliderProps {\r\n  children: React.ReactNode;\r\n  speed?: number;\r\n  speedOnHover?: number;\r\n  direction?: \"left\" | \"right\";\r\n  gap?: number;\r\n  className?: string;\r\n  pauseOnHover?: boolean;\r\n}\r\n\r\nexport function InfiniteSlider({\r\n  children,\r\n  speed = 20,\r\n  speedOnHover = 0,\r\n  direction = \"left\",\r\n  gap = 40,\r\n  className,\r\n  pauseOnHover = false,\r\n}: InfiniteSliderProps) {\r\n  const [contentWidth, setContentWidth] = useState(0);\r\n  const [containerWidth, setContainerWidth] = useState(0);\r\n  const [numDuplicates, setNumDuplicates] = useState(1);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const contentRef = useRef<HTMLDivElement>(null);\r\n  const [hovering, setHovering] = useState(false);\r\n  const controls = useAnimationControls();\r\n  const x = useMotionValue(0);\r\n\r\n  // Calculate the width of the content and container\r\n  useEffect(() => {\r\n    if (contentRef.current && containerRef.current) {\r\n      const contentWidth = contentRef.current.offsetWidth;\r\n      const containerWidth = containerRef.current.offsetWidth;\r\n\r\n      setContentWidth(contentWidth);\r\n      setContainerWidth(containerWidth);\r\n\r\n      // Calculate how many duplicates we need to fill the container\r\n      const duplicatesNeeded = Math.ceil(containerWidth / contentWidth) + 1;\r\n      setNumDuplicates(duplicatesNeeded);\r\n    }\r\n  }, [children]);\r\n\r\n  // Animation effect\r\n  useEffect(() => {\r\n    if (contentWidth === 0) return;\r\n\r\n    const totalContentWidth = contentWidth + gap;\r\n    const duration = totalContentWidth / (hovering ? speedOnHover || 0 : speed);\r\n\r\n    if (pauseOnHover && hovering) {\r\n      controls.stop();\r\n      return;\r\n    }\r\n\r\n    if (duration === 0 || duration === Number.POSITIVE_INFINITY) {\r\n      controls.stop();\r\n      return;\r\n    }\r\n\r\n    const directionMultiplier = direction === \"left\" ? -1 : 1;\r\n\r\n    controls.start({\r\n      x: directionMultiplier * totalContentWidth,\r\n      transition: {\r\n        duration,\r\n        ease: \"linear\",\r\n        repeat: Number.POSITIVE_INFINITY,\r\n        repeatType: \"loop\",\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      controls.stop();\r\n    };\r\n  }, [\r\n    contentWidth,\r\n    speed,\r\n    speedOnHover,\r\n    direction,\r\n    hovering,\r\n    pauseOnHover,\r\n    gap,\r\n    controls,\r\n  ]);\r\n\r\n  // If we don't have content width yet, don't render\r\n  if (contentWidth === 0) {\r\n    return (\r\n      <div ref={containerRef} className={cn(\"overflow-hidden\", className)}>\r\n        <div ref={contentRef} className=\"flex\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={cn(\"overflow-hidden\", className)}\r\n      onMouseEnter={() => setHovering(true)}\r\n      onMouseLeave={() => setHovering(false)}\r\n    >\r\n      <motion.div\r\n        className=\"flex\"\r\n        style={{ x, gap: `${gap}px` }}\r\n        animate={controls}\r\n      >\r\n        <div\r\n          ref={contentRef}\r\n          className=\"flex shrink-0\"\r\n          style={{ gap: `${gap}px` }}\r\n        >\r\n          {children}\r\n        </div>\r\n\r\n        {/* Duplicate the content to create the infinite effect */}\r\n        {Array.from({ length: numDuplicates }).map((_, i) => (\r\n          <div\r\n            key={`duplicate-${i}`}\r\n            className=\"flex shrink-0\"\r\n            style={{ gap: `${gap}px` }}\r\n          >\r\n            {children}\r\n          </div>\r\n        ))}\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
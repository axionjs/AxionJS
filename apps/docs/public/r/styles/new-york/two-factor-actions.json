{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "two-factor-actions",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Actions for handling two-factor authentication.",
  "files": [
    {
      "path": "auth/actions/two-factor.ts",
      "content": "import { db } from \"@/registry/new-york/auth/lib/db\";\r\nimport crypto from \"crypto\";\r\n\r\nexport const getTwoFactorTokenByToken = async (token: string) => {\r\n  try {\r\n    const twoFactorToken = await db.twoFactorToken.findUnique({\r\n      where: { token },\r\n    });\r\n\r\n    return twoFactorToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getTwoFactorTokenByEmail = async (email: string) => {\r\n  try {\r\n    const twoFactorToken = await db.twoFactorToken.findFirst({\r\n      where: { email },\r\n    });\r\n\r\n    return twoFactorToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getTwoFactorConfirmationByUserId = async (userId: string) => {\r\n  try {\r\n    const twoFactorConfirmation = await db.twoFactorConfirmation.findUnique({\r\n      where: { userId },\r\n    });\r\n\r\n    return twoFactorConfirmation;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const generateTwoFactorToken = async (email: string) => {\r\n  const token = crypto.randomInt(100_000, 1_000_000).toString();\r\n\r\n  const expires = new Date(new Date().getTime() + 5 * 60 * 1000); // 5 minute expiry\r\n\r\n  const existingToken = await getTwoFactorTokenByEmail(email);\r\n\r\n  if (existingToken) {\r\n    await db.twoFactorToken.delete({\r\n      where: { id: existingToken.id },\r\n    });\r\n  }\r\n\r\n  const twoFactorToken = await db.twoFactorToken.create({\r\n    data: {\r\n      email,\r\n      token,\r\n      expires,\r\n    },\r\n  });\r\n\r\n  return twoFactorToken;\r\n};\r\n",
      "type": "registry:actions",
      "target": ""
    }
  ]
}
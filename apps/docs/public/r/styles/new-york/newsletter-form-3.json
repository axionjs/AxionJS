{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "newsletter-form-3",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A newsletter form component.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "use-toast",
    "select"
  ],
  "files": [
    {
      "path": "blocks/newsletter-form-3.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport { Loader2, Send, CheckCircle2 } from \"lucide-react\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n  FormDescription,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/registry/new-york/ui/select\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// Define form validation schema\r\nconst formSchema = z.object({\r\n  firstName: z\r\n    .string()\r\n    .min(2, { message: \"First name is required\" })\r\n    .optional(),\r\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n  interests: z.string().min(1, { message: \"Please select an interest\" }),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\n// Define available interest options\r\ninterface InterestOption {\r\n  value: string;\r\n  label: string;\r\n  description?: string;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\n// Pre-defined interests with descriptions\r\nconst defaultInterests: InterestOption[] = [\r\n  {\r\n    value: \"technology\",\r\n    label: \"Technology\",\r\n    description: \"Latest tech trends and innovations\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-5 w-5\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    value: \"design\",\r\n    label: \"Design\",\r\n    description: \"UI/UX design trends and inspiration\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-5 w-5\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    value: \"business\",\r\n    label: \"Business\",\r\n    description: \"Business strategy and market insights\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-5 w-5\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    value: \"marketing\",\r\n    label: \"Marketing\",\r\n    description: \"Digital marketing strategies and tools\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-5 w-5\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n  {\r\n    value: \"development\",\r\n    label: \"Development\",\r\n    description: \"Software development and coding tutorials\",\r\n    icon: (\r\n      <svg\r\n        className=\"h-5 w-5\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={1.5}\r\n          d=\"M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4\"\r\n        />\r\n      </svg>\r\n    ),\r\n  },\r\n];\r\n\r\ninterface NewsletterFormProps {\r\n  /**\r\n   * Optional callback for successful form submission\r\n   */\r\n  onSubscribe?: (data: FormValues) => Promise<void>;\r\n  /**\r\n   * Optional callback for submission errors\r\n   */\r\n  onError?: (error: unknown) => void;\r\n  /**\r\n   * Custom form action for server actions\r\n   */\r\n  formAction?: string;\r\n  /**\r\n   * Custom title for the newsletter\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Custom description for the newsletter\r\n   */\r\n  description?: string;\r\n  /**\r\n   * Custom available interests\r\n   */\r\n  interestOptions?: InterestOption[];\r\n  /**\r\n   * Custom class names for the container\r\n   */\r\n  className?: string;\r\n  /**\r\n   * Custom accent color for the form\r\n   */\r\n  accentColor?: \"primary\" | \"blue\" | \"green\" | \"purple\" | \"amber\";\r\n}\r\n\r\nexport default function NewsletterForm({\r\n  onSubscribe,\r\n  onError,\r\n  formAction,\r\n  title = \"Join our newsletter\",\r\n  description = \"Get personalized content delivered to your inbox\",\r\n  interestOptions = defaultInterests,\r\n  className,\r\n  accentColor = \"primary\",\r\n}: NewsletterFormProps) {\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\r\n  const [emailValue, setEmailValue] = React.useState(\"\");\r\n  const { toast } = useToast();\r\n\r\n  const formRef = React.useRef<HTMLFormElement>(null);\r\n  const successRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      email: \"\",\r\n      interests: \"\",\r\n    },\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  // Get gradient classes based on accent color\r\n  const getGradientClasses = () => {\r\n    switch (accentColor) {\r\n      case \"blue\":\r\n        return \"from-blue-400/20 to-blue-500/5\";\r\n      case \"green\":\r\n        return \"from-green-400/20 to-green-500/5\";\r\n      case \"purple\":\r\n        return \"from-purple-400/20 to-purple-500/5\";\r\n      case \"amber\":\r\n        return \"from-amber-400/20 to-amber-500/5\";\r\n      case \"primary\":\r\n      default:\r\n        return \"from-primary/20 to-primary/5\";\r\n    }\r\n  };\r\n\r\n  // Get button color classes based on accent color\r\n  const getButtonClasses = () => {\r\n    switch (accentColor) {\r\n      case \"blue\":\r\n        return \"bg-blue-500 hover:bg-blue-600 focus:ring-blue-500\";\r\n      case \"green\":\r\n        return \"bg-green-500 hover:bg-green-600 focus:ring-green-500\";\r\n      case \"purple\":\r\n        return \"bg-purple-500 hover:bg-purple-600 focus:ring-purple-500\";\r\n      case \"amber\":\r\n        return \"bg-amber-500 hover:bg-amber-600 focus:ring-amber-500\";\r\n      case \"primary\":\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  async function onSubmit(data: FormValues) {\r\n    try {\r\n      setIsLoading(true);\r\n      setEmailValue(data.email);\r\n\r\n      // If onSubscribe callback is provided, use it\r\n      if (onSubscribe) {\r\n        await onSubscribe(data);\r\n      } else {\r\n        // Otherwise, simulate API call\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(\"Newsletter subscription:\", data);\r\n      }\r\n\r\n      setIsSubmitted(true);\r\n\r\n      toast({\r\n        title: \"Subscription successful!\",\r\n        description: \"You've been added to our newsletter.\",\r\n      });\r\n\r\n      // Focus success message for accessibility\r\n      setTimeout(() => {\r\n        if (successRef.current) {\r\n          successRef.current.focus();\r\n        }\r\n      }, 100);\r\n    } catch (error) {\r\n      console.error(\"Subscription error:\", error);\r\n\r\n      toast({\r\n        title: \"Subscription failed\",\r\n        description:\r\n          \"There was a problem with your subscription. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n\r\n      if (onError) {\r\n        onError(error);\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"w-full max-w-md mx-auto\", className)}>\r\n      <div\r\n        className={cn(\r\n          \"bg-gradient-to-br rounded-xl p-8 shadow-sm\",\r\n          getGradientClasses(),\r\n        )}\r\n      >\r\n        {!isSubmitted ? (\r\n          <>\r\n            <div className=\"space-y-2 text-center mb-6\">\r\n              <h2 className=\"text-2xl font-bold\">{title}</h2>\r\n              <p className=\"text-muted-foreground\">{description}</p>\r\n            </div>\r\n\r\n            <Form {...form}>\r\n              <form\r\n                ref={formRef}\r\n                onSubmit={form.handleSubmit(onSubmit)}\r\n                className=\"space-y-4\"\r\n                action={formAction}\r\n                noValidate\r\n              >\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"firstName\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor=\"firstName-input\">\r\n                        First name{\" \"}\r\n                        <span className=\"text-muted-foreground\">\r\n                          (optional)\r\n                        </span>\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          id=\"firstName-input\"\r\n                          placeholder=\"Jane\"\r\n                          className=\"h-12 bg-background/80 backdrop-blur-sm\"\r\n                          autoComplete=\"given-name\"\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor=\"email-input\">Email address</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          id=\"email-input\"\r\n                          placeholder=\"name@example.com\"\r\n                          className=\"h-12 bg-background/80 backdrop-blur-sm\"\r\n                          type=\"email\"\r\n                          autoComplete=\"email\"\r\n                          required\r\n                          aria-required=\"true\"\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"interests\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel htmlFor=\"interests-select\">\r\n                        Interests\r\n                      </FormLabel>\r\n                      <Select\r\n                        onValueChange={field.onChange}\r\n                        defaultValue={field.value}\r\n                      >\r\n                        <FormControl>\r\n                          <SelectTrigger\r\n                            id=\"interests-select\"\r\n                            className=\"h-12 bg-background/80 backdrop-blur-sm\"\r\n                          >\r\n                            <SelectValue placeholder=\"Select your interests\" />\r\n                          </SelectTrigger>\r\n                        </FormControl>\r\n                        <SelectContent>\r\n                          {interestOptions.map((interest) => (\r\n                            <SelectItem\r\n                              key={interest.value}\r\n                              value={interest.value}\r\n                              className=\"flex items-center py-3\"\r\n                            >\r\n                              <div className=\"flex items-center gap-2\">\r\n                                {interest.icon && (\r\n                                  <span className=\"text-muted-foreground\">\r\n                                    {interest.icon}\r\n                                  </span>\r\n                                )}\r\n                                <div>\r\n                                  <span>{interest.label}</span>\r\n                                  {interest.description && (\r\n                                    <p className=\"text-xs text-muted-foreground mt-1\">\r\n                                      {interest.description}\r\n                                    </p>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                      <FormDescription>\r\n                        We'll send you content based on your interests\r\n                      </FormDescription>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  className={cn(\r\n                    \"w-full h-12 mt-2 focus:ring-2 focus:ring-offset-2\",\r\n                    getButtonClasses(),\r\n                  )}\r\n                  disabled={isLoading}\r\n                  variant=\"shine\"\r\n                >\r\n                  {isLoading ? (\r\n                    <>\r\n                      <Loader2\r\n                        className=\"mr-2 h-4 w-4 animate-spin\"\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                      <span>Subscribing...</span>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Send className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\r\n                      <span>Subscribe</span>\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Form>\r\n\r\n            <p className=\"text-xs text-center mt-4 text-muted-foreground\">\r\n              No spam, ever. Unsubscribe anytime.\r\n            </p>\r\n          </>\r\n        ) : (\r\n          <div\r\n            className=\"text-center space-y-4 py-8\"\r\n            role=\"alert\"\r\n            aria-live=\"polite\"\r\n            ref={successRef}\r\n            tabIndex={-1}\r\n          >\r\n            <div className=\"rounded-full w-16 h-16 bg-primary/20 mx-auto flex items-center justify-center\">\r\n              <CheckCircle2\r\n                className=\"w-8 h-8 text-primary\"\r\n                aria-hidden=\"true\"\r\n              />\r\n            </div>\r\n            <h2 className=\"text-2xl font-bold\">You're subscribed!</h2>\r\n            <p className=\"text-muted-foreground\">\r\n              Thank you for subscribing to our newsletter.\r\n              <br />\r\n              We've sent a confirmation email to{\" \"}\r\n              <strong className=\"font-medium text-foreground\">\r\n                {emailValue}\r\n              </strong>\r\n              .\r\n            </p>\r\n\r\n            <div className=\"pt-4 flex flex-col sm:flex-row gap-3 justify-center\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  setIsSubmitted(false);\r\n                  form.reset();\r\n                }}\r\n                className=\"w-full sm:w-auto\"\r\n              >\r\n                Subscribe another email\r\n              </Button>\r\n\r\n              <Button\r\n                variant=\"default\"\r\n                className={cn(\r\n                  \"w-full sm:w-auto focus:ring-2 focus:ring-offset-2\",\r\n                  getButtonClasses(),\r\n                )}\r\n                onClick={() => (window.location.href = \"/\")}\r\n              >\r\n                Return to homepage\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
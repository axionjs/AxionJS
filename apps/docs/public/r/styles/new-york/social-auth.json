{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "social-auth",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A social authentication component that allows users to log in using OAuth provider (Github).",
  "dependencies": [
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "card",
    "alert"
  ],
  "files": [
    {
      "path": "dynamic-components/social-auth/actions/oauth-actions.ts",
      "content": "\"use server\";\n\nimport type React from \"react\";\nimport { generateOAuthUrl } from \"@/registry/new-york/dynamic-components/social-auth/lib/oauth-utils\";\nimport { db } from \"@/registry/new-york/lib/db\";\n\nexport interface OAuthActionResult {\n  success?: string;\n  error?: string;\n  redirectUrl?: string;\n  user?: any;\n}\n\nexport interface OAuthProvider {\n  id: string;\n  name: string;\n  icon: React.ComponentType<{ className?: string }>;\n  color: string;\n}\n\nexport interface OAuthConfig {\n  providers: {\n    github?: {\n      clientId: string;\n      clientSecret: string;\n    };\n  };\n  redirectUrl?: string;\n  onSuccess?: (provider: string, user: any) => void;\n  onError?: (error: string) => void;\n}\n\nexport const initiateOAuthLogin = async (\n  provider: \"github\",\n  redirectUrl?: string,\n): Promise<OAuthActionResult> => {\n  try {\n    if (![\"github\"].includes(provider)) {\n      return { error: \"Unsupported OAuth provider\" };\n    }\n\n    const clientId = process.env[`${provider.toUpperCase()}_CLIENT_ID`];\n    if (!clientId) {\n      return { error: `${provider} OAuth is not configured` };\n    }\n\n    const authUrl = generateOAuthUrl(provider, redirectUrl);\n\n    return {\n      success: \"Redirecting to OAuth provider\",\n      redirectUrl: authUrl,\n    };\n  } catch (error) {\n    console.error(\"OAuth initiation error:\", error);\n    return { error: \"Failed to initiate OAuth login\" };\n  }\n};\n\n// Handle OAuth callback (you'll need to implement this in your API route)\nexport const handleOAuthCallback = async (\n  provider: string,\n  code: string,\n  state?: string,\n): Promise<OAuthActionResult> => {\n  try {\n    // This is a simplified example - you'll need to implement the full OAuth flow\n    // 1. Exchange code for access token\n    // 2. Use access token to get user info\n    // 3. Create or update user in database\n\n    console.log(\"Handling OAuth callback:\", { provider, code, state });\n\n    // Example OAuth token exchange (implement based on provider)\n    let userData;\n\n    if (provider === \"github\") {\n      // Implement GitHub OAuth token exchange\n      userData = await exchangeGitHubCode(code);\n    } else {\n      return { error: \"Unsupported provider\" };\n    }\n\n    if (!userData) {\n      return { error: \"Failed to get user data from OAuth provider\" };\n    }\n\n    const user = await createOrUpdateOAuthUser(provider, userData.id, {\n      email: userData.email,\n      name: userData.name,\n      image: userData.image,\n    });\n\n    return {\n      success: \"OAuth login successful\",\n      user,\n    };\n  } catch (error) {\n    console.error(\"OAuth callback error:\", error);\n    return { error: \"OAuth authentication failed\" };\n  }\n};\n\nasync function exchangeGitHubCode(code: string) {\n  try {\n    // Exchange code for access token\n    const tokenResponse = await fetch(\n      \"https://github.com/login/oauth/access_token\",\n      {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          client_id: process.env.GITHUB_CLIENT_ID!,\n          client_secret: process.env.GITHUB_CLIENT_SECRET!,\n          code,\n        }),\n      },\n    );\n\n    if (!tokenResponse.ok) {\n      throw new Error(\"Failed to exchange code for token\");\n    }\n\n    const tokenData = await tokenResponse.json();\n\n    if (tokenData.error) {\n      throw new Error(tokenData.error_description || \"OAuth error\");\n    }\n\n    // Get user info using access token\n    const userResponse = await fetch(\"https://api.github.com/user\", {\n      headers: {\n        Authorization: `Bearer ${tokenData.access_token}`,\n        \"User-Agent\": \"AxionJS/1.0\",\n      },\n    });\n\n    if (!userResponse.ok) {\n      throw new Error(\"Failed to get user info\");\n    }\n\n    const userData = await userResponse.json();\n\n    // Get user email (GitHub might not return email in user endpoint)\n    const emailResponse = await fetch(\"https://api.github.com/user/emails\", {\n      headers: {\n        Authorization: `Bearer ${tokenData.access_token}`,\n        \"User-Agent\": \"AxionJS/1.0\",\n      },\n    });\n\n    let email = userData.email;\n    if (!email && emailResponse.ok) {\n      const emails = await emailResponse.json();\n      const primaryEmail = emails.find((e: any) => e.primary && e.verified);\n      email = primaryEmail?.email || emails[0]?.email;\n    }\n\n    return {\n      id: userData.id.toString(),\n      email,\n      name: userData.name || userData.login,\n      image: userData.avatar_url,\n    };\n  } catch (error) {\n    console.error(\"GitHub OAuth error:\", error);\n    return null;\n  }\n}\n\n// Get OAuth providers configuration\nexport const getOAuthProviders = async () => {\n  const providers = [];\n\n  if (process.env.GITHUB_CLIENT_ID) {\n    providers.push({\n      id: \"github\",\n      name: \"GitHub\",\n      enabled: true,\n    });\n  }\n\n  return providers;\n};\n\n// Database operations for OAuth\nexport const createOrUpdateOAuthUser = async (\n  provider: string,\n  providerAccountId: string,\n  userData: {\n    email: string;\n    name?: string;\n    image?: string;\n  },\n) => {\n  try {\n    // Check if user exists with this email\n    const existingUser = await db.user.findUnique({\n      where: { email: userData.email },\n    });\n\n    let user;\n\n    if (!existingUser) {\n      // Create new user\n      user = await db.user.create({\n        data: {\n          email: userData.email,\n          name: userData.name,\n          image: userData.image,\n          emailVerified: new Date(),\n        },\n      });\n    } else {\n      user = existingUser;\n    }\n\n    // Check if account is already linked\n    const existingAccount = await db.account.findUnique({\n      where: {\n        provider_providerAccountId: {\n          provider,\n          providerAccountId,\n        },\n      },\n    });\n\n    // If account not linked, link it\n    if (!existingAccount) {\n      await db.account.create({\n        data: {\n          userId: user.id,\n          type: \"oauth\",\n          provider,\n          providerAccountId,\n        },\n      });\n    }\n\n    return user;\n  } catch (error) {\n    console.error(\"OAuth user operation failed:\", error);\n    throw new Error(\"Failed to create or update user\");\n  }\n};\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/social-auth/components/oauth-login.tsx",
      "content": "\"use client\";\n\nimport { useState, useTransition } from \"react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport { Alert, AlertDescription } from \"@/registry/new-york/ui/alert\";\nimport { Loader2 } from \"lucide-react\";\nimport { initiateOAuthLogin } from \"@/registry/new-york/dynamic-components/social-auth/actions/oauth-actions\";\n\nconst GitHubIcon = ({ className }: { className?: string }) => (\n  <svg className={className} fill=\"currentColor\" viewBox=\"0 0 24 24\">\n    <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\" />\n  </svg>\n);\n\ninterface OAuthLoginProps {\n  onSuccess?: (provider: string, user: any) => void;\n  onError?: (error: string) => void;\n  title?: string;\n  description?: string;\n  className?: string;\n  redirectUrl?: string;\n  providers?: \"github\"[];\n}\n\nexport function OAuthLogin({\n  onSuccess,\n  onError,\n  title = \"Welcome\",\n  description = \"Sign in to your account to continue\",\n  className = \"\",\n  redirectUrl,\n  providers = [\"github\"],\n}: OAuthLoginProps) {\n  const [message, setMessage] = useState<{\n    type: \"success\" | \"error\";\n    text: string;\n  } | null>(null);\n  const [loadingProvider, setLoadingProvider] = useState<string | null>(null);\n  const [isPending, startTransition] = useTransition();\n\n  const handleOAuthLogin = (provider: \"github\") => {\n    setMessage(null);\n    setLoadingProvider(provider);\n\n    startTransition(async () => {\n      try {\n        const result = await initiateOAuthLogin(provider, redirectUrl);\n\n        if (result.error) {\n          setMessage({ type: \"error\", text: result.error });\n          onError?.(result.error);\n        } else if (result.redirectUrl) {\n          // Redirect to OAuth provider\n          window.location.href = result.redirectUrl;\n        } else if (result.user) {\n          setMessage({\n            type: \"success\",\n            text: result.success || \"Login successful\",\n          });\n          onSuccess?.(provider, result.user);\n        }\n      } catch (error) {\n        const errorMessage = \"Authentication failed. Please try again.\";\n        setMessage({ type: \"error\", text: errorMessage });\n        onError?.(errorMessage);\n      } finally {\n        setLoadingProvider(null);\n      }\n    });\n  };\n\n  const getProviderConfig = (provider: \"github\") => {\n    const configs = {\n      github: {\n        name: \"GitHub\",\n        icon: GitHubIcon,\n        className: \"border-gray-300 hover:bg-gray-50 text-gray-900\",\n      },\n    };\n    return configs[provider];\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"text-center\">\n        <CardTitle>{title}</CardTitle>\n        <CardDescription>{description}</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {message && (\n          <Alert variant={message.type === \"error\" ? \"destructive\" : \"default\"}>\n            <AlertDescription>{message.text}</AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"space-y-3\">\n          {providers.map((provider) => {\n            const config = getProviderConfig(provider);\n            const isLoading = loadingProvider === provider && isPending;\n\n            return (\n              <Button\n                key={provider}\n                variant=\"outline\"\n                className={`w-full ${config.className}`}\n                onClick={() => handleOAuthLogin(provider)}\n                disabled={isPending}\n              >\n                {isLoading ? (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : (\n                  <config.icon className=\"mr-2 h-4 w-4\" />\n                )}\n                Continue with {config.name}\n              </Button>\n            );\n          })}\n        </div>\n\n        <div className=\"text-center text-sm text-gray-500\">\n          By continuing, you agree to our Terms of Service and Privacy Policy.\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/social-auth/lib/oauth-utils.ts",
      "content": "export const generateOAuthUrl = (\n  provider: string,\n  redirectUrl?: string,\n): string => {\n  const baseUrls = {\n    github: \"https://github.com/login/oauth/authorize\",\n  };\n\n  const params = new URLSearchParams({\n    client_id: process.env[`${provider.toUpperCase()}_CLIENT_ID`] || \"\",\n    redirect_uri:\n      redirectUrl ||\n      `${process.env.NEXT_PUBLIC_APP_URL}/api/auth/callback/${provider}`,\n    scope: \"user:email\",\n    response_type: \"code\",\n    state: crypto.randomUUID(), // Add CSRF protection\n  });\n\n  return `${baseUrls[provider as keyof typeof baseUrls]}?${params.toString()}`;\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/social-auth/social/page.tsx",
      "content": "\"use client\";\nimport { OAuthLogin } from \"@/registry/new-york/dynamic-components/social-auth/components/oauth-login\";\n\nexport default function Social() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"mx-auto max-w-xl px-4\">\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold text-gray-800\">OAuth Login</h2>\n          <OAuthLogin\n            onSuccess={(provider, user) => {\n              console.log(\"OAuth Success:\", { provider, user });\n            }}\n            onError={(error) => {\n              console.error(\"OAuth Error:\", error);\n            }}\n            providers={[\"github\"]}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(social-auth)/social/page.tsx"
    }
  ]
}
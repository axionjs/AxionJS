{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "event-registration-form-3",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A form for event registration.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "checkbox",
    "use-toast",
    "radio-group"
  ],
  "files": [
    {
      "path": "blocks/event-registration-form-3.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\r\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\r\n\r\nconst formSchema = z.object({\r\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\r\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n  phone: z.string().min(10, { message: \"Please enter a valid phone number\" }),\r\n  attendeeType: z.enum([\"individual\", \"student\", \"corporate\"], {\r\n    required_error: \"Please select an attendee type\",\r\n  }),\r\n  sessions: z\r\n    .array(z.string())\r\n    .min(1, { message: \"Please select at least one session\" }),\r\n  agreeTerms: z.boolean().refine((val) => val === true, {\r\n    message: \"You must agree to the terms and conditions\",\r\n  }),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\nconst sessions = [\r\n  {\r\n    id: \"keynote\",\r\n    title: \"Opening Keynote\",\r\n    description: \"The future of technology\",\r\n    time: \"9:00 AM - 10:30 AM\",\r\n  },\r\n  {\r\n    id: \"workshop-1\",\r\n    title: \"Workshop: AI Fundamentals\",\r\n    description: \"Learn the basics of artificial intelligence\",\r\n    time: \"11:00 AM - 12:30 PM\",\r\n  },\r\n  {\r\n    id: \"workshop-2\",\r\n    title: \"Workshop: Cloud Computing\",\r\n    description: \"Scaling your applications in the cloud\",\r\n    time: \"2:00 PM - 3:30 PM\",\r\n  },\r\n  {\r\n    id: \"panel\",\r\n    title: \"Industry Panel Discussion\",\r\n    description: \"Experts discuss emerging trends\",\r\n    time: \"4:00 PM - 5:30 PM\",\r\n  },\r\n];\r\n\r\ninterface EventRegistrationFormProps {\r\n  /**\r\n   * Optional callback that runs after successful form submission\r\n   */\r\n  onRegistrationSuccess?: (data: FormValues) => void;\r\n  /**\r\n   * Optional callback that runs if registration fails\r\n   */\r\n  onRegistrationError?: (error: unknown) => void;\r\n  /**\r\n   * Custom form action for server submission\r\n   */\r\n  formAction?: string;\r\n  /**\r\n   * Event date (displayed in the event details)\r\n   */\r\n  eventDate?: string;\r\n  /**\r\n   * Event location (displayed in the event details)\r\n   */\r\n  eventLocation?: string;\r\n}\r\n\r\nexport default function EventRegistrationForm({\r\n  onRegistrationSuccess,\r\n  onRegistrationError,\r\n  formAction,\r\n  eventDate = \"September 15-16, 2025\",\r\n  eventLocation = \"Tech Convention Center, San Francisco\",\r\n}: EventRegistrationFormProps) {\r\n  const [step, setStep] = React.useState(1);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\r\n  const { toast } = useToast();\r\n  const formRef = React.useRef<HTMLFormElement>(null);\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      attendeeType: \"individual\",\r\n      sessions: [],\r\n      agreeTerms: false,\r\n    },\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const nextStep = async () => {\r\n    if (step === 1) {\r\n      const isValid = await form.trigger([\"name\", \"email\", \"phone\"]);\r\n      if (!isValid) return;\r\n    }\r\n    setStep(step + 1);\r\n  };\r\n\r\n  const prevStep = () => {\r\n    setStep(step - 1);\r\n  };\r\n\r\n  async function onSubmit(data: FormValues) {\r\n    try {\r\n      setIsLoading(true);\r\n      if (!formAction) {\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(data);\r\n      }\r\n      setIsSubmitted(true);\r\n      toast({\r\n        title: \"Registration successful!\",\r\n        description: \"You've been registered for the event.\",\r\n      });\r\n      if (onRegistrationSuccess) onRegistrationSuccess(data);\r\n    } catch (error) {\r\n      console.error(\"Registration error:\", error);\r\n      toast({\r\n        title: \"Registration failed\",\r\n        description:\r\n          \"There was a problem with your registration. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n      if (onRegistrationError) onRegistrationError(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  const getPrice = () => {\r\n    const attendeeType = form.watch(\"attendeeType\");\r\n    switch (attendeeType) {\r\n      case \"student\":\r\n        return \"$149\";\r\n      case \"corporate\":\r\n        return \"$499\";\r\n      case \"individual\":\r\n      default:\r\n        return \"$299\";\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setStep(1);\r\n    setIsSubmitted(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-2xl mx-auto p-6 space-y-6 bg-background text-foreground rounded-lg shadow-md\">\r\n      <div className=\"space-y-4\">\r\n        <h1 className=\"text-3xl font-bold text-center\">\r\n          {step === 1 && \"Personal Information\"}\r\n          {step === 2 && \"Event Details\"}\r\n          {isSubmitted && \"Registration Complete\"}\r\n        </h1>\r\n        <p className=\"text-center text-muted-foreground\">\r\n          {step === 1 && \"Provide your contact information to register.\"}\r\n          {step === 2 && \"Select your attendee type and sessions.\"}\r\n          {isSubmitted && \"Thank you for registering for our event!\"}\r\n        </p>\r\n      </div>\r\n\r\n      <Form {...form}>\r\n        <form\r\n          ref={formRef}\r\n          onSubmit={form.handleSubmit(onSubmit)}\r\n          className=\"space-y-6\"\r\n          action={formAction}\r\n          noValidate\r\n        >\r\n          {step === 1 && (\r\n            <div className=\"space-y-6\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"name\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel htmlFor=\"name-input\">Full Name</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        id=\"name-input\"\r\n                        placeholder=\"John Doe\"\r\n                        {...field}\r\n                        autoComplete=\"name\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <FormField\r\n                control={form.control}\r\n                name=\"email\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel htmlFor=\"email-input\">Email</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        id=\"email-input\"\r\n                        placeholder=\"name@example.com\"\r\n                        type=\"email\"\r\n                        {...field}\r\n                        autoComplete=\"email\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <FormField\r\n                control={form.control}\r\n                name=\"phone\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel htmlFor=\"phone-input\">Phone Number</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        id=\"phone-input\"\r\n                        placeholder=\"+1 (555) 123-4567\"\r\n                        type=\"tel\"\r\n                        {...field}\r\n                        autoComplete=\"tel\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <div className=\"flex justify-end\">\r\n                <Button onClick={nextStep} variant=\"default\">\r\n                  Continue\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {step === 2 && (\r\n            <div className=\"space-y-6\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"attendeeType\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Attendee Type</FormLabel>\r\n                    <RadioGroup\r\n                      onValueChange={field.onChange}\r\n                      defaultValue={field.value}\r\n                      className=\"space-y-2\"\r\n                    >\r\n                      <RadioGroupItem\r\n                        value=\"individual\"\r\n                        label=\"Individual ($299)\"\r\n                      />\r\n                      <RadioGroupItem value=\"student\" label=\"Student ($149)\" />\r\n                      <RadioGroupItem\r\n                        value=\"corporate\"\r\n                        label=\"Corporate ($499)\"\r\n                      />\r\n                    </RadioGroup>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <FormField\r\n                control={form.control}\r\n                name=\"sessions\"\r\n                render={() => (\r\n                  <FormItem>\r\n                    <FormLabel>Select Sessions</FormLabel>\r\n                    <div className=\"space-y-2\">\r\n                      {sessions.map((session) => (\r\n                        <Checkbox\r\n                          key={session.id}\r\n                          id={`session-${session.id}`}\r\n                          label={`${session.title} (${session.time})`}\r\n                          value={session.id}\r\n                          onCheckedChange={(checked) => {\r\n                            const currentSessions = form.getValues(\"sessions\");\r\n                            form.setValue(\r\n                              \"sessions\",\r\n                              checked\r\n                                ? [...currentSessions, session.id]\r\n                                : currentSessions.filter(\r\n                                    (id) => id !== session.id,\r\n                                  ),\r\n                            );\r\n                          }}\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <FormField\r\n                control={form.control}\r\n                name=\"agreeTerms\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <Checkbox\r\n                      id=\"agree-terms\"\r\n                      label=\"I agree to the terms and conditions\"\r\n                      {...field}\r\n                    />\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <div className=\"flex justify-between\">\r\n                <Button onClick={prevStep} variant=\"outline\">\r\n                  Back\r\n                </Button>\r\n                <Button type=\"submit\" variant=\"default\" disabled={isLoading}>\r\n                  {isLoading ? \"Processing...\" : \"Complete Registration\"}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {isSubmitted && (\r\n            <div className=\"text-center space-y-4\">\r\n              <h2 className=\"text-xl font-bold\">Registration Complete</h2>\r\n              <p className=\"text-muted-foreground\">\r\n                Thank you for registering! A confirmation email has been sent to{\" \"}\r\n                {form.getValues(\"email\")}.\r\n              </p>\r\n              <Button onClick={resetForm} variant=\"default\">\r\n                Register Another Attendee\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </form>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "login-form-2",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A login form component.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button",
    "input",
    "form",
    "checkbox",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/login-form-2.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useId } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { Loader2, AtSignIcon, LockIcon, Github } from \"lucide-react\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\n\n// Form schema (without zod dependency for lighter implementation)\nconst validateEmail = (email) => {\n  return String(email)\n    .toLowerCase()\n    .match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n};\n\nconst validatePassword = (password) => {\n  return password.length >= 8;\n};\n\n// Animation variants\nconst fadeIn = {\n  hidden: { opacity: 0, y: 20 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: { duration: 0.4 },\n  },\n};\n\nconst buttonVariants = {\n  idle: { scale: 1 },\n  hover: { scale: 1.02, transition: { duration: 0.2 } },\n  tap: { scale: 0.98, transition: { duration: 0.1 } },\n};\n\nconst staggerChildren = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1,\n    },\n  },\n};\n\ninterface LoginFormProps {\n  /**\n   * Function to handle login submission\n   */\n  onLogin?: (values: any) => Promise<void>;\n  /**\n   * URL to redirect to after successful login\n   */\n  redirectTo?: string;\n  /**\n   * Function to handle social login\n   */\n  onSocialLogin?: (provider: string) => Promise<void>;\n  /**\n   * URL for the signup page\n   */\n  signupUrl?: string;\n  /**\n   * URL for the forgot password page\n   */\n  forgotPasswordUrl?: string;\n  /**\n   * Custom form action for server-side form processing\n   */\n  formAction?: string;\n  /**\n   * Custom CSS class for the container\n   */\n  className?: string;\n  /**\n   * Color theme for gradient\n   */\n  colorTheme?: \"professional\" | \"cool-gray\" | \"warm-gray\" | \"subtle-blue\";\n  /**\n   * Whether to show left panel on mobile\n   */\n  showLeftPanelOnMobile?: boolean;\n}\n\nexport function LoginForm2({\n  onLogin,\n  redirectTo = \"/dashboard\",\n  onSocialLogin,\n  signupUrl = \"/signup\",\n  forgotPasswordUrl = \"/reset-password\",\n  formAction,\n  className,\n  colorTheme = \"professional\",\n  showLeftPanelOnMobile = false,\n}: LoginFormProps) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [isPending, setIsPending] = React.useState(false);\n  const [formErrors, setFormErrors] = React.useState({\n    email: \"\",\n    password: \"\",\n  });\n  const formRef = React.useRef<HTMLFormElement>(null);\n\n  const emailId = useId();\n  const passwordId = useId();\n\n  const form = useForm({\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n  });\n\n  // Custom validation\n  const validateForm = (data) => {\n    const errors = {\n      email: \"\",\n      password: \"\",\n    };\n\n    if (!validateEmail(data.email)) {\n      errors.email = \"Please enter a valid email address\";\n    }\n\n    if (!validatePassword(data.password)) {\n      errors.password = \"Password must be at least 8 characters\";\n    }\n\n    setFormErrors(errors);\n    return !errors.email && !errors.password;\n  };\n\n  // Handle form submission\n  async function handleSubmit(values) {\n    if (!validateForm(values)) {\n      return;\n    }\n\n    try {\n      setIsPending(true);\n\n      if (onLogin) {\n        await onLogin(values);\n      } else {\n        // Default login logic - replace with your actual login implementation\n        await new Promise((resolve) => setTimeout(resolve, 1500)); // Simulate API call\n        console.log(\"Login values:\", values);\n      }\n\n      toast({\n        title: \"Login successful\",\n        description: \"You have been logged in successfully.\",\n      });\n\n      if (redirectTo) {\n        router.push(redirectTo);\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n\n      toast({\n        title: \"Login failed\",\n        description: \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsPending(false);\n    }\n  }\n\n  // Handle social login\n  const handleSocialLogin = async (provider: string) => {\n    try {\n      setIsPending(true);\n\n      if (onSocialLogin) {\n        await onSocialLogin(provider);\n      } else {\n        // Simulate social login\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        console.log(`Logging in with ${provider}`);\n\n        toast({\n          title: \"Social login\",\n          description: `Logged in with ${provider}`,\n        });\n\n        if (redirectTo) {\n          router.push(redirectTo);\n        }\n      }\n    } catch (error) {\n      console.error(`Social login error with ${provider}:`, error);\n\n      toast({\n        title: \"Login failed\",\n        description: `Could not log in with ${provider}. Please try again.`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsPending(false);\n    }\n  };\n\n  // Get gradient classes based on color theme\n  const getGradientClasses = () => {\n    switch (colorTheme) {\n      case \"cool-gray\":\n        return \"from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800 text-gray-800 dark:text-white hover:from-gray-300 hover:to-gray-400 dark:hover:from-gray-600 dark:hover:to-gray-700\";\n      case \"warm-gray\":\n        return \"from-gray-200 to-stone-300 dark:from-gray-700 dark:to-stone-800 text-gray-800 dark:text-white hover:from-gray-300 hover:to-stone-400 dark:hover:from-gray-600 dark:hover:to-stone-700\";\n      case \"subtle-blue\":\n        return \"from-gray-200 to-blue-100 dark:from-gray-700 dark:to-blue-900 text-gray-800 dark:text-white hover:from-gray-300 hover:to-blue-200 dark:hover:from-gray-600 dark:hover:to-blue-800\";\n      case \"professional\":\n      default:\n        return \"from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 text-gray-800 dark:text-white hover:from-gray-200 hover:to-gray-300 dark:hover:from-gray-700 dark:hover:to-gray-600\";\n    }\n  };\n\n  // Get panel gradient classes\n  const getPanelGradient = () => {\n    switch (colorTheme) {\n      case \"cool-gray\":\n        return \"from-gray-600 to-gray-800\";\n      case \"warm-gray\":\n        return \"from-stone-600 to-gray-800\";\n      case \"subtle-blue\":\n        return \"from-gray-700 to-blue-900\";\n      case \"professional\":\n      default:\n        return \"from-gray-700 to-gray-900\";\n    }\n  };\n\n  return (\n    <motion.div\n      initial=\"hidden\"\n      animate=\"visible\"\n      variants={fadeIn}\n      className={cn(\n        \"flex min-h-[80vh] w-full items-center justify-center p-4\",\n        className,\n      )}\n    >\n      <div className=\"grid w-full max-w-5xl grid-cols-1 md:grid-cols-2 overflow-hidden rounded-2xl shadow-xl\">\n        {/* Left panel - only shown on md+ screens by default */}\n        <motion.div\n          initial={{ opacity: 0, x: -50 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className={cn(\n            `bg-gradient-to-br ${getPanelGradient()} p-8 md:p-12 flex flex-col justify-between`,\n            showLeftPanelOnMobile ? \"block\" : \"hidden md:flex\",\n          )}\n        >\n          <motion.div variants={staggerChildren}>\n            <motion.h1\n              variants={fadeIn}\n              className=\"text-3xl font-bold text-white\"\n            >\n              Welcome back\n            </motion.h1>\n            <motion.p variants={fadeIn} className=\"mt-2 text-white/80\">\n              Log in to your account to continue your journey with us\n            </motion.p>\n          </motion.div>\n\n          <motion.div variants={staggerChildren} className=\"space-y-8\">\n            <motion.div\n              variants={fadeIn}\n              className=\"flex items-start space-x-4\"\n            >\n              <div className=\"h-12 w-12 rounded-full bg-white/10 flex items-center justify-center shrink-0 backdrop-blur-sm\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"text-white\"\n                  aria-hidden=\"true\"\n                >\n                  <path d=\"M22 12h-4l-3 9L9 3l-3 9H2\" />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-medium text-white\">\n                  Fast & Secure\n                </h3>\n                <p className=\"text-white/70\">\n                  Our platform ensures your data is always safe and secure\n                </p>\n              </div>\n            </motion.div>\n\n            <motion.div\n              variants={fadeIn}\n              className=\"flex items-start space-x-4\"\n            >\n              <div className=\"h-12 w-12 rounded-full bg-white/10 flex items-center justify-center shrink-0 backdrop-blur-sm\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"text-white\"\n                  aria-hidden=\"true\"\n                >\n                  <path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10\" />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-medium text-white\">Protected</h3>\n                <p className=\"text-white/70\">\n                  Advanced encryption and security protocols to protect your\n                  account\n                </p>\n              </div>\n            </motion.div>\n          </motion.div>\n        </motion.div>\n\n        {/* Right panel - Form */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n          className=\"bg-white dark:bg-gray-900 p-6 sm:p-8 md:p-12\"\n        >\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3, duration: 0.5 }}\n            className=\"mb-8\"\n          >\n            <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-100\">\n              Sign in\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n              Enter your credentials to access your account\n            </p>\n          </motion.div>\n\n          <Form {...form}>\n            <form\n              ref={formRef}\n              onSubmit={form.handleSubmit(handleSubmit)}\n              className=\"space-y-4\"\n              action={formAction}\n              noValidate\n            >\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor={emailId}>Email</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          id={emailId}\n                          placeholder=\"name@example.com\"\n                          className=\"peer ps-9\"\n                          {...field}\n                          type=\"email\"\n                          autoComplete=\"email\"\n                          aria-required=\"true\"\n                        />\n                        <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                          <AtSignIcon size={16} aria-hidden=\"true\" />\n                        </div>\n                      </div>\n                    </FormControl>\n                    {formErrors.email && (\n                      <FormMessage>{formErrors.email}</FormMessage>\n                    )}\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <div className=\"flex items-center justify-between\">\n                      <FormLabel htmlFor={passwordId}>Password</FormLabel>\n                      <Link\n                        href={forgotPasswordUrl}\n                        className=\"text-xs text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-300 transition-colors\"\n                      >\n                        Forgot password?\n                      </Link>\n                    </div>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          id={passwordId}\n                          placeholder=\"Enter your password\"\n                          className=\"peer ps-9\"\n                          {...field}\n                          type=\"password\"\n                          autoComplete=\"current-password\"\n                          aria-required=\"true\"\n                        />\n                        <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                          <LockIcon size={16} aria-hidden=\"true\" />\n                        </div>\n                      </div>\n                    </FormControl>\n                    {formErrors.password && (\n                      <FormMessage>{formErrors.password}</FormMessage>\n                    )}\n                  </FormItem>\n                )}\n              />\n\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.6, duration: 0.5 }}\n              >\n                <FormField\n                  control={form.control}\n                  name=\"rememberMe\"\n                  render={({ field }) => (\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"remember-me\"\n                        checked={field.value}\n                        onCheckedChange={(checked) => {\n                          const value = checked === true;\n                          field.onChange(value);\n                        }}\n                        className=\"data-[state=checked]:bg-gray-800 data-[state=checked]:border-gray-800 dark:data-[state=checked]:bg-gray-600 dark:data-[state=checked]:border-gray-600\"\n                      />\n                      <label\n                        htmlFor=\"remember-me\"\n                        className=\"text-sm text-gray-600 dark:text-gray-400 cursor-pointer\"\n                      >\n                        Remember me\n                      </label>\n                    </div>\n                  )}\n                />\n              </motion.div>\n\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.7, duration: 0.5 }}\n                className=\"pt-2\"\n              >\n                <motion.div\n                  variants={buttonVariants}\n                  initial=\"idle\"\n                  whileHover=\"hover\"\n                  whileTap=\"tap\"\n                >\n                  <Button\n                    type=\"submit\"\n                    className={cn(\n                      \"w-full h-12 bg-gradient-to-r shadow-md\",\n                      getGradientClasses(),\n                    )}\n                    disabled={isPending}\n                    aria-label=\"Sign in to your account\"\n                  >\n                    <AnimatePresence mode=\"wait\" initial={false}>\n                      {isPending ? (\n                        <motion.div\n                          key=\"loading\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          exit={{ opacity: 0 }}\n                          className=\"flex items-center\"\n                        >\n                          <Loader2\n                            className=\"mr-2 h-4 w-4 animate-spin\"\n                            aria-hidden=\"true\"\n                          />\n                          <span>Signing in...</span>\n                        </motion.div>\n                      ) : (\n                        <motion.span\n                          key=\"sign-in\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          exit={{ opacity: 0 }}\n                          className=\"font-medium\"\n                        >\n                          Sign in\n                        </motion.span>\n                      )}\n                    </AnimatePresence>\n                  </Button>\n                </motion.div>\n              </motion.div>\n\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.8, duration: 0.5 }}\n                className=\"relative my-6\"\n              >\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-gray-200 dark:border-gray-800\"></div>\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"bg-white dark:bg-gray-900 px-2 text-gray-500 dark:text-gray-400\">\n                    Or continue with\n                  </span>\n                </div>\n              </motion.div>\n\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.9, duration: 0.5 }}\n                className=\"grid grid-cols-3 gap-3\"\n              >\n                <motion.div\n                  variants={buttonVariants}\n                  whileHover=\"hover\"\n                  whileTap=\"tap\"\n                >\n                  <Button\n                    variant=\"outline\"\n                    type=\"button\"\n                    className=\"h-12 border-gray-200 hover:border-gray-300 dark:border-gray-800 dark:hover:border-gray-700 transition-colors w-full\"\n                    onClick={() => handleSocialLogin(\"github\")}\n                    disabled={isPending}\n                    aria-label=\"Sign in with GitHub\"\n                  >\n                    <Github className=\"h-5 w-5\" aria-hidden=\"true\" />\n                  </Button>\n                </motion.div>\n\n                <motion.div\n                  variants={buttonVariants}\n                  whileHover=\"hover\"\n                  whileTap=\"tap\"\n                >\n                  <Button\n                    variant=\"outline\"\n                    type=\"button\"\n                    className=\"h-12 border-gray-200 hover:border-gray-300 dark:border-gray-800 dark:hover:border-gray-700 transition-colors w-full\"\n                    onClick={() => handleSocialLogin(\"google\")}\n                    disabled={isPending}\n                    aria-label=\"Sign in with Google\"\n                  >\n                    <svg\n                      className=\"h-5 w-5\"\n                      viewBox=\"0 0 24 24\"\n                      aria-hidden=\"true\"\n                    >\n                      <path\n                        fill=\"currentColor\"\n                        d=\"M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z\"\n                      />\n                    </svg>\n                  </Button>\n                </motion.div>\n\n                <motion.div\n                  variants={buttonVariants}\n                  whileHover=\"hover\"\n                  whileTap=\"tap\"\n                >\n                  <Button\n                    variant=\"outline\"\n                    type=\"button\"\n                    className=\"h-12 border-gray-200 hover:border-gray-300 dark:border-gray-800 dark:hover:border-gray-700 transition-colors w-full\"\n                    onClick={() => handleSocialLogin(\"apple\")}\n                    disabled={isPending}\n                    aria-label=\"Sign in with Apple\"\n                  >\n                    <svg\n                      className=\"h-5 w-5\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"currentColor\"\n                      aria-hidden=\"true\"\n                    >\n                      <path d=\"M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701z\" />\n                    </svg>\n                  </Button>\n                </motion.div>\n              </motion.div>\n\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 1, duration: 0.5 }}\n                className=\"text-center text-sm text-gray-600 dark:text-gray-400 mt-6\"\n              >\n                Don&apos;t have an account?{\" \"}\n                <Link\n                  href={signupUrl}\n                  className=\"font-medium text-gray-900 hover:text-gray-700 dark:text-gray-300 dark:hover:text-gray-100 transition-colors\"\n                >\n                  Sign up\n                </Link>\n              </motion.div>\n            </form>\n          </Form>\n        </motion.div>\n      </div>\n    </motion.div>\n  );\n}\n\nexport default LoginForm2;\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
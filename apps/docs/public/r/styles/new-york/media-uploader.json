{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "media-uploader",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A media uploader with image and video support.",
  "dependencies": [
    "prisma",
    "@prisma/client",
    "cloudinary"
  ],
  "registryDependencies": [
    "button",
    "alert-dialog",
    "card",
    "progress"
  ],
  "files": [
    {
      "path": "dynamic-components/media-uploader/actions/media-actions.ts",
      "content": "\"use server\";\r\n\r\nimport { db } from \"@/registry/new-york/lib/db\";\r\nimport { v2 as cloudinary } from \"cloudinary\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\n// Configure Cloudinary\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nexport async function uploadToCloudinary({\r\n  name,\r\n  type,\r\n  size,\r\n  base64,\r\n  isVideo,\r\n}: {\r\n  name: string;\r\n  type: string;\r\n  size: number;\r\n  base64: string;\r\n  isVideo: boolean;\r\n}) {\r\n  try {\r\n    // Create a unique public_id\r\n    const timestamp = new Date().getTime();\r\n    const publicId = `upload_${timestamp}_${name.replace(/\\.[^/.]+$/, \"\")}`;\r\n\r\n    let uploadResult;\r\n\r\n    if (isVideo) {\r\n      // For videos - note: Cloudinary might have size limits for direct uploads\r\n      uploadResult = await cloudinary.uploader.upload(\r\n        `data:${type};base64,${base64}`,\r\n        {\r\n          resource_type: \"video\",\r\n          public_id: publicId,\r\n          folder: \"videos\",\r\n        }\r\n      );\r\n    } else {\r\n      // For images\r\n      uploadResult = await cloudinary.uploader.upload(\r\n        `data:${type};base64,${base64}`,\r\n        {\r\n          public_id: publicId,\r\n          folder: \"images\",\r\n        }\r\n      );\r\n    }\r\n\r\n    // Create a record in the database\r\n    const mediaRecord = await db.media.create({\r\n      data: {\r\n        name,\r\n        size,\r\n        url: uploadResult.secure_url,\r\n        publicId: uploadResult.public_id,\r\n        thumbnailUrl: isVideo ? null : uploadResult.secure_url,\r\n        mediaType: isVideo ? \"VIDEO\" : \"IMAGE\",\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/media\");\r\n\r\n    return {\r\n      success: true,\r\n      mediaId: mediaRecord.id,\r\n      url: uploadResult.secure_url,\r\n      thumbnailUrl: isVideo ? null : uploadResult.secure_url,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error uploading to Cloudinary:\", error);\r\n    throw new Error(\"Failed to upload media\");\r\n  }\r\n}\r\n\r\nexport async function getMedia() {\r\n  try {\r\n    const media = await db.media.findMany({\r\n      orderBy: {\r\n        createdAt: \"desc\",\r\n      },\r\n    });\r\n\r\n    return media;\r\n  } catch (error) {\r\n    console.error(\"Error fetching media:\", error);\r\n    throw new Error(\"Failed to fetch media\");\r\n  }\r\n}\r\n\r\nexport async function deleteMedia(id: string) {\r\n  try {\r\n    // Get the media record\r\n    const media = await db.media.findUnique({\r\n      where: { id },\r\n    });\r\n\r\n    if (!media) {\r\n      throw new Error(\"Media not found\");\r\n    }\r\n\r\n    // Delete from Cloudinary\r\n    if (media.publicId) {\r\n      await cloudinary.uploader.destroy(media.publicId, {\r\n        resource_type: media.mediaType === \"VIDEO\" ? \"video\" : \"image\",\r\n      });\r\n    }\r\n\r\n    // Delete from database\r\n    await db.media.delete({\r\n      where: { id },\r\n    });\r\n\r\n    // Revalidate paths\r\n    revalidatePath(\"/media\");\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Error deleting media:\", error);\r\n    throw new Error(\"Failed to delete media\");\r\n  }\r\n}\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalThis.prisma = db;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/media-uploader/components/media-uploader.tsx",
      "content": "\"use client\";\r\n\r\nimport type React from \"react\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport Image from \"next/image\";\r\nimport {\r\n  Upload,\r\n  X,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  ImageIcon,\r\n  Film,\r\n  Trash2,\r\n  Eye,\r\n} from \"lucide-react\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { uploadToCloudinary } from \"@/registry/new-york/dynamic-components/media-uploader/actions/media-actions\";\r\nimport { Progress } from \"@/registry/new-york/ui/progress\";\r\nimport { Badge } from \"@/registry/new-york/ui/badge\";\r\nimport { ScrollArea } from \"@/registry/new-york/ui/scroll-area\";\r\nimport { Separator } from \"@/registry/new-york/ui/separator\";\r\n\r\ntype FileStatus = \"idle\" | \"uploading\" | \"success\" | \"error\";\r\n\r\ninterface FileWithStatus {\r\n  file: File;\r\n  id: string;\r\n  progress: number;\r\n  status: FileStatus;\r\n  url?: string;\r\n  thumbnailUrl?: string;\r\n  isVideo: boolean;\r\n}\r\n\r\nexport function MediaUploader() {\r\n  const [files, setFiles] = useState<FileWithStatus[]>([]);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const router = useRouter();\r\n\r\n  const handleFileChange = (selectedFiles: FileList | null) => {\r\n    if (!selectedFiles) return;\r\n\r\n    const newFiles = Array.from(selectedFiles)\r\n      .filter((file) => {\r\n        const fileType = file.type;\r\n        return fileType.includes(\"image\") || fileType.includes(\"video\");\r\n      })\r\n      .map((file) => ({\r\n        file,\r\n        id: crypto.randomUUID(),\r\n        progress: 0,\r\n        status: \"idle\" as FileStatus,\r\n        isVideo: file.type.includes(\"video\"),\r\n      }));\r\n\r\n    setFiles((prev) => [...prev, ...newFiles]);\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragLeave = () => {\r\n    setIsDragging(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragging(false);\r\n    handleFileChange(e.dataTransfer.files);\r\n  };\r\n\r\n  const handleUpload = async (fileWithStatus: FileWithStatus) => {\r\n    try {\r\n      setFiles((prev) =>\r\n        prev.map((f) =>\r\n          f.id === fileWithStatus.id ? { ...f, status: \"uploading\" } : f\r\n        )\r\n      );\r\n\r\n      const reader = new FileReader();\r\n      const base64 = await new Promise((resolve) => {\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.readAsDataURL(fileWithStatus.file);\r\n      });\r\n\r\n      const steps = 10;\r\n      for (let i = 1; i <= steps; i++) {\r\n        await new Promise((resolve) => setTimeout(resolve, 100));\r\n        setFiles((prev) =>\r\n          prev.map((f) =>\r\n            f.id === fileWithStatus.id\r\n              ? { ...f, progress: (i / steps) * 100 }\r\n              : f\r\n          )\r\n        );\r\n      }\r\n\r\n      const result = await uploadToCloudinary({\r\n        name: fileWithStatus.file.name,\r\n        type: fileWithStatus.file.type,\r\n        size: fileWithStatus.file.size,\r\n        base64: (base64 as string).split(\",\")[1],\r\n        isVideo: fileWithStatus.isVideo,\r\n      });\r\n\r\n      setFiles((prev) =>\r\n        prev.map((f) =>\r\n          f.id === fileWithStatus.id\r\n            ? {\r\n                ...f,\r\n                status: \"success\",\r\n                progress: 100,\r\n                url: result.url,\r\n                thumbnailUrl: result.thumbnailUrl || result.url,\r\n              }\r\n            : f\r\n        )\r\n      );\r\n\r\n      router.refresh();\r\n    } catch (error) {\r\n      console.error(\"Upload failed:\", error);\r\n      setFiles((prev) =>\r\n        prev.map((f) =>\r\n          f.id === fileWithStatus.id ? { ...f, status: \"error\" } : f\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const removeFile = (id: string) => {\r\n    setFiles((prev) => prev.filter((f) => f.id !== id));\r\n  };\r\n\r\n  const getStatusIcon = (status: FileStatus) => {\r\n    switch (status) {\r\n      case \"success\":\r\n        return <CheckCircle className=\"h-3 w-3 text-green-600\" />;\r\n      case \"error\":\r\n        return <AlertCircle className=\"h-3 w-3 text-destructive\" />;\r\n      case \"uploading\":\r\n        return (\r\n          <div className=\"h-3 w-3 rounded-full bg-blue-500 animate-pulse\" />\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 flex items-center justify-center p-4 bg-background/80 backdrop-blur-sm z-50\">\r\n      <Card className=\"w-full max-w-[80vw] max-h-[70vh] flex flex-col shadow-lg border\">\r\n        <CardHeader className=\"flex-shrink-0 pb-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"text-lg font-semibold\">\r\n              Media Upload\r\n            </CardTitle>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Badge variant=\"outline\" className=\"text-xs\">\r\n                {files.length} files\r\n              </Badge>\r\n              {files.length > 0 && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => setFiles([])}\r\n                  className=\"h-7 px-2 text-xs\"\r\n                >\r\n                  <Trash2 className=\"h-3 w-3 mr-1\" />\r\n                  Clear\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"flex-1 flex flex-col gap-4 min-h-0 p-4\">\r\n          {/* Uploaded Files Section */}\r\n          {files.length > 0 && (\r\n            <>\r\n              <div className=\"flex-1 min-h-0\">\r\n                <ScrollArea className=\"h-full pr-4\">\r\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-3\">\r\n                    {files.map((fileWithStatus) => (\r\n                      <div key={fileWithStatus.id} className=\"relative group\">\r\n                        <Card className=\"overflow-hidden border transition-all hover:shadow-md\">\r\n                          <div className=\"aspect-square relative bg-muted/30\">\r\n                            {fileWithStatus.status === \"success\" &&\r\n                            fileWithStatus.thumbnailUrl ? (\r\n                              <>\r\n                                <Image\r\n                                  src={fileWithStatus.thumbnailUrl}\r\n                                  alt={fileWithStatus.file.name}\r\n                                  fill\r\n                                  className=\"object-cover\"\r\n                                />\r\n                                {fileWithStatus.isVideo && (\r\n                                  <div className=\"absolute inset-0 flex items-center justify-center bg-black/20\">\r\n                                    <Film className=\"h-4 w-4 text-white\" />\r\n                                  </div>\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <div className=\"flex items-center justify-center h-full\">\r\n                                {fileWithStatus.isVideo ? (\r\n                                  <Film className=\"h-6 w-6 text-muted-foreground\" />\r\n                                ) : (\r\n                                  <ImageIcon className=\"h-6 w-6 text-muted-foreground\" />\r\n                                )}\r\n                              </div>\r\n                            )}\r\n\r\n                            {/* Status Overlay */}\r\n                            {fileWithStatus.status === \"uploading\" && (\r\n                              <div className=\"absolute inset-0 bg-background/80 flex items-center justify-center\">\r\n                                <div className=\"text-center space-y-1\">\r\n                                  <Progress\r\n                                    value={fileWithStatus.progress}\r\n                                    className=\"h-1 w-12\"\r\n                                  />\r\n                                  <span className=\"text-xs text-muted-foreground\">\r\n                                    {Math.round(fileWithStatus.progress)}%\r\n                                  </span>\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n\r\n                            {/* Remove Button */}\r\n                            <Button\r\n                              variant=\"secondary\"\r\n                              size=\"icon\"\r\n                              className=\"absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity\"\r\n                              onClick={() => removeFile(fileWithStatus.id)}\r\n                            >\r\n                              <X className=\"h-3 w-3\" />\r\n                            </Button>\r\n                          </div>\r\n\r\n                          <div className=\"p-2 space-y-1\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <p className=\"text-xs font-medium truncate flex-1 mr-1\">\r\n                                {fileWithStatus.file.name}\r\n                              </p>\r\n                              {getStatusIcon(fileWithStatus.status)}\r\n                            </div>\r\n\r\n                            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\r\n                              <span>\r\n                                {(\r\n                                  fileWithStatus.file.size /\r\n                                  1024 /\r\n                                  1024\r\n                                ).toFixed(1)}\r\n                                MB\r\n                              </span>\r\n\r\n                              {fileWithStatus.status === \"idle\" && (\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  className=\"h-5 px-2 text-xs\"\r\n                                  onClick={() => handleUpload(fileWithStatus)}\r\n                                >\r\n                                  Upload\r\n                                </Button>\r\n                              )}\r\n\r\n                              {fileWithStatus.status === \"success\" &&\r\n                                fileWithStatus.url && (\r\n                                  <Button\r\n                                    variant=\"ghost\"\r\n                                    size=\"sm\"\r\n                                    className=\"h-5 px-2 text-xs\"\r\n                                    asChild\r\n                                  >\r\n                                    <a\r\n                                      href={fileWithStatus.url}\r\n                                      target=\"_blank\"\r\n                                      rel=\"noopener noreferrer\"\r\n                                    >\r\n                                      <Eye className=\"h-3 w-3\" />\r\n                                    </a>\r\n                                  </Button>\r\n                                )}\r\n\r\n                              {fileWithStatus.status === \"error\" && (\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  className=\"h-5 px-2 text-xs text-destructive\"\r\n                                  onClick={() => handleUpload(fileWithStatus)}\r\n                                >\r\n                                  Retry\r\n                                </Button>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </Card>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </ScrollArea>\r\n              </div>\r\n              <Separator />\r\n            </>\r\n          )}\r\n\r\n          {/* Upload Area */}\r\n          <div className=\"flex-shrink-0\">\r\n            <div\r\n              className={cn(\r\n                \"border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-all duration-200\",\r\n                isDragging\r\n                  ? \"border-primary bg-primary/5\"\r\n                  : \"border-muted-foreground/25 hover:border-primary/50 hover:bg-accent/30\"\r\n              )}\r\n              onDragOver={handleDragOver}\r\n              onDragLeave={handleDragLeave}\r\n              onDrop={handleDrop}\r\n              onClick={() => fileInputRef.current?.click()}\r\n              role=\"button\"\r\n              tabIndex={0}\r\n              aria-label=\"Upload media files\"\r\n              onKeyDown={(e) => {\r\n                if (e.key === \"Enter\" || e.key === \" \") {\r\n                  e.preventDefault();\r\n                  fileInputRef.current?.click();\r\n                }\r\n              }}\r\n            >\r\n              <input\r\n                type=\"file\"\r\n                ref={fileInputRef}\r\n                onChange={(e) => handleFileChange(e.target.files)}\r\n                className=\"sr-only\"\r\n                multiple\r\n                accept=\"image/*,video/*\"\r\n              />\r\n\r\n              <div className=\"flex flex-col items-center justify-center space-y-2\">\r\n                <div className=\"p-2 rounded-full bg-primary/10\">\r\n                  <Upload className=\"h-5 w-5 text-primary\" />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <p className=\"text-sm font-medium\">\r\n                    Drop files here or click to browse\r\n                  </p>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    JPG, PNG, GIF, WebP, MP4, WebM\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/media-uploader/components/media-gallery.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport Image from \"next/image\";\r\nimport { Film, Trash2 } from \"lucide-react\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { deleteMedia } from \"@/registry/new-york/dynamic-components/media-uploader/actions/media-actions\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/registry/new-york/ui/alert-dialog\";\r\n\r\ninterface Media {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  thumbnailUrl: string | null;\r\n  mediaType: \"IMAGE\" | \"VIDEO\";\r\n  createdAt: Date;\r\n}\r\n\r\ninterface MediaGalleryProps {\r\n  media: Media[];\r\n}\r\n\r\nexport function MediaGallery({ media: initialMedia }: MediaGalleryProps) {\r\n  const [media, setMedia] = useState<Media[]>(initialMedia);\r\n  const [mediaToDelete, setMediaToDelete] = useState<string | null>(null);\r\n\r\n  const handleDelete = async () => {\r\n    if (!mediaToDelete) return;\r\n\r\n    try {\r\n      await deleteMedia(mediaToDelete);\r\n      setMedia(media.filter((item) => item.id !== mediaToDelete));\r\n      setMediaToDelete(null);\r\n    } catch (error) {\r\n      console.error(\"Error deleting media:\", error);\r\n    }\r\n  };\r\n\r\n  if (media.length === 0) {\r\n    return (\r\n      <div className=\"text-center p-10 border rounded-lg\">\r\n        <p className=\"text-muted-foreground\">No media uploaded yet</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\r\n      {media.map((item) => (\r\n        <div\r\n          key={item.id}\r\n          className=\"group relative border rounded-lg overflow-hidden\"\r\n        >\r\n          <div className=\"aspect-square relative bg-gray-100\">\r\n            <Image\r\n              src={item.thumbnailUrl || item.url}\r\n              alt={item.name}\r\n              fill\r\n              className=\"object-cover\"\r\n            />\r\n            {item.mediaType === \"VIDEO\" && (\r\n              <div className=\"absolute inset-0 flex items-center justify-center bg-black/30\">\r\n                <Film className=\"h-10 w-10 text-white\" />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"p-3\">\r\n            <p className=\"font-medium truncate\">{item.name}</p>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {new Date(item.createdAt).toLocaleDateString()}\r\n            </p>\r\n\r\n            <div className=\"mt-2 flex justify-between\">\r\n              <Button variant=\"outline\" size=\"sm\" asChild>\r\n                <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  View\r\n                </a>\r\n              </Button>\r\n\r\n              <AlertDialog\r\n                open={mediaToDelete === item.id}\r\n                onOpenChange={(open) => !open && setMediaToDelete(null)}\r\n              >\r\n                <AlertDialogTrigger asChild>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"icon\"\r\n                    className=\"text-red-500 hover:text-red-600\"\r\n                    onClick={() => setMediaToDelete(item.id)}\r\n                  >\r\n                    <Trash2 className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </AlertDialogTrigger>\r\n                <AlertDialogContent>\r\n                  <AlertDialogHeader>\r\n                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n                    <AlertDialogDescription>\r\n                      This will permanently delete the media. This action cannot\r\n                      be undone.\r\n                    </AlertDialogDescription>\r\n                  </AlertDialogHeader>\r\n                  <AlertDialogFooter>\r\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n                    <AlertDialogAction\r\n                      onClick={handleDelete}\r\n                      className=\"bg-red-500 hover:bg-red-600\"\r\n                    >\r\n                      Delete\r\n                    </AlertDialogAction>\r\n                  </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n              </AlertDialog>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/media-uploader/media/page.tsx",
      "content": "import { getMedia } from \"@/registry/new-york/dynamic-components/media-uploader/actions/media-actions\";\r\nimport { MediaGallery } from \"@/registry/new-york/dynamic-components/media-uploader/components/media-gallery\";\r\n\r\nexport default async function MediaPage() {\r\n  const media = await getMedia();\r\n\r\n  return (\r\n    <div className=\"container mx-auto py-10\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">Media Gallery</h1>\r\n      <MediaGallery media={media} />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(media-uploader)/media/page.tsx"
    }
  ]
}
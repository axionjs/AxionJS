{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "accessibility",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "zustand"
  ],
  "registryDependencies": [
    "dialog",
    "switch",
    "button",
    "avatar",
    "tabs",
    "tooltip",
    "slider"
  ],
  "files": [
    {
      "path": "ui/accessibility/components/AccessibilityUI.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport {\n  useAccessibilityStore,\n  FeatureIntensity,\n  ContrastMode,\n} from \"@/registry/new-york/ui/accessibility/lib/accessibility-store\";\nimport screenReaderService from \"@/registry/new-york/ui/accessibility/lib/screen-reader-service\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Switch } from \"@/registry/new-york/ui/switch\";\nimport { Slider } from \"@/registry/new-york/ui/slider\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/registry/new-york/ui/tabs\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/new-york/ui/tooltip\";\n\nimport {\n  LucideEye,\n  LucideMaximize,\n  LucideText,\n  LucideUnderline,\n  LucideVolume2,\n  LucideRefreshCw,\n  LucideX,\n  LucideLineChart,\n  LucideInfo,\n  LucidePalette,\n  LucideMousePointer2,\n  LucideBookText,\n  LucideHand,\n  LucideZap,\n  LucidePersonStanding,\n} from \"lucide-react\";\n\n// Inlined AccessibilitySlider component\ninterface AccessibilitySliderProps {\n  value: FeatureIntensity | ContrastMode;\n  onChange: (value: FeatureIntensity | ContrastMode) => void;\n  label: string;\n  icon: React.ReactNode;\n  options?: { value: string; label: string }[];\n}\n\nfunction AccessibilitySlider({\n  value,\n  onChange,\n  label,\n  icon,\n  options,\n}: AccessibilitySliderProps) {\n  const defaultOptions = [\n    { value: \"default\", label: \"Default\" },\n    { value: \"medium\", label: \"Medium\" },\n    { value: \"high\", label: \"High\" },\n  ];\n\n  const currentOptions = options || defaultOptions;\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center gap-2\">\n        <div className=\"w-5 h-5 flex items-center justify-center\">{icon}</div>\n        <span className=\"text-sm font-medium\">{label}</span>\n      </div>\n      <Tabs\n        value={value}\n        onValueChange={(v) => onChange(v as FeatureIntensity | ContrastMode)}\n        className=\"w-full\"\n      >\n        <TabsList\n          className={`grid w-full gap-2`}\n          style={{\n            gridTemplateColumns: `repeat(${currentOptions.length}, 1fr)`,\n          }}\n        >\n          {currentOptions.map((option) => (\n            <TabsTrigger\n              key={option.value}\n              value={option.value}\n              className=\"text-xs\"\n            >\n              {option.label}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n      </Tabs>\n    </div>\n  );\n}\n\n// Combined AccessibilityUI component\nexport function AccessibilityUI({ children }: { children: React.ReactNode }) {\n  const {\n    isOpen,\n    toggleOpen,\n    contrast,\n    setContrast,\n    highlightLinks,\n    setHighlightLinks,\n    textSize,\n    setTextSize,\n    textSpacing,\n    setTextSpacing,\n    hideImages,\n    toggleHideImages,\n    dyslexiaFriendly,\n    toggleDyslexiaFriendly,\n    lineHeight,\n    setLineHeight,\n    saturation,\n    setSaturation,\n    cursorSize,\n    setCursorSize,\n    screenReader,\n    toggleScreenReader,\n    setScreenReaderSpeed,\n    setScreenReaderVolume,\n    resetAll,\n  } = useAccessibilityStore();\n\n  // Initialize and clean up screen reader service\n  useEffect(() => {\n    screenReaderService.initialize(\n      screenReader.enabled,\n      screenReader.speed,\n      screenReader.volume,\n    );\n    return () => {\n      screenReaderService.cleanup();\n    };\n  }, [screenReader.enabled, screenReader.speed, screenReader.volume]);\n\n  // Apply all accessibility settings to the HTML element (moved from AccessibilityProvider)\n  useEffect(() => {\n    const html = document.documentElement;\n\n    const classesToRemove = [\n      \"contrast-medium\",\n      \"contrast-high\",\n      \"contrast-windows-inverted\",\n      \"contrast-windows-dark\",\n      \"contrast-windows-light\",\n      \"highlight-links-medium\",\n      \"highlight-links-high\",\n      \"text-size-medium\",\n      \"text-size-high\",\n      \"text-spacing-medium\",\n      \"text-spacing-high\",\n      \"hide-images\",\n      \"dyslexia-friendly\",\n      \"line-height-medium\",\n      \"line-height-high\",\n      \"saturation-medium\",\n      \"saturation-high\",\n      \"cursor-medium\",\n      \"cursor-high\",\n    ];\n\n    html.classList.remove(...classesToRemove);\n\n    if (contrast === \"medium\") {\n      html.classList.add(\"contrast-medium\");\n    } else if (contrast === \"high\") {\n      html.classList.add(\"contrast-high\");\n    } else if (contrast === \"inverted\") {\n      html.classList.add(\"contrast-windows-inverted\");\n    } else if (contrast === \"dark\") {\n      html.classList.add(\"contrast-windows-dark\");\n    } else if (contrast === \"light\") {\n      html.classList.add(\"contrast-windows-light\");\n    }\n\n    if (highlightLinks === \"medium\") {\n      html.classList.add(\"highlight-links-medium\");\n    } else if (highlightLinks === \"high\") {\n      html.classList.add(\"highlight-links-high\");\n    }\n\n    if (textSize === \"medium\") {\n      html.classList.add(\"text-size-medium\");\n    } else if (textSize === \"high\") {\n      html.classList.add(\"text-size-high\");\n    }\n\n    if (textSpacing === \"medium\") {\n      html.classList.add(\"text-spacing-medium\");\n    } else if (textSpacing === \"high\") {\n      html.classList.add(\"text-spacing-high\");\n    }\n\n    if (hideImages) {\n      html.classList.add(\"hide-images\");\n    }\n\n    if (dyslexiaFriendly) {\n      html.classList.add(\"dyslexia-friendly\");\n    }\n\n    if (lineHeight === \"medium\") {\n      html.classList.add(\"line-height-medium\");\n    } else if (lineHeight === \"high\") {\n      html.classList.add(\"line-height-high\");\n    }\n\n    if (saturation === \"medium\") {\n      html.classList.add(\"saturation-medium\");\n    } else if (saturation === \"high\") {\n      html.classList.add(\"saturation-high\");\n    }\n\n    if (cursorSize === \"medium\") {\n      html.classList.add(\"cursor-medium\");\n    } else if (cursorSize === \"high\") {\n      html.classList.add(\"cursor-high\");\n    }\n\n    if (screenReader.enabled) {\n      html.setAttribute(\"data-screen-reader\", \"enabled\");\n    } else {\n      html.removeAttribute(\"data-screen-reader\");\n    }\n  }, [\n    contrast,\n    highlightLinks,\n    textSize,\n    textSpacing,\n    hideImages,\n    dyslexiaFriendly,\n    lineHeight,\n    saturation,\n    cursorSize,\n    screenReader,\n  ]);\n\n  // Event listener for the custom toggle event (for the floating button AND keyboard shortcut)\n  // This listener now also handles the Ctrl+U keyboard shortcut (moved from AccessibilityProvider)\n  useEffect(() => {\n    const handleToggleEvent = () => {\n      toggleOpen();\n    };\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === \"u\") {\n        event.preventDefault();\n        toggleOpen(); // Directly toggle the state\n      }\n    };\n\n    document.addEventListener(\"toggleAccessibilityPanel\", handleToggleEvent);\n    document.addEventListener(\"keydown\", handleKeyDown); // Listen for keyboard shortcut\n\n    return () => {\n      document.removeEventListener(\n        \"toggleAccessibilityPanel\",\n        handleToggleEvent,\n      );\n      document.removeEventListener(\"keydown\", handleKeyDown); // Clean up keyboard listener\n    };\n  }, [toggleOpen]);\n\n  const contrastOptions = [\n    { value: \"default\", label: \"Default\" },\n    { value: \"inverted\", label: \"Inverted\" },\n    { value: \"dark\", label: \"Dark\" },\n    { value: \"light\", label: \"Light\" },\n  ];\n\n  return (\n    <>\n      {children}\n\n      {/* Accessibility Trigger (Floating Button) */}\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              variant=\"default\"\n              size=\"lg\"\n              className=\"fixed bottom-4 right-4 z-[9998] rounded-full w-16 h-16 shadow-lg bg-primary hover:bg-primary/85 flex items-center justify-center accessibility-trigger\"\n              aria-label=\"Open Accessibility Menu\"\n              onClick={toggleOpen}\n            >\n              <div className=\"relative\">\n                <LucidePersonStanding className=\"w-6 h-6 text-white\" />\n                {screenReader.enabled && (\n                  <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border border-white animate-pulse\" />\n                )}\n              </div>\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent side=\"left\">\n            <p>Accessibility Menu</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n\n      {/* Overlay */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-[9997] transition-opacity duration-300\"\n          onClick={toggleOpen}\n          aria-hidden=\"true\"\n        />\n      )}\n\n      {/* Accessibility Sidebar */}\n      <div\n        className={`fixed top-0 right-0 h-full bg-background text-foreground shadow-xl z-[9999] transition-transform duration-300 ease-in-out border-l\n          ${isOpen ? \"translate-x-0\" : \"translate-x-full\"}\n          w-full sm:w-[35vw] md:w-[30vw] lg:w-[25vw] min-w-[350px] max-w-[450px]\n        `}\n        aria-label=\"Accessibility Settings\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n      >\n        {/* Header */}\n        <div className=\"p-4 border-b flex items-center justify-between bg-background flex-shrink-0\">\n          <h2 className=\"text-lg font-semibold text-foreground\">\n            Accessibility Settings\n          </h2>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            aria-label=\"Close Accessibility Menu\"\n            className=\"text-muted-foreground hover:text-foreground\"\n            onClick={toggleOpen}\n          >\n            <LucideX className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex flex-col h-[calc(100vh-140px)] overflow-hidden\">\n          <Tabs\n            defaultValue=\"vision\"\n            className=\"p-4 flex-grow flex flex-col overflow-hidden\"\n          >\n            <TabsList className=\"grid grid-cols-4 w-full mb-4 flex-shrink-0\">\n              <TabsTrigger value=\"vision\" className=\"text-xs\">\n                <LucideEye className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\n                <span className=\"hidden sm:inline\">Vision</span>\n                <span className=\"sm:hidden\">V</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"content\" className=\"text-xs\">\n                <LucideBookText className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\n                <span className=\"hidden sm:inline\">Content</span>\n                <span className=\"sm:hidden\">C</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"interaction\" className=\"text-xs\">\n                <LucideHand className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\n                <span className=\"hidden sm:inline\">Interaction</span>\n                <span className=\"sm:hidden\">I</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"screen-reader\" className=\"text-xs\">\n                <LucideVolume2 className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\n                <span className=\"hidden sm:inline\">Reader</span>\n                <span className=\"sm:hidden\">R</span>\n              </TabsTrigger>\n            </TabsList>\n\n            <div className=\"overflow-y-auto flex-grow pr-2 pb-2\">\n              <TabsContent value=\"vision\" className=\"space-y-6\">\n                <AccessibilitySlider\n                  label=\"Contrast\"\n                  value={contrast}\n                  onChange={setContrast}\n                  icon={<LucidePalette className=\"h-4 w-4\" />}\n                  options={contrastOptions}\n                />\n\n                <AccessibilitySlider\n                  label=\"Highlight Links\"\n                  value={highlightLinks}\n                  onChange={setHighlightLinks}\n                  icon={<LucideUnderline className=\"h-4 w-4\" />}\n                />\n\n                <AccessibilitySlider\n                  label=\"Saturation\"\n                  value={saturation}\n                  onChange={setSaturation}\n                  icon={<LucideLineChart className=\"h-4 w-4\" />}\n                />\n\n                <div className=\"flex items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <label\n                      htmlFor=\"hide-images\"\n                      className=\"text-sm font-medium\"\n                    >\n                      Hide Images\n                    </label>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Removes all images from the page.\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"hide-images\"\n                    checked={hideImages}\n                    onCheckedChange={toggleHideImages}\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"content\" className=\"space-y-6\">\n                <AccessibilitySlider\n                  label=\"Text Size\"\n                  value={textSize}\n                  onChange={setTextSize}\n                  icon={<LucideText className=\"h-4 w-4\" />}\n                />\n\n                <AccessibilitySlider\n                  label=\"Text Spacing\"\n                  value={textSpacing}\n                  onChange={setTextSpacing}\n                  icon={<LucideMaximize className=\"h-4 w-4\" />}\n                />\n\n                <AccessibilitySlider\n                  label=\"Line Height\"\n                  value={lineHeight}\n                  onChange={setLineHeight}\n                  icon={<LucideLineChart className=\"h-4 w-4 rotate-90\" />}\n                />\n\n                <div className=\"flex items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <label\n                      htmlFor=\"dyslexia-friendly\"\n                      className=\"text-sm font-medium\"\n                    >\n                      Dyslexia Friendly Font\n                    </label>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Changes text to a font optimized for dyslexia.\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"dyslexia-friendly\"\n                    checked={dyslexiaFriendly}\n                    onCheckedChange={toggleDyslexiaFriendly}\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"interaction\" className=\"space-y-6\">\n                <AccessibilitySlider\n                  label=\"Cursor Size\"\n                  value={cursorSize}\n                  onChange={setCursorSize}\n                  icon={<LucideMousePointer2 className=\"h-4 w-4\" />}\n                />\n\n                <div className=\"p-4 bg-blue-50 rounded-lg space-y-2\">\n                  <div className=\"flex items-start gap-2\">\n                    <LucideInfo className=\"h-4 w-4 text-blue-500 mt-0.5\" />\n                    <div>\n                      <h4 className=\"text-sm font-medium\">\n                        Keyboard Shortcuts\n                      </h4>\n                      <ul className=\"text-xs space-y-1 mt-1\">\n                        <li>\n                          <kbd className=\"bg-gray-200 px-1 py-0.5 rounded text-gray-800\">\n                            Ctrl\n                          </kbd>{\" \"}\n                          +{\" \"}\n                          <kbd className=\"bg-gray-200 px-1 py-0.5 rounded text-gray-800\">\n                            U\n                          </kbd>\n                          : Toggle Accessibility Panel\n                        </li>\n                        <li>\n                          <kbd className=\"bg-gray-200 px-1 py-0.5 rounded text-gray-800\">\n                            Tab\n                          </kbd>\n                          : Navigate through elements\n                        </li>\n                        <li>\n                          <kbd className=\"bg-gray-200 px-1 py-0.5 rounded text-gray-800\">\n                            Enter\n                          </kbd>\n                          : Activate focused element\n                        </li>\n                        <li>\n                          <kbd className=\"bg-gray-200 px-1 py-0.5 rounded text-gray-800\">\n                            Esc\n                          </kbd>\n                          : Close dialogs or menus\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"screen-reader\" className=\"space-y-6\">\n                <div className=\"flex items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <label\n                      htmlFor=\"screen-reader-toggle\"\n                      className=\"text-sm font-medium\"\n                    >\n                      Enable Screen Reader\n                    </label>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Reads content aloud as you hover or focus.\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"screen-reader-toggle\"\n                    checked={screenReader.enabled}\n                    onCheckedChange={toggleScreenReader}\n                  />\n                </div>\n\n                {screenReader.enabled && (\n                  <>\n                    <AccessibilitySlider\n                      label=\"Speech Speed\"\n                      value={\n                        screenReader.speed === \"slow\" ? \"medium\" : \"default\"\n                      }\n                      onChange={(val) =>\n                        setScreenReaderSpeed(\n                          val === \"medium\" ? \"slow\" : \"normal\",\n                        )\n                      }\n                      icon={<LucideZap className=\"h-4 w-4\" />}\n                      options={[\n                        { value: \"default\", label: \"Normal\" },\n                        { value: \"medium\", label: \"Slow\" },\n                      ]}\n                    />\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-5 h-5 flex items-center justify-center\">\n                          <LucideVolume2 className=\"h-4 w-4\" />\n                        </div>\n                        <span className=\"text-sm font-medium\">Volume</span>\n                      </div>\n                      <Slider\n                        min={0}\n                        max={1}\n                        step={0.1}\n                        value={[screenReader.volume]}\n                        onValueChange={(val) => setScreenReaderVolume(val[0])}\n                        className=\"w-full\"\n                      />\n                      <p className=\"text-right text-xs text-muted-foreground\">\n                        {(screenReader.volume * 100).toFixed(0)}%\n                      </p>\n                    </div>\n                  </>\n                )}\n              </TabsContent>\n            </div>\n          </Tabs>\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t bg-background flex-shrink-0 sticky bottom-0\">\n          <div className=\"flex justify-between gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={resetAll}\n              className=\"flex items-center gap-1\"\n            >\n              <LucideRefreshCw className=\"h-3.5 w-3.5\" />\n              Reset All\n            </Button>\n            <Button\n              variant=\"default\"\n              size=\"sm\"\n              className=\"flex items-center gap-1\"\n              onClick={toggleOpen}\n            >\n              <LucideX className=\"h-3.5 w-3.5\" />\n              Close\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/accessibility/lib/accessibility-store.ts",
      "content": "\"use client\";\n\nimport { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\n// Define types for feature intensity levels\nexport type FeatureIntensity = \"default\" | \"medium\" | \"high\";\nexport type ContrastMode = \"default\" | \"inverted\" | \"dark\" | \"light\"; // New contrast modes\n\ninterface AccessibilityState {\n  isOpen: boolean;\n  toggleOpen: () => void;\n\n  // Accessibility features with intensity levels\n  contrast: ContrastMode; // Changed to ContrastMode\n  setContrast: (level: ContrastMode) => void; // Changed to ContrastMode\n\n  highlightLinks: FeatureIntensity;\n  setHighlightLinks: (level: FeatureIntensity) => void;\n\n  textSize: FeatureIntensity;\n  setTextSize: (level: FeatureIntensity) => void;\n\n  textSpacing: FeatureIntensity;\n  setTextSpacing: (level: FeatureIntensity) => void;\n\n  hideImages: boolean;\n  toggleHideImages: () => void;\n\n  dyslexiaFriendly: boolean;\n  toggleDyslexiaFriendly: () => void;\n\n  lineHeight: FeatureIntensity;\n  setLineHeight: (level: FeatureIntensity) => void;\n\n  saturation: FeatureIntensity;\n  setSaturation: (level: FeatureIntensity) => void;\n\n  // New: Cursor Size\n  cursorSize: FeatureIntensity;\n  setCursorSize: (level: FeatureIntensity) => void;\n\n  // Screen reader\n  screenReader: {\n    enabled: boolean;\n    speed: \"normal\" | \"slow\";\n    volume: number; // 0 to 1\n  };\n  toggleScreenReader: () => void;\n  setScreenReaderSpeed: (speed: \"normal\" | \"slow\") => void;\n  setScreenReaderVolume: (volume: number) => void;\n\n  // Reset function\n  resetAll: () => void;\n}\n\nconst initialState: AccessibilityState = {\n  isOpen: false,\n  toggleOpen: () => {},\n\n  contrast: \"default\",\n  setContrast: () => {},\n\n  highlightLinks: \"default\",\n  setHighlightLinks: () => {},\n\n  textSize: \"default\",\n  setTextSize: () => {},\n\n  textSpacing: \"default\",\n  setTextSpacing: () => {},\n\n  hideImages: false,\n  toggleHideImages: () => {},\n\n  dyslexiaFriendly: false,\n  toggleDyslexiaFriendly: () => {},\n\n  lineHeight: \"default\",\n  setLineHeight: () => {},\n\n  saturation: \"default\",\n  setSaturation: () => {},\n\n  cursorSize: \"default\", // Initialize cursor size\n  setCursorSize: () => {},\n\n  screenReader: {\n    enabled: false,\n    speed: \"normal\",\n    volume: 0.8,\n  },\n  toggleScreenReader: () => {},\n  setScreenReaderSpeed: () => {},\n  setScreenReaderVolume: () => {},\n\n  resetAll: () => {},\n};\n\nexport const useAccessibilityStore = create<AccessibilityState>()(\n  persist(\n    (set, get) => ({\n      ...initialState, // Spread the initial state\n\n      toggleOpen: () => set((state) => ({ isOpen: !state.isOpen })),\n\n      setContrast: (level) => set(() => ({ contrast: level })),\n      setHighlightLinks: (level) => set(() => ({ highlightLinks: level })),\n      setTextSize: (level) => set(() => ({ textSize: level })),\n      setTextSpacing: (level) => set(() => ({ textSpacing: level })),\n      toggleHideImages: () =>\n        set((state) => ({ hideImages: !state.hideImages })),\n      toggleDyslexiaFriendly: () =>\n        set((state) => ({ dyslexiaFriendly: !state.dyslexiaFriendly })),\n      setLineHeight: (level) => set(() => ({ lineHeight: level })),\n      setSaturation: (level) => set(() => ({ saturation: level })),\n\n      // New: Set Cursor Size\n      setCursorSize: (level) => set(() => ({ cursorSize: level })),\n\n      toggleScreenReader: () =>\n        set((state) => ({\n          screenReader: {\n            ...state.screenReader,\n            enabled: !state.screenReader.enabled,\n          },\n        })),\n      setScreenReaderSpeed: (speed) =>\n        set((state) => ({\n          screenReader: {\n            ...state.screenReader,\n            speed,\n          },\n        })),\n      setScreenReaderVolume: (volume) =>\n        set((state) => ({\n          screenReader: {\n            ...state.screenReader,\n            volume,\n          },\n        })),\n\n      resetAll: () => {\n        // Reset to initial values (excluding isOpen, as that's managed by toggleOpen)\n        set({\n          contrast: \"default\",\n          highlightLinks: \"default\",\n          textSize: \"default\",\n          textSpacing: \"default\",\n          hideImages: false,\n          dyslexiaFriendly: false,\n          lineHeight: \"default\",\n          saturation: \"default\",\n          cursorSize: \"default\",\n          screenReader: {\n            enabled: false,\n            speed: \"normal\",\n            volume: 0.8,\n          },\n        });\n      },\n    }),\n    {\n      name: \"accessibility-storage\", // unique name\n      getStorage: () => localStorage,\n    },\n  ),\n);\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "ui/accessibility/lib/screen-reader-service.ts",
      "content": "\"use client\";\n\nclass ScreenReaderService {\n  private speechSynthesis: SpeechSynthesis | null = null;\n  private utterance: SpeechSynthesisUtterance | null = null;\n  private isReading: boolean = false;\n  private isMounted: boolean = false;\n  private currentElement: HTMLElement | null = null;\n  private lastElementSelector: string = \"\";\n  private highlightClass = \"screen-reader-highlight\";\n\n  constructor() {\n    this.isMounted = typeof window !== \"undefined\";\n\n    if (this.isMounted) {\n      try {\n        this.speechSynthesis = window.speechSynthesis;\n        this.utterance = new SpeechSynthesisUtterance();\n\n        if (this.speechSynthesis) {\n          this.speechSynthesis.cancel();\n        }\n      } catch (error) {\n        console.error(\"Error initializing speech synthesis:\", error);\n        this.isMounted = false;\n      }\n    }\n  }\n\n  public cleanup() {\n    if (!this.isMounted) return;\n\n    document.removeEventListener(\"mouseover\", this.handleHover);\n    document.removeEventListener(\"focusin\", this.handleFocus);\n    this.stop();\n  }\n\n  // Store bound handlers to ensure proper removal\n  private handleHover = this.createHandleEvent(\"mouseover\");\n  private handleFocus = this.createHandleEvent(\"focusin\");\n\n  public initialize(\n    enabled: boolean,\n    speed: \"normal\" | \"slow\",\n    volume: number,\n  ) {\n    if (!this.isMounted) return;\n\n    // Set speech properties\n    this.utterance!.rate = speed === \"slow\" ? 0.8 : 1.0;\n    this.utterance!.volume = volume;\n\n    if (enabled) {\n      document.addEventListener(\"mouseover\", this.handleHover);\n      document.addEventListener(\"focusin\", this.handleFocus);\n    } else {\n      document.removeEventListener(\"mouseover\", this.handleHover);\n      document.removeEventListener(\"focusin\", this.handleFocus);\n      this.stop(); // Stop reading if disabled\n    }\n  }\n\n  private createHandleEvent(eventType: \"mouseover\" | \"focusin\") {\n    return (event: Event) => {\n      const target = event.target as HTMLElement;\n\n      // Avoid re-reading the same element if already highlighted and reading\n      if (\n        this.currentElement === target ||\n        !this.isSignificantElement(target)\n      ) {\n        return;\n      }\n\n      const selector = this.getElementSelector(target);\n\n      // Prevent reading the same element repeatedly, or if it's the accessibility trigger itself\n      if (\n        selector === this.lastElementSelector ||\n        target.closest(\".accessibility-trigger\") ||\n        target.closest(\".accessibility-panel-container\")\n      ) {\n        return;\n      }\n\n      this.stop(); // Stop current speech before starting new one\n      this.removeHighlight();\n\n      this.currentElement = target;\n      this.lastElementSelector = selector;\n\n      const text = this.getTextForElement(target);\n      if (text) {\n        this.speak(text);\n        this.addHighlight(target);\n      }\n    };\n  }\n\n  private speak(text: string) {\n    if (!this.speechSynthesis || !this.utterance) return;\n\n    this.utterance.text = text;\n    this.speechSynthesis.speak(this.utterance);\n    this.isReading = true;\n\n    this.utterance.onend = () => {\n      this.isReading = false;\n      this.removeHighlight();\n      this.currentElement = null;\n      this.lastElementSelector = \"\"; // Reset after speech ends\n    };\n\n    this.utterance.onerror = (event) => {\n      console.error(\"SpeechSynthesisUtterance.onerror\", event);\n      this.isReading = false;\n      this.removeHighlight();\n      this.currentElement = null;\n      this.lastElementSelector = \"\";\n    };\n  }\n\n  public stop() {\n    if (this.speechSynthesis && this.isReading) {\n      this.speechSynthesis.cancel();\n      this.isReading = false;\n    }\n    this.removeHighlight();\n    this.currentElement = null;\n    this.lastElementSelector = \"\";\n  }\n\n  private addHighlight(element: HTMLElement) {\n    element.classList.add(this.highlightClass);\n  }\n\n  private removeHighlight() {\n    document\n      .querySelectorAll(`.${this.highlightClass}`)\n      .forEach((el) => el.classList.remove(this.highlightClass));\n  }\n\n  private getTextForElement(element: HTMLElement): string {\n    // Check for explicit accessibility labels first\n    if (element.getAttribute(\"aria-label\")) {\n      return element.getAttribute(\"aria-label\")!;\n    }\n    if (element.getAttribute(\"title\")) {\n      return element.getAttribute(\"title\")!;\n    }\n\n    // Get text based on element type and role\n    if (element.tagName === \"IMG\") {\n      return element.alt || \"Image\";\n    }\n\n    if (element.tagName === \"A\") {\n      return `Link: ${element.textContent || \"\"}`;\n    }\n\n    if (element.tagName === \"BUTTON\") {\n      return `Button: ${element.textContent || \"\"}`;\n    }\n\n    if (element.tagName === \"INPUT\") {\n      const inputEl = element as HTMLInputElement;\n      const type = inputEl.type;\n      const label =\n        inputEl.placeholder || inputEl.name || inputEl.id || \"Input field\";\n      if (type === \"text\") return `Text input: ${label}`;\n      if (type === \"email\") return `Email input: ${label}`;\n      if (type === \"password\") return `Password input: ${label}`;\n      if (type === \"checkbox\")\n        return `Checkbox: ${label} ${inputEl.checked ? \"checked\" : \"unchecked\"}`;\n      if (type === \"radio\")\n        return `Radio button: ${label} ${inputEl.checked ? \"selected\" : \"\"}`;\n      if (type === \"submit\") return `Submit button: ${inputEl.value || label}`;\n      return `${label}`;\n    }\n\n    if (element.tagName === \"SELECT\") {\n      const selectEl = element as HTMLSelectElement;\n      const label = selectEl.name || selectEl.id || \"Select field\";\n      const selectedOption = selectEl.options[selectEl.selectedIndex];\n      return `Dropdown: ${label}, current value ${selectedOption ? selectedOption.textContent : \"\"}`;\n    }\n\n    if (element.tagName === \"TEXTAREA\") {\n      const textareaEl = element as HTMLTextAreaElement;\n      const label = textareaEl.name || textareaEl.id || \"Text area\";\n      return `Text area: ${label}`;\n    }\n\n    if (element.hasAttribute(\"role\")) {\n      const role = element.getAttribute(\"role\");\n      const textContent = element.textContent || \"\";\n      switch (role) {\n        case \"button\":\n          return `Button: ${textContent}`;\n        case \"link\":\n          return `Link: ${textContent}`;\n        case \"heading\":\n          return `Heading: ${textContent}`;\n        case \"listitem\":\n          return `List item: ${textContent}`;\n        case \"checkbox\":\n          return `Checkbox: ${textContent} ${element.getAttribute(\"aria-checked\") === \"true\" ? \"checked\" : \"unchecked\"}`;\n        case \"radio\":\n          return `Radio button: ${textContent} ${element.getAttribute(\"aria-checked\") === \"true\" ? \"selected\" : \"\"}`;\n        case \"textbox\":\n          return `Text box: ${textContent}`;\n        case \"combobox\":\n          return `Combobox: ${textContent}`;\n        case \"dialog\":\n          return `Dialog: ${textContent}`;\n        case \"alert\":\n          return `Alert: ${textContent}`;\n        case \"status\":\n          return `Status: ${textContent}`;\n        default:\n          return `${role}: ${textContent}`;\n      }\n    }\n\n    // Default to regular text content\n    return element.textContent || \"\";\n  }\n\n  private isSignificantElement(element: HTMLElement): boolean {\n    const significantTags = [\n      \"A\",\n      \"BUTTON\",\n      \"H1\",\n      \"H2\",\n      \"H3\",\n      \"H4\",\n      \"H5\",\n      \"H6\",\n      \"P\",\n      \"LI\",\n      \"IMG\",\n      \"INPUT\", // Added for inputs\n      \"SELECT\", // Added for selects\n      \"TEXTAREA\", // Added for textareas\n      \"LABEL\", // Labels for form elements\n      \"SUMMARY\", // For details/summary elements\n      \"ARTICLE\", // Article content\n      \"SECTION\", // Section content\n      \"ASIDE\", // Aside content\n      \"MAIN\", // Main content\n      \"NAV\", // Navigation elements\n      \"FOOTER\", // Footer content\n      \"HEADER\", // Header content\n    ];\n    return (\n      significantTags.includes(element.tagName) ||\n      element.hasAttribute(\"role\") ||\n      element.hasAttribute(\"aria-label\") ||\n      element.hasAttribute(\"title\")\n    );\n  }\n\n  private getElementSelector(element: HTMLElement): string {\n    // Create a simple selector path for the element\n    const id = element.id ? `#${element.id}` : \"\";\n    const classes = Array.from(element.classList)\n      .map((cls) => `.${cls}`)\n      .join(\"\");\n    return `${element.tagName}${id}${classes}`;\n  }\n}\n\n// Export a singleton instance\nconst screenReaderService = new ScreenReaderService();\nexport default screenReaderService;\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
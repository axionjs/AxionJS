{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "accessibility",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "zustand"
  ],
  "registryDependencies": [
    "dialog",
    "switch",
    "button",
    "avatar",
    "tabs",
    "tooltip",
    "slider"
  ],
  "files": [
    {
      "path": "ui/accessibility/components/AccessibilityUI.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport {\r\n  useAccessibilityStore,\r\n  FeatureIntensity,\r\n  ContrastMode,\r\n} from \"@/registry/new-york/ui/accessibility/lib/accessibility-store\";\r\nimport screenReaderService from \"@/registry/new-york/ui/accessibility/lib/screen-reader-service\";\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { Switch } from \"@/registry/new-york/ui/switch\";\r\nimport { Slider } from \"@/registry/new-york/ui/slider\";\r\nimport {\r\n  Tabs,\r\n  TabsContent,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from \"@/registry/new-york/ui/tabs\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/registry/new-york/ui/tooltip\";\r\n\r\nimport {\r\n  LucideEye,\r\n  LucideMaximize,\r\n  LucideText,\r\n  LucideUnderline,\r\n  LucideVolume2,\r\n  LucideRefreshCw,\r\n  LucideX,\r\n  LucideLineChart,\r\n  LucideInfo,\r\n  LucidePalette,\r\n  LucideMousePointer2,\r\n  LucideBookText,\r\n  LucideHand,\r\n  LucideZap,\r\n  LucidePersonStanding,\r\n} from \"lucide-react\";\r\n\r\n// Inlined AccessibilitySlider component\r\ninterface AccessibilitySliderProps {\r\n  value: FeatureIntensity | ContrastMode;\r\n  onChange: (value: FeatureIntensity | ContrastMode) => void;\r\n  label: string;\r\n  icon: React.ReactNode;\r\n  options?: { value: string; label: string }[];\r\n}\r\n\r\nfunction AccessibilitySlider({\r\n  value,\r\n  onChange,\r\n  label,\r\n  icon,\r\n  options,\r\n}: AccessibilitySliderProps) {\r\n  const defaultOptions = [\r\n    { value: \"default\", label: \"Default\" },\r\n    { value: \"medium\", label: \"Medium\" },\r\n    { value: \"high\", label: \"High\" },\r\n  ];\r\n\r\n  const currentOptions = options || defaultOptions;\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <div className=\"w-5 h-5 flex items-center justify-center\">{icon}</div>\r\n        <span className=\"text-sm font-medium\">{label}</span>\r\n      </div>\r\n      <Tabs\r\n        value={value}\r\n        onValueChange={(v) => onChange(v as FeatureIntensity | ContrastMode)}\r\n        className=\"w-full\"\r\n      >\r\n        <TabsList\r\n          className={`grid w-full gap-2`}\r\n          style={{\r\n            gridTemplateColumns: `repeat(${currentOptions.length}, 1fr)`,\r\n          }}\r\n        >\r\n          {currentOptions.map((option) => (\r\n            <TabsTrigger\r\n              key={option.value}\r\n              value={option.value}\r\n              className=\"text-xs\"\r\n            >\r\n              {option.label}\r\n            </TabsTrigger>\r\n          ))}\r\n        </TabsList>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Combined AccessibilityUI component\r\nexport function AccessibilityUI({ children }: { children: React.ReactNode }) {\r\n  const {\r\n    isOpen,\r\n    toggleOpen,\r\n    contrast,\r\n    setContrast,\r\n    highlightLinks,\r\n    setHighlightLinks,\r\n    textSize,\r\n    setTextSize,\r\n    textSpacing,\r\n    setTextSpacing,\r\n    hideImages,\r\n    toggleHideImages,\r\n    dyslexiaFriendly,\r\n    toggleDyslexiaFriendly,\r\n    lineHeight,\r\n    setLineHeight,\r\n    saturation,\r\n    setSaturation,\r\n    cursorSize,\r\n    setCursorSize,\r\n    screenReader,\r\n    toggleScreenReader,\r\n    setScreenReaderSpeed,\r\n    setScreenReaderVolume,\r\n    resetAll,\r\n  } = useAccessibilityStore();\r\n\r\n  // Initialize and clean up screen reader service\r\n  useEffect(() => {\r\n    screenReaderService.initialize(\r\n      screenReader.enabled,\r\n      screenReader.speed,\r\n      screenReader.volume,\r\n    );\r\n    return () => {\r\n      screenReaderService.cleanup();\r\n    };\r\n  }, [screenReader.enabled, screenReader.speed, screenReader.volume]);\r\n\r\n  // Apply all accessibility settings to the HTML element (moved from AccessibilityProvider)\r\n  useEffect(() => {\r\n    const html = document.documentElement;\r\n\r\n    const classesToRemove = [\r\n      \"contrast-medium\",\r\n      \"contrast-high\",\r\n      \"contrast-windows-inverted\",\r\n      \"contrast-windows-dark\",\r\n      \"contrast-windows-light\",\r\n      \"highlight-links-medium\",\r\n      \"highlight-links-high\",\r\n      \"text-size-medium\",\r\n      \"text-size-high\",\r\n      \"text-spacing-medium\",\r\n      \"text-spacing-high\",\r\n      \"hide-images\",\r\n      \"dyslexia-friendly\",\r\n      \"line-height-medium\",\r\n      \"line-height-high\",\r\n      \"saturation-medium\",\r\n      \"saturation-high\",\r\n      \"cursor-medium\",\r\n      \"cursor-high\",\r\n    ];\r\n\r\n    html.classList.remove(...classesToRemove);\r\n\r\n    if (contrast === \"medium\") {\r\n      html.classList.add(\"contrast-medium\");\r\n    } else if (contrast === \"high\") {\r\n      html.classList.add(\"contrast-high\");\r\n    } else if (contrast === \"inverted\") {\r\n      html.classList.add(\"contrast-windows-inverted\");\r\n    } else if (contrast === \"dark\") {\r\n      html.classList.add(\"contrast-windows-dark\");\r\n    } else if (contrast === \"light\") {\r\n      html.classList.add(\"contrast-windows-light\");\r\n    }\r\n\r\n    if (highlightLinks === \"medium\") {\r\n      html.classList.add(\"highlight-links-medium\");\r\n    } else if (highlightLinks === \"high\") {\r\n      html.classList.add(\"highlight-links-high\");\r\n    }\r\n\r\n    if (textSize === \"medium\") {\r\n      html.classList.add(\"text-size-medium\");\r\n    } else if (textSize === \"high\") {\r\n      html.classList.add(\"text-size-high\");\r\n    }\r\n\r\n    if (textSpacing === \"medium\") {\r\n      html.classList.add(\"text-spacing-medium\");\r\n    } else if (textSpacing === \"high\") {\r\n      html.classList.add(\"text-spacing-high\");\r\n    }\r\n\r\n    if (hideImages) {\r\n      html.classList.add(\"hide-images\");\r\n    }\r\n\r\n    if (dyslexiaFriendly) {\r\n      html.classList.add(\"dyslexia-friendly\");\r\n    }\r\n\r\n    if (lineHeight === \"medium\") {\r\n      html.classList.add(\"line-height-medium\");\r\n    } else if (lineHeight === \"high\") {\r\n      html.classList.add(\"line-height-high\");\r\n    }\r\n\r\n    if (saturation === \"medium\") {\r\n      html.classList.add(\"saturation-medium\");\r\n    } else if (saturation === \"high\") {\r\n      html.classList.add(\"saturation-high\");\r\n    }\r\n\r\n    if (cursorSize === \"medium\") {\r\n      html.classList.add(\"cursor-medium\");\r\n    } else if (cursorSize === \"high\") {\r\n      html.classList.add(\"cursor-high\");\r\n    }\r\n\r\n    if (screenReader.enabled) {\r\n      html.setAttribute(\"data-screen-reader\", \"enabled\");\r\n    } else {\r\n      html.removeAttribute(\"data-screen-reader\");\r\n    }\r\n  }, [\r\n    contrast,\r\n    highlightLinks,\r\n    textSize,\r\n    textSpacing,\r\n    hideImages,\r\n    dyslexiaFriendly,\r\n    lineHeight,\r\n    saturation,\r\n    cursorSize,\r\n    screenReader,\r\n  ]);\r\n\r\n  // Event listener for the custom toggle event (for the floating button AND keyboard shortcut)\r\n  // This listener now also handles the Ctrl+U keyboard shortcut (moved from AccessibilityProvider)\r\n  useEffect(() => {\r\n    const handleToggleEvent = () => {\r\n      toggleOpen();\r\n    };\r\n\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === \"u\") {\r\n        event.preventDefault();\r\n        toggleOpen(); // Directly toggle the state\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"toggleAccessibilityPanel\", handleToggleEvent);\r\n    document.addEventListener(\"keydown\", handleKeyDown); // Listen for keyboard shortcut\r\n\r\n    return () => {\r\n      document.removeEventListener(\r\n        \"toggleAccessibilityPanel\",\r\n        handleToggleEvent,\r\n      );\r\n      document.removeEventListener(\"keydown\", handleKeyDown); // Clean up keyboard listener\r\n    };\r\n  }, [toggleOpen]);\r\n\r\n  const contrastOptions = [\r\n    { value: \"default\", label: \"Default\" },\r\n    { value: \"inverted\", label: \"Inverted\" },\r\n    { value: \"dark\", label: \"Dark\" },\r\n    { value: \"light\", label: \"Light\" },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {children}\r\n\r\n      {/* Accessibility Trigger (Floating Button) */}\r\n      <TooltipProvider>\r\n        <Tooltip>\r\n          <TooltipTrigger asChild>\r\n            <Button\r\n              variant=\"default\"\r\n              size=\"lg\"\r\n              className=\"fixed bottom-4 right-4 z-[9998] rounded-full w-16 h-16 shadow-lg bg-primary hover:bg-primary/85 flex items-center justify-center accessibility-trigger\"\r\n              aria-label=\"Open Accessibility Menu\"\r\n              onClick={toggleOpen}\r\n            >\r\n              <div className=\"relative\">\r\n                <LucidePersonStanding className=\"w-6 h-6 text-secondary\" />\r\n                {screenReader.enabled && (\r\n                  <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border border-white dark:border animate-pulse\" />\r\n                )}\r\n              </div>\r\n            </Button>\r\n          </TooltipTrigger>\r\n          <TooltipContent side=\"left\">\r\n            <p>Accessibility Menu</p>\r\n          </TooltipContent>\r\n        </Tooltip>\r\n      </TooltipProvider>\r\n\r\n      {/* Overlay */}\r\n      {isOpen && (\r\n        <div\r\n          className=\"fixed inset-0 bg-black/50 z-[9997] transition-opacity duration-300\"\r\n          onClick={toggleOpen}\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n\r\n      {/* Accessibility Sidebar */}\r\n      <div\r\n        className={`fixed top-0 right-0 h-full bg-background text-foreground shadow-xl z-[9999] transition-transform duration-300 ease-in-out border-l\r\n          ${isOpen ? \"translate-x-0\" : \"translate-x-full\"}\r\n          w-full sm:w-[35vw] md:w-[30vw] lg:w-[25vw] min-w-[350px] max-w-[450px]\r\n        `}\r\n        aria-label=\"Accessibility Settings\"\r\n        role=\"dialog\"\r\n        aria-modal=\"true\"\r\n      >\r\n        {/* Header */}\r\n        <div className=\"p-4 border-b flex items-center justify-between bg-background flex-shrink-0\">\r\n          <h2 className=\"text-lg font-semibold text-foreground\">\r\n            Accessibility Settings\r\n          </h2>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            aria-label=\"Close Accessibility Menu\"\r\n            className=\"text-muted-foreground hover:text-foreground\"\r\n            onClick={toggleOpen}\r\n          >\r\n            <LucideX className=\"h-5 w-5\" />\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"flex flex-col h-[calc(100vh-140px)] overflow-hidden\">\r\n          <Tabs\r\n            defaultValue=\"vision\"\r\n            className=\"p-4 flex-grow flex flex-col overflow-hidden\"\r\n          >\r\n            <TabsList className=\"grid grid-cols-4 w-full mb-4 flex-shrink-0\">\r\n              <TabsTrigger value=\"vision\" className=\"text-xs\">\r\n                <LucideEye className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\r\n                <span className=\"hidden sm:inline\">Vision</span>\r\n                <span className=\"sm:hidden\">V</span>\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"content\" className=\"text-xs\">\r\n                <LucideBookText className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\r\n                <span className=\"hidden sm:inline\">Content</span>\r\n                <span className=\"sm:hidden\">C</span>\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"interaction\" className=\"text-xs\">\r\n                <LucideHand className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\r\n                <span className=\"hidden sm:inline\">Interaction</span>\r\n                <span className=\"sm:hidden\">I</span>\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"screen-reader\" className=\"text-xs\">\r\n                <LucideVolume2 className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2\" />\r\n                <span className=\"hidden sm:inline\">Reader</span>\r\n                <span className=\"sm:hidden\">R</span>\r\n              </TabsTrigger>\r\n            </TabsList>\r\n\r\n            <div className=\"overflow-y-auto flex-grow pr-2 pb-2\">\r\n              <TabsContent value=\"vision\" className=\"space-y-6\">\r\n                <AccessibilitySlider\r\n                  label=\"Contrast\"\r\n                  value={contrast}\r\n                  onChange={setContrast}\r\n                  icon={<LucidePalette className=\"h-4 w-4\" />}\r\n                  options={contrastOptions}\r\n                />\r\n\r\n                <AccessibilitySlider\r\n                  label=\"Highlight Links\"\r\n                  value={highlightLinks}\r\n                  onChange={setHighlightLinks}\r\n                  icon={<LucideUnderline className=\"h-4 w-4\" />}\r\n                />\r\n\r\n                <AccessibilitySlider\r\n                  label=\"Saturation\"\r\n                  value={saturation}\r\n                  onChange={setSaturation}\r\n                  icon={<LucideLineChart className=\"h-4 w-4\" />}\r\n                />\r\n\r\n                <div className=\"flex items-center justify-between rounded-lg border p-4\">\r\n                  <div className=\"space-y-0.5\">\r\n                    <label\r\n                      htmlFor=\"hide-images\"\r\n                      className=\"text-sm font-medium\"\r\n                    >\r\n                      Hide Images\r\n                    </label>\r\n                    <p className=\"text-muted-foreground text-sm\">\r\n                      Removes all images from the page.\r\n                    </p>\r\n                  </div>\r\n                  <Switch\r\n                    id=\"hide-images\"\r\n                    checked={hideImages}\r\n                    onCheckedChange={toggleHideImages}\r\n                  />\r\n                </div>\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"content\" className=\"space-y-6\">\r\n                <AccessibilitySlider\r\n                  label=\"Text Size\"\r\n                  value={textSize}\r\n                  onChange={setTextSize}\r\n                  icon={<LucideText className=\"h-4 w-4\" />}\r\n                />\r\n\r\n                <AccessibilitySlider\r\n                  label=\"Text Spacing\"\r\n                  value={textSpacing}\r\n                  onChange={setTextSpacing}\r\n                  icon={<LucideMaximize className=\"h-4 w-4\" />}\r\n                />\r\n\r\n                <AccessibilitySlider\r\n                  label=\"Line Height\"\r\n                  value={lineHeight}\r\n                  onChange={setLineHeight}\r\n                  icon={<LucideLineChart className=\"h-4 w-4 rotate-90\" />}\r\n                />\r\n\r\n                <div className=\"flex items-center justify-between rounded-lg border p-4\">\r\n                  <div className=\"space-y-0.5\">\r\n                    <label\r\n                      htmlFor=\"dyslexia-friendly\"\r\n                      className=\"text-sm font-medium\"\r\n                    >\r\n                      Dyslexia Friendly Font\r\n                    </label>\r\n                    <p className=\"text-muted-foreground text-sm\">\r\n                      Changes text to a font optimized for dyslexia.\r\n                    </p>\r\n                  </div>\r\n                  <Switch\r\n                    id=\"dyslexia-friendly\"\r\n                    checked={dyslexiaFriendly}\r\n                    onCheckedChange={toggleDyslexiaFriendly}\r\n                  />\r\n                </div>\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"interaction\" className=\"space-y-6\">\r\n                <AccessibilitySlider\r\n                  label=\"Cursor Size\"\r\n                  value={cursorSize}\r\n                  onChange={setCursorSize}\r\n                  icon={<LucideMousePointer2 className=\"h-4 w-4\" />}\r\n                />\r\n\r\n                <div className=\"p-4 bg-blue-50 rounded-lg space-y-2\">\r\n                  <div className=\"flex items-start gap-2\">\r\n                    <LucideInfo className=\"h-4 w-4 text-blue-500 mt-0.5\" />\r\n                    <div>\r\n                      <h4 className=\"text-sm font-medium\">\r\n                        Keyboard Shortcuts\r\n                      </h4>\r\n                      <ul className=\"text-xs space-y-1 mt-1\">\r\n                        <li>\r\n                          <kbd className=\"bg-gray-200 px-1 py-0.5 rounded text-gray-800\">\r\n                            Ctrl\r\n                          </kbd>{\" \"}\r\n                          +{\" \"}\r\n                          <kbd className=\"bg-gray-200 px-1 py-0.5 rounded text-gray-800\">\r\n                            U\r\n                          </kbd>\r\n                          : Toggle Accessibility Panel\r\n                        </li>\r\n                        <li>\r\n                          <kbd className=\"bg-gray-200 px-1 py-0.5 rounded text-gray-800\">\r\n                            Tab\r\n                          </kbd>\r\n                          : Navigate through elements\r\n                        </li>\r\n                        <li>\r\n                          <kbd className=\"bg-gray-200 px-1 py-0.5 rounded text-gray-800\">\r\n                            Enter\r\n                          </kbd>\r\n                          : Activate focused element\r\n                        </li>\r\n                        <li>\r\n                          <kbd className=\"bg-gray-200 px-1 py-0.5 rounded text-gray-800\">\r\n                            Esc\r\n                          </kbd>\r\n                          : Close dialogs or menus\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </TabsContent>\r\n\r\n              <TabsContent value=\"screen-reader\" className=\"space-y-6\">\r\n                <div className=\"flex items-center justify-between rounded-lg border p-4\">\r\n                  <div className=\"space-y-0.5\">\r\n                    <label\r\n                      htmlFor=\"screen-reader-toggle\"\r\n                      className=\"text-sm font-medium\"\r\n                    >\r\n                      Enable Screen Reader\r\n                    </label>\r\n                    <p className=\"text-muted-foreground text-sm\">\r\n                      Reads content aloud as you hover or focus.\r\n                    </p>\r\n                  </div>\r\n                  <Switch\r\n                    id=\"screen-reader-toggle\"\r\n                    checked={screenReader.enabled}\r\n                    onCheckedChange={toggleScreenReader}\r\n                  />\r\n                </div>\r\n\r\n                {screenReader.enabled && (\r\n                  <>\r\n                    <AccessibilitySlider\r\n                      label=\"Speech Speed\"\r\n                      value={\r\n                        screenReader.speed === \"slow\" ? \"medium\" : \"default\"\r\n                      }\r\n                      onChange={(val) =>\r\n                        setScreenReaderSpeed(\r\n                          val === \"medium\" ? \"slow\" : \"normal\",\r\n                        )\r\n                      }\r\n                      icon={<LucideZap className=\"h-4 w-4\" />}\r\n                      options={[\r\n                        { value: \"default\", label: \"Normal\" },\r\n                        { value: \"medium\", label: \"Slow\" },\r\n                      ]}\r\n                    />\r\n\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div className=\"w-5 h-5 flex items-center justify-center\">\r\n                          <LucideVolume2 className=\"h-4 w-4\" />\r\n                        </div>\r\n                        <span className=\"text-sm font-medium\">Volume</span>\r\n                      </div>\r\n                      <Slider\r\n                        min={0}\r\n                        max={1}\r\n                        step={0.1}\r\n                        value={[screenReader.volume]}\r\n                        onValueChange={(val) => setScreenReaderVolume(val[0])}\r\n                        className=\"w-full\"\r\n                      />\r\n                      <p className=\"text-right text-xs text-muted-foreground\">\r\n                        {(screenReader.volume * 100).toFixed(0)}%\r\n                      </p>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </TabsContent>\r\n            </div>\r\n          </Tabs>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"p-4 border-t bg-background flex-shrink-0 sticky bottom-0\">\r\n          <div className=\"flex justify-between gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={resetAll}\r\n              className=\"flex items-center gap-1\"\r\n            >\r\n              <LucideRefreshCw className=\"h-3.5 w-3.5\" />\r\n              Reset All\r\n            </Button>\r\n            <Button\r\n              variant=\"default\"\r\n              size=\"sm\"\r\n              className=\"flex items-center gap-1\"\r\n              onClick={toggleOpen}\r\n            >\r\n              <LucideX className=\"h-3.5 w-3.5\" />\r\n              Close\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/accessibility/lib/accessibility-store.ts",
      "content": "\"use client\";\r\n\r\nimport { create } from \"zustand\";\r\nimport { persist } from \"zustand/middleware\";\r\n\r\n// Define types for feature intensity levels\r\nexport type FeatureIntensity = \"default\" | \"medium\" | \"high\";\r\nexport type ContrastMode = \"default\" | \"inverted\" | \"dark\" | \"light\"; // New contrast modes\r\n\r\ninterface AccessibilityState {\r\n  isOpen: boolean;\r\n  toggleOpen: () => void;\r\n\r\n  // Accessibility features with intensity levels\r\n  contrast: ContrastMode; // Changed to ContrastMode\r\n  setContrast: (level: ContrastMode) => void; // Changed to ContrastMode\r\n\r\n  highlightLinks: FeatureIntensity;\r\n  setHighlightLinks: (level: FeatureIntensity) => void;\r\n\r\n  textSize: FeatureIntensity;\r\n  setTextSize: (level: FeatureIntensity) => void;\r\n\r\n  textSpacing: FeatureIntensity;\r\n  setTextSpacing: (level: FeatureIntensity) => void;\r\n\r\n  hideImages: boolean;\r\n  toggleHideImages: () => void;\r\n\r\n  dyslexiaFriendly: boolean;\r\n  toggleDyslexiaFriendly: () => void;\r\n\r\n  lineHeight: FeatureIntensity;\r\n  setLineHeight: (level: FeatureIntensity) => void;\r\n\r\n  saturation: FeatureIntensity;\r\n  setSaturation: (level: FeatureIntensity) => void;\r\n\r\n  // New: Cursor Size\r\n  cursorSize: FeatureIntensity;\r\n  setCursorSize: (level: FeatureIntensity) => void;\r\n\r\n  // Screen reader\r\n  screenReader: {\r\n    enabled: boolean;\r\n    speed: \"normal\" | \"slow\";\r\n    volume: number; // 0 to 1\r\n  };\r\n  toggleScreenReader: () => void;\r\n  setScreenReaderSpeed: (speed: \"normal\" | \"slow\") => void;\r\n  setScreenReaderVolume: (volume: number) => void;\r\n\r\n  // Reset function\r\n  resetAll: () => void;\r\n}\r\n\r\nconst initialState: AccessibilityState = {\r\n  isOpen: false,\r\n  toggleOpen: () => {},\r\n\r\n  contrast: \"default\",\r\n  setContrast: () => {},\r\n\r\n  highlightLinks: \"default\",\r\n  setHighlightLinks: () => {},\r\n\r\n  textSize: \"default\",\r\n  setTextSize: () => {},\r\n\r\n  textSpacing: \"default\",\r\n  setTextSpacing: () => {},\r\n\r\n  hideImages: false,\r\n  toggleHideImages: () => {},\r\n\r\n  dyslexiaFriendly: false,\r\n  toggleDyslexiaFriendly: () => {},\r\n\r\n  lineHeight: \"default\",\r\n  setLineHeight: () => {},\r\n\r\n  saturation: \"default\",\r\n  setSaturation: () => {},\r\n\r\n  cursorSize: \"default\", // Initialize cursor size\r\n  setCursorSize: () => {},\r\n\r\n  screenReader: {\r\n    enabled: false,\r\n    speed: \"normal\",\r\n    volume: 0.8,\r\n  },\r\n  toggleScreenReader: () => {},\r\n  setScreenReaderSpeed: () => {},\r\n  setScreenReaderVolume: () => {},\r\n\r\n  resetAll: () => {},\r\n};\r\n\r\nexport const useAccessibilityStore = create<AccessibilityState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      ...initialState, // Spread the initial state\r\n\r\n      toggleOpen: () => set((state) => ({ isOpen: !state.isOpen })),\r\n\r\n      setContrast: (level) => set(() => ({ contrast: level })),\r\n      setHighlightLinks: (level) => set(() => ({ highlightLinks: level })),\r\n      setTextSize: (level) => set(() => ({ textSize: level })),\r\n      setTextSpacing: (level) => set(() => ({ textSpacing: level })),\r\n      toggleHideImages: () =>\r\n        set((state) => ({ hideImages: !state.hideImages })),\r\n      toggleDyslexiaFriendly: () =>\r\n        set((state) => ({ dyslexiaFriendly: !state.dyslexiaFriendly })),\r\n      setLineHeight: (level) => set(() => ({ lineHeight: level })),\r\n      setSaturation: (level) => set(() => ({ saturation: level })),\r\n\r\n      // New: Set Cursor Size\r\n      setCursorSize: (level) => set(() => ({ cursorSize: level })),\r\n\r\n      toggleScreenReader: () =>\r\n        set((state) => ({\r\n          screenReader: {\r\n            ...state.screenReader,\r\n            enabled: !state.screenReader.enabled,\r\n          },\r\n        })),\r\n      setScreenReaderSpeed: (speed) =>\r\n        set((state) => ({\r\n          screenReader: {\r\n            ...state.screenReader,\r\n            speed,\r\n          },\r\n        })),\r\n      setScreenReaderVolume: (volume) =>\r\n        set((state) => ({\r\n          screenReader: {\r\n            ...state.screenReader,\r\n            volume,\r\n          },\r\n        })),\r\n\r\n      resetAll: () => {\r\n        // Reset to initial values (excluding isOpen, as that's managed by toggleOpen)\r\n        set({\r\n          contrast: \"default\",\r\n          highlightLinks: \"default\",\r\n          textSize: \"default\",\r\n          textSpacing: \"default\",\r\n          hideImages: false,\r\n          dyslexiaFriendly: false,\r\n          lineHeight: \"default\",\r\n          saturation: \"default\",\r\n          cursorSize: \"default\",\r\n          screenReader: {\r\n            enabled: false,\r\n            speed: \"normal\",\r\n            volume: 0.8,\r\n          },\r\n        });\r\n      },\r\n    }),\r\n    {\r\n      name: \"accessibility-storage\", // unique name\r\n      getStorage: () => localStorage,\r\n    },\r\n  ),\r\n);\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "ui/accessibility/lib/screen-reader-service.ts",
      "content": "\"use client\";\r\n\r\nclass ScreenReaderService {\r\n  private speechSynthesis: SpeechSynthesis | null = null;\r\n  private utterance: SpeechSynthesisUtterance | null = null;\r\n  private isReading: boolean = false;\r\n  private isMounted: boolean = false;\r\n  private currentElement: HTMLElement | null = null;\r\n  private lastElementSelector: string = \"\";\r\n  private highlightClass = \"screen-reader-highlight\";\r\n\r\n  constructor() {\r\n    this.isMounted = typeof window !== \"undefined\";\r\n\r\n    if (this.isMounted) {\r\n      try {\r\n        this.speechSynthesis = window.speechSynthesis;\r\n        this.utterance = new SpeechSynthesisUtterance();\r\n\r\n        if (this.speechSynthesis) {\r\n          this.speechSynthesis.cancel();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error initializing speech synthesis:\", error);\r\n        this.isMounted = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  public cleanup() {\r\n    if (!this.isMounted) return;\r\n\r\n    document.removeEventListener(\"mouseover\", this.handleHover);\r\n    document.removeEventListener(\"focusin\", this.handleFocus);\r\n    this.stop();\r\n  }\r\n\r\n  // Store bound handlers to ensure proper removal\r\n  private handleHover = this.createHandleEvent(\"mouseover\");\r\n  private handleFocus = this.createHandleEvent(\"focusin\");\r\n\r\n  public initialize(\r\n    enabled: boolean,\r\n    speed: \"normal\" | \"slow\",\r\n    volume: number,\r\n  ) {\r\n    if (!this.isMounted) return;\r\n\r\n    // Set speech properties\r\n    this.utterance!.rate = speed === \"slow\" ? 0.8 : 1.0;\r\n    this.utterance!.volume = volume;\r\n\r\n    if (enabled) {\r\n      document.addEventListener(\"mouseover\", this.handleHover);\r\n      document.addEventListener(\"focusin\", this.handleFocus);\r\n    } else {\r\n      document.removeEventListener(\"mouseover\", this.handleHover);\r\n      document.removeEventListener(\"focusin\", this.handleFocus);\r\n      this.stop(); // Stop reading if disabled\r\n    }\r\n  }\r\n\r\n  private createHandleEvent(eventType: \"mouseover\" | \"focusin\") {\r\n    return (event: Event) => {\r\n      const target = event.target as HTMLElement;\r\n\r\n      // Avoid re-reading the same element if already highlighted and reading\r\n      if (\r\n        this.currentElement === target ||\r\n        !this.isSignificantElement(target)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      const selector = this.getElementSelector(target);\r\n\r\n      // Prevent reading the same element repeatedly, or if it's the accessibility trigger itself\r\n      if (\r\n        selector === this.lastElementSelector ||\r\n        target.closest(\".accessibility-trigger\") ||\r\n        target.closest(\".accessibility-panel-container\")\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      this.stop(); // Stop current speech before starting new one\r\n      this.removeHighlight();\r\n\r\n      this.currentElement = target;\r\n      this.lastElementSelector = selector;\r\n\r\n      const text = this.getTextForElement(target);\r\n      if (text) {\r\n        this.speak(text);\r\n        this.addHighlight(target);\r\n      }\r\n    };\r\n  }\r\n\r\n  private speak(text: string) {\r\n    if (!this.speechSynthesis || !this.utterance) return;\r\n\r\n    this.utterance.text = text;\r\n    this.speechSynthesis.speak(this.utterance);\r\n    this.isReading = true;\r\n\r\n    this.utterance.onend = () => {\r\n      this.isReading = false;\r\n      this.removeHighlight();\r\n      this.currentElement = null;\r\n      this.lastElementSelector = \"\"; // Reset after speech ends\r\n    };\r\n\r\n    this.utterance.onerror = (event) => {\r\n      console.error(\"SpeechSynthesisUtterance.onerror\", event);\r\n      this.isReading = false;\r\n      this.removeHighlight();\r\n      this.currentElement = null;\r\n      this.lastElementSelector = \"\";\r\n    };\r\n  }\r\n\r\n  public stop() {\r\n    if (this.speechSynthesis && this.isReading) {\r\n      this.speechSynthesis.cancel();\r\n      this.isReading = false;\r\n    }\r\n    this.removeHighlight();\r\n    this.currentElement = null;\r\n    this.lastElementSelector = \"\";\r\n  }\r\n\r\n  private addHighlight(element: HTMLElement) {\r\n    element.classList.add(this.highlightClass);\r\n  }\r\n\r\n  private removeHighlight() {\r\n    document\r\n      .querySelectorAll(`.${this.highlightClass}`)\r\n      .forEach((el) => el.classList.remove(this.highlightClass));\r\n  }\r\n\r\n  private getTextForElement(element: HTMLElement): string {\r\n    // Check for explicit accessibility labels first\r\n    if (element.getAttribute(\"aria-label\")) {\r\n      return element.getAttribute(\"aria-label\")!;\r\n    }\r\n    if (element.getAttribute(\"title\")) {\r\n      return element.getAttribute(\"title\")!;\r\n    }\r\n\r\n    // Get text based on element type and role\r\n    if (element.tagName === \"IMG\") {\r\n      return element.alt || \"Image\";\r\n    }\r\n\r\n    if (element.tagName === \"A\") {\r\n      return `Link: ${element.textContent || \"\"}`;\r\n    }\r\n\r\n    if (element.tagName === \"BUTTON\") {\r\n      return `Button: ${element.textContent || \"\"}`;\r\n    }\r\n\r\n    if (element.tagName === \"INPUT\") {\r\n      const inputEl = element as HTMLInputElement;\r\n      const type = inputEl.type;\r\n      const label =\r\n        inputEl.placeholder || inputEl.name || inputEl.id || \"Input field\";\r\n      if (type === \"text\") return `Text input: ${label}`;\r\n      if (type === \"email\") return `Email input: ${label}`;\r\n      if (type === \"password\") return `Password input: ${label}`;\r\n      if (type === \"checkbox\")\r\n        return `Checkbox: ${label} ${inputEl.checked ? \"checked\" : \"unchecked\"}`;\r\n      if (type === \"radio\")\r\n        return `Radio button: ${label} ${inputEl.checked ? \"selected\" : \"\"}`;\r\n      if (type === \"submit\") return `Submit button: ${inputEl.value || label}`;\r\n      return `${label}`;\r\n    }\r\n\r\n    if (element.tagName === \"SELECT\") {\r\n      const selectEl = element as HTMLSelectElement;\r\n      const label = selectEl.name || selectEl.id || \"Select field\";\r\n      const selectedOption = selectEl.options[selectEl.selectedIndex];\r\n      return `Dropdown: ${label}, current value ${selectedOption ? selectedOption.textContent : \"\"}`;\r\n    }\r\n\r\n    if (element.tagName === \"TEXTAREA\") {\r\n      const textareaEl = element as HTMLTextAreaElement;\r\n      const label = textareaEl.name || textareaEl.id || \"Text area\";\r\n      return `Text area: ${label}`;\r\n    }\r\n\r\n    if (element.hasAttribute(\"role\")) {\r\n      const role = element.getAttribute(\"role\");\r\n      const textContent = element.textContent || \"\";\r\n      switch (role) {\r\n        case \"button\":\r\n          return `Button: ${textContent}`;\r\n        case \"link\":\r\n          return `Link: ${textContent}`;\r\n        case \"heading\":\r\n          return `Heading: ${textContent}`;\r\n        case \"listitem\":\r\n          return `List item: ${textContent}`;\r\n        case \"checkbox\":\r\n          return `Checkbox: ${textContent} ${element.getAttribute(\"aria-checked\") === \"true\" ? \"checked\" : \"unchecked\"}`;\r\n        case \"radio\":\r\n          return `Radio button: ${textContent} ${element.getAttribute(\"aria-checked\") === \"true\" ? \"selected\" : \"\"}`;\r\n        case \"textbox\":\r\n          return `Text box: ${textContent}`;\r\n        case \"combobox\":\r\n          return `Combobox: ${textContent}`;\r\n        case \"dialog\":\r\n          return `Dialog: ${textContent}`;\r\n        case \"alert\":\r\n          return `Alert: ${textContent}`;\r\n        case \"status\":\r\n          return `Status: ${textContent}`;\r\n        default:\r\n          return `${role}: ${textContent}`;\r\n      }\r\n    }\r\n\r\n    // Default to regular text content\r\n    return element.textContent || \"\";\r\n  }\r\n\r\n  private isSignificantElement(element: HTMLElement): boolean {\r\n    const significantTags = [\r\n      \"A\",\r\n      \"BUTTON\",\r\n      \"H1\",\r\n      \"H2\",\r\n      \"H3\",\r\n      \"H4\",\r\n      \"H5\",\r\n      \"H6\",\r\n      \"P\",\r\n      \"LI\",\r\n      \"IMG\",\r\n      \"INPUT\", // Added for inputs\r\n      \"SELECT\", // Added for selects\r\n      \"TEXTAREA\", // Added for textareas\r\n      \"LABEL\", // Labels for form elements\r\n      \"SUMMARY\", // For details/summary elements\r\n      \"ARTICLE\", // Article content\r\n      \"SECTION\", // Section content\r\n      \"ASIDE\", // Aside content\r\n      \"MAIN\", // Main content\r\n      \"NAV\", // Navigation elements\r\n      \"FOOTER\", // Footer content\r\n      \"HEADER\", // Header content\r\n    ];\r\n    return (\r\n      significantTags.includes(element.tagName) ||\r\n      element.hasAttribute(\"role\") ||\r\n      element.hasAttribute(\"aria-label\") ||\r\n      element.hasAttribute(\"title\")\r\n    );\r\n  }\r\n\r\n  private getElementSelector(element: HTMLElement): string {\r\n    // Create a simple selector path for the element\r\n    const id = element.id ? `#${element.id}` : \"\";\r\n    const classes = Array.from(element.classList)\r\n      .map((cls) => `.${cls}`)\r\n      .join(\"\");\r\n    return `${element.tagName}${id}${classes}`;\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nconst screenReaderService = new ScreenReaderService();\r\nexport default screenReaderService;\r\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
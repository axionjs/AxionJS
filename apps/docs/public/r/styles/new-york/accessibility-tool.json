{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "accessibility-tool",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "zustand"
  ],
  "registryDependencies": [
    "dialog",
    "switch",
    "avatar",
    "tabs",
    "slider"
  ],
  "files": [
    {
      "path": "ui/AccessibilityTool.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogDescription,\r\n} from \"@/registry/new-york/ui/dialog\";\r\nimport {\r\n  Tabs,\r\n  TabsContent,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from \"@/registry/new-york/ui/tabs\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { Switch } from \"@/registry/new-york/ui/switch\";\r\nimport { Slider } from \"@/registry/new-york/ui/slider\";\r\nimport {\r\n  FeatureIntensity,\r\n  useAccessibilityStore,\r\n} from \"@/registry/new-york/lib/accessibility-store\";\r\nimport { AccessibilitySlider } from \"@/registry/new-york/ui/AccessibilitySlider\";\r\nimport screenReaderService from \"@/registry/new-york/lib/screen-reader-service\";\r\n\r\nimport {\r\n  LucideContrast,\r\n  LucideEye,\r\n  LucideMaximize,\r\n  LucideText,\r\n  LucideImageOff,\r\n  LucideType,\r\n  LucideUnderline,\r\n  LucideVolume2,\r\n  LucideRefreshCw,\r\n  LucideX,\r\n  LucideLineChart,\r\n  LucideInfo,\r\n  LucideUser,\r\n  LucideZap,\r\n} from \"lucide-react\";\r\n\r\nexport function AccessibilityTool() {\r\n  const {\r\n    isOpen,\r\n    toggleOpen,\r\n\r\n    contrast,\r\n    setContrast,\r\n\r\n    highlightLinks,\r\n    setHighlightLinks,\r\n\r\n    textSize,\r\n    setTextSize,\r\n\r\n    textSpacing,\r\n    setTextSpacing,\r\n\r\n    hideImages,\r\n    toggleHideImages,\r\n\r\n    dyslexiaFriendly,\r\n    toggleDyslexiaFriendly,\r\n\r\n    lineHeight,\r\n    setLineHeight,\r\n\r\n    saturation,\r\n    setSaturation,\r\n\r\n    screenReader,\r\n    toggleScreenReader,\r\n    setScreenReaderSpeed,\r\n    setScreenReaderVolume,\r\n\r\n    resetAll,\r\n  } = useAccessibilityStore();\r\n\r\n  // Initialize screen reader\r\n  useEffect(() => {\r\n    // When enabled, initialize the service\r\n    if (screenReader.enabled) {\r\n      console.log(\"Initializing screen reader\");\r\n      screenReaderService.initialize();\r\n      screenReaderService.setSpeed(screenReader.speed);\r\n      screenReaderService.setVolume(screenReader.volume);\r\n    } else {\r\n      // When disabled, clean up the service\r\n      console.log(\"Cleaning up screen reader\");\r\n      screenReaderService.cleanup();\r\n    }\r\n\r\n    // Always clean up on component unmount\r\n    return () => {\r\n      console.log(\"Component unmounting, cleaning up screen reader\");\r\n      screenReaderService.cleanup();\r\n    };\r\n  }, [screenReader.enabled, screenReader.speed, screenReader.volume]);\r\n\r\n  // Handle screen reader toggle with proper cleanup\r\n  const handleScreenReaderToggle = () => {\r\n    if (screenReader.enabled) {\r\n      // If currently enabled, clean up before toggling state\r\n      screenReaderService.cleanup();\r\n    }\r\n    toggleScreenReader();\r\n  };\r\n\r\n  const readPageContent = () => {\r\n    if (screenReader.enabled) {\r\n      screenReaderService.readPage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={toggleOpen}>\r\n      <DialogContent className=\"h-[85vh] max-w-md w-full overflow-y-auto\">\r\n        <DialogHeader className=\"space-y-2\">\r\n          <DialogTitle className=\"text-2xl flex items-center gap-2\">\r\n            <LucideZap className=\"h-6 w-6 text-blue-500\" />\r\n            Accessibility Panel\r\n          </DialogTitle>\r\n          <DialogDescription>\r\n            Customize your browsing experience to match your needs\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <Tabs defaultValue=\"visual\" className=\"w-full\">\r\n          <TabsList className=\"grid grid-cols-3 mb-4\">\r\n            <TabsTrigger value=\"visual\">Visual</TabsTrigger>\r\n            <TabsTrigger value=\"reading\">Reading</TabsTrigger>\r\n            <TabsTrigger value=\"navigation\">Navigation</TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* Visual Tab */}\r\n          <TabsContent value=\"visual\" className=\"space-y-6\">\r\n            <div className=\"grid gap-6\">\r\n              <AccessibilitySlider\r\n                value={contrast}\r\n                onChange={setContrast}\r\n                label=\"Contrast\"\r\n                icon={<LucideContrast className=\"h-4 w-4\" />}\r\n              />\r\n\r\n              <AccessibilitySlider\r\n                value={saturation}\r\n                onChange={setSaturation}\r\n                label=\"Color Saturation\"\r\n                icon={<LucideEye className=\"h-4 w-4\" />}\r\n              />\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <LucideImageOff className=\"h-4 w-4\" />\r\n                  <span className=\"text-sm font-medium\">Hide Images</span>\r\n                </div>\r\n                <Switch\r\n                  checked={hideImages}\r\n                  onCheckedChange={toggleHideImages}\r\n                />\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* Reading Tab */}\r\n          <TabsContent value=\"reading\" className=\"space-y-6\">\r\n            <div className=\"grid gap-6\">\r\n              <AccessibilitySlider\r\n                value={textSize}\r\n                onChange={setTextSize}\r\n                label=\"Text Size\"\r\n                icon={<LucideMaximize className=\"h-4 w-4\" />}\r\n              />\r\n\r\n              <AccessibilitySlider\r\n                value={textSpacing}\r\n                onChange={setTextSpacing}\r\n                label=\"Text Spacing\"\r\n                icon={<LucideText className=\"h-4 w-4\" />}\r\n              />\r\n\r\n              <AccessibilitySlider\r\n                value={lineHeight}\r\n                onChange={setLineHeight}\r\n                label=\"Line Height\"\r\n                icon={<LucideLineChart className=\"h-4 w-4\" />}\r\n              />\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <LucideType className=\"h-4 w-4\" />\r\n                  <span className=\"text-sm font-medium\">\r\n                    Dyslexia Friendly Font\r\n                  </span>\r\n                </div>\r\n                <Switch\r\n                  checked={dyslexiaFriendly}\r\n                  onCheckedChange={toggleDyslexiaFriendly}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"space-y-4 border p-4 rounded-lg\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <LucideVolume2 className=\"h-4 w-4\" />\r\n                    <span className=\"text-sm font-medium\">Screen Reader</span>\r\n                  </div>\r\n                  <Switch\r\n                    checked={screenReader.enabled}\r\n                    onCheckedChange={toggleScreenReader}\r\n                  />\r\n                </div>\r\n\r\n                {screenReader.enabled && (\r\n                  <div className=\"pt-2 space-y-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex justify-between\">\r\n                        <span className=\"text-xs\">Reading Speed</span>\r\n                        <span className=\"text-xs font-medium\">\r\n                          {screenReader.speed === \"normal\" ? \"Normal\" : \"Slow\"}\r\n                        </span>\r\n                      </div>\r\n                      <Tabs\r\n                        value={screenReader.speed}\r\n                        onValueChange={(v) =>\r\n                          setScreenReaderSpeed(v as \"normal\" | \"slow\")\r\n                        }\r\n                        className=\"w-full\"\r\n                      >\r\n                        <TabsList className=\"grid grid-cols-2 w-full\">\r\n                          <TabsTrigger value=\"normal\" className=\"text-xs\">\r\n                            Normal\r\n                          </TabsTrigger>\r\n                          <TabsTrigger value=\"slow\" className=\"text-xs\">\r\n                            Slow\r\n                          </TabsTrigger>\r\n                        </TabsList>\r\n                      </Tabs>\r\n                    </div>\r\n\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex justify-between\">\r\n                        <span className=\"text-xs\">Volume</span>\r\n                        <span className=\"text-xs font-medium\">\r\n                          {Math.round(screenReader.volume * 100)}%\r\n                        </span>\r\n                      </div>\r\n                      <Slider\r\n                        value={[screenReader.volume * 100]}\r\n                        min={0}\r\n                        max={100}\r\n                        step={10}\r\n                        onValueChange={(value) =>\r\n                          setScreenReaderVolume(value[0] / 100)\r\n                        }\r\n                      />\r\n                    </div>\r\n\r\n                    <Button\r\n                      onClick={readPageContent}\r\n                      className=\"w-full\"\r\n                      variant=\"outline\"\r\n                    >\r\n                      Read Page Content\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* Navigation Tab */}\r\n          <TabsContent value=\"navigation\" className=\"space-y-6\">\r\n            <div className=\"grid gap-6\">\r\n              <AccessibilitySlider\r\n                value={highlightLinks}\r\n                onChange={setHighlightLinks}\r\n                label=\"Highlight Links\"\r\n                icon={<LucideUnderline className=\"h-4 w-4\" />}\r\n              />\r\n\r\n              <div className=\"p-4 bg-blue-50 rounded-lg space-y-2\">\r\n                <div className=\"flex items-start gap-2\">\r\n                  <LucideInfo className=\"h-4 w-4 text-blue-500 mt-0.5\" />\r\n                  <div>\r\n                    <h4 className=\"text-sm font-medium\">Keyboard Shortcuts</h4>\r\n                    <ul className=\"text-xs space-y-1 mt-1\">\r\n                      <li>Ctrl + U: Toggle Accessibility Panel</li>\r\n                      <li>Tab: Navigate through elements</li>\r\n                      <li>Enter: Activate focused element</li>\r\n                      <li>Esc: Close dialogs or menus</li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        <div className=\"flex justify-between mt-6 pt-4 border-t\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={resetAll}\r\n            className=\"flex items-center gap-1\"\r\n          >\r\n            <LucideRefreshCw className=\"h-3.5 w-3.5\" />\r\n            Reset All\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"default\"\r\n            size=\"sm\"\r\n            onClick={toggleOpen}\r\n            className=\"flex items-center gap-1\"\r\n          >\r\n            <LucideX className=\"h-3.5 w-3.5\" />\r\n            Close\r\n          </Button>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/AccessibilityProvider.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { useAccessibilityStore } from \"@/registry/new-york/lib/accessibility-store\";\r\n\r\nexport function AccessibilityProvider({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  const {\r\n    contrast,\r\n    highlightLinks,\r\n    textSize,\r\n    textSpacing,\r\n    hideImages,\r\n    dyslexiaFriendly,\r\n    lineHeight,\r\n    saturation,\r\n    screenReader,\r\n  } = useAccessibilityStore();\r\n\r\n  // Apply all accessibility settings to the HTML element\r\n  useEffect(() => {\r\n    const html = document.documentElement;\r\n\r\n    // Remove all potential classes first\r\n    const classesToRemove = [\r\n      \"contrast-medium\",\r\n      \"contrast-high\",\r\n      \"highlight-links-medium\",\r\n      \"highlight-links-high\",\r\n      \"text-size-medium\",\r\n      \"text-size-high\",\r\n      \"text-spacing-medium\",\r\n      \"text-spacing-high\",\r\n      \"hide-images\",\r\n      \"dyslexia-friendly\",\r\n      \"line-height-medium\",\r\n      \"line-height-high\",\r\n      \"saturation-medium\",\r\n      \"saturation-high\",\r\n    ];\r\n\r\n    html.classList.remove(...classesToRemove);\r\n\r\n    // Apply contrast settings\r\n    if (contrast === \"medium\") {\r\n      html.classList.add(\"contrast-medium\");\r\n    } else if (contrast === \"high\") {\r\n      html.classList.add(\"contrast-high\");\r\n    }\r\n\r\n    // Apply highlight links settings\r\n    if (highlightLinks === \"medium\") {\r\n      html.classList.add(\"highlight-links-medium\");\r\n    } else if (highlightLinks === \"high\") {\r\n      html.classList.add(\"highlight-links-high\");\r\n    }\r\n\r\n    // Apply text size settings\r\n    if (textSize === \"medium\") {\r\n      html.classList.add(\"text-size-medium\");\r\n    } else if (textSize === \"high\") {\r\n      html.classList.add(\"text-size-high\");\r\n    }\r\n\r\n    // Apply text spacing settings\r\n    if (textSpacing === \"medium\") {\r\n      html.classList.add(\"text-spacing-medium\");\r\n    } else if (textSpacing === \"high\") {\r\n      html.classList.add(\"text-spacing-high\");\r\n    }\r\n\r\n    // Apply hide images setting\r\n    if (hideImages) {\r\n      html.classList.add(\"hide-images\");\r\n    }\r\n\r\n    // Apply dyslexia-friendly setting\r\n    if (dyslexiaFriendly) {\r\n      html.classList.add(\"dyslexia-friendly\");\r\n    }\r\n\r\n    // Apply line height settings\r\n    if (lineHeight === \"medium\") {\r\n      html.classList.add(\"line-height-medium\");\r\n    } else if (lineHeight === \"high\") {\r\n      html.classList.add(\"line-height-high\");\r\n    }\r\n\r\n    // Apply saturation settings\r\n    if (saturation === \"medium\") {\r\n      html.classList.add(\"saturation-medium\");\r\n    } else if (saturation === \"high\") {\r\n      html.classList.add(\"saturation-high\");\r\n    }\r\n\r\n    // Add data attribute for screen reader enabled state\r\n    // This allows for potential CSS targeting if needed\r\n    if (screenReader.enabled) {\r\n      html.setAttribute(\"data-screen-reader\", \"enabled\");\r\n    } else {\r\n      html.removeAttribute(\"data-screen-reader\");\r\n    }\r\n\r\n    // Listen for Ctrl + U to open or close the accessibility menu\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      // Check if ctrlKey (or metaKey for Mac) + key \"u\"\r\n      if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === \"u\") {\r\n        event.preventDefault();\r\n        // We can't directly call toggleOpen here because of the dependency array\r\n        // Instead, dispatch a custom event that will be caught elsewhere\r\n        document.dispatchEvent(new CustomEvent(\"toggleAccessibilityPanel\"));\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyDown);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [\r\n    contrast,\r\n    highlightLinks,\r\n    textSize,\r\n    textSpacing,\r\n    hideImages,\r\n    dyslexiaFriendly,\r\n    lineHeight,\r\n    saturation,\r\n    screenReader.enabled,\r\n  ]);\r\n\r\n  return <>{children}</>;\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/AccessibilityTrigger.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { useAccessibilityStore } from \"@/registry/new-york/lib/accessibility-store\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  LucideAccessibility,\r\n  LucideEye,\r\n  LucideVolume2,\r\n  LucideZap,\r\n} from \"lucide-react\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/registry/new-york/ui/tooltip\";\r\n\r\nexport function AccessibilityTrigger() {\r\n  const { toggleOpen, screenReader } = useAccessibilityStore();\r\n\r\n  // Listen for the custom event to toggle the panel\r\n  useEffect(() => {\r\n    const handleToggleEvent = () => {\r\n      toggleOpen();\r\n    };\r\n\r\n    document.addEventListener(\"toggleAccessibilityPanel\", handleToggleEvent);\r\n    return () => {\r\n      document.removeEventListener(\r\n        \"toggleAccessibilityPanel\",\r\n        handleToggleEvent,\r\n      );\r\n    };\r\n  }, [toggleOpen]);\r\n\r\n  return (\r\n    <TooltipProvider>\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>\r\n          <Button\r\n            variant=\"default\"\r\n            size=\"lg\"\r\n            className=\"fixed bottom-4 right-4 z-50 rounded-full w-16 h-16 shadow-lg bg-blue-600 hover:bg-blue-700 flex items-center justify-center\"\r\n            onClick={toggleOpen}\r\n            aria-label=\"Open Accessibility Menu\"\r\n          >\r\n            <div className=\"relative\">\r\n              <LucideAccessibility className=\"w-8 h-8 text-white\" />\r\n              {screenReader.enabled && (\r\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border border-white animate-pulse\" />\r\n              )}\r\n            </div>\r\n          </Button>\r\n        </TooltipTrigger>\r\n        <TooltipContent side=\"left\">\r\n          <p>Accessibility Options (Ctrl+U)</p>\r\n        </TooltipContent>\r\n      </Tooltip>\r\n    </TooltipProvider>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/AccessibilitySlider.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { FeatureIntensity } from \"@/registry/new-york/lib/accessibility-store\";\r\nimport { Tabs, TabsList, TabsTrigger } from \"@/registry/new-york/ui/tabs\";\r\n\r\ninterface AccessibilitySliderProps {\r\n  value: FeatureIntensity;\r\n  onChange: (value: FeatureIntensity) => void;\r\n  label: string;\r\n  icon: React.ReactNode;\r\n}\r\n\r\nexport function AccessibilitySlider({\r\n  value,\r\n  onChange,\r\n  label,\r\n  icon,\r\n}: AccessibilitySliderProps) {\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <div className=\"w-5 h-5 flex items-center justify-center\">{icon}</div>\r\n        <span className=\"text-sm font-medium\">{label}</span>\r\n      </div>\r\n      <Tabs\r\n        value={value}\r\n        onValueChange={(v) => onChange(v as FeatureIntensity)}\r\n        className=\"w-full\"\r\n      >\r\n        <TabsList className=\"grid grid-cols-3 w-full\">\r\n          <TabsTrigger value=\"default\" className=\"text-xs\">\r\n            Default\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"medium\" className=\"text-xs\">\r\n            Medium\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"high\" className=\"text-xs\">\r\n            High\r\n          </TabsTrigger>\r\n        </TabsList>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib/accessibility-store.ts",
      "content": "\"use client\";\r\n\r\nimport { create } from \"zustand\";\r\nimport { persist } from \"zustand/middleware\";\r\n\r\n// Define types for feature intensity levels\r\nexport type FeatureIntensity = \"default\" | \"medium\" | \"high\";\r\n\r\ninterface AccessibilityState {\r\n  isOpen: boolean;\r\n  toggleOpen: () => void;\r\n\r\n  // Accessibility features with intensity levels\r\n  contrast: FeatureIntensity;\r\n  setContrast: (level: FeatureIntensity) => void;\r\n\r\n  highlightLinks: FeatureIntensity;\r\n  setHighlightLinks: (level: FeatureIntensity) => void;\r\n\r\n  textSize: FeatureIntensity;\r\n  setTextSize: (level: FeatureIntensity) => void;\r\n\r\n  textSpacing: FeatureIntensity;\r\n  setTextSpacing: (level: FeatureIntensity) => void;\r\n\r\n  hideImages: boolean;\r\n  toggleHideImages: () => void;\r\n\r\n  dyslexiaFriendly: boolean;\r\n  toggleDyslexiaFriendly: () => void;\r\n\r\n  lineHeight: FeatureIntensity;\r\n  setLineHeight: (level: FeatureIntensity) => void;\r\n\r\n  saturation: FeatureIntensity;\r\n  setSaturation: (level: FeatureIntensity) => void;\r\n\r\n  // Screen reader\r\n  screenReader: {\r\n    enabled: boolean;\r\n    speed: \"normal\" | \"slow\";\r\n    volume: number; // 0 to 1\r\n  };\r\n  toggleScreenReader: () => void;\r\n  setScreenReaderSpeed: (speed: \"normal\" | \"slow\") => void;\r\n  setScreenReaderVolume: (volume: number) => void;\r\n\r\n  // Reset all settings\r\n  resetAll: () => void;\r\n}\r\n\r\n// Default state to use when resetting\r\nconst defaultState = {\r\n  isOpen: false,\r\n  contrast: \"default\" as FeatureIntensity,\r\n  highlightLinks: \"default\" as FeatureIntensity,\r\n  textSize: \"default\" as FeatureIntensity,\r\n  textSpacing: \"default\" as FeatureIntensity,\r\n  hideImages: false,\r\n  dyslexiaFriendly: false,\r\n  lineHeight: \"default\" as FeatureIntensity,\r\n  saturation: \"default\" as FeatureIntensity,\r\n  screenReader: {\r\n    enabled: false,\r\n    speed: \"normal\" as \"normal\" | \"slow\",\r\n    volume: 0.8,\r\n  },\r\n};\r\n\r\nexport const useAccessibilityStore = create<AccessibilityState>()(\r\n  persist(\r\n    (set) => ({\r\n      ...defaultState,\r\n\r\n      toggleOpen: () =>\r\n        set((state) => ({\r\n          isOpen: !state.isOpen,\r\n        })),\r\n\r\n      // Feature setters with intensity levels\r\n      setContrast: (level) =>\r\n        set(() => ({\r\n          contrast: level,\r\n        })),\r\n\r\n      setHighlightLinks: (level) =>\r\n        set(() => ({\r\n          highlightLinks: level,\r\n        })),\r\n\r\n      setTextSize: (level) =>\r\n        set(() => ({\r\n          textSize: level,\r\n        })),\r\n\r\n      setTextSpacing: (level) =>\r\n        set(() => ({\r\n          textSpacing: level,\r\n        })),\r\n\r\n      toggleHideImages: () =>\r\n        set((state) => ({\r\n          hideImages: !state.hideImages,\r\n        })),\r\n\r\n      toggleDyslexiaFriendly: () =>\r\n        set((state) => ({\r\n          dyslexiaFriendly: !state.dyslexiaFriendly,\r\n        })),\r\n\r\n      setLineHeight: (level) =>\r\n        set(() => ({\r\n          lineHeight: level,\r\n        })),\r\n\r\n      setSaturation: (level) =>\r\n        set(() => ({\r\n          saturation: level,\r\n        })),\r\n\r\n      // Screen reader controls\r\n      toggleScreenReader: () =>\r\n        set((state) => {\r\n          // Create a clean toggle without side effects - the component will handle cleanup\r\n          return {\r\n            screenReader: {\r\n              ...state.screenReader,\r\n              enabled: !state.screenReader.enabled,\r\n            },\r\n          };\r\n        }),\r\n\r\n      setScreenReaderSpeed: (speed) =>\r\n        set((state) => ({\r\n          screenReader: {\r\n            ...state.screenReader,\r\n            speed,\r\n          },\r\n        })),\r\n\r\n      setScreenReaderVolume: (volume) =>\r\n        set((state) => ({\r\n          screenReader: {\r\n            ...state.screenReader,\r\n            volume,\r\n          },\r\n        })),\r\n\r\n      // Reset all settings to default\r\n      resetAll: () => set(defaultState),\r\n    }),\r\n    {\r\n      name: \"accessibility-storage\", // localStorage key\r\n    },\r\n  ),\r\n);\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "lib/screen-reader-service.ts",
      "content": "\"use client\";\r\n\r\nclass ScreenReaderService {\r\n  private speechSynthesis: SpeechSynthesis | null = null;\r\n  private utterance: SpeechSynthesisUtterance | null = null;\r\n  private isReading: boolean = false;\r\n  private isMounted: boolean = false;\r\n  private currentElement: HTMLElement | null = null;\r\n  private lastElementSelector: string = \"\";\r\n  private highlightClass = \"screen-reader-highlight\";\r\n\r\n  constructor() {\r\n    this.isMounted = typeof window !== \"undefined\";\r\n\r\n    // Only initialize these in the browser environment\r\n    if (this.isMounted) {\r\n      try {\r\n        this.speechSynthesis = window.speechSynthesis;\r\n        this.utterance = new SpeechSynthesisUtterance();\r\n\r\n        // Cancel any existing speech synthesis that might be running\r\n        if (this.speechSynthesis) {\r\n          this.speechSynthesis.cancel();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error initializing speech synthesis:\", error);\r\n        this.isMounted = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Implementation was moved to the updated initialize method above\r\n\r\n  public cleanup() {\r\n    if (!this.isMounted) return;\r\n\r\n    // Important: Use the same function reference for addEventListener and removeEventListener\r\n    // This ensures event listeners are properly removed\r\n    document.removeEventListener(\"mouseover\", this.handleHover);\r\n    document.removeEventListener(\"focusin\", this.handleFocus);\r\n    this.stop();\r\n  }\r\n\r\n  // Store bound methods to ensure same reference is used for add/remove event listener\r\n  private handleHover = this.handleHoverImpl.bind(this);\r\n  private handleFocus = this.handleFocusImpl.bind(this);\r\n\r\n  public initialize() {\r\n    if (!this.isMounted) return;\r\n\r\n    // Setup event listeners with the bound methods\r\n    document.addEventListener(\"mouseover\", this.handleHover);\r\n    document.addEventListener(\"focusin\", this.handleFocus);\r\n  }\r\n\r\n  public setSpeed(speed: \"normal\" | \"slow\") {\r\n    if (!this.utterance) return;\r\n\r\n    // Normal is around 1, slow is around 0.7\r\n    this.utterance.rate = speed === \"normal\" ? 1 : 0.7;\r\n  }\r\n\r\n  public setVolume(volume: number) {\r\n    if (!this.utterance) return;\r\n\r\n    // Volume between 0 and 1\r\n    this.utterance.volume = Math.max(0, Math.min(1, volume));\r\n  }\r\n\r\n  public async readElement(element: HTMLElement) {\r\n    if (!this.speechSynthesis || !this.utterance || !element) return;\r\n\r\n    // Stop any ongoing reading\r\n    this.stop();\r\n\r\n    // Get the text content of the element\r\n    const textToRead = this.getReadableText(element);\r\n    if (!textToRead) return;\r\n\r\n    // Highlight the element\r\n    this.highlightElement(element);\r\n\r\n    // Set the text to be read\r\n    this.utterance.text = textToRead;\r\n\r\n    // Start reading\r\n    this.isReading = true;\r\n    this.currentElement = element;\r\n    this.speechSynthesis.speak(this.utterance);\r\n\r\n    // Add event listener to remove highlight when done\r\n    this.utterance.onend = () => {\r\n      this.isReading = false;\r\n      this.removeHighlight();\r\n      this.currentElement = null;\r\n    };\r\n  }\r\n\r\n  public readPage() {\r\n    const mainContent = document.querySelector(\"main\") || document.body;\r\n    this.readElement(mainContent as HTMLElement);\r\n  }\r\n\r\n  public stop() {\r\n    if (!this.speechSynthesis) return;\r\n\r\n    this.speechSynthesis.cancel();\r\n    this.isReading = false;\r\n    this.removeHighlight();\r\n    this.currentElement = null;\r\n  }\r\n\r\n  public pause() {\r\n    if (!this.speechSynthesis || !this.isReading) return;\r\n\r\n    this.speechSynthesis.pause();\r\n  }\r\n\r\n  public resume() {\r\n    if (!this.speechSynthesis || !this.isReading) return;\r\n\r\n    this.speechSynthesis.resume();\r\n  }\r\n\r\n  private handleHoverImpl(event: MouseEvent) {\r\n    if (!this.isReading && event.target instanceof HTMLElement) {\r\n      // Don't read trivial elements like spans inside buttons, etc.\r\n      if (this.isSignificantElement(event.target)) {\r\n        this.lastElementSelector = this.getElementSelector(event.target);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleFocusImpl(event: FocusEvent) {\r\n    if (!this.isReading && event.target instanceof HTMLElement) {\r\n      this.readElement(event.target);\r\n    }\r\n  }\r\n\r\n  private highlightElement(element: HTMLElement) {\r\n    this.removeHighlight();\r\n    element.classList.add(this.highlightClass);\r\n  }\r\n\r\n  private removeHighlight() {\r\n    const highlighted = document.querySelectorAll(`.${this.highlightClass}`);\r\n    highlighted.forEach((el) => el.classList.remove(this.highlightClass));\r\n  }\r\n\r\n  private getReadableText(element: HTMLElement): string {\r\n    // Get text based on element type and role\r\n    if (element.tagName === \"IMG\") {\r\n      return element.alt || \"Image\";\r\n    }\r\n\r\n    if (element.tagName === \"A\") {\r\n      return `Link: ${element.textContent || \"\"}`;\r\n    }\r\n\r\n    if (element.tagName === \"BUTTON\") {\r\n      return `Button: ${element.textContent || \"\"}`;\r\n    }\r\n\r\n    if (element.tagName === \"INPUT\") {\r\n      const inputEl = element as HTMLInputElement;\r\n      return `${inputEl.placeholder || inputEl.name || \"Input field\"}`;\r\n    }\r\n\r\n    // Default to regular text content\r\n    return element.textContent || \"\";\r\n  }\r\n\r\n  private isSignificantElement(element: HTMLElement): boolean {\r\n    const significantTags = [\r\n      \"A\",\r\n      \"BUTTON\",\r\n      \"H1\",\r\n      \"H2\",\r\n      \"H3\",\r\n      \"H4\",\r\n      \"H5\",\r\n      \"H6\",\r\n      \"P\",\r\n      \"LI\",\r\n      \"IMG\",\r\n    ];\r\n    return (\r\n      significantTags.includes(element.tagName) ||\r\n      element.hasAttribute(\"role\") ||\r\n      element.hasAttribute(\"aria-label\")\r\n    );\r\n  }\r\n\r\n  private getElementSelector(element: HTMLElement): string {\r\n    // Create a simple selector path for the element\r\n    const id = element.id ? `#${element.id}` : \"\";\r\n    if (id) return id;\r\n\r\n    const classes = Array.from(element.classList)\r\n      .map((c) => `.${c}`)\r\n      .join(\"\");\r\n    return `${element.tagName.toLowerCase()}${classes}`;\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const screenReaderService = new ScreenReaderService();\r\n\r\nexport default screenReaderService;\r\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-infinite-scroll",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-infinite-scroll.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\ninterface UseInfiniteScrollOptions {\r\n  threshold?: number;\r\n  rootMargin?: string;\r\n  enabled?: boolean;\r\n}\r\n\r\n/**\r\n * A hook for implementing infinite scrolling\r\n * @param callback Function to call when the bottom is reached\r\n * @param options Configuration options\r\n * @returns A ref to attach to the scrollable element\r\n */\r\nexport function useInfiniteScroll(\r\n  callback: () => void,\r\n  {\r\n    threshold = 0.8,\r\n    rootMargin = \"0px\",\r\n    enabled = true,\r\n  }: UseInfiniteScrollOptions = {},\r\n): React.RefObject<HTMLElement> {\r\n  const ref = React.useRef<HTMLElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (!enabled || typeof window === \"undefined\") return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        const [entry] = entries;\r\n        if (entry.isIntersecting) {\r\n          callback();\r\n        }\r\n      },\r\n      {\r\n        root: null,\r\n        rootMargin,\r\n        threshold,\r\n      },\r\n    );\r\n\r\n    const currentRef = ref.current;\r\n\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return () => {\r\n      if (currentRef) {\r\n        observer.unobserve(currentRef);\r\n      }\r\n    };\r\n  }, [callback, rootMargin, threshold, enabled]);\r\n\r\n  return ref;\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
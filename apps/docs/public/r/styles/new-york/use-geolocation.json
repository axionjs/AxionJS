{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-geolocation",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-geolocation.tsx",
      "content": "import { useState, useEffect, useCallback, useRef } from \"react\";\r\n\r\ninterface GeolocationOptions {\r\n  /** Whether to watch position continuously (default: false) */\r\n  watch?: boolean;\r\n  /** Geolocation API enableHighAccuracy option (default: false) */\r\n  enableHighAccuracy?: boolean;\r\n  /** Geolocation API timeout in milliseconds (default: 10000) */\r\n  timeout?: number;\r\n  /** Geolocation API maximumAge in milliseconds (default: 0) */\r\n  maximumAge?: number;\r\n  /** Automatically request permission on mount (default: true) */\r\n  autoRequest?: boolean;\r\n}\r\n\r\ninterface GeolocationPosition {\r\n  latitude: number;\r\n  longitude: number;\r\n  accuracy: number;\r\n  altitude: number | null;\r\n  altitudeAccuracy: number | null;\r\n  heading: number | null;\r\n  speed: number | null;\r\n  timestamp: number;\r\n}\r\n\r\ninterface GeolocationState {\r\n  isSupported: boolean;\r\n  position: GeolocationPosition | null;\r\n  error: GeolocationPositionError | null;\r\n  isLoading: boolean;\r\n  permissionState: PermissionState | null;\r\n}\r\n\r\n/**\r\n * Custom hook for accessing and watching browser geolocation\r\n *\r\n * @param options Configuration options for the geolocation API\r\n * @returns Object containing geolocation state and control functions\r\n */\r\nexport function useGeolocation(options: GeolocationOptions = {}) {\r\n  const {\r\n    watch = false,\r\n    enableHighAccuracy = false,\r\n    timeout = 10000,\r\n    maximumAge = 0,\r\n    autoRequest = true,\r\n  } = options;\r\n\r\n  const [state, setState] = useState<GeolocationState>({\r\n    isSupported: typeof navigator !== \"undefined\" && \"geolocation\" in navigator,\r\n    position: null,\r\n    error: null,\r\n    isLoading: false,\r\n    permissionState: null,\r\n  });\r\n\r\n  const watchIdRef = useRef<number | null>(null);\r\n  const isMountedRef = useRef(true);\r\n\r\n  // Check permission status\r\n  const checkPermission = useCallback(async () => {\r\n    if (typeof navigator === \"undefined\" || !(\"permissions\" in navigator)) {\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const permission = await navigator.permissions.query({\r\n        name: \"geolocation\" as PermissionName,\r\n      });\r\n\r\n      if (isMountedRef.current) {\r\n        setState((prev) => ({ ...prev, permissionState: permission.state }));\r\n      }\r\n\r\n      // Listen for permission changes\r\n      permission.addEventListener(\"change\", () => {\r\n        if (isMountedRef.current) {\r\n          setState((prev) => ({ ...prev, permissionState: permission.state }));\r\n        }\r\n      });\r\n\r\n      return permission.state;\r\n    } catch (error) {\r\n      console.error(\"Error checking geolocation permission:\", error);\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  // Get current position\r\n  const getPosition = useCallback(() => {\r\n    if (!state.isSupported) {\r\n      setState((prev) => ({\r\n        ...prev,\r\n        error: {\r\n          code: 0,\r\n          message: \"Geolocation is not supported in this browser\",\r\n          PERMISSION_DENIED: 1,\r\n          POSITION_UNAVAILABLE: 2,\r\n          TIMEOUT: 3,\r\n        } as GeolocationPositionError,\r\n        isLoading: false,\r\n      }));\r\n      return;\r\n    }\r\n\r\n    setState((prev) => ({ ...prev, isLoading: true }));\r\n\r\n    const geoOptions: PositionOptions = {\r\n      enableHighAccuracy,\r\n      timeout,\r\n      maximumAge,\r\n    };\r\n\r\n    if (watch) {\r\n      if (watchIdRef.current) {\r\n        navigator.geolocation.clearWatch(watchIdRef.current);\r\n      }\r\n\r\n      watchIdRef.current = navigator.geolocation.watchPosition(\r\n        (position) => {\r\n          if (isMountedRef.current) {\r\n            setState((prev) => ({\r\n              ...prev,\r\n              position: {\r\n                latitude: position.coords.latitude,\r\n                longitude: position.coords.longitude,\r\n                accuracy: position.coords.accuracy,\r\n                altitude: position.coords.altitude,\r\n                altitudeAccuracy: position.coords.altitudeAccuracy,\r\n                heading: position.coords.heading,\r\n                speed: position.coords.speed,\r\n                timestamp: position.timestamp,\r\n              },\r\n              error: null,\r\n              isLoading: false,\r\n            }));\r\n          }\r\n        },\r\n        (error) => {\r\n          if (isMountedRef.current) {\r\n            setState((prev) => ({\r\n              ...prev,\r\n              error,\r\n              isLoading: false,\r\n            }));\r\n          }\r\n        },\r\n        geoOptions,\r\n      );\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          if (isMountedRef.current) {\r\n            setState((prev) => ({\r\n              ...prev,\r\n              position: {\r\n                latitude: position.coords.latitude,\r\n                longitude: position.coords.longitude,\r\n                accuracy: position.coords.accuracy,\r\n                altitude: position.coords.altitude,\r\n                altitudeAccuracy: position.coords.altitudeAccuracy,\r\n                heading: position.coords.heading,\r\n                speed: position.coords.speed,\r\n                timestamp: position.timestamp,\r\n              },\r\n              error: null,\r\n              isLoading: false,\r\n            }));\r\n          }\r\n        },\r\n        (error) => {\r\n          if (isMountedRef.current) {\r\n            setState((prev) => ({\r\n              ...prev,\r\n              error,\r\n              isLoading: false,\r\n            }));\r\n          }\r\n        },\r\n        geoOptions,\r\n      );\r\n    }\r\n  }, [state.isSupported, enableHighAccuracy, timeout, maximumAge, watch]);\r\n\r\n  // Stop watching position\r\n  const stopWatching = useCallback(() => {\r\n    if (watchIdRef.current !== null) {\r\n      navigator.geolocation.clearWatch(watchIdRef.current);\r\n      watchIdRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Initialize\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n    checkPermission();\r\n\r\n    if (autoRequest) {\r\n      getPosition();\r\n    }\r\n\r\n    return () => {\r\n      isMountedRef.current = false;\r\n      stopWatching();\r\n    };\r\n  }, [autoRequest, checkPermission, getPosition, stopWatching]);\r\n\r\n  return {\r\n    ...state,\r\n    getPosition,\r\n    stopWatching,\r\n    checkPermission,\r\n  };\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-form",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-form.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ntype FormState<T> = {\n  values: T;\n  errors: Partial<Record<keyof T, string>>;\n  touched: Partial<Record<keyof T, boolean>>;\n  isSubmitting: boolean;\n  isValid: boolean;\n};\n\ntype FormActions<T> = {\n  setFieldValue: (field: keyof T, value: any) => void;\n  setFieldError: (field: keyof T, error: string) => void;\n  setFieldTouched: (field: keyof T, isTouched: boolean) => void;\n  setValues: (values: Partial<T>) => void;\n  setErrors: (errors: Partial<Record<keyof T, string>>) => void;\n  resetForm: () => void;\n  submitForm: () => Promise<void>;\n};\n\ninterface UseFormProps<T> {\n  initialValues: T;\n  validate?: (values: T) => Partial<Record<keyof T, string>>;\n  onSubmit: (values: T) => Promise<void> | void;\n}\n\n/**\n * A hook for managing form state and validation\n * @param props The form configuration\n * @returns Form state and actions\n */\nexport function useForm<T extends Record<string, any>>({\n  initialValues,\n  validate,\n  onSubmit,\n}: UseFormProps<T>): [FormState<T>, FormActions<T>] {\n  const [state, setState] = React.useState<FormState<T>>({\n    values: initialValues,\n    errors: {},\n    touched: {},\n    isSubmitting: false,\n    isValid: true,\n  });\n\n  const validateForm = React.useCallback(() => {\n    if (!validate) return {};\n\n    const errors = validate(state.values);\n    return errors;\n  }, [validate, state.values]);\n\n  // Update isValid when values change\n  React.useEffect(() => {\n    if (!validate) return;\n\n    const errors = validate(state.values);\n    const isValid = Object.keys(errors).length === 0;\n\n    // Only update state if errors or validity changed\n    if (\n      JSON.stringify(errors) !== JSON.stringify(state.errors) ||\n      isValid !== state.isValid\n    ) {\n      setState((prev) => ({ ...prev, errors, isValid }));\n    }\n  }, [validate, state.values]);\n\n  const setFieldValue = React.useCallback((field: keyof T, value: any) => {\n    setState((prev) => ({\n      ...prev,\n      values: { ...prev.values, [field]: value },\n      touched: { ...prev.touched, [field]: true },\n    }));\n  }, []);\n\n  const setFieldError = React.useCallback((field: keyof T, error: string) => {\n    setState((prev) => ({\n      ...prev,\n      errors: { ...prev.errors, [field]: error },\n    }));\n  }, []);\n\n  const setFieldTouched = React.useCallback(\n    (field: keyof T, isTouched: boolean) => {\n      setState((prev) => ({\n        ...prev,\n        touched: { ...prev.touched, [field]: isTouched },\n      }));\n    },\n    [],\n  );\n\n  const setValues = React.useCallback((values: Partial<T>) => {\n    setState((prev) => ({\n      ...prev,\n      values: { ...prev.values, ...values },\n    }));\n  }, []);\n\n  const setErrors = React.useCallback(\n    (errors: Partial<Record<keyof T, string>>) => {\n      setState((prev) => ({\n        ...prev,\n        errors: { ...prev.errors, ...errors },\n      }));\n    },\n    [],\n  );\n\n  const resetForm = React.useCallback(() => {\n    setState({\n      values: initialValues,\n      errors: {},\n      touched: {},\n      isSubmitting: false,\n      isValid: true,\n    });\n  }, [initialValues]);\n\n  const submitForm = React.useCallback(async () => {\n    if (!validate) {\n      setState((prev) => ({ ...prev, isSubmitting: true }));\n\n      try {\n        await onSubmit(state.values);\n      } finally {\n        setState((prev) => ({ ...prev, isSubmitting: false }));\n      }\n      return;\n    }\n\n    const errors = validate(state.values);\n\n    if (Object.keys(errors).length === 0) {\n      setState((prev) => ({ ...prev, isSubmitting: true }));\n\n      try {\n        await onSubmit(state.values);\n      } finally {\n        setState((prev) => ({ ...prev, isSubmitting: false }));\n      }\n    } else {\n      setState((prev) => ({\n        ...prev,\n        errors,\n        isValid: false,\n      }));\n    }\n  }, [onSubmit, state.values, validate]);\n\n  const actions: FormActions<T> = {\n    setFieldValue,\n    setFieldError,\n    setFieldTouched,\n    setValues,\n    setErrors,\n    resetForm,\n    submitForm,\n  };\n\n  return [state, actions];\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
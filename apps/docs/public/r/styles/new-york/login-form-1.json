{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "login-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A login form component.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card",
    "checkbox",
    "use-toast",
    "password-input"
  ],
  "files": [
    {
      "path": "blocks/login-form-1.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { useId } from \"react\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport Link from \"next/link\";\r\nimport { AtSignIcon, Loader2, ArrowRight } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\nimport PasswordInput from \"@/registry/new-york/ui/password-input\";\r\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// Define login form validation schema\r\nconst formSchema = z.object({\r\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\r\n  password: z\r\n    .string()\r\n    .min(8, { message: \"Password must be at least 8 characters\" }),\r\n  rememberMe: z.boolean().optional(),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\nexport function LoginForm1({\r\n  onLogin,\r\n  redirectTo = \"/dashboard\",\r\n  onSocialLogin,\r\n  formAction,\r\n  signupUrl = \"/signup\",\r\n  forgotPasswordUrl = \"/reset-password\",\r\n  socialProviders = [],\r\n  welcomeText = \"Welcome back\",\r\n  descriptionText = \"Enter your credentials to access your account\",\r\n  showRememberMe = true,\r\n  className,\r\n}: {\r\n  onLogin?: (values: FormValues) => Promise<void>;\r\n  redirectTo?: string;\r\n  onSocialLogin?: (provider: string) => Promise<void>;\r\n  formAction?: string;\r\n  signupUrl?: string;\r\n  forgotPasswordUrl?: string;\r\n  socialProviders?: { id: string; name: string; icon: React.ReactNode }[];\r\n  welcomeText?: string;\r\n  descriptionText?: string;\r\n  showRememberMe?: boolean;\r\n  className?: string;\r\n}) {\r\n  const router = useRouter();\r\n  const { toast } = useToast();\r\n  const [isPending, setIsPending] = React.useState(false);\r\n  const [rememberMe, setRememberMe] = React.useState(false);\r\n\r\n  const emailId = useId();\r\n  const passwordId = useId();\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      rememberMe: false,\r\n    },\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  // Handle social login\r\n  const handleSocialLogin = async (providerId: string) => {\r\n    try {\r\n      setIsPending(true);\r\n\r\n      if (onSocialLogin) {\r\n        await onSocialLogin(providerId);\r\n      } else {\r\n        // Simulate API call for social login\r\n        await new Promise((resolve) => setTimeout(resolve, 1000));\r\n        console.log(`Logging in with ${providerId}`);\r\n\r\n        toast({\r\n          title: \"Social login\",\r\n          description: `Logged in with ${providerId}`,\r\n        });\r\n\r\n        router.push(redirectTo);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Social login error with ${providerId}:`, error);\r\n\r\n      toast({\r\n        title: \"Login failed\",\r\n        description: `Could not log in with ${providerId}. Please try again.`,\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsPending(false);\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  async function onSubmit(values: FormValues) {\r\n    try {\r\n      setIsPending(true);\r\n\r\n      if (onLogin) {\r\n        // Use the provided login function\r\n        await onLogin(values);\r\n      } else {\r\n        // Simulate API call\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n        console.log(\"Login values:\", values);\r\n\r\n        toast({\r\n          title: \"Login successful\",\r\n          description: \"You have been logged in successfully.\",\r\n        });\r\n\r\n        router.push(redirectTo);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n\r\n      toast({\r\n        title: \"Login failed\",\r\n        description: \"Please check your credentials and try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsPending(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className={cn(\"w-full max-w-md mx-auto shadow-md\", className)}>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-2xl font-bold text-center\">\r\n          {welcomeText}\r\n        </CardTitle>\r\n        <CardDescription className=\"text-center\">\r\n          {descriptionText}\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Form {...form}>\r\n          <form\r\n            onSubmit={form.handleSubmit(onSubmit)}\r\n            className=\"space-y-4\"\r\n            action={formAction}\r\n            noValidate\r\n          >\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel htmlFor={emailId}>Email</FormLabel>\r\n                  <FormControl>\r\n                    <div className=\"relative\">\r\n                      <Input\r\n                        id={emailId}\r\n                        placeholder=\"name@example.com\"\r\n                        className=\"peer ps-9\"\r\n                        {...field}\r\n                        autoComplete=\"email\"\r\n                        type=\"email\"\r\n                        aria-required=\"true\"\r\n                      />\r\n                      <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                        <AtSignIcon size={16} aria-hidden=\"true\" />\r\n                      </div>\r\n                    </div>\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"password\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <FormLabel htmlFor={passwordId}>Password</FormLabel>\r\n                    <Link\r\n                      href={forgotPasswordUrl}\r\n                      className=\"text-sm text-primary hover:underline\"\r\n                      tabIndex={-1}\r\n                    >\r\n                      Forgot password?\r\n                    </Link>\r\n                  </div>\r\n                  <FormControl>\r\n                    <PasswordInput\r\n                      id={passwordId}\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      error={form.formState.errors.password?.message}\r\n                      autoComplete=\"current-password\"\r\n                      aria-required=\"true\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            {showRememberMe && (\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Checkbox\r\n                  id=\"remember-me\"\r\n                  checked={rememberMe}\r\n                  onCheckedChange={(checked) => {\r\n                    if (typeof checked === \"boolean\") {\r\n                      setRememberMe(checked);\r\n                      form.setValue(\"rememberMe\", checked);\r\n                    }\r\n                  }}\r\n                />\r\n                <label\r\n                  htmlFor=\"remember-me\"\r\n                  className=\"text-sm font-medium leading-none cursor-pointer\"\r\n                >\r\n                  Remember me\r\n                </label>\r\n              </div>\r\n            )}\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"w-full\"\r\n              disabled={isPending}\r\n              aria-label=\"Sign in to your account\"\r\n            >\r\n              {isPending ? (\r\n                <>\r\n                  <Loader2\r\n                    className=\"mr-2 h-4 w-4 animate-spin\"\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                  <span>Signing in...</span>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <span>Sign in</span>\r\n                  <ArrowRight className=\"ml-2 h-4 w-4\" aria-hidden=\"true\" />\r\n                </>\r\n              )}\r\n            </Button>\r\n          </form>\r\n        </Form>\r\n      </CardContent>\r\n      <CardFooter className=\"flex flex-col space-y-4\">\r\n        <div className=\"relative w-full\">\r\n          <div className=\"absolute inset-0 flex items-center\">\r\n            <span className=\"w-full border-t\" />\r\n          </div>\r\n          <div className=\"relative flex justify-center text-xs uppercase\">\r\n            <span className=\"bg-background px-2 text-muted-foreground\">\r\n              Or continue with\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid grid-cols-2 gap-4 w-full\">\r\n          {socialProviders.map((provider) => (\r\n            <Button\r\n              key={provider.id}\r\n              variant=\"outline\"\r\n              type=\"button\"\r\n              className={cn(\r\n                \"flex items-center justify-center gap-2 transition-colors\",\r\n                provider.className,\r\n              )}\r\n              onClick={() => handleSocialLogin(provider.id)}\r\n              disabled={isPending}\r\n              aria-label={`Sign in with ${provider.name}`}\r\n            >\r\n              {provider.icon}\r\n              <span className=\"hidden sm:inline\">{provider.name}</span>\r\n            </Button>\r\n          ))}\r\n        </div>\r\n        <div className=\"text-center text-sm mt-4\">\r\n          Don&apos;t have an account?{\" \"}\r\n          <Link\r\n            href={signupUrl}\r\n            className=\"text-primary hover:underline font-medium\"\r\n          >\r\n            Sign up\r\n          </Link>\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default LoginForm1;\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
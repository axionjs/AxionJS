{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "use-fullscreen",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-fullscreen.ts",
      "content": "import { useState, useCallback, useRef, useEffect } from \"react\";\n\ninterface FullscreenOptions {\n  /** Element to request fullscreen. Falls back to document.documentElement if not provided */\n  element?: React.RefObject<HTMLElement>;\n  /** Function to run when fullscreen is entered */\n  onEnter?: () => void;\n  /** Function to run when fullscreen is exited */\n  onExit?: () => void;\n  /** Whether to automatically apply fallback strategies for iOS (default: true) */\n  iosFallback?: boolean;\n}\n\n/**\n * Custom hook for controlling fullscreen mode with cross-browser support\n *\n * @param options Configuration options for fullscreen behavior\n * @returns Object containing fullscreen state and control functions\n */\nexport function useFullscreen(options: FullscreenOptions = {}) {\n  const { element, onEnter, onExit, iosFallback = true } = options;\n\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isSupported, setIsSupported] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const isIOS = useRef(false);\n  const onEnterRef = useRef(onEnter);\n  const onExitRef = useRef(onExit);\n\n  // Update callback refs when they change\n  useEffect(() => {\n    onEnterRef.current = onEnter;\n    onExitRef.current = onExit;\n  }, [onEnter, onExit]);\n\n  // Check browser support for fullscreen API\n  useEffect(() => {\n    if (typeof document === \"undefined\") return;\n\n    const fullscreenEnabled =\n      document.fullscreenEnabled ||\n      // @ts-ignore - Vendor prefixes\n      document.webkitFullscreenEnabled ||\n      // @ts-ignore - Vendor prefixes\n      document.mozFullScreenEnabled ||\n      // @ts-ignore - Vendor prefixes\n      document.msFullscreenEnabled;\n\n    isIOS.current =\n      typeof navigator !== \"undefined\" &&\n      /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n      !window.MSStream;\n\n    setIsSupported(!!fullscreenEnabled || (iosFallback && isIOS.current));\n  }, [iosFallback]);\n\n  // Function to get the target element\n  const getTargetElement = useCallback(() => {\n    if (element && element.current) {\n      return element.current;\n    }\n    return document.documentElement;\n  }, [element]);\n\n  // Track fullscreen changes\n  useEffect(() => {\n    if (typeof document === \"undefined\") return;\n\n    const handleFullscreenChange = () => {\n      const fullscreenElement =\n        document.fullscreenElement ||\n        // @ts-ignore - Vendor prefixes\n        document.webkitFullscreenElement ||\n        // @ts-ignore - Vendor prefixes\n        document.mozFullScreenElement ||\n        // @ts-ignore - Vendor prefixes\n        document.msFullscreenElement;\n\n      const newIsFullscreen = !!fullscreenElement;\n      setIsFullscreen(newIsFullscreen);\n\n      if (newIsFullscreen && onEnterRef.current) {\n        onEnterRef.current();\n      } else if (!newIsFullscreen && onExitRef.current) {\n        onExitRef.current();\n      }\n    };\n\n    document.addEventListener(\"fullscreenchange\", handleFullscreenChange);\n    document.addEventListener(\"webkitfullscreenchange\", handleFullscreenChange);\n    document.addEventListener(\"mozfullscreenchange\", handleFullscreenChange);\n    document.addEventListener(\"MSFullscreenChange\", handleFullscreenChange);\n\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", handleFullscreenChange);\n      document.removeEventListener(\n        \"webkitfullscreenchange\",\n        handleFullscreenChange,\n      );\n      document.removeEventListener(\n        \"mozfullscreenchange\",\n        handleFullscreenChange,\n      );\n      document.removeEventListener(\n        \"MSFullscreenChange\",\n        handleFullscreenChange,\n      );\n    };\n  }, []);\n\n  // Enter fullscreen\n  const enter = useCallback(async () => {\n    if (!isSupported) {\n      setError(new Error(\"Fullscreen not supported\"));\n      return false;\n    }\n\n    const target = getTargetElement();\n    setError(null);\n\n    try {\n      if (isIOS.current && iosFallback) {\n        // iOS Safari doesn't support true fullscreen\n        // Apply a CSS class that makes the element take the full screen\n        if (target) {\n          target.style.position = \"fixed\";\n          target.style.top = \"0\";\n          target.style.right = \"0\";\n          target.style.bottom = \"0\";\n          target.style.left = \"0\";\n          target.style.width = \"100vw\";\n          target.style.height = \"100vh\";\n          target.style.zIndex = \"9999\";\n          target.style.backgroundColor = \"#000\";\n\n          // Force orientation change if possible\n          if (screen.orientation && screen.orientation.lock) {\n            try {\n              await screen.orientation.lock(\"landscape\");\n            } catch (e) {\n              // Ignore orientation errors\n            }\n          }\n\n          setIsFullscreen(true);\n          if (onEnterRef.current) {\n            onEnterRef.current();\n          }\n          return true;\n        }\n      } else {\n        // Standard fullscreen API\n        if (target.requestFullscreen) {\n          await target.requestFullscreen();\n          return true;\n        } else if (target.webkitRequestFullscreen) {\n          // @ts-ignore - Vendor prefixes\n          await target.webkitRequestFullscreen();\n          return true;\n        } else if (target.mozRequestFullScreen) {\n          // @ts-ignore - Vendor prefixes\n          await target.mozRequestFullScreen();\n          return true;\n        } else if (target.msRequestFullscreen) {\n          // @ts-ignore - Vendor prefixes\n          await target.msRequestFullscreen();\n          return true;\n        }\n      }\n    } catch (err) {\n      setError(\n        err instanceof Error ? err : new Error(\"Error entering fullscreen\"),\n      );\n      return false;\n    }\n\n    setError(new Error(\"Fullscreen request failed\"));\n    return false;\n  }, [isSupported, getTargetElement, iosFallback]);\n\n  // Exit fullscreen\n  const exit = useCallback(async () => {\n    if (!isFullscreen) return true;\n    setError(null);\n\n    try {\n      if (isIOS.current && iosFallback) {\n        // iOS Safari fallback cleanup\n        const target = getTargetElement();\n        if (target) {\n          target.style.position = \"\";\n          target.style.top = \"\";\n          target.style.right = \"\";\n          target.style.bottom = \"\";\n          target.style.left = \"\";\n          target.style.width = \"\";\n          target.style.height = \"\";\n          target.style.zIndex = \"\";\n          target.style.backgroundColor = \"\";\n\n          setIsFullscreen(false);\n          if (onExitRef.current) {\n            onExitRef.current();\n          }\n          return true;\n        }\n      } else {\n        // Standard fullscreen API\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n          return true;\n        } else if (document.webkitExitFullscreen) {\n          // @ts-ignore - Vendor prefixes\n          await document.webkitExitFullscreen();\n          return true;\n        } else if (document.mozCancelFullScreen) {\n          // @ts-ignore - Vendor prefixes\n          await document.mozCancelFullScreen();\n          return true;\n        } else if (document.msExitFullscreen) {\n          // @ts-ignore - Vendor prefixes\n          await document.msExitFullscreen();\n          return true;\n        }\n      }\n    } catch (err) {\n      setError(\n        err instanceof Error ? err : new Error(\"Error exiting fullscreen\"),\n      );\n      return false;\n    }\n\n    setError(new Error(\"Exit fullscreen failed\"));\n    return false;\n  }, [isFullscreen, getTargetElement, iosFallback]);\n\n  // Toggle fullscreen\n  const toggle = useCallback(async () => {\n    if (isFullscreen) {\n      return exit();\n    } else {\n      return enter();\n    }\n  }, [isFullscreen, enter, exit]);\n\n  return {\n    isFullscreen,\n    isSupported,\n    error,\n    enter,\n    exit,\n    toggle,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "multi-step-form",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A multi-step form with progress tracking and validation.",
  "dependencies": [
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "avatar",
    "form",
    "switch",
    "input",
    "textarea",
    "radio-group",
    "select",
    "separator",
    "progress",
    "use-toast"
  ],
  "files": [
    {
      "path": "dynamic-components/multi-step-form/actions/multi-step-form-actions.ts",
      "content": "\"use server\";\n\nimport { revalidatePath } from \"next/cache\";\nimport type { OnboardingFormValues } from \"@/registry/new-york/dynamic-components/multi-step-form/components/onboarding-wizard\";\nimport { db } from \"@/registry/new-york/lib/db\";\n\nexport async function saveOnboardingData(data: OnboardingFormValues) {\n  try {\n    // In actual implementation, you would have the user ID from the session\n    // For this example, we'll use a placeholder ID\n    const userId = \"user-placeholder-id\";\n\n    // Extract preferences from the form data\n    const preferences = {\n      theme: data.theme,\n      emailFrequency: data.emailFrequency,\n      marketingEmails: data.marketingEmails,\n      notifications: {\n        email: data.emailNotifications,\n        push: data.pushNotifications,\n        activitySummary: data.activitySummary,\n        newFeatures: data.newFeatures,\n        securityAlerts: data.securityAlerts,\n      },\n    };\n\n    // Update the user profile in the database\n    await db.userProfile.upsert({\n      where: { id: userId },\n      update: {\n        name: data.name,\n        bio: data.bio || null,\n        avatarUrl: data.avatarUrl || null,\n        preferences: preferences,\n        completedOnboarding: true,\n        updatedAt: new Date(),\n      },\n      create: {\n        id: userId,\n        email: \"user@example.com\", // This would come from auth\n        name: data.name,\n        bio: data.bio || null,\n        avatarUrl: data.avatarUrl || null,\n        preferences: preferences,\n        completedOnboarding: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n\n    revalidatePath(\"/dashboard\");\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error saving onboarding data:\", error);\n    return { success: false, error: \"Failed to save onboarding data\" };\n  }\n}\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/components/onboarding-wizard.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  Loader2,\n  ChevronLeft,\n  ChevronRight,\n  UserIcon,\n  Settings,\n  BellRing,\n  Check,\n} from \"lucide-react\";\n\nimport { Form } from \"@/registry/new-york/ui/form\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Progress } from \"@/registry/new-york/ui/progress\";\nimport { cn } from \"@/lib/utils\";\nimport { Separator } from \"@/registry/new-york/ui/separator\";\nimport { saveOnboardingData } from \"@/registry/new-york/dynamic-components/multi-step-form/actions/multi-step-form-actions\";\nimport { PersonalInfoForm } from \"@/registry/new-york/dynamic-components/multi-step-form/components/personal-info-form\";\nimport { PreferencesForm } from \"@/registry/new-york/dynamic-components/multi-step-form/components/preferences-form\";\nimport { AvatarUploadForm } from \"@/registry/new-york/dynamic-components/multi-step-form/components/avatar-upload-form\";\nimport { NotificationsForm } from \"@/registry/new-york/dynamic-components/multi-step-form/components/notifications-form\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\n\n// Define the form validation schema\nconst formSchema = z.object({\n  // Step 1: Personal Information\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\n  bio: z\n    .string()\n    .max(500, { message: \"Bio must not exceed 500 characters\" })\n    .optional(),\n\n  // Step 2: Profile Picture\n  avatarUrl: z.string().optional(),\n\n  // Step 3: Preferences\n  theme: z.enum([\"light\", \"dark\", \"system\"], {\n    required_error: \"Please select a theme preference\",\n  }),\n  emailFrequency: z.enum([\"daily\", \"weekly\", \"monthly\", \"never\"], {\n    required_error: \"Please select an email frequency\",\n  }),\n  marketingEmails: z.boolean().default(false),\n\n  // Step 4: Notifications\n  emailNotifications: z.boolean().default(true),\n  pushNotifications: z.boolean().default(true),\n  activitySummary: z.boolean().default(true),\n  newFeatures: z.boolean().default(true),\n  securityAlerts: z.boolean().default(true),\n});\n\nexport type OnboardingFormValues = z.infer<typeof formSchema>;\n\ninterface OnboardingWizardProps {\n  /**\n   * URL to redirect to after successful submission\n   */\n  redirectUrl?: string;\n  /**\n   * Custom form action for server-side form processing\n   */\n  formAction?: string;\n  /**\n   * Onboarding title\n   */\n  title?: string;\n  /**\n   * Custom CSS class for the container\n   */\n  className?: string;\n  /**\n   * Initial step to show (1-based)\n   */\n  initialStep?: number;\n  /**\n   * Show step indicators\n   */\n  showStepIndicator?: boolean;\n  /**\n   * Label for the submission button\n   */\n  submitButtonLabel?: string;\n  /**\n   * Function to call when onboarding is complete\n   */\n  onComplete?: (data: OnboardingFormValues) => void;\n}\n\nexport function OnboardingWizard({\n  redirectUrl = \"/dashboard\",\n  className,\n  initialStep = 1,\n  showStepIndicator = true,\n  submitButtonLabel = \"Complete Setup\",\n  onComplete,\n}: OnboardingWizardProps) {\n  const [step, setStep] = React.useState(initialStep);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const totalSteps = 4; // Define the total number of steps\n  const progressPercentage = ((step - 1) / (totalSteps - 1)) * 100; // Calculate progress percentage\n\n  const formRef = React.useRef<HTMLFormElement>(null);\n  const step1Ref = React.useRef<HTMLDivElement>(null);\n  const step2Ref = React.useRef<HTMLDivElement>(null);\n  const step3Ref = React.useRef<HTMLDivElement>(null);\n  const step4Ref = React.useRef<HTMLDivElement>(null);\n  const successRef = React.useRef<HTMLDivElement>(null);\n\n  const form = useForm<OnboardingFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      bio: \"\",\n      avatarUrl: \"\",\n      theme: \"system\",\n      emailFrequency: \"weekly\",\n      marketingEmails: false,\n      emailNotifications: true,\n      pushNotifications: true,\n      activitySummary: true,\n      newFeatures: true,\n      securityAlerts: true,\n    },\n    mode: \"onChange\",\n  });\n\n  // Step validation fields\n  const stepValidationFields = {\n    1: [\"name\", \"bio\"],\n    2: [\"avatarUrl\"],\n    3: [\"theme\", \"emailFrequency\", \"marketingEmails\"],\n    4: [\n      \"emailNotifications\",\n      \"pushNotifications\",\n      \"activitySummary\",\n      \"newFeatures\",\n      \"securityAlerts\",\n    ],\n  };\n\n  // Step titles and icons\n  const steps = [\n    {\n      id: 1,\n      title: \"Personal Info\",\n      icon: (\n        <UserIcon className=\"mr-2 h-5 w-5 text-primary\" aria-hidden=\"true\" />\n      ),\n      ref: step1Ref,\n      isOptional: false,\n    },\n    {\n      id: 2,\n      title: \"Profile Picture\",\n      icon: (\n        <svg\n          className=\"mr-2 h-5 w-5 text-primary\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          aria-hidden=\"true\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n          />\n        </svg>\n      ),\n      ref: step2Ref,\n      isOptional: true,\n    },\n    {\n      id: 3,\n      title: \"Preferences\",\n      icon: (\n        <Settings className=\"mr-2 h-5 w-5 text-primary\" aria-hidden=\"true\" />\n      ),\n      ref: step3Ref,\n      isOptional: false,\n    },\n    {\n      id: 4,\n      title: \"Notifications\",\n      icon: (\n        <BellRing className=\"mr-2 h-5 w-5 text-primary\" aria-hidden=\"true\" />\n      ),\n      ref: step4Ref,\n      isOptional: true,\n    },\n  ];\n\n  // Handle next step\n  const nextStep = async () => {\n    // Validate current step fields\n    const isValid = await form.trigger(\n      stepValidationFields[step as keyof typeof stepValidationFields] as any,\n    );\n\n    if (isValid || steps[step - 1].isOptional) {\n      // Check if we're already on the last step to prevent auto-advancing\n      if (step < totalSteps) {\n        // Move to next step\n        setStep((prev) => prev + 1);\n\n        // Focus management for screen readers\n        setTimeout(() => {\n          const nextStepRef = steps[step]?.ref.current;\n          if (nextStepRef) {\n            nextStepRef.focus();\n          }\n        }, 100);\n\n        // Scroll to top of form\n        if (formRef.current) {\n          formRef.current.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"start\",\n          });\n        }\n      }\n    }\n  };\n\n  // Handle previous step\n  const prevStep = () => {\n    setStep((prev) => prev - 1);\n\n    // Focus management for screen readers\n    setTimeout(() => {\n      const prevStepRef = steps[step - 2]?.ref.current;\n      if (prevStepRef) {\n        prevStepRef.focus();\n      }\n    }, 100);\n\n    // Scroll to top of form\n    if (formRef.current) {\n      formRef.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  };\n\n  // Handle skip step\n  const skipStep = () => {\n    // Move to next step without validation\n    setStep((prev) => prev + 1);\n\n    // Focus management for screen readers\n    setTimeout(() => {\n      const nextStepRef = steps[step]?.ref.current;\n      if (nextStepRef) {\n        nextStepRef.focus();\n      }\n    }, 100);\n\n    // Scroll to top of form\n    if (formRef.current) {\n      formRef.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  };\n\n  const onFormSubmit = async () => {\n    try {\n      // Validate all fields before submission\n      const isValid = await form.trigger();\n\n      if (!isValid) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Please check the form for errors.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setIsLoading(true);\n\n      // Get form data\n      const data = form.getValues();\n\n      // Save onboarding data\n      await saveOnboardingData(data);\n\n      if (onComplete) {\n        onComplete(data);\n      }\n\n      setIsSubmitted(true);\n\n      toast({\n        title: \"Profile setup complete!\",\n        description: \"Your profile has been successfully set up.\",\n      });\n\n      // Focus success message for accessibility\n      setTimeout(() => {\n        if (successRef.current) {\n          successRef.current.focus();\n        }\n      }, 100);\n\n      // Redirect if specified\n      if (redirectUrl) {\n        setTimeout(() => {\n          router.push(redirectUrl);\n        }, 2000);\n      }\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n\n      toast({\n        title: \"Submission failed\",\n        description:\n          \"There was a problem saving your profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        \"w-full max-w-2xl mx-auto bg-background text-foreground rounded-lg border shadow-md p-6\",\n        className,\n      )}\n    >\n      {/* Step indicator */}\n      {showStepIndicator && !isSubmitted && (\n        <div className=\"mb-8\">\n          {/* Progress bar */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-primary font-medium\">\n                Step {step} of {totalSteps}\n              </span>\n              <span className=\"text-muted-foreground\">\n                {steps[step - 1].title}\n              </span>\n            </div>\n            <Progress value={progressPercentage} className=\"h-2\" />\n          </div>\n\n          {/* Step circles */}\n          <div className=\"hidden sm:flex justify-between items-center mt-4\">\n            {steps.map((stepItem) => (\n              <div key={stepItem.id} className=\"flex flex-col items-center\">\n                <div\n                  className={cn(\n                    \"w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors\",\n                    stepItem.id < step\n                      ? \"bg-primary text-primary-foreground\"\n                      : stepItem.id === step\n                        ? \"bg-primary/10 text-primary border-2 border-primary\"\n                        : \"bg-muted text-muted-foreground\",\n                  )}\n                  aria-hidden=\"true\"\n                >\n                  {stepItem.id < step ? (\n                    <Check className=\"h-4 w-4\" />\n                  ) : (\n                    stepItem.id\n                  )}\n                </div>\n                <span\n                  className={cn(\n                    \"text-xs mt-1\",\n                    stepItem.id === step\n                      ? \"text-primary font-medium\"\n                      : \"text-muted-foreground\",\n                  )}\n                >\n                  {stepItem.title}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {isSubmitted ? (\n        <div\n          className=\"text-center space-y-4 py-6\"\n          ref={successRef}\n          tabIndex={-1}\n          role=\"alert\"\n          aria-live=\"polite\"\n        >\n          <div className=\"rounded-full w-16 h-16 bg-primary/20 mx-auto flex items-center justify-center\">\n            <Check className=\"w-8 h-8 text-primary\" aria-hidden=\"true\" />\n          </div>\n          <h3 className=\"text-lg font-medium\">Profile Setup Complete!</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Your profile has been set up successfully. You'll be redirected to\n            your dashboard shortly.\n          </p>\n\n          <div className=\"mt-4 bg-muted/50 rounded-lg p-4 max-w-md mx-auto\">\n            <h4 className=\"font-medium text-left mb-2\">Profile Summary</h4>\n            <div className=\"space-y-3 text-sm text-left\">\n              <div>\n                <p className=\"text-muted-foreground\">Name:</p>\n                <p className=\"font-medium\">{form.getValues().name}</p>\n              </div>\n              {form.getValues().bio && (\n                <div>\n                  <p className=\"text-muted-foreground\">Bio:</p>\n                  <p className=\"font-medium\">{form.getValues().bio}</p>\n                </div>\n              )}\n              <div>\n                <p className=\"text-muted-foreground\">Theme Preference:</p>\n                <p className=\"font-medium capitalize\">\n                  {form.getValues().theme}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">Email Frequency:</p>\n                <p className=\"font-medium capitalize\">\n                  {form.getValues().emailFrequency}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div>\n          <Form {...form}>\n            <div ref={formRef} className=\"space-y-6\">\n              {/* Step 1: Personal Information */}\n              {step === 1 && (\n                <div\n                  className=\"space-y-4\"\n                  ref={step1Ref}\n                  tabIndex={-1}\n                  aria-labelledby=\"step1-heading\"\n                >\n                  <h3\n                    id=\"step1-heading\"\n                    className=\"text-lg font-medium flex items-center\"\n                  >\n                    {steps[0].icon}\n                    Personal Information\n                  </h3>\n                  <Separator className=\"my-4\" />\n\n                  <PersonalInfoForm form={form} />\n                </div>\n              )}\n\n              {/* Step 2: Profile Picture */}\n              {step === 2 && (\n                <div\n                  className=\"space-y-4\"\n                  ref={step2Ref}\n                  tabIndex={-1}\n                  aria-labelledby=\"step2-heading\"\n                >\n                  <h3\n                    id=\"step2-heading\"\n                    className=\"text-lg font-medium flex items-center\"\n                  >\n                    {steps[1].icon}\n                    Profile Picture\n                  </h3>\n                  <Separator className=\"my-4\" />\n\n                  <AvatarUploadForm form={form} />\n                </div>\n              )}\n\n              {/* Step 3: Preferences */}\n              {step === 3 && (\n                <div\n                  className=\"space-y-4\"\n                  ref={step3Ref}\n                  tabIndex={-1}\n                  aria-labelledby=\"step3-heading\"\n                >\n                  <h3\n                    id=\"step3-heading\"\n                    className=\"text-lg font-medium flex items-center\"\n                  >\n                    {steps[2].icon}\n                    Preferences\n                  </h3>\n                  <Separator className=\"my-4\" />\n\n                  <PreferencesForm form={form} />\n                </div>\n              )}\n\n              {/* Step 4: Notifications */}\n              {step === 4 && (\n                <div\n                  className=\"space-y-4\"\n                  ref={step4Ref}\n                  tabIndex={-1}\n                  aria-labelledby=\"step4-heading\"\n                >\n                  <h3\n                    id=\"step4-heading\"\n                    className=\"text-lg font-medium flex items-center\"\n                  >\n                    {steps[3].icon}\n                    Notifications\n                  </h3>\n                  <Separator className=\"my-4\" />\n\n                  <NotificationsForm form={form} />\n                </div>\n              )}\n\n              {/* Navigation buttons */}\n              <div className=\"flex justify-between mt-8\">\n                {step > 1 ? (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={prevStep}\n                    className=\"flex items-center\"\n                  >\n                    <ChevronLeft className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\n                    Previous\n                  </Button>\n                ) : (\n                  <div></div>\n                )}\n\n                <div className=\"flex gap-2\">\n                  {steps[step - 1].isOptional && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      onClick={skipStep}\n                      className=\"flex items-center\"\n                    >\n                      Skip\n                    </Button>\n                  )}\n\n                  {step < totalSteps ? (\n                    <Button\n                      type=\"button\"\n                      onClick={nextStep}\n                      variant=\"default\"\n                      className=\"flex items-center\"\n                    >\n                      Next\n                      <ChevronRight\n                        className=\"ml-2 h-4 w-4\"\n                        aria-hidden=\"true\"\n                      />\n                    </Button>\n                  ) : (\n                    <Button\n                      type=\"button\"\n                      onClick={onFormSubmit}\n                      disabled={isLoading}\n                      className=\"flex items-center\"\n                    >\n                      {isLoading ? (\n                        <>\n                          <Loader2\n                            className=\"mr-2 h-4 w-4 animate-spin\"\n                            aria-hidden=\"true\"\n                          />\n                          <span>Submitting...</span>\n                        </>\n                      ) : (\n                        submitButtonLabel\n                      )}\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </Form>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/components/avatar-upload-form.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport type { UseFormReturn } from \"react-hook-form\";\nimport { Upload, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/new-york/ui/avatar\";\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport type { OnboardingFormValues } from \"@/registry/new-york/dynamic-components/multi-step-form/components/onboarding-wizard\";\n\ninterface AvatarUploadFormProps {\n  form: UseFormReturn<OnboardingFormValues>;\n}\n\nexport function AvatarUploadForm({ form }: AvatarUploadFormProps) {\n  const [previewUrl, setPreviewUrl] = React.useState<string | null>(\n    form.getValues().avatarUrl || null,\n  );\n\n  // In a real implementation, this would upload to a storage service\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // Create a preview URL\n    const url = URL.createObjectURL(file);\n    setPreviewUrl(url);\n\n    // In actual implementation, you would upload the file to a storage service\n    // and then set the returned URL as the avatarUrl\n    form.setValue(\"avatarUrl\", url);\n  };\n\n  const clearAvatar = () => {\n    setPreviewUrl(null);\n    form.setValue(\"avatarUrl\", \"\");\n  };\n\n  return (\n    <FormField\n      control={form.control}\n      name=\"avatarUrl\"\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>Profile Picture</FormLabel>\n          <FormControl>\n            <div className=\"flex flex-col items-center gap-4\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage src={previewUrl || \"\"} />\n                <AvatarFallback className=\"text-lg\">\n                  {form.getValues().name\n                    ? form.getValues().name.charAt(0).toUpperCase()\n                    : \"?\"}\n                </AvatarFallback>\n              </Avatar>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() =>\n                    document.getElementById(\"avatar-upload\")?.click()\n                  }\n                >\n                  <Upload className=\"mr-2 h-4 w-4\" />\n                  Upload\n                </Button>\n\n                {previewUrl && (\n                  <Button type=\"button\" variant=\"outline\" onClick={clearAvatar}>\n                    <X className=\"mr-2 h-4 w-4\" />\n                    Remove\n                  </Button>\n                )}\n\n                <input\n                  id=\"avatar-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  onChange={handleFileChange}\n                />\n              </div>\n            </div>\n          </FormControl>\n          <FormDescription className=\"text-center\">\n            Upload a profile picture. This will be displayed on your profile.\n          </FormDescription>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/components/notifications-form.tsx",
      "content": "\"use client\";\nimport type { UseFormReturn } from \"react-hook-form\";\nimport { Switch } from \"@/registry/new-york/ui/switch\";\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n} from \"@/registry/new-york/ui/form\";\nimport type { OnboardingFormValues } from \"@/registry/new-york/dynamic-components/multi-step-form/components/onboarding-wizard\";\n\ninterface NotificationsFormProps {\n  form: UseFormReturn<OnboardingFormValues>;\n}\n\nexport function NotificationsForm({ form }: NotificationsFormProps) {\n  return (\n    <div className=\"space-y-4\">\n      <FormField\n        control={form.control}\n        name=\"emailNotifications\"\n        render={({ field }) => (\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n            <div className=\"space-y-0.5\">\n              <FormLabel>Email Notifications</FormLabel>\n              <FormDescription>\n                Receive notifications via email.\n              </FormDescription>\n            </div>\n            <FormControl>\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\n            </FormControl>\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"pushNotifications\"\n        render={({ field }) => (\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n            <div className=\"space-y-0.5\">\n              <FormLabel>Push Notifications</FormLabel>\n              <FormDescription>\n                Receive notifications on your device.\n              </FormDescription>\n            </div>\n            <FormControl>\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\n            </FormControl>\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"activitySummary\"\n        render={({ field }) => (\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n            <div className=\"space-y-0.5\">\n              <FormLabel>Activity Summary</FormLabel>\n              <FormDescription>\n                Receive weekly summaries of your activity.\n              </FormDescription>\n            </div>\n            <FormControl>\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\n            </FormControl>\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"newFeatures\"\n        render={({ field }) => (\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n            <div className=\"space-y-0.5\">\n              <FormLabel>New Features</FormLabel>\n              <FormDescription>\n                Be the first to know about new features.\n              </FormDescription>\n            </div>\n            <FormControl>\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\n            </FormControl>\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"securityAlerts\"\n        render={({ field }) => (\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n            <div className=\"space-y-0.5\">\n              <FormLabel>Security Alerts</FormLabel>\n              <FormDescription>\n                Receive alerts about security issues.\n              </FormDescription>\n            </div>\n            <FormControl>\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\n            </FormControl>\n          </FormItem>\n        )}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/components/personal-info-form.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport type { UseFormReturn } from \"react-hook-form\";\nimport { UserIcon, FileText } from \"lucide-react\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Textarea } from \"@/registry/new-york/ui/textarea\";\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport type { OnboardingFormValues } from \"@/registry/new-york/dynamic-components/multi-step-form/components/onboarding-wizard\";\n\ninterface PersonalInfoFormProps {\n  form: UseFormReturn<OnboardingFormValues>;\n}\n\nexport function PersonalInfoForm({ form }: PersonalInfoFormProps) {\n  const nameId = React.useId();\n  const bioId = React.useId();\n\n  return (\n    <>\n      <FormField\n        control={form.control}\n        name=\"name\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel htmlFor={nameId}>Full Name</FormLabel>\n            <FormControl>\n              <div className=\"relative\">\n                <Input\n                  id={nameId}\n                  placeholder=\"John Doe\"\n                  className=\"peer ps-9\"\n                  {...field}\n                  autoComplete=\"name\"\n                  aria-required=\"true\"\n                />\n                <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                  <UserIcon size={16} aria-hidden=\"true\" />\n                </div>\n              </div>\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"bio\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel htmlFor={bioId}>Bio</FormLabel>\n            <FormControl>\n              <div className=\"relative\">\n                <Textarea\n                  id={bioId}\n                  placeholder=\"Tell us a bit about yourself\"\n                  className=\"resize-none min-h-[120px] ps-9 pt-8\"\n                  {...field}\n                />\n                <div className=\"text-muted-foreground/80 pointer-events-none absolute top-3 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                  <FileText size={16} aria-hidden=\"true\" />\n                </div>\n              </div>\n            </FormControl>\n            <FormDescription>\n              This will be displayed on your profile\n            </FormDescription>\n            <FormMessage />\n            <div className=\"text-xs text-right text-muted-foreground mt-1\">\n              {field.value?.length || 0}/500 characters\n            </div>\n          </FormItem>\n        )}\n      />\n    </>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/components/preferences-form.tsx",
      "content": "\"use client\";\nimport type { UseFormReturn } from \"react-hook-form\";\nimport { Switch } from \"@/registry/new-york/ui/switch\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport type { OnboardingFormValues } from \"@/registry/new-york/dynamic-components/multi-step-form/components/onboarding-wizard\";\n\ninterface PreferencesFormProps {\n  form: UseFormReturn<OnboardingFormValues>;\n}\n\nexport function PreferencesForm({ form }: PreferencesFormProps) {\n  return (\n    <>\n      <FormField\n        control={form.control}\n        name=\"theme\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Theme Preference</FormLabel>\n            <Select onValueChange={field.onChange} defaultValue={field.value}>\n              <FormControl>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a theme preference\" />\n                </SelectTrigger>\n              </FormControl>\n              <SelectContent>\n                <SelectItem value=\"light\">Light</SelectItem>\n                <SelectItem value=\"dark\">Dark</SelectItem>\n                <SelectItem value=\"system\">System</SelectItem>\n              </SelectContent>\n            </Select>\n            <FormDescription>\n              Choose how the application should appear.\n            </FormDescription>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"emailFrequency\"\n        render={({ field }) => (\n          <FormItem className=\"space-y-3\">\n            <FormLabel id=\"email-frequency-label\">\n              Email Digest Frequency\n            </FormLabel>\n            <FormControl>\n              <RadioGroup\n                onValueChange={field.onChange}\n                defaultValue={field.value}\n                className=\"flex flex-col space-y-1\"\n                aria-labelledby=\"email-frequency-label\"\n              >\n                {[\n                  { value: \"daily\", label: \"Daily\" },\n                  { value: \"weekly\", label: \"Weekly\" },\n                  { value: \"monthly\", label: \"Monthly\" },\n                  { value: \"never\", label: \"Never\" },\n                ].map((option) => (\n                  <FormItem\n                    key={option.value}\n                    className=\"flex items-center space-x-3 space-y-0 rounded-md border p-3 hover:bg-muted/50 transition-colors\"\n                  >\n                    <FormControl>\n                      <RadioGroupItem\n                        value={option.value}\n                        id={`frequency-${option.value}`}\n                      />\n                    </FormControl>\n                    <FormLabel\n                      htmlFor={`frequency-${option.value}`}\n                      className=\"font-normal cursor-pointer flex-1\"\n                    >\n                      {option.label}\n                    </FormLabel>\n                  </FormItem>\n                ))}\n              </RadioGroup>\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      <FormField\n        control={form.control}\n        name=\"marketingEmails\"\n        render={({ field }) => (\n          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n            <div className=\"space-y-0.5\">\n              <FormLabel className=\"text-base\">Marketing emails</FormLabel>\n              <FormDescription>\n                Receive emails about new features and special offers.\n              </FormDescription>\n            </div>\n            <FormControl>\n              <Switch checked={field.value} onCheckedChange={field.onChange} />\n            </FormControl>\n          </FormItem>\n        )}\n      />\n    </>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/multi-step-form/onboarding/page.tsx",
      "content": "import { OnboardingWizard } from \"@/registry/new-york/dynamic-components/multi-step-form/components/onboarding-wizard\";\n\nexport default function OnboardingPage() {\n  return (\n    <div className=\"container py-10\">\n      <h1 className=\"text-3xl font-bold text-center mb-8\">\n        Complete Your Profile\n      </h1>\n      <OnboardingWizard\n        redirectUrl=\"/dashboard\"\n        showStepIndicator={true}\n        submitButtonLabel=\"Complete Setup\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(multi-step-form)/onboarding/page.tsx"
    }
  ]
}
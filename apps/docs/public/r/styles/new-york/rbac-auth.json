{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "rbac-auth",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A role-based authentication system with user management, email verification, and password reset functionality.",
  "dependencies": [
    "prisma",
    "@prisma/client",
    "@auth/prisma-adapter",
    "framer-motion",
    "nodemailer",
    "@react-email/components",
    "react-spinners",
    "next-auth@beta",
    "bcryptjs",
    "react-icons",
    "cloudinary",
    "uuid"
  ],
  "registryDependencies": [
    "badge",
    "form",
    "input",
    "button",
    "label",
    "card",
    "avatar",
    "switch",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "dynamic-components/auth/pages/auth/login/page.tsx",
      "content": "import { LoginForm } from \"@/registry/new-york/dynamic-components/auth/components/login-form\";\r\n\r\nconst LoginPage = () => {\r\n  return <LoginForm />;\r\n};\r\n\r\nexport default LoginPage;\r\n",
      "type": "registry:page",
      "target": "app/auth/login/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/auth/layout.tsx",
      "content": "import React from \"react\";\r\n\r\nconst AuthLayout = ({ children }: { children: React.ReactNode }) => {\r\n  return (\r\n    <div className=\"h-[100vh] flex items-center justify-center \">\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\nexport default AuthLayout;\r\n",
      "type": "registry:file",
      "target": "app/auth/layout.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/page.tsx",
      "content": "\"use client\";\r\n\r\nimport { motion } from \"framer-motion\";\r\nimport {\r\n  SiNextdotjs,\r\n  SiReact,\r\n  SiTypescript,\r\n  SiTailwindcss,\r\n  SiPrisma,\r\n  SiCloudinary,\r\n  SiPostgresql,\r\n} from \"react-icons/si\";\r\nimport { Shield } from \"lucide-react\";\r\nimport Image from \"next/image\";\r\n\r\nconst techStack = [\r\n  {\r\n    name: \"Next.js\",\r\n    icon: SiNextdotjs,\r\n    color: \"#000000\",\r\n    angle: 0,\r\n    isImage: false,\r\n  },\r\n  { name: \"React\", icon: SiReact, color: \"#61DAFB\", angle: 45, isImage: false },\r\n  {\r\n    name: \"TypeScript\",\r\n    icon: SiTypescript,\r\n    color: \"#3178C6\",\r\n    angle: 90,\r\n    isImage: false,\r\n  },\r\n  {\r\n    name: \"NextAuth.js\",\r\n    icon: null,\r\n    color: \"#000000\",\r\n    angle: 135,\r\n    isImage: true,\r\n  },\r\n  {\r\n    name: \"Tailwind CSS\",\r\n    icon: SiTailwindcss,\r\n    color: \"#06B6D4\",\r\n    angle: 180,\r\n    isImage: false,\r\n  },\r\n  {\r\n    name: \"Prisma\",\r\n    icon: SiPrisma,\r\n    color: \"#2D3748\",\r\n    angle: 225,\r\n    isImage: false,\r\n  },\r\n  {\r\n    name: \"PostgreSQL\",\r\n    icon: SiPostgresql,\r\n    color: \"#336791\",\r\n    angle: 270,\r\n    isImage: false,\r\n  },\r\n  {\r\n    name: \"Cloudinary\",\r\n    icon: SiCloudinary,\r\n    color: \"#3448C5\",\r\n    angle: 315,\r\n    isImage: false,\r\n  },\r\n];\r\n\r\nconst RevolvingTechStack = () => {\r\n  return (\r\n    <div className=\"relative w-[500px] h-[500px] mx-auto\">\r\n      {/* Multiple ripple circles */}\r\n      <motion.div\r\n        animate={{ scale: [1, 1.1, 1] }}\r\n        transition={{\r\n          duration: 3,\r\n          repeat: Infinity,\r\n          ease: \"easeInOut\",\r\n        }}\r\n        className=\"absolute inset-8 border border-4 border-gray-100 rounded-full opacity-40\"\r\n      />\r\n      <motion.div\r\n        animate={{ scale: [1, 1.15, 1] }}\r\n        transition={{\r\n          duration: 3.5,\r\n          repeat: Infinity,\r\n          ease: \"easeInOut\",\r\n          delay: 0.5,\r\n        }}\r\n        className=\"absolute inset-4 border-4 border-gray-100 rounded-full opacity-30\"\r\n      />\r\n      <motion.div\r\n        animate={{ scale: [1, 1.2, 1] }}\r\n        transition={{\r\n          duration: 4,\r\n          repeat: Infinity,\r\n          ease: \"easeInOut\",\r\n          delay: 1,\r\n        }}\r\n        className=\"absolute inset-0 border-4 border-gray-100 rounded-full opacity-20\"\r\n      />\r\n      <motion.div\r\n        animate={{ scale: [1, 1.25, 1] }}\r\n        transition={{\r\n          duration: 4.5,\r\n          repeat: Infinity,\r\n          ease: \"easeInOut\",\r\n          delay: 1.5,\r\n        }}\r\n        className=\"absolute -inset-4 border border-gray-100 rounded-full opacity-15\"\r\n      />\r\n      <motion.div\r\n        animate={{ scale: [1, 1.3, 1] }}\r\n        transition={{\r\n          duration: 5,\r\n          repeat: Infinity,\r\n          ease: \"easeInOut\",\r\n          delay: 2,\r\n        }}\r\n        className=\"absolute -inset-8 border border-gray-100 rounded-full opacity-10\"\r\n      />\r\n      <motion.div\r\n        animate={{ scale: [1, 1.35, 1] }}\r\n        transition={{\r\n          duration: 5.5,\r\n          repeat: Infinity,\r\n          ease: \"easeInOut\",\r\n          delay: 2.5,\r\n        }}\r\n        className=\"absolute -inset-12 border border-gray-100 rounded-full opacity-5\"\r\n      />\r\n\r\n      {/* Center logo */}\r\n      <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-28 h-28 bg-black rounded-full flex items-center justify-center z-10 shadow-xl\">\r\n        <Shield className=\"w-14 h-14 text-white\" />\r\n      </div>\r\n\r\n      {/* Revolving circle - only the container rotates */}\r\n      <motion.div\r\n        animate={{ rotate: 360 }}\r\n        transition={{\r\n          duration: 25,\r\n          repeat: Infinity,\r\n          ease: \"linear\",\r\n        }}\r\n        className=\"absolute inset-0\"\r\n      >\r\n        {techStack.map((tech, index) => {\r\n          const radius = 170;\r\n          const x = Math.cos((tech.angle * Math.PI) / 180) * radius;\r\n          const y = Math.sin((tech.angle * Math.PI) / 180) * radius;\r\n\r\n          return (\r\n            <motion.div\r\n              key={`${tech.name}-${index}`}\r\n              className=\"absolute w-18 h-18 bg-white rounded-2xl flex items-center justify-center border border-gray-200 hover:shadow-xl transition-all duration-300 group shadow-md\"\r\n              style={{\r\n                left: `calc(50% + ${x}px - 36px)`,\r\n                top: `calc(50% + ${y}px - 36px)`,\r\n                width: \"72px\",\r\n                height: \"72px\",\r\n              }}\r\n              // Counter-rotate to keep icons upright\r\n              animate={{ rotate: -360 }}\r\n              transition={{\r\n                duration: 25,\r\n                repeat: Infinity,\r\n                ease: \"linear\",\r\n              }}\r\n              whileHover={{ scale: 1.1 }}\r\n            >\r\n              {tech.isImage ? (\r\n                <div className=\"w-10 h-10 relative\">\r\n                  <Image\r\n                    src=\"/auth.png\"\r\n                    alt=\"NextAuth.js\"\r\n                    fill\r\n                    className=\"object-contain\"\r\n                    sizes=\"40px\"\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <tech.icon\r\n                  className=\"w-10 h-10 transition-transform duration-300 group-hover:scale-110\"\r\n                  style={{ color: tech.color }}\r\n                />\r\n              )}\r\n            </motion.div>\r\n          );\r\n        })}\r\n      </motion.div>\r\n\r\n      {/* Main orbit circle */}\r\n      <div className=\"absolute inset-0 border border-gray-200 rounded-full opacity-30\"></div>\r\n\r\n      {/* Inner guide circle */}\r\n      <div className=\"absolute inset-16 border border-gray-150 rounded-full opacity-20\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function HomePage() {\r\n  return (\r\n    <div className=\"min-h-screen w-full bg-white overflow-hidden\">\r\n      <div className=\"max-w-7xl mx-auto px-6 \">\r\n        {/* Hero Section - Two Column Layout */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-20 items-center min-h-screen\">\r\n          {/* Left Column - Content */}\r\n          <div className=\"space-y-10\">\r\n            <div className=\"space-y-8\">\r\n              <motion.div\r\n                initial={{ opacity: 0, x: -50 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                transition={{ duration: 0.8 }}\r\n                className=\"inline-flex items-center px-4 py-2 bg-gray-100 rounded-full text-sm text-gray-600\"\r\n              >\r\n                <Shield className=\"w-4 h-4 mr-2\" />\r\n                Enterprise Authentication System\r\n              </motion.div>\r\n\r\n              <motion.h1\r\n                initial={{ opacity: 0, x: -50 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                transition={{ duration: 0.8, delay: 0.1 }}\r\n                className=\"text-7xl font-light text-black leading-tight\"\r\n              >\r\n                Secure\r\n                <br />\r\n                <span className=\"font-medium\">RBAC Auth</span>\r\n              </motion.h1>\r\n\r\n              <motion.p\r\n                initial={{ opacity: 0, x: -50 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                transition={{ duration: 0.8, delay: 0.2 }}\r\n                className=\"text-xl text-gray-600 leading-relaxed max-w-lg\"\r\n              >\r\n                Modern authentication system with role-based access control.\r\n                Built with cutting-edge technologies for enterprise\r\n                applications.\r\n              </motion.p>\r\n\r\n              {/* Tech Stack Names */}\r\n              <motion.div\r\n                initial={{ opacity: 0, x: -50 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                transition={{ duration: 0.8, delay: 0.3 }}\r\n                className=\"space-y-4\"\r\n              >\r\n                <p className=\"text-sm text-gray-500 uppercase tracking-wider font-medium\">\r\n                  Powered by Modern Stack\r\n                </p>\r\n                <div className=\"flex flex-wrap gap-3\">\r\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\r\n                    Next.js\r\n                  </span>\r\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\r\n                    React\r\n                  </span>\r\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\r\n                    TypeScript\r\n                  </span>\r\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\r\n                    Tailwind CSS\r\n                  </span>\r\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\r\n                    Prisma\r\n                  </span>\r\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\r\n                    PostgreSQL\r\n                  </span>\r\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\r\n                    NextAuth.js\r\n                  </span>\r\n                  <span className=\"px-3 py-1 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium border border-gray-200\">\r\n                    Cloudinary\r\n                  </span>\r\n                </div>\r\n              </motion.div>\r\n            </div>\r\n\r\n            <motion.div\r\n              initial={{ opacity: 0, x: -50 }}\r\n              animate={{ opacity: 1, x: 0 }}\r\n              transition={{ duration: 0.8, delay: 0.4 }}\r\n              className=\"flex items-center space-x-6\"\r\n            >\r\n              <div className=\"flex items-center space-x-2 text-gray-600\">\r\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\r\n                <span className=\"text-sm\">Production Ready</span>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 text-gray-600\">\r\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\r\n                <span className=\"text-sm\">TypeScript</span>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 text-gray-600\">\r\n                <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\r\n                <span className=\"text-sm\">Secure</span>\r\n              </div>\r\n            </motion.div>\r\n          </div>\r\n\r\n          {/* Right Column - Revolving Tech Stack */}\r\n          <motion.div\r\n            initial={{ opacity: 0, scale: 0.8 }}\r\n            animate={{ opacity: 1, scale: 1 }}\r\n            transition={{ duration: 1, delay: 0.5 }}\r\n            className=\"flex justify-center\"\r\n          >\r\n            <RevolvingTechStack />\r\n          </motion.div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/auth/register/page.tsx",
      "content": "import { RegisterForm } from \"@/registry/new-york/dynamic-components/auth/components/register-form\";\r\n\r\nconst RegisterPage = () => {\r\n  return <RegisterForm />;\r\n};\r\n\r\nexport default RegisterPage;\r\n",
      "type": "registry:page",
      "target": "app/auth/register/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/(protected)/profile/change-password/page.tsx",
      "content": "import { ChangePasswordForm } from \"@/registry/new-york/dynamic-components/auth/components/change-password-form\";\r\nimport { Suspense } from \"react\";\r\n\r\nexport default function ChangePasswordPage() {\r\n  return (\r\n    <Suspense>\r\n      <ChangePasswordForm />\r\n    </Suspense>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(protected)/profile/change-password/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/auth/verify/page.tsx",
      "content": "\"use client\";\r\n\r\nimport { NewVerificationForm } from \"@/registry/new-york/dynamic-components/auth/components/new-verification-form\";\r\n\r\nexport default function VerifyPage() {\r\n  return <NewVerificationForm />;\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/verify/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/auth/new-password/page.tsx",
      "content": "import { NewPasswordForm } from \"@/registry/new-york/dynamic-components/auth/components/new-password-form\";\r\nimport { Suspense } from \"react\";\r\n\r\nexport default function NewPasswordPage() {\r\n  return (\r\n    <Suspense>\r\n      <NewPasswordForm />\r\n    </Suspense>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/new-password/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/auth/reset/page.tsx",
      "content": "import { ResetForm } from \"@/registry/new-york/dynamic-components/auth/components/reset-form\";\r\n\r\nexport default function ResetPage() {\r\n  return (\r\n    <div className=\"flex h-screen items-center justify-center\">\r\n      <ResetForm />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/reset/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/(protected)/admin/page.tsx",
      "content": "import {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { RoleGate } from \"@/registry/new-york/dynamic-components/auth/components/role-gate\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/auth/components/form-success\";\r\nimport { UserRole } from \"@/lib/generated/prisma\";\r\nimport { currentRole } from \"@/registry/new-york/dynamic-components/auth/lib/get-user\";\r\n\r\nexport default async function AdminPage() {\r\n  const user = await currentRole();\r\n  if (user !== \"ADMIN\") {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto py-8 px-4\">\r\n      <h1 className=\"text-3xl font-bold mb-8\">Admin Dashboard</h1>\r\n\r\n      <div className=\"grid gap-6 md:grid-cols-2\">\r\n        <Card className=\"shadow-md\">\r\n          <CardHeader>\r\n            <CardTitle>Admin Access</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <RoleGate allowedRole={UserRole?.ADMIN}>\r\n              <FormSuccess message=\"You are allowed to view this content!\" />\r\n            </RoleGate>\r\n            <p className=\"text-sm text-muted-foreground mb-4\">\r\n              You have admin privileges. You can manage users and system\r\n              settings.\r\n            </p>\r\n            <div className=\"space-y-2\">\r\n              <Button className=\"w-full\" asChild variant=\"outline\">\r\n                <a href=\"#\">Manage Users</a>\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"shadow-md\">\r\n          <CardHeader>\r\n            <CardTitle>Quick Actions</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-sm text-muted-foreground mb-4\">\r\n              Perform quick actions from the admin dashboard.\r\n            </p>\r\n            <div className=\"space-y-2\">\r\n              <Button className=\"w-full\" asChild variant=\"outline\">\r\n                <a href=\"/admin/create-user\">Create New User</a>\r\n              </Button>\r\n              <Button className=\"w-full\" asChild variant=\"outline\">\r\n                <a href=\"/admin/reports\">View Reports</a>\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <div className=\"mt-6\">\r\n        <Card className=\"shadow-md\">\r\n          <CardHeader>\r\n            <CardTitle>Admin Statistics</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-sm text-muted-foreground mb-4\">\r\n              Overview of system statistics and performance.\r\n            </p>\r\n            <div className=\"space-y-2\">\r\n              <Button className=\"w-full\" asChild variant=\"outline\">\r\n                <a href=\"/admin/statistics\">View Statistics</a>\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(protected)/admin/page.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/(protected)/layout.tsx",
      "content": "import { Navbar } from \"@/registry/new-york/dynamic-components/auth/components/navbar\";\r\nimport { SessionProvider } from \"next-auth/react\";\r\n\r\ninterface ProtectedLayoutProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default function ProtectedLayout({ children }: ProtectedLayoutProps) {\r\n  return (\r\n    <SessionProvider>\r\n      <div className=\"grid items-center justify-center h-full grid-col-2 \">\r\n        <Navbar />\r\n        {children}\r\n      </div>\r\n    </SessionProvider>\r\n  );\r\n}\r\n",
      "type": "registry:file",
      "target": "app/(protected)/layout.tsx"
    },
    {
      "path": "dynamic-components/auth/pages/dashboard/page.tsx",
      "content": "import { redirect } from \"next/navigation\";\r\nimport { auth } from \"@/registry/new-york/dynamic-components/auth/lib/auth\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  Avatar,\r\n  AvatarFallback,\r\n  AvatarImage,\r\n} from \"@/registry/new-york/ui/avatar\";\r\nimport { Badge } from \"@/registry/new-york/ui/badge\";\r\nimport { currentUser } from \"@/registry/new-york/dynamic-components/simple-auth/lib/get-user\";\r\nimport Link from \"next/link\";\r\n\r\nexport default async function UserDashboard() {\r\n  const session = await auth();\r\n  const userData = await currentUser();\r\n\r\n  if (!session) {\r\n    redirect(\"/auth/login\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-screen w-screen bg-white overflow-hidden\">\r\n      <div className=\"h-full flex flex-col\">\r\n        {/* Compact Header */}\r\n        <div className=\"flex-shrink-0 px-6 py-4 border-b border-gray-100\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-2xl font-medium text-gray-900\">Dashboard</h1>\r\n              <p className=\"text-sm text-gray-600 mt-1\">\r\n                Welcome, {session?.user?.name}\r\n              </p>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\r\n              <span className=\"text-xs text-gray-600\">Online</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <div className=\"flex-1 overflow-y-auto p-6\">\r\n          <div className=\"grid gap-6 lg:grid-cols-2 h-full max-w-5xl mx-auto\">\r\n            {/* Profile Card */}\r\n            <Card className=\"border border-gray-200 bg-white h-fit\">\r\n              <CardHeader className=\"text-center pb-4 pt-6\">\r\n                <div className=\"flex justify-center mb-4\">\r\n                  <div className=\"relative\">\r\n                    <Avatar className=\"w-16 h-16 border border-gray-200\">\r\n                      <AvatarImage\r\n                        src={session?.user?.image || \"\"}\r\n                        className=\"object-cover\"\r\n                      />\r\n                      <AvatarFallback className=\"bg-gray-100 text-gray-700 text-lg font-medium\">\r\n                        {session?.user?.name?.charAt(0) || \"U\"}\r\n                      </AvatarFallback>\r\n                    </Avatar>\r\n                    <div className=\"absolute -bottom-1 -right-1 w-5 h-5 bg-green-500 rounded-full border-2 border-white\"></div>\r\n                  </div>\r\n                </div>\r\n                <h2 className=\"text-xl font-semibold text-gray-900\">\r\n                  {session?.user?.name || \"User\"}\r\n                </h2>\r\n                <p className=\"text-sm text-gray-500\">Profile Information</p>\r\n              </CardHeader>\r\n\r\n              <CardContent className=\"space-y-3 px-6 pb-6\">\r\n                {/* User ID */}\r\n                <div className=\"flex items-center justify-between py-3 px-3 bg-gray-50 rounded-lg\">\r\n                  <div>\r\n                    <p className=\"text-sm font-medium text-gray-900\">User ID</p>\r\n                    <p className=\"text-xs text-gray-500\">Identifier</p>\r\n                  </div>\r\n                  <p className=\"text-xs text-gray-600 font-mono bg-white px-2 py-1 rounded border\">\r\n                    {session?.user?.id\r\n                      ? `${session.user.id.slice(0, 8)}...`\r\n                      : \"N/A\"}\r\n                  </p>\r\n                </div>\r\n\r\n                {/* Email */}\r\n                <div className=\"flex items-center justify-between py-3 px-3 bg-gray-50 rounded-lg\">\r\n                  <div>\r\n                    <p className=\"text-sm font-medium text-gray-900\">Email</p>\r\n                    <p className=\"text-xs text-gray-500\">Contact</p>\r\n                  </div>\r\n                  <p className=\"text-sm text-gray-700 truncate max-w-[150px]\">\r\n                    {session?.user?.email || \"Not provided\"}\r\n                  </p>\r\n                </div>\r\n\r\n                {/* Role */}\r\n                <div className=\"flex items-center justify-between py-3 px-3 bg-gray-50 rounded-lg\">\r\n                  <div>\r\n                    <p className=\"text-sm font-medium text-gray-900\">Role</p>\r\n                    <p className=\"text-xs text-gray-500\">Access level</p>\r\n                  </div>\r\n                  <Badge\r\n                    variant={\r\n                      session?.user?.role === \"ADMIN\" ? \"default\" : \"secondary\"\r\n                    }\r\n                    className={`text-xs ${\r\n                      session?.user?.role === \"ADMIN\"\r\n                        ? \"bg-gray-900 text-white\"\r\n                        : \"bg-gray-200 text-gray-700\"\r\n                    }`}\r\n                  >\r\n                    {session?.user?.role || \"USER\"}\r\n                  </Badge>\r\n                </div>\r\n\r\n                {/* Two Factor Authentication */}\r\n                {!userData?.isOAuth && (\r\n                  <div className=\"flex items-center justify-between py-3 px-3 bg-gray-50 rounded-lg\">\r\n                    <div>\r\n                      <p className=\"text-sm font-medium text-gray-900\">\r\n                        Two-Factor Auth\r\n                      </p>\r\n                      <p className=\"text-xs text-gray-500\">Security</p>\r\n                    </div>\r\n                    <Badge\r\n                      className={`text-xs ${\r\n                        session?.user?.isTwoFactorEnabled\r\n                          ? \"bg-green-100 text-green-800\"\r\n                          : \"bg-red-100 text-red-800\"\r\n                      }`}\r\n                    >\r\n                      {session?.user?.isTwoFactorEnabled\r\n                        ? \"ENABLED\"\r\n                        : \"DISABLED\"}\r\n                    </Badge>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Account Status */}\r\n                <div className=\"mt-4 p-3 bg-green-50 rounded-lg border border-green-100\">\r\n                  <div className=\"flex items-center justify-center space-x-2\">\r\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\r\n                    <p className=\"text-sm font-medium text-green-800\">\r\n                      Account Active\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Actions & Settings */}\r\n            <div className=\"space-y-6\">\r\n              {/* Account Settings */}\r\n              <Card className=\"border border-gray-200 bg-white\">\r\n                <CardHeader className=\"pb-4 pt-6\">\r\n                  <div className=\"text-center\">\r\n                    <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3\">\r\n                      <div className=\"w-6 h-6 border border-gray-400 rounded-full\"></div>\r\n                    </div>\r\n                    <CardTitle className=\"text-lg font-semibold text-gray-900\">\r\n                      Settings\r\n                    </CardTitle>\r\n                    <p className=\"text-sm text-gray-500 mt-1\">Manage account</p>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-3 px-6 pb-6\">\r\n                  <Link href=\"/profile\">\r\n                    <Button\r\n                      className=\"w-full justify-between bg-gray-50 hover:bg-gray-100 text-gray-900 border border-gray-200 h-10\"\r\n                      variant=\"outline\"\r\n                    >\r\n                      <span>Edit Profile</span>\r\n                      <span>→</span>\r\n                    </Button>\r\n                  </Link>\r\n\r\n                  {!session?.user?.isOAuth && (\r\n                    <Link href=\"/profile/change-password\">\r\n                      <Button\r\n                        className=\"w-full justify-between bg-gray-50 hover:bg-gray-100 text-gray-900 border border-gray-200 h-10\"\r\n                        variant=\"outline\"\r\n                      >\r\n                        <span>Change Password</span>\r\n                        <span>→</span>\r\n                      </Button>\r\n                    </Link>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Admin Access */}\r\n              {session.user.role === \"ADMIN\" && (\r\n                <Card className=\"border border-gray-300 bg-gray-50\">\r\n                  <CardHeader className=\"pb-4 pt-6\">\r\n                    <div className=\"text-center\">\r\n                      <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-3\">\r\n                        <div className=\"w-6 h-6 bg-gray-600 rounded-full\"></div>\r\n                      </div>\r\n                      <CardTitle className=\"text-lg font-semibold text-gray-900\">\r\n                        Admin Panel\r\n                      </CardTitle>\r\n                      <p className=\"text-sm text-gray-600 mt-1\">\r\n                        Administrative access\r\n                      </p>\r\n                    </div>\r\n                  </CardHeader>\r\n                  <CardContent className=\"px-6 pb-6\">\r\n                    <p className=\"text-sm text-gray-600 mb-4 text-center\">\r\n                      Manage users and system settings\r\n                    </p>\r\n                    <Link href=\"/admin\">\r\n                      <Button className=\"w-full bg-gray-900 hover:bg-gray-800 text-white h-10\">\r\n                        <span>Admin Dashboard</span>\r\n                        <span className=\"ml-2\">→</span>\r\n                      </Button>\r\n                    </Link>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/dashboard/page.tsx"
    },
    {
      "path": "dynamic-components/auth/lib/get-user.ts",
      "content": "import { auth } from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth\";\r\n\r\nexport const currentUser = async () => {\r\n  const session = await auth();\r\n  return session?.user;\r\n};\r\n\r\nexport const currentRole = async () => {\r\n  const session = await auth();\r\n  return session?.user?.role;\r\n};\r\nexport const isCurrentAccountOAuth = async () => {\r\n  const session = await auth();\r\n  return session?.user?.isOAuth;\r\n};\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/user-info.tsx",
      "content": "import { ExtendedUser } from \"@/registry/new-york/dynamic-components/auth/lib/next-auth\";\r\nimport { Badge } from \"@/registry/new-york/ui/badge\";\r\nimport { Card, CardContent, CardHeader } from \"@/registry/new-york/ui/card\";\r\nimport { currentUser } from \"@/registry/new-york/dynamic-components/auth/lib/get-user\";\r\nimport {\r\n  Avatar,\r\n  AvatarFallback,\r\n  AvatarImage,\r\n} from \"@/registry/new-york/ui/avatar\";\r\nimport { User } from \"lucide-react\";\r\n\r\ninterface UserInfoProps {\r\n  user?: ExtendedUser;\r\n  label: string;\r\n}\r\n\r\nexport async function UserInfo({ user, label }: UserInfoProps) {\r\n  const userData = await currentUser();\r\n  return (\r\n    <Card className=\"shadow-md\">\r\n      <CardHeader>\r\n        <p className=\"text-center text-2xl font-semibold\">{label}</p>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\r\n          <p className=\"text-sm font-medium\">ID</p>\r\n          <p className=\"text-sm text-muted-foreground\">{user?.id}</p>\r\n        </div>\r\n        <div className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\r\n          <p className=\"text-sm font-medium\">Name</p>\r\n          <p className=\"mtext-sm text-muted-foreground\">{user?.name}</p>\r\n        </div>\r\n\r\n        <Avatar>\r\n          <AvatarImage src={user?.image || \"\"} />\r\n          <AvatarFallback className=\"bg-sky-500\">\r\n            <User className=\"text-white\" />\r\n          </AvatarFallback>\r\n        </Avatar>\r\n\r\n        <div className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\r\n          <p className=\"text-sm font-medium\">Email</p>\r\n          <p className=\"text-sm text-muted-foreground\">{user?.email}</p>\r\n        </div>\r\n        <div className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\r\n          <p className=\"text-sm font-medium\">Role</p>\r\n          <p className=\"text-sm text-muted-foreground\">{user?.role}</p>\r\n        </div>\r\n        {!userData?.isOAuth && (\r\n          <div className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\r\n            <p className=\"text-sm font-medium\">Two Factor Authentication</p>\r\n            <Badge\r\n              variant={user?.isTwoFactorEnabled ? \"default\" : \"destructive\"}\r\n            >\r\n              {user?.isTwoFactorEnabled ? \"ON\" : \"OFF\"}\r\n            </Badge>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/pages/(protected)/profile/page.tsx",
      "content": "import { SettingsForm } from \"@/registry/new-york/dynamic-components/auth/components/settings-form\";\r\n\r\nexport default function SettingsPage() {\r\n  return (\r\n    <div className=\"\">\r\n      <SettingsForm />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(protected)/profile/page.tsx"
    },
    {
      "path": "dynamic-components/auth/lib/mail.ts",
      "content": "import nodemailer from \"nodemailer\";\r\nimport { render } from \"@react-email/render\";\r\nimport VerificationEmail from \"@/registry/new-york/dynamic-components/auth/emails/verification-email\";\r\nimport ResetPasswordEmail from \"@/registry/new-york/dynamic-components/auth/emails/reset-password-email\";\r\nimport TwoFactorAuthEmail from \"@/registry/new-york/dynamic-components/auth/emails/two-factor-email\";\r\n\r\nexport const transporter = nodemailer.createTransport({\r\n  host: process.env.EMAIL_SERVER_HOST,\r\n  port: Number(process.env.EMAIL_SERVER_PORT),\r\n  auth: {\r\n    user: process.env.EMAIL_SERVER_USER,\r\n    pass: process.env.EMAIL_SERVER_PASSWORD,\r\n  },\r\n});\r\n\r\nexport const sendVerificationEmail = async (\r\n  email: string,\r\n  token: string,\r\n  isEmailChange = false\r\n) => {\r\n  // Add emailChange parameter to the URL for email changes\r\n  const confirmLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/verify?token=${token}${isEmailChange ? \"&emailChange=true\" : \"\"}`;\r\n\r\n  const emailHtml = await render(VerificationEmail({ confirmLink }));\r\n\r\n  await transporter.sendMail({\r\n    from: `AxionJS - Test <${process.env.EMAIL_FROM}>`,\r\n    to: email,\r\n    subject: isEmailChange\r\n      ? \"Confirm your new email address\"\r\n      : \"Confirm your email address\",\r\n    html: emailHtml,\r\n  });\r\n};\r\n\r\nexport const sendPasswordResetEmail = async (email: string, token: string) => {\r\n  const resetLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/new-password?token=${token}`;\r\n\r\n  const emailHtml = await render(ResetPasswordEmail({ resetLink }));\r\n\r\n  await transporter.sendMail({\r\n    from: `AxionJS - Test <${process.env.EMAIL_FROM}>`,\r\n    to: email,\r\n    subject: \"Reset your password\",\r\n    html: emailHtml,\r\n  });\r\n};\r\n\r\nexport const sendTwoFactorTokenEmail = async (email: string, token: string) => {\r\n  const emailHtml = await render(\r\n    TwoFactorAuthEmail({ verificationToken: token })\r\n  );\r\n\r\n  await transporter.sendMail({\r\n    from: `AxionJS - Test <${process.env.EMAIL_FROM}>`,\r\n    to: email,\r\n    subject: \"2FA Verification Code\",\r\n    html: emailHtml,\r\n  });\r\n};\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/pages/auth/error/page.tsx",
      "content": "import { ErrorCard } from \"@/registry/new-york/dynamic-components/auth/components/error-card\";\r\n\r\nconst AuthErrorPage = () => {\r\n  return <ErrorCard />;\r\n};\r\n\r\nexport default AuthErrorPage;\r\n",
      "type": "registry:page",
      "target": "app/auth/error/page.tsx"
    },
    {
      "path": "dynamic-components/auth/middleware.ts",
      "content": "import authConfig from \"@/registry/new-york/dynamic-components/auth/lib/auth.config\";\r\nimport NextAuth from \"next-auth\";\r\n\r\nimport {\r\n  DEFAULT_LOGIN_REDIRECT,\r\n  apiAuthPrefix,\r\n  authRoutes,\r\n  publicRoutes,\r\n} from \"@/registry/new-york/dynamic-components/auth/lib/routes\";\r\n\r\nconst { auth } = NextAuth(authConfig);\r\nexport default auth((req) => {\r\n  const { nextUrl } = req;\r\n  const isLoggedIn = !!req.auth;\r\n\r\n  const isApiAuthRoute = nextUrl.pathname.startsWith(apiAuthPrefix);\r\n  const isPublicRoute = publicRoutes.includes(nextUrl.pathname);\r\n  const isAuthRoute = authRoutes.includes(nextUrl.pathname);\r\n\r\n  if (isApiAuthRoute) {\r\n    return;\r\n  }\r\n\r\n  if (isAuthRoute) {\r\n    if (isLoggedIn) {\r\n      return Response.redirect(new URL(DEFAULT_LOGIN_REDIRECT, nextUrl));\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (!isLoggedIn && !isPublicRoute) {\r\n    return Response.redirect(new URL(\"/auth/login\", nextUrl));\r\n  }\r\n\r\n  return;\r\n});\r\n\r\nexport const config = {\r\n  matcher: [\r\n    // Skip Next.js internals and all static files, unless found in search params\r\n    \"/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)\",\r\n    // Always run for API routes\r\n    \"/(api|trpc)(.*)\",\r\n  ],\r\n};\r\n",
      "type": "registry:middleware",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/login-form.tsx",
      "content": "\"use client\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { useState, useTransition } from \"react\";\r\nimport { useSearchParams, useRouter } from \"next/navigation\";\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormControl,\r\n  FormLabel,\r\n  FormItem,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { LoginSchema } from \"@/registry/new-york/dynamic-components/auth/schemas\";\r\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/auth/components/card-wrapper\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/auth/components/form-error\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/auth/components/form-success\";\r\nimport { login } from \"@/registry/new-york/dynamic-components/auth/actions/auth-actions\";\r\nimport Link from \"next/link\";\r\n\r\nexport const LoginForm = () => {\r\n  const searchParams = useSearchParams();\r\n  const callbackUrl = searchParams.get(\"callbackUrl\");\r\n  const urlError =\r\n    searchParams.get(\"error\") === \"OAuthAccountNotLinked\"\r\n      ? \"Email already in use with different provider!\"\r\n      : \"\";\r\n\r\n  const [showTwoFactor, setShowTwoFactor] = useState(false);\r\n  const [error, setError] = useState<string | undefined>(\"\");\r\n  const [success, setSuccess] = useState<string | undefined>(\"\");\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const router = useRouter();\r\n\r\n  const form = useForm<z.infer<typeof LoginSchema>>({\r\n    resolver: zodResolver(LoginSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      code: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof LoginSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    startTransition(() => {\r\n      login(values, callbackUrl)\r\n        .then((data) => {\r\n          if (data?.error) {\r\n            form.reset();\r\n            setError(data.error);\r\n          }\r\n\r\n          if (data?.success) {\r\n            form.reset();\r\n            setSuccess(data.success);\r\n            router.push(callbackUrl || \"/dashboard\");\r\n          }\r\n\r\n          if (data?.twoFactor) {\r\n            setShowTwoFactor(true);\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setError(\"\");\r\n        });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Login\"\r\n      subHeaderLabel=\"Welcome Back\"\r\n      backButtonLabel=\"Don't have an account?\"\r\n      backButtonHref=\"/auth/register\"\r\n      showSocial\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            {showTwoFactor && (\r\n              <>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"code\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Two Factor Code</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          disabled={isPending}\r\n                          {...field}\r\n                          placeholder=\"123456\"\r\n                          type=\"text\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <span className=\"text-sm text-gray-500\">\r\n                  Check your inbox for the 2FA Code\r\n                </span>\r\n              </>\r\n            )}\r\n            {!showTwoFactor && (\r\n              <>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Email</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          disabled={isPending}\r\n                          {...field}\r\n                          placeholder=\"jhon.doe@example.com\"\r\n                          type=\"email\"\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"password\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Password</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          disabled={isPending}\r\n                          {...field}\r\n                          placeholder=\"******\"\r\n                          type=\"password\"\r\n                        />\r\n                      </FormControl>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"link\"\r\n                        asChild\r\n                        className=\"px-0 font-normal\"\r\n                      >\r\n                        <Link href=\"/auth/reset\">Forgot password?</Link>\r\n                      </Button>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </>\r\n            )}\r\n          </div>\r\n          <FormError message={error || urlError} />\r\n          <FormSuccess message={success} />\r\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\r\n            {showTwoFactor ? \"Confirm\" : \"Login\"}\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/schemas/index.ts",
      "content": "import * as z from \"zod\";\r\n\r\nexport const LoginSchema = z.object({\r\n  email: z.string().email({\r\n    message: \"Invalid email address\",\r\n  }),\r\n  password: z.string().min(1, {\r\n    message: \"Password is required\",\r\n  }),\r\n  code: z.optional(z.string()),\r\n});\r\n\r\nexport const RegisterSchema = z.object({\r\n  email: z.string().email({\r\n    message: \"Invalid email address\",\r\n  }),\r\n  password: z.string().min(6, {\r\n    message: \"Password must be at least 6 characters\",\r\n  }),\r\n  name: z.string().min(1, {\r\n    message: \"Name is required\",\r\n  }),\r\n});\r\n\r\nexport const ResetSchema = z.object({\r\n  email: z.string().email({\r\n    message: \"Email is required\",\r\n  }),\r\n});\r\n\r\nexport const NewPasswordSchema = z.object({\r\n  password: z.string().min(6, { message: \"Minimum 6 characters required\" }),\r\n});\r\n\r\nexport const SettingsSchema = z.object({\r\n  name: z.optional(z.string()),\r\n  isTwoFactorEnabled: z.optional(z.boolean()),\r\n  email: z.optional(z.string().email({ message: \"Invalid email\" })),\r\n});\r\n\r\nexport const ChangePasswordSchema = z\r\n  .object({\r\n    currentPassword: z.string().min(1, \"Current password is required\"),\r\n    newPassword: z\r\n      .string()\r\n      .min(6, \"New password must be at least 6 characters\"),\r\n    confirmPassword: z\r\n      .string()\r\n      .min(6, \"Confirm password must be at least 6 characters\"),\r\n  })\r\n  .refine((data) => data.newPassword === data.confirmPassword, {\r\n    message: \"Passwords do not match\",\r\n    path: [\"confirmPassword\"],\r\n  });\r\n",
      "type": "registry:schemas",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/route.ts",
      "content": "import { handlers } from \"@/registry/new-york/dynamic-components/auth/lib/auth\";\r\nexport const { GET, POST } = handlers;\r\n",
      "type": "registry:api",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/register-form.tsx",
      "content": "\"use client\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { useState, useTransition } from \"react\";\r\n\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormControl,\r\n  FormLabel,\r\n  FormItem,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { RegisterSchema } from \"@/registry/new-york/dynamic-components/auth/schemas\";\r\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/auth/components/card-wrapper\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/auth/components/form-error\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/auth/components/form-success\";\r\nimport { register } from \"@/registry/new-york/dynamic-components/auth/actions/auth-actions\";\r\n\r\nexport const RegisterForm = () => {\r\n  const [error, setError] = useState<string | undefined>(\"\");\r\n  const [success, setSuccess] = useState<string | undefined>(\"\");\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const form = useForm<z.infer<typeof RegisterSchema>>({\r\n    resolver: zodResolver(RegisterSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      name: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof RegisterSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    startTransition(() => {\r\n      register(values).then((data) => {\r\n        setError(data.error);\r\n        setSuccess(data.success);\r\n      });\r\n    });\r\n  };\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Register\"\r\n      subHeaderLabel=\"Create an account\"\r\n      backButtonLabel=\"Already have an account?\"\r\n      backButtonHref=\"/auth/login\"\r\n      showSocial\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Name</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={isPending}\r\n                      {...field}\r\n                      placeholder=\"Jhon Doe\"\r\n                      type=\"text\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={isPending}\r\n                      {...field}\r\n                      placeholder=\"jhon.doe@example.com\"\r\n                      type=\"email\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"password\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={isPending}\r\n                      {...field}\r\n                      placeholder=\"******\"\r\n                      type=\"password\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          <FormError message={error} />\r\n          <FormSuccess message={success} />\r\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\r\n            Create an account\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/social.tsx",
      "content": "\"use client\";\r\n\r\nimport { FcGoogle } from \"react-icons/fc\";\r\nimport { FaGithub } from \"react-icons/fa\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { loginWithOAuth } from \"@/registry/new-york/dynamic-components/auth/actions/auth-actions\";\r\nimport { useTransition } from \"react\";\r\nimport { useSearchParams } from \"next/navigation\";\r\n\r\nexport const Social = () => {\r\n  const searchParams = useSearchParams();\r\n  const callbackUrl = searchParams.get(\"callbackUrl\");\r\n  const [isPending, startTransition] = useTransition();\r\n  const onClick = async (provider: \"google\" | \"github\") => {\r\n    try {\r\n      startTransition(() => {\r\n        loginWithOAuth(provider, callbackUrl);\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex items-center w-full gap-x-2\">\r\n      <Button\r\n        disabled={isPending}\r\n        size=\"lg\"\r\n        className=\"w-full\"\r\n        variant=\"outline\"\r\n        onClick={() => {\r\n          onClick(\"google\");\r\n        }}\r\n      >\r\n        <FcGoogle className=\"h-5 w-5\" />\r\n      </Button>\r\n\r\n      <Button\r\n        disabled={isPending}\r\n        size=\"lg\"\r\n        className=\"w-full\"\r\n        variant=\"outline\"\r\n        onClick={() => {\r\n          onClick(\"github\");\r\n        }}\r\n      >\r\n        <FaGithub className=\"h-5 w-5\" />\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/change-password-form.tsx",
      "content": "\"use client\";\r\nimport { useState, useTransition } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as z from \"zod\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormControl,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/auth/components/form-success\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/auth/components/form-error\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { changePassword } from \"@/registry/new-york/dynamic-components/auth/actions/auth-actions\";\r\nimport { CardWrapper } from \"./card-wrapper\";\r\nimport { ChangePasswordSchema } from \"@/registry/new-york/dynamic-components/auth/schemas\";\r\n\r\nexport const ChangePasswordForm = () => {\r\n  const [error, setError] = useState<string | undefined>();\r\n  const [success, setSuccess] = useState<string | undefined>();\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const form = useForm<z.infer<typeof ChangePasswordSchema>>({\r\n    resolver: zodResolver(ChangePasswordSchema),\r\n    defaultValues: {\r\n      currentPassword: \"\",\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof ChangePasswordSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n    startTransition(() => {\r\n      changePassword(values.currentPassword, values.newPassword)\r\n        .then((data) => {\r\n          if (data.error) {\r\n            setError(data.error);\r\n          }\r\n          if (data.success) {\r\n            setSuccess(data.success);\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setError(\"Something went wrong!\");\r\n        });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Change Password\"\r\n      subHeaderLabel=\"Update your account password\"\r\n      backButtonLabel=\"Back to Dashboard\"\r\n      backButtonHref=\"/dashboard\"\r\n    >\r\n      <Form {...form}>\r\n        <form className=\"space-y-6\" onSubmit={form.handleSubmit(onSubmit)}>\r\n          <div className=\"space-y-4\">\r\n            {/* Current Password Field */}\r\n            <FormField\r\n              control={form.control}\r\n              name=\"currentPassword\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Current Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      placeholder=\"******\"\r\n                      disabled={isPending}\r\n                      type=\"password\"\r\n                      className=\"w-full\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            {/* New Password Field */}\r\n            <FormField\r\n              control={form.control}\r\n              name=\"newPassword\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>New Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      placeholder=\"******\"\r\n                      disabled={isPending}\r\n                      type=\"password\"\r\n                      className=\"w-full\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            {/* Confirm Password Field */}\r\n            <FormField\r\n              control={form.control}\r\n              name=\"confirmPassword\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Confirm Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      placeholder=\"******\"\r\n                      disabled={isPending}\r\n                      type=\"password\"\r\n                      className=\"w-full\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          {/* Error and Success Messages */}\r\n          {error && <FormError message={error} />}\r\n          {success && <FormSuccess message={success} />}\r\n\r\n          {/* Save Button */}\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={isPending}\r\n            className=\"w-full bg-primary hover:bg-primary-dark\"\r\n          >\r\n            {isPending ? \"Changing Password...\" : \"Change Password\"}\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/new-password-form.tsx",
      "content": "\"use client\";\r\n\r\nimport * as z from \"zod\";\r\nimport { useState, useTransition } from \"react\";\r\nimport { useSearchParams } from \"next/navigation\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/auth/components/card-wrapper\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/auth/components/form-success\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/auth/components/form-error\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { newPassword } from \"@/registry/new-york/dynamic-components/auth/actions/auth-actions\";\r\nimport { NewPasswordSchema } from \"@/registry/new-york/dynamic-components/auth/schemas\";\r\n\r\nexport function NewPasswordForm() {\r\n  const searchParams = useSearchParams();\r\n  const token = searchParams.get(\"token\");\r\n\r\n  const [error, setError] = useState<string | undefined>(\"\");\r\n  const [success, setSuccess] = useState<string | undefined>(\"\");\r\n\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const form = useForm<z.infer<typeof NewPasswordSchema>>({\r\n    resolver: zodResolver(NewPasswordSchema),\r\n    defaultValues: { password: \"\" },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof NewPasswordSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    startTransition(() => {\r\n      newPassword(values, token).then((data) => {\r\n        setError(data?.error);\r\n        setSuccess(data?.success);\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"New Password\"\r\n      subHeaderLabel=\"Enter a new password\"\r\n      backButtonLabel=\"Back to login\"\r\n      backButtonHref=\"/auth/login\"\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"password\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      disabled={isPending}\r\n                      placeholder=\"******\"\r\n                      type=\"password\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          <FormError message={error} />\r\n          <FormSuccess message={success} />\r\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\r\n            Reset password\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n}\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/new-verification-form.tsx",
      "content": "\"use client\";\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { BeatLoader } from \"react-spinners\";\r\nimport { useSearchParams, useRouter } from \"next/navigation\";\r\nimport { CardWrapper } from \"./card-wrapper\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/auth/components/form-success\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/auth/components/form-error\";\r\nimport {\r\n  newVerification,\r\n  verifyEmailChange,\r\n} from \"@/registry/new-york/dynamic-components/auth/actions/auth-actions\";\r\n\r\nexport function NewVerificationForm() {\r\n  const router = useRouter();\r\n  const [error, setError] = useState<string | undefined>();\r\n  const [success, setSuccess] = useState<string | undefined>();\r\n\r\n  const searchParams = useSearchParams();\r\n  const token = searchParams.get(\"token\");\r\n  const isEmailChange = searchParams.get(\"emailChange\") === \"true\";\r\n\r\n  const onsubmit = useCallback(() => {\r\n    if (success || error) return;\r\n\r\n    if (!token) {\r\n      setError(\"Missing token!\");\r\n      return;\r\n    }\r\n\r\n    if (isEmailChange) {\r\n      verifyEmailChange(token)\r\n        .then((data) => {\r\n          setSuccess(data.success);\r\n          setError(data.error);\r\n          if (data.success) {\r\n            // Refresh the page after a short delay to reflect changes\r\n            setTimeout(() => {\r\n              router.refresh();\r\n            }, 2000);\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setError(\"Something went wrong!\");\r\n        });\r\n    } else {\r\n      newVerification(token)\r\n        .then((data) => {\r\n          setSuccess(data.success);\r\n          setError(data.error);\r\n          if (data.success) {\r\n            // Refresh the page after a short delay to reflect changes\r\n            setTimeout(() => {\r\n              router.refresh();\r\n            }, 2000);\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setError(\"Something went wrong!\");\r\n        });\r\n    }\r\n  }, [token, success, error, isEmailChange, router]);\r\n\r\n  useEffect(() => {\r\n    onsubmit();\r\n  }, [onsubmit]);\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Email Verification\"\r\n      subHeaderLabel={\r\n        isEmailChange\r\n          ? \"Confirming your email change\"\r\n          : \"Confirming your verification\"\r\n      }\r\n      backButtonHref={isEmailChange ? \"/profile\" : \"/login\"}\r\n      backButtonLabel={isEmailChange ? \"Back to Profile\" : \"Back to Login\"}\r\n    >\r\n      <div className=\"flex w-full items-center justify-center\">\r\n        {!success && !error && <BeatLoader />}\r\n        <FormSuccess message={success} />\r\n        {!success && <FormError message={error} />}\r\n      </div>\r\n    </CardWrapper>\r\n  );\r\n}\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/reset-form.tsx",
      "content": "\"use client\";\r\n\r\nimport * as z from \"zod\";\r\nimport { useState, useTransition } from \"react\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/auth/components/form-success\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/auth/components/form-error\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\n\r\nimport { ResetSchema } from \"@/registry/new-york/dynamic-components/auth/schemas\";\r\nimport { reset } from \"@/registry/new-york/dynamic-components/auth/actions/auth-actions\";\r\nimport { CardWrapper } from \"./card-wrapper\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\n\r\nexport function ResetForm() {\r\n  const [error, setError] = useState<string | undefined>(\"\");\r\n  const [success, setSuccess] = useState<string | undefined>(\"\");\r\n\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const form = useForm<z.infer<typeof ResetSchema>>({\r\n    resolver: zodResolver(ResetSchema),\r\n    defaultValues: { email: \"\" },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof ResetSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    startTransition(() => {\r\n      reset(values).then((data) => {\r\n        setError(data?.error);\r\n        setSuccess(data?.success);\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Reset Password\"\r\n      subHeaderLabel=\"Forgot your password?\"\r\n      backButtonLabel=\"Back to login\"\r\n      backButtonHref=\"/auth/login\"\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      disabled={isPending}\r\n                      placeholder=\"john.doe@example.com\"\r\n                      type=\"email\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          <FormError message={error} />\r\n          <FormSuccess message={success} />\r\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\r\n            Send reset email\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n}\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/card-wrapper.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardFooter,\r\n  CardHeader,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport { Social } from \"@/registry/new-york/dynamic-components/auth/components/social\";\r\nimport { BackButton } from \"@/registry/new-york/dynamic-components/auth/components/back-button\";\r\n\r\ninterface HeaderProps {\r\n  mainLabel: string;\r\n  subLabel: string;\r\n}\r\n\r\nexport const Header = ({ mainLabel, subLabel }: HeaderProps) => {\r\n  return (\r\n    <div className=\"w-full flex flex-col gap-y-4 items-center justify-center\">\r\n      <h1 className=\"text-3xl font-bold\">{mainLabel}</h1>\r\n      <p className=\"text-muted-foreground text-sm\">{subLabel}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface CardWrapperProps {\r\n  children: React.ReactNode;\r\n  mainHeaderLabel: string;\r\n  subHeaderLabel: string;\r\n  backButtonLabel: string;\r\n  backButtonHref: string;\r\n  showSocial?: boolean;\r\n}\r\n\r\nexport const CardWrapper = ({\r\n  children,\r\n  mainHeaderLabel,\r\n  subHeaderLabel,\r\n  backButtonLabel,\r\n  backButtonHref,\r\n  showSocial,\r\n}: CardWrapperProps) => {\r\n  return (\r\n    <Card className=\"w-[400px] shadow-lg\">\r\n      <CardHeader>\r\n        <Header mainLabel={mainHeaderLabel} subLabel={subHeaderLabel} />\r\n      </CardHeader>\r\n      <CardContent>{children}</CardContent>\r\n      {showSocial && (\r\n        <CardFooter>\r\n          <Social />\r\n        </CardFooter>\r\n      )}\r\n      <CardFooter>\r\n        <BackButton label={backButtonLabel} href={backButtonHref} />\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/back-button.tsx",
      "content": "\"use client\";\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport Link from \"next/link\";\r\n\r\ninterface BackButtonProps {\r\n  href: string;\r\n  label: string;\r\n}\r\n\r\nexport const BackButton = ({ href, label }: BackButtonProps) => {\r\n  return (\r\n    <Button className=\"font-normal w-full\" size=\"sm\" variant=\"link\" asChild>\r\n      <Link href={href}>{label}</Link>\r\n    </Button>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/error-card.tsx",
      "content": "import { CardWrapper } from \"@/registry/new-york/dynamic-components/auth/components/card-wrapper\";\r\nimport { AlertTriangleIcon } from \"lucide-react\";\r\n\r\nexport function ErrorCard() {\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Error\"\r\n      subHeaderLabel=\"Oops! Something went wrong\"\r\n      backButtonHref=\"/auth/login\"\r\n      backButtonLabel=\"Back to login\"\r\n    >\r\n      <div className=\"flex w-full items-center justify-center\">\r\n        <AlertTriangleIcon className=\"text-destructive\" />\r\n      </div>\r\n    </CardWrapper>\r\n  );\r\n}\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/form-success.tsx",
      "content": "import { CheckCircleIcon } from \"lucide-react\";\r\n\r\ninterface FormSuccessProps {\r\n  message?: string;\r\n}\r\n\r\nexport const FormSuccess = ({ message }: FormSuccessProps) => {\r\n  if (!message) return null;\r\n  return (\r\n    <div className=\"flex items-center gap-x-2 bg-emerald-500/15 p-3 rounded-md text-sm text-emerald-500\">\r\n      <CheckCircleIcon className=\"h-4 w-4\" />\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/form-error.tsx",
      "content": "import { AlertTriangleIcon } from \"lucide-react\";\r\n\r\ninterface FormErrorProps {\r\n  message?: string;\r\n}\r\n\r\nexport const FormError = ({ message }: FormErrorProps) => {\r\n  if (!message) return null;\r\n  return (\r\n    <div className=\"flex items-center gap-x-2 bg-destructive/15 p-3 rounded-md text-sm text-destructive\">\r\n      <AlertTriangleIcon className=\"h-4 w-4\" />\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/navbar.tsx",
      "content": "import { UserButton } from \"@/registry/new-york/dynamic-components/auth/components/user-button\";\r\n\r\nexport const Navbar = async () => {\r\n  return (\r\n    <nav className=\"flex w-full mt-9 justify-end rounded-xl p-4 shadow-lg\">\r\n      <UserButton />\r\n    </nav>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/user-button.tsx",
      "content": "import { User } from \"lucide-react\";\r\nimport { LogOutIcon } from \"lucide-react\";\r\nimport { LogoutButton } from \"@/registry/new-york/dynamic-components/auth/components/logout-button\";\r\n\r\nimport {\r\n  Avatar,\r\n  AvatarImage,\r\n  AvatarFallback,\r\n} from \"@/registry/new-york/ui/avatar\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/registry/new-york/ui/dropdown-menu\";\r\nimport { currentUser } from \"@/registry/new-york/dynamic-components/auth/lib/get-user\";\r\n\r\nexport const UserButton = async () => {\r\n  const user = await currentUser();\r\n\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger>\r\n        <Avatar>\r\n          <AvatarImage src={user?.image || \"\"} />\r\n          <AvatarFallback className=\"bg-sky-500\">\r\n            <User className=\"text-white\" />\r\n          </AvatarFallback>\r\n        </Avatar>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent className=\"w-40\" align=\"end\">\r\n        {/* tutorial code: cursor-pointer on LogoutButton won't work because DropdownMenuItem will override it */}\r\n        <LogoutButton>\r\n          <DropdownMenuItem>\r\n            <LogOutIcon className=\"mr-2 h-4 w-4\" />\r\n            Logout\r\n          </DropdownMenuItem>\r\n        </LogoutButton>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/logout-button.tsx",
      "content": "\"use client\";\r\n\r\nimport { logout } from \"@/registry/new-york/dynamic-components/auth/actions/auth-actions\";\r\n\r\n// alternatively, use client-side signOut() from next-auth/react\r\n// import { signOut } from \"next-auth/react\";\r\n\r\ninterface LogoutButtonProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport function LogoutButton({ children }: LogoutButtonProps) {\r\n  const onClick = () => {\r\n    logout();\r\n  };\r\n\r\n  return (\r\n    <span onClick={onClick} className=\"cursor-pointer\">\r\n      {children}\r\n    </span>\r\n  );\r\n}\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/actions/auth-actions.ts",
      "content": "\"use server\";\r\n\r\nimport * as z from \"zod\";\r\nimport { db } from \"@/registry/new-york/dynamic-components/auth/lib/db\";\r\nimport { v2 as cloudinary } from \"cloudinary\";\r\nimport {\r\n  LoginSchema,\r\n  NewPasswordSchema,\r\n  ResetSchema,\r\n  SettingsSchema,\r\n} from \"@/registry/new-york/dynamic-components/auth/schemas\";\r\nimport { RegisterSchema } from \"@/registry/new-york/dynamic-components/auth/schemas\";\r\nimport {\r\n  getUserByEmail,\r\n  getUserById,\r\n} from \"@/registry/new-york/dynamic-components/auth/lib/user\";\r\nimport {\r\n  signIn,\r\n  signOut,\r\n} from \"@/registry/new-york/dynamic-components/auth/lib/auth\";\r\nimport { DEFAULT_LOGIN_REDIRECT } from \"@/registry/new-york/dynamic-components/auth/lib/routes\";\r\nimport { AuthError } from \"next-auth\";\r\nimport {\r\n  generatePasswordResetToken,\r\n  generateVerificationToken,\r\n  getPasswordResetTokenByToken,\r\n  getVerificationTokenByToken,\r\n  hashPassword,\r\n  verifyPassword,\r\n} from \"@/registry/new-york/dynamic-components/auth/lib/auth-helpers\";\r\nimport {\r\n  sendPasswordResetEmail,\r\n  sendVerificationEmail,\r\n  sendTwoFactorTokenEmail,\r\n} from \"@/registry/new-york/dynamic-components/auth/lib/mail\";\r\nimport {\r\n  generateTwoFactorToken,\r\n  getTwoFactorConfirmationByUserId,\r\n  getTwoFactorTokenByEmail,\r\n} from \"@/registry/new-york/dynamic-components/auth/actions/two-factor\";\r\nimport { currentUser } from \"@/registry/new-york/dynamic-components/auth/lib/get-user\";\r\n\r\nexport const login = async (\r\n  values: z.infer<typeof LoginSchema>,\r\n  callbackUrl?: string | null\r\n) => {\r\n  const validatedFields = LoginSchema.safeParse(values);\r\n  if (!validatedFields.success) {\r\n    return { error: \"Invalid fields!\" };\r\n  }\r\n\r\n  const { email, password, code } = validatedFields.data;\r\n\r\n  const existingUser = await getUserByEmail(email);\r\n  if (!existingUser || !existingUser.email || !existingUser.password) {\r\n    // Either user/email does not exist or user signed in with OAuth\r\n    return { error: \"Email does not exist! / Sign in with OAuth!\" };\r\n  }\r\n\r\n  const passwordsMatch = await verifyPassword(password, existingUser.password);\r\n\r\n  if (!existingUser.emailVerified) {\r\n    const verificationToken = await generateVerificationToken(\r\n      existingUser.email\r\n    );\r\n\r\n    if (!passwordsMatch) {\r\n      return { error: \"Invalid credentials!\" };\r\n    }\r\n    await sendVerificationEmail(\r\n      verificationToken.email,\r\n      verificationToken.token\r\n    );\r\n\r\n    return { success: \"Confirmation email sent!\" };\r\n  }\r\n  if (!passwordsMatch) {\r\n    return { error: \"Invalid credentials!\" };\r\n  }\r\n  //2FA\r\n  if (existingUser.isTwoFactorEnabled && existingUser.email) {\r\n    if (code) {\r\n      const twoFactorToken = await getTwoFactorTokenByEmail(existingUser.email);\r\n\r\n      if (!twoFactorToken) return { error: \"Invalid code!\" };\r\n\r\n      if (twoFactorToken.token !== code) return { error: \"Invalid code!\" };\r\n\r\n      const hasExpired = new Date(twoFactorToken.expires) < new Date();\r\n\r\n      if (hasExpired) return { error: \"Code expired!\" };\r\n\r\n      await db.twoFactorToken.delete({ where: { id: twoFactorToken.id } });\r\n\r\n      const existingConfirmation = await getTwoFactorConfirmationByUserId(\r\n        existingUser.id\r\n      );\r\n\r\n      if (existingConfirmation) {\r\n        await db.twoFactorConfirmation.delete({\r\n          where: { id: existingConfirmation.id },\r\n        });\r\n      }\r\n\r\n      await db.twoFactorConfirmation.create({\r\n        data: {\r\n          userId: existingUser.id,\r\n        },\r\n      });\r\n    } else {\r\n      const twoFactorToken = await generateTwoFactorToken(existingUser.email);\r\n      await sendTwoFactorTokenEmail(twoFactorToken.email, twoFactorToken.token);\r\n\r\n      // when 2FA token has been emailed to user\r\n      return { twoFactor: true };\r\n    }\r\n  }\r\n\r\n  try {\r\n    await signIn(\"credentials\", {\r\n      email,\r\n      password,\r\n      redirectTo: callbackUrl || DEFAULT_LOGIN_REDIRECT,\r\n    }); // explicitly setting the redirect (for clarity), even though middleware will redirect if user is logged in\r\n\r\n    return { success: \"Logged in!\" };\r\n  } catch (error) {\r\n    if (error instanceof AuthError) {\r\n      switch (error.type) {\r\n        case \"CredentialsSignin\": {\r\n          return { error: \"Invalid credentials!\" };\r\n        }\r\n        default: {\r\n          return { error: \"Something went wrong!\" };\r\n        }\r\n      }\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logout = async () => {\r\n  await signOut();\r\n};\r\n\r\nexport const register = async (values: z.infer<typeof RegisterSchema>) => {\r\n  const validatedFields = RegisterSchema.safeParse(values);\r\n  if (!validatedFields.success) {\r\n    return { error: \"Invalid fields!\" };\r\n  }\r\n\r\n  const { email, password, name } = validatedFields.data;\r\n  const hashedPassword = await hashPassword(password);\r\n\r\n  const existingUser = await getUserByEmail(email);\r\n\r\n  if (existingUser) {\r\n    return { error: \"Email already in use!\" };\r\n  }\r\n\r\n  await db.user.create({\r\n    data: {\r\n      email,\r\n      password: hashedPassword,\r\n      name,\r\n    },\r\n  });\r\n\r\n  const verificationToken = await generateVerificationToken(email);\r\n  await sendVerificationEmail(verificationToken.email, verificationToken.token);\r\n\r\n  return { success: \"Confirmation Email Sent!\" };\r\n};\r\n\r\nexport const loginWithOAuth = async (\r\n  provider: string,\r\n  callbackUrl?: string | null\r\n) => {\r\n  try {\r\n    await signIn(provider, {\r\n      redirectTo: callbackUrl || DEFAULT_LOGIN_REDIRECT,\r\n    });\r\n\r\n    return { success: \"Logged in!\" };\r\n  } catch (error) {\r\n    if (error === \"NEXT_REDIRECT\") {\r\n      // This is a redirect, not an actual error\r\n      return { success: \"Redirecting to OAuth provider...\" };\r\n    } else if (error instanceof AuthError) {\r\n      switch (error.type) {\r\n        case \"OAuthAccountNotLinked\":\r\n          return {\r\n            error: \"Email is already in use with a different provider.\",\r\n          };\r\n        default:\r\n          return { error: \"Something went wrong.\" };\r\n      }\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const newVerification = async (token: string) => {\r\n  const existingToken = await getVerificationTokenByToken(token);\r\n  if (!existingToken) {\r\n    return { error: \"Token does not exist\" };\r\n  }\r\n\r\n  const hasExpired = new Date(existingToken.expires) < new Date();\r\n\r\n  if (hasExpired) {\r\n    return { error: \"Token has expired\" };\r\n  }\r\n\r\n  const existingUser = await getUserByEmail(existingToken.email);\r\n\r\n  // Handle case where user exists - normal email verification for new registration\r\n  if (existingUser) {\r\n    await db.user.update({\r\n      where: { id: existingUser.id },\r\n      data: {\r\n        emailVerified: new Date(),\r\n      },\r\n    });\r\n  } else {\r\n    // If we can't find a user with this email, it might be from a registration\r\n    // that created the user but didn't set the email yet\r\n    const pendingUser = await db.user.findFirst({\r\n      where: {\r\n        OR: [{ email: null }, { emailVerified: null }],\r\n      },\r\n      orderBy: {\r\n        id: \"desc\",\r\n      },\r\n    });\r\n\r\n    if (!pendingUser) {\r\n      return { error: \"User not found!\" };\r\n    }\r\n\r\n    await db.user.update({\r\n      where: { id: pendingUser.id },\r\n      data: {\r\n        email: existingToken.email,\r\n        emailVerified: new Date(),\r\n      },\r\n    });\r\n  }\r\n\r\n  await db.verificationToken.delete({\r\n    where: { id: existingToken.id },\r\n  });\r\n\r\n  return { success: \"Email verified!\" };\r\n};\r\n\r\nexport const reset = async (values: z.infer<typeof ResetSchema>) => {\r\n  const validatedFields = ResetSchema.safeParse(values);\r\n\r\n  if (!validatedFields.success) return { error: \"Invalid email!\" };\r\n\r\n  const { email } = validatedFields.data;\r\n\r\n  const existingUser = await getUserByEmail(email);\r\n  if (!existingUser) return { error: \"Email not found!\" };\r\n\r\n  const isOAuthAccount = await db.account.findFirst({\r\n    where: { userId: existingUser?.id },\r\n  });\r\n\r\n  if (isOAuthAccount)\r\n    return { error: \"Cannot reset password for OAuth account!\" };\r\n\r\n  const passwordResetToken = await generatePasswordResetToken(email);\r\n  await sendPasswordResetEmail(\r\n    passwordResetToken.email,\r\n    passwordResetToken.token\r\n  );\r\n\r\n  return { success: \"Reset password email sent\" };\r\n};\r\n\r\nexport const newPassword = async (\r\n  values: z.infer<typeof NewPasswordSchema>,\r\n  token?: string | null\r\n) => {\r\n  if (!token) return { error: \"Missing token!\" };\r\n\r\n  const validatedFields = NewPasswordSchema.safeParse(values);\r\n\r\n  if (!validatedFields.success) return { error: \"Invalid fields!\" };\r\n\r\n  const { password } = validatedFields.data;\r\n\r\n  const existingToken = await getPasswordResetTokenByToken(token);\r\n\r\n  if (!existingToken) return { error: \"Invalid token!\" };\r\n\r\n  const hasExpired = new Date(existingToken.expires) < new Date();\r\n\r\n  if (hasExpired) return { error: \"Token has expired!\" };\r\n\r\n  const existingUser = await getUserByEmail(existingToken.email);\r\n\r\n  if (!existingUser) return { error: \"Email does not exist!\" };\r\n\r\n  const hashedPassword = await hashPassword(password);\r\n\r\n  await db.user.update({\r\n    where: { id: existingUser.id },\r\n    data: { password: hashedPassword },\r\n  });\r\n\r\n  await db.passwordResetToken.delete({\r\n    where: { id: existingToken.id },\r\n  });\r\n\r\n  return { success: \"Password updated!\" };\r\n};\r\n\r\n// New action for email change\r\nexport async function changeEmail(userId: string, newEmail: string) {\r\n  const existingUser = await db.user.findUnique({\r\n    where: { id: userId },\r\n  });\r\n\r\n  if (!existingUser) {\r\n    return { error: \"User not found!\" };\r\n  }\r\n\r\n  // Check if the new email is already used by another account\r\n  const emailTaken = await getUserByEmail(newEmail);\r\n  if (emailTaken && emailTaken.id !== userId) {\r\n    return { error: \"Email already in use by another account!\" };\r\n  }\r\n\r\n  // Store the user ID in the verification token\r\n  const verificationToken = await generateVerificationToken(newEmail, userId);\r\n\r\n  // Send verification email to the NEW email address with emailChange flag\r\n  await sendVerificationEmail(\r\n    newEmail,\r\n    verificationToken.token,\r\n    true // Indicate this is an email change\r\n  );\r\n\r\n  // Update user record to indicate pending email change\r\n  await db.user.update({\r\n    where: { id: userId },\r\n    data: {\r\n      pendingEmail: newEmail,\r\n    },\r\n  });\r\n\r\n  return { success: \"Verification email sent to new address!\" };\r\n}\r\n\r\n// Action to verify email change\r\nexport async function verifyEmailChange(token: string) {\r\n  const existingToken = await getVerificationTokenByToken(token);\r\n\r\n  if (!existingToken) {\r\n    return { error: \"Token does not exist!\" };\r\n  }\r\n\r\n  const hasExpired = new Date(existingToken.expires) < new Date();\r\n\r\n  if (hasExpired) {\r\n    return { error: \"Token has expired!\" };\r\n  }\r\n\r\n  // Find the user who requested this email change using the userId stored in the token\r\n  if (!existingToken.userId) {\r\n    return { error: \"Invalid email change request!\" };\r\n  }\r\n\r\n  const user = await db.user.findUnique({\r\n    where: { id: existingToken.userId },\r\n  });\r\n\r\n  if (!user) {\r\n    return { error: \"User not found!\" };\r\n  }\r\n\r\n  // Update the user's email\r\n  await db.user.update({\r\n    where: { id: user.id },\r\n    data: {\r\n      email: existingToken.email,\r\n      emailVerified: new Date(),\r\n      pendingEmail: null, // Clear the pending email field\r\n    },\r\n  });\r\n\r\n  // Delete the verification token\r\n  await db.verificationToken.delete({\r\n    where: { id: existingToken.id },\r\n  });\r\n\r\n  return { success: \"Email updated successfully!\" };\r\n}\r\n\r\nexport const settings = async (\r\n  userId: string | { id: string } | any,\r\n  values: z.infer<typeof SettingsSchema>\r\n) => {\r\n  const user = await currentUser();\r\n\r\n  if (!user) return { error: \"Unauthorized!\" };\r\n  // Handle different userId formats\r\n  const actualUserId =\r\n    typeof userId === \"string\"\r\n      ? userId\r\n      : typeof userId === \"object\" && userId?.id\r\n        ? userId.id\r\n        : null;\r\n\r\n  if (!actualUserId) {\r\n    return { error: \"Invalid user ID!\" };\r\n  }\r\n\r\n  const dbUser = await getUserById(user.id as string);\r\n\r\n  if (!dbUser) return { error: \"Unauthorized!\" };\r\n\r\n  // users who signed in with OAuth should not be able to modify these fields\r\n  if (user.isOAuth) {\r\n    values.email = undefined;\r\n    values.isTwoFactorEnabled = undefined;\r\n  }\r\n\r\n  // Handle email change if provided\r\n  if (values.email && values.email !== user.email) {\r\n    return await changeEmail(actualUserId, values.email);\r\n  }\r\n\r\n  // Handle name update\r\n  if (values.name !== undefined && values.name !== user.name) {\r\n    await db.user.update({\r\n      where: { id: actualUserId },\r\n      data: { name: values.name },\r\n    });\r\n  }\r\n\r\n  // Handle two-factor authentication toggle\r\n  if (\r\n    typeof values.isTwoFactorEnabled !== \"undefined\" &&\r\n    values.isTwoFactorEnabled !== dbUser.isTwoFactorEnabled\r\n  ) {\r\n    await db.user.update({\r\n      where: { id: actualUserId },\r\n      data: { isTwoFactorEnabled: values.isTwoFactorEnabled },\r\n    });\r\n  }\r\n\r\n  return { success: \"Profile updated!\" };\r\n};\r\n\r\n// Configure Cloudinary\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nexport async function updateUserImage(userId: string, imageData: string) {\r\n  try {\r\n    // Validate user ID\r\n    const user = await db.user.findUnique({\r\n      where: { id: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return { error: \"User not found!\" };\r\n    }\r\n\r\n    if (!imageData || !imageData.startsWith(\"data:image/\")) {\r\n      return { error: \"Invalid image data!\" };\r\n    }\r\n\r\n    // Upload to Cloudinary\r\n    const uploadResponse = await new Promise((resolve, reject) => {\r\n      cloudinary.uploader.upload(\r\n        imageData,\r\n        {\r\n          folder: \"user_profiles\",\r\n          // You can add transformation options here\r\n          // transformation: [{ width: 250, height: 250, crop: 'fill' }]\r\n        },\r\n        (error, result) => {\r\n          if (error) reject(error);\r\n          else resolve(result);\r\n        }\r\n      );\r\n    });\r\n\r\n    // Get the secure URL from the upload response\r\n    const imageUrl = (uploadResponse as { secure_url: string }).secure_url;\r\n\r\n    // Update the user's image URL in the database\r\n    await db.user.update({\r\n      where: { id: userId },\r\n      data: { image: imageUrl },\r\n    });\r\n\r\n    return { success: \"Profile picture updated!\" };\r\n  } catch (error) {\r\n    console.error(\"Error updating profile picture:\", error);\r\n    return { error: \"Failed to update profile picture.\" };\r\n  }\r\n}\r\n\r\nexport const changePassword = async (\r\n  currentPassword: string,\r\n  newPassword: string\r\n) => {\r\n  const user = await currentUser();\r\n\r\n  if (!user) return { error: \"Unauthorized!\" };\r\n\r\n  // Block OAuth users from password changes\r\n  if (user.isOAuth) {\r\n    return { error: \"OAuth users cannot change password!\" };\r\n  }\r\n\r\n  const dbUser = await getUserById(user.id as string);\r\n\r\n  if (!dbUser) return { error: \"Unauthorized!\" };\r\n\r\n  const passwordsMatch = await verifyPassword(\r\n    currentPassword,\r\n    dbUser?.password!\r\n  );\r\n\r\n  if (!passwordsMatch) {\r\n    return { error: \"Incorrect password!\" };\r\n  }\r\n\r\n  const hashedPassword = await hashPassword(newPassword);\r\n\r\n  await db.user.update({\r\n    where: { id: dbUser.id },\r\n    data: { password: hashedPassword },\r\n  });\r\n\r\n  return { success: \"Password updated!\" };\r\n};\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/auth-helpers.ts",
      "content": "import { db } from \"@/registry/new-york/dynamic-components/auth/lib/db\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport bcryptjs from \"bcryptjs\";\r\n\r\nexport const hashPassword = async (password: string) => {\r\n  return await bcryptjs.hash(password, 10);\r\n};\r\n\r\nexport const verifyPassword = async (\r\n  inputPassword: string,\r\n  hashedPassword: string\r\n) => {\r\n  return await bcryptjs.compare(inputPassword, hashedPassword);\r\n};\r\n\r\nexport const getVerificationTokenByToken = async (token: string) => {\r\n  try {\r\n    const verificationToken = await db.verificationToken.findUnique({\r\n      where: { token },\r\n    });\r\n\r\n    return verificationToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getVerificationTokenByEmail = async (email: string) => {\r\n  try {\r\n    const verificationToken = await db.verificationToken.findFirst({\r\n      where: { email },\r\n    });\r\n\r\n    return verificationToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const generateVerificationToken = async (\r\n  email: string,\r\n  userId?: string\r\n) => {\r\n  const token = uuidv4();\r\n  const expires = new Date(new Date().getTime() + 3600 * 1000);\r\n\r\n  const existingToken = await getVerificationTokenByEmail(email);\r\n\r\n  if (existingToken) {\r\n    await db.verificationToken.delete({\r\n      where: { id: existingToken.id },\r\n    });\r\n  }\r\n\r\n  const verificationToken = await db.verificationToken.create({\r\n    data: {\r\n      email,\r\n      token,\r\n      expires,\r\n      userId, // Will be undefined for new registrations, populated for email changes\r\n    },\r\n  });\r\n\r\n  return verificationToken;\r\n};\r\n\r\nexport const getPasswordResetTokenByToken = async (token: string) => {\r\n  try {\r\n    const passwordResetToken = await db.passwordResetToken.findUnique({\r\n      where: {\r\n        token,\r\n      },\r\n    });\r\n    return passwordResetToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getPasswordResetTokenByEmail = async (email: string) => {\r\n  try {\r\n    const passwordResetToken = await db.passwordResetToken.findFirst({\r\n      where: {\r\n        email,\r\n      },\r\n    });\r\n    return passwordResetToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const generatePasswordResetToken = async (email: string) => {\r\n  const token = uuidv4();\r\n  const expires = new Date(new Date().getTime() + 3600 * 1000);\r\n\r\n  const existingToken = await getPasswordResetTokenByEmail(email);\r\n\r\n  if (existingToken) {\r\n    await db.passwordResetToken.delete({\r\n      where: { id: existingToken.id },\r\n    });\r\n  }\r\n\r\n  const passwordResetToken = await db.passwordResetToken.create({\r\n    data: {\r\n      email,\r\n      token,\r\n      expires,\r\n    },\r\n  });\r\n\r\n  return passwordResetToken;\r\n};\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/user.ts",
      "content": "import { db } from \"@/registry/new-york/dynamic-components/auth/lib/db\";\r\n\r\nexport const getUserByEmail = async (email: string) => {\r\n  try {\r\n    const user = await db.user.findFirst({\r\n      where: { email },\r\n    });\r\n    return user;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\nexport const getUpdatedEmailUser = async (email: string) => {\r\n  try {\r\n    const user = await db.verificationToken.findFirst({\r\n      where: { email },\r\n    });\r\n    return user;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getUserById = async (id: string) => {\r\n  try {\r\n    const user = await db.user.findFirst({\r\n      where: { id },\r\n    });\r\n    return user;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getAccountByUserId = async (userId: string) => {\r\n  try {\r\n    const account = await db.account.findFirst({\r\n      where: {\r\n        userId,\r\n      },\r\n    });\r\n\r\n    return account;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/auth.ts",
      "content": "import NextAuth from \"next-auth\";\r\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\r\nimport authConfig from \"@/registry/new-york/dynamic-components/auth/lib/auth.config\";\r\nimport { db } from \"@/registry/new-york/dynamic-components/auth/lib/db\";\r\nimport {\r\n  getAccountByUserId,\r\n  getUserById,\r\n} from \"@/registry/new-york/dynamic-components/auth/lib/user\";\r\nimport { getTwoFactorConfirmationByUserId } from \"@/registry/new-york/dynamic-components/auth/actions/two-factor\";\r\n\r\nexport const { auth, handlers, signIn, signOut } = NextAuth({\r\n  pages: {\r\n    signIn: \"/auth/login\",\r\n    error: \"/auth/error\",\r\n  },\r\n  events: {\r\n    async linkAccount({ user }) {\r\n      await db.user.update({\r\n        where: { id: user.id },\r\n        data: { emailVerified: new Date() },\r\n      });\r\n    },\r\n  },\r\n  callbacks: {\r\n    async signIn({ user, account }) {\r\n      //Allow OAuth without email verification\r\n      if (account?.type !== \"credentials\") return true;\r\n      const existingUser = await getUserById(user.id!);\r\n\r\n      //Prevent login if email is not verified\r\n      if (!existingUser?.emailVerified) return false;\r\n\r\n      //2FA Check\r\n      if (existingUser.isTwoFactorEnabled) {\r\n        const twoFactorConfirmation = await getTwoFactorConfirmationByUserId(\r\n          existingUser.id\r\n        );\r\n\r\n        if (!twoFactorConfirmation) return false;\r\n\r\n        // Delete two factor confirmation for next sign in\r\n        await db.twoFactorConfirmation.delete({\r\n          where: { id: twoFactorConfirmation.id },\r\n        });\r\n      }\r\n\r\n      return true;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token.sub && session.user) {\r\n        session.user.id = token.sub;\r\n      }\r\n      if (token.role && session.user) {\r\n        session.user.role = token.role;\r\n      }\r\n\r\n      if (session.user) {\r\n        session.user.isTwoFactorEnabled = token.isTwoFactorEnabled;\r\n      }\r\n\r\n      // model fields that can be updated by the user in the settings page\r\n      if (session.user) {\r\n        session.user.name = token.name;\r\n        session.user.email = token.email as string;\r\n        session.user.isOAuth = token.isOAuth;\r\n        session.user.image = token.image as string;\r\n      }\r\n      return session;\r\n    },\r\n\r\n    async jwt({ token }) {\r\n      if (!token.sub) {\r\n        return token;\r\n      }\r\n\r\n      const existingUser = await getUserById(token.sub);\r\n\r\n      if (!existingUser) {\r\n        return token;\r\n      }\r\n      const existingAccount = await getAccountByUserId(existingUser.id);\r\n\r\n      token.role = existingUser.role;\r\n      token.isTwoFactorEnabled = existingUser.isTwoFactorEnabled;\r\n\r\n      // model fields that can be updated by the user in the settings page\r\n      token.name = existingUser.name;\r\n      token.email = existingUser.email;\r\n      token.image = existingUser.image;\r\n\r\n      // type conversion to boolean\r\n      token.isOAuth = !!existingAccount;\r\n\r\n      return token;\r\n    },\r\n  },\r\n  adapter: PrismaAdapter(db),\r\n  session: { strategy: \"jwt\" },\r\n  ...authConfig,\r\n});\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/next-auth.d.ts",
      "content": "import { UserRole } from \"@prisma/client\";\r\nimport NextAuth, { type DefaultSession } from \"next-auth\";\r\nimport { JWT } from \"next-auth/jwt\";\r\n\r\ndeclare module \"next-auth/jwt\" {\r\n  interface JWT {\r\n    role: UserRole;\r\n    isTwoFactorEnabled: boolean;\r\n    isOAuth: boolean;\r\n  }\r\n}\r\n\r\nexport type ExtendedUser = DefaultSession[\"user\"] & {\r\n  role: UserRole;\r\n  isTwoFactorEnabled: boolean;\r\n  isOAuth: boolean;\r\n};\r\n\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    user: ExtendedUser;\r\n  }\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/routes.ts",
      "content": "export const publicRoutes = [\"/\", \"/auth/verify\"];\r\n\r\n/**\r\n * An array of routes that are accessible only to authenticated users.\r\n * @type {string[]}\r\n */\r\nexport const authRoutes = [\r\n  \"/auth/login\",\r\n  \"/auth/register\",\r\n  \"/auth/error\",\r\n  \"/auth/reset\",\r\n  \"/auth/new-password\",\r\n];\r\n\r\n/**\r\n * An array of routes that are accessible only to admin users.\r\n * @type {string[]}\r\n */\r\nexport const adminRoutes = [\r\n  \"/admin\",\r\n  // Add other admin routes here\r\n];\r\n\r\n/**\r\n * The prefix for all API auth routes.\r\n * @type {string}\r\n */\r\nexport const apiAuthPrefix = \"/api/auth\";\r\n\r\n/**\r\n * The default redirect path after a successful login.\r\n * @type {string}\r\n */\r\nexport const DEFAULT_LOGIN_REDIRECT = \"/dashboard\";\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/auth.config.ts",
      "content": "import Credentials from \"next-auth/providers/credentials\";\r\n\r\nimport { LoginSchema } from \"@/registry/new-york/dynamic-components/auth/schemas\";\r\nimport GitHub from \"next-auth/providers/github\";\r\nimport type { NextAuthConfig } from \"next-auth\";\r\nimport Google from \"next-auth/providers/google\";\r\nimport { getUserByEmail } from \"@/registry/new-york/dynamic-components/auth/lib/user\";\r\nimport { verifyPassword } from \"@/registry/new-york/dynamic-components/auth/lib/auth-helpers\";\r\n\r\nexport default {\r\n  providers: [\r\n    Google({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n    }),\r\n    GitHub({\r\n      clientId: process.env.GITHUB_CLIENT_ID,\r\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\r\n    }),\r\n    Credentials({\r\n      async authorize(credentials) {\r\n        const validatedFields = LoginSchema.safeParse(credentials);\r\n\r\n        if (validatedFields.success) {\r\n          const { email, password } = validatedFields.data;\r\n          const user = await getUserByEmail(email);\r\n\r\n          if (!user || !user.password) return null;\r\n\r\n          const passwordsMatch = await verifyPassword(password, user.password);\r\n\r\n          if (passwordsMatch) return user;\r\n        }\r\n        return null;\r\n      },\r\n    }),\r\n  ],\r\n} satisfies NextAuthConfig;\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/actions/two-factor.ts",
      "content": "import { db } from \"@/registry/new-york/dynamic-components/auth/lib/db\";\r\nimport crypto from \"crypto\";\r\n\r\nexport const getTwoFactorTokenByToken = async (token: string) => {\r\n  try {\r\n    const twoFactorToken = await db.twoFactorToken.findUnique({\r\n      where: { token },\r\n    });\r\n\r\n    return twoFactorToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getTwoFactorTokenByEmail = async (email: string) => {\r\n  try {\r\n    const twoFactorToken = await db.twoFactorToken.findFirst({\r\n      where: { email },\r\n    });\r\n\r\n    return twoFactorToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getTwoFactorConfirmationByUserId = async (userId: string) => {\r\n  try {\r\n    const twoFactorConfirmation = await db.twoFactorConfirmation.findUnique({\r\n      where: { userId },\r\n    });\r\n\r\n    return twoFactorConfirmation;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const generateTwoFactorToken = async (email: string) => {\r\n  const token = crypto.randomInt(100_000, 1_000_000).toString();\r\n\r\n  const expires = new Date(new Date().getTime() + 5 * 60 * 1000); // 5 minute expiry\r\n\r\n  const existingToken = await getTwoFactorTokenByEmail(email);\r\n\r\n  if (existingToken) {\r\n    await db.twoFactorToken.delete({\r\n      where: { id: existingToken.id },\r\n    });\r\n  }\r\n\r\n  const twoFactorToken = await db.twoFactorToken.create({\r\n    data: {\r\n      email,\r\n      token,\r\n      expires,\r\n    },\r\n  });\r\n\r\n  return twoFactorToken;\r\n};\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalThis.prisma = db;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/settings-form.tsx",
      "content": "\"use client\";\r\nimport { useEffect, useTransition, useRef, useState } from \"react\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as z from \"zod\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { SettingsSchema } from \"@/registry/new-york/dynamic-components/auth/schemas\";\r\nimport {\r\n  settings,\r\n  updateUserImage,\r\n} from \"@/registry/new-york/dynamic-components/auth/actions/auth-actions\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormControl,\r\n  FormItem,\r\n  FormLabel,\r\n  FormDescription,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/auth/components/form-success\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/auth/components/form-error\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { Switch } from \"@/registry/new-york/ui/switch\";\r\nimport {\r\n  Avatar,\r\n  AvatarFallback,\r\n  AvatarImage,\r\n} from \"@/registry/new-york/ui/avatar\";\r\nimport { User } from \"lucide-react\";\r\n\r\nexport const SettingsForm = () => {\r\n  const user = useSession().data?.user;\r\n\r\n  const [error, setError] = useState<string | undefined>();\r\n  const [success, setSuccess] = useState<string | undefined>();\r\n  const { update } = useSession();\r\n  const [isPending, startTransition] = useTransition();\r\n  const [isImageUploading, setIsImageUploading] = useState(false);\r\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const form = useForm<z.infer<typeof SettingsSchema>>({\r\n    resolver: zodResolver(SettingsSchema),\r\n    defaultValues: {\r\n      name: user?.name || \"\",\r\n      email: user?.email || \"\",\r\n      isTwoFactorEnabled: user?.isTwoFactorEnabled || undefined,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      form.reset({\r\n        name: user?.name || \"\",\r\n        email: user?.email || \"\",\r\n        isTwoFactorEnabled: user?.isTwoFactorEnabled || undefined,\r\n      });\r\n      // Set the initial image preview if user has an image\r\n      setPreviewUrl(user.image || null);\r\n    }\r\n  }, [user, form]);\r\n\r\n  const onSubmit = (values: z.infer<typeof SettingsSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    const userId = user?.id;\r\n\r\n    if (!userId) {\r\n      setError(\"User ID is required!\");\r\n      return;\r\n    }\r\n\r\n    startTransition(() => {\r\n      settings(userId, values)\r\n        .then((data) => {\r\n          setError(data?.error);\r\n          setSuccess(data?.success);\r\n          if (data?.success) {\r\n            // Update the session to reflect changes\r\n            update();\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Settings update error:\", error);\r\n          setError(\"Something went wrong!\");\r\n        });\r\n    });\r\n  };\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFile = e.target.files?.[0];\r\n\r\n    if (!selectedFile) {\r\n      return;\r\n    }\r\n\r\n    if (!selectedFile.type.startsWith(\"image/\")) {\r\n      setError(\"Please select an image file\");\r\n      return;\r\n    }\r\n\r\n    if (selectedFile.size > 5 * 1024 * 1024) {\r\n      // 5MB limit\r\n      setError(\"Image must be less than 5MB\");\r\n      return;\r\n    }\r\n\r\n    setError(undefined);\r\n\r\n    // Create a preview\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      setPreviewUrl(reader.result as string);\r\n    };\r\n    reader.readAsDataURL(selectedFile);\r\n  };\r\n\r\n  const handleImageUpload = async () => {\r\n    if (!previewUrl || !user?.id) {\r\n      setError(\"Please select an image file\");\r\n      return;\r\n    }\r\n\r\n    setIsImageUploading(true);\r\n    setError(undefined);\r\n    setSuccess(undefined);\r\n\r\n    try {\r\n      // Send the base64 string directly to our server action\r\n      const response = await updateUserImage(user.id, previewUrl);\r\n\r\n      if (response.error) {\r\n        setError(response.error);\r\n      } else if (response.success) {\r\n        setSuccess(response.success);\r\n        // Update the session to reflect changes\r\n        update();\r\n        // Clear the file input\r\n        if (fileInputRef.current) {\r\n          fileInputRef.current.value = \"\";\r\n        }\r\n      }\r\n    } catch (err) {\r\n      setError(\"An error occurred while uploading the image\");\r\n      console.error(err);\r\n    } finally {\r\n      setIsImageUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form className=\"space-y-6\" onSubmit={form.handleSubmit(onSubmit)}>\r\n        <div className=\"space-y-4\">\r\n          {/* Profile Image */}\r\n          <div className=\"space-y-4\">\r\n            <FormLabel>Profile Picture</FormLabel>\r\n            <div className=\"flex flex-col items-center space-y-4\">\r\n              {previewUrl && (\r\n                <Avatar>\r\n                  <AvatarImage src={user?.image || \"\"} />\r\n                  <AvatarFallback className=\"bg-sky-500\">\r\n                    <User className=\"text-white\" />\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n              )}\r\n\r\n              <div className=\"flex flex-col w-full space-y-2\">\r\n                <Input\r\n                  ref={fileInputRef}\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  onChange={handleFileChange}\r\n                  disabled={isImageUploading}\r\n                  className=\"w-full\"\r\n                />\r\n\r\n                <Button\r\n                  type=\"button\"\r\n                  onClick={handleImageUpload}\r\n                  disabled={!previewUrl || isImageUploading}\r\n                  variant=\"outline\"\r\n                  className=\"w-full\"\r\n                >\r\n                  {isImageUploading ? \"Uploading...\" : \"Upload Image\"}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Name Field */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"name\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Name</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    {...field}\r\n                    placeholder=\"John Doe\"\r\n                    disabled={isPending}\r\n                    type=\"text\"\r\n                    className=\"w-full\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Email Field (Only for non-OAuth users) */}\r\n          {!user?.isOAuth && (\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      placeholder=\"john.doe@mail.com\"\r\n                      disabled={isPending}\r\n                      type=\"email\"\r\n                      className=\"w-full\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          )}\r\n\r\n          {/* Two-Factor Authentication (Only for non-OAuth users) */}\r\n          {!user?.isOAuth && (\r\n            <FormField\r\n              control={form.control}\r\n              name=\"isTwoFactorEnabled\"\r\n              render={({ field }) => (\r\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4 shadow-sm\">\r\n                  <div className=\"space-y-0.5\">\r\n                    <FormLabel>Two-Factor Authentication</FormLabel>\r\n                    <FormDescription>\r\n                      Enable two-factor authentication for your account.\r\n                    </FormDescription>\r\n                  </div>\r\n                  <FormControl>\r\n                    <Switch\r\n                      disabled={isPending}\r\n                      checked={field.value}\r\n                      onCheckedChange={field.onChange}\r\n                    />\r\n                  </FormControl>\r\n                </FormItem>\r\n              )}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {/* Error and Success Messages */}\r\n        {error && <FormError message={error} />}\r\n        {success && <FormSuccess message={success} />}\r\n\r\n        {/* Save Button */}\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={isPending}\r\n          className=\"w-full bg-primary hover:bg-primary-dark\"\r\n        >\r\n          {isPending ? \"Saving...\" : \"Save Changes\"}\r\n        </Button>\r\n      </form>\r\n    </Form>\r\n  );\r\n};\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/components/role-gate.tsx",
      "content": "import { currentRole } from \"@/registry/new-york/dynamic-components/auth/lib/get-user\";\r\nimport { UserRole } from \"@prisma/client\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/auth/components/form-error\";\r\n\r\ninterface RoleGateProps {\r\n  children: React.ReactNode;\r\n  allowedRole: UserRole;\r\n}\r\n\r\nexport async function RoleGate({ children, allowedRole }: RoleGateProps) {\r\n  const role = await currentRole();\r\n\r\n  if (role !== allowedRole) {\r\n    return (\r\n      <FormError message=\"You do not have permission to view this content!\" />\r\n    );\r\n  }\r\n  return <>{children}</>;\r\n}\r\n",
      "type": "registry:auth_comp",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/emails/reset-password-email.tsx",
      "content": "import {\r\n  Body,\r\n  Button,\r\n  Container,\r\n  Head,\r\n  Hr,\r\n  Html,\r\n  Preview,\r\n  Section,\r\n  Text,\r\n} from \"@react-email/components\";\r\nimport { Tailwind } from \"@react-email/tailwind\";\r\n\r\ninterface ResetPasswordEmailProps {\r\n  resetLink: string;\r\n}\r\n\r\nexport default function ResetPasswordEmail({\r\n  resetLink,\r\n}: ResetPasswordEmailProps) {\r\n  return (\r\n    <Html>\r\n      <Head />\r\n      <Preview>Reset your password</Preview>\r\n      <Tailwind>\r\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\r\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\r\n            <Section className=\"mt-[32px]\">\r\n              <Text className=\"text-black text-[24px] font-medium mb-[0] mt-[0] mx-[0]\">\r\n                Reset your password\r\n              </Text>\r\n              <Text className=\"text-black text-[14px] leading-[24px]\">\r\n                Click the button below to reset your password.\r\n              </Text>\r\n              <Button\r\n                className=\"bg-blue-600 rounded text-white font-medium py-[8px] px-[20px]\"\r\n                href={resetLink}\r\n              >\r\n                Reset Password\r\n              </Button>\r\n              <Text className=\"text-black text-[14px] leading-[24px]\">\r\n                If you did not request a password reset, you can safely ignore\r\n                this email.\r\n              </Text>\r\n              <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-[0] w-full\" />\r\n              <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\r\n                This link will expire in 1 hour.\r\n              </Text>\r\n            </Section>\r\n          </Container>\r\n        </Body>\r\n      </Tailwind>\r\n    </Html>\r\n  );\r\n}\r\n",
      "type": "registry:email",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/emails/verification-email.tsx",
      "content": "import {\r\n  Body,\r\n  Button,\r\n  Container,\r\n  Head,\r\n  Hr,\r\n  Html,\r\n  Preview,\r\n  Section,\r\n  Text,\r\n} from \"@react-email/components\";\r\nimport { Tailwind } from \"@react-email/tailwind\";\r\n\r\ninterface VerificationEmailProps {\r\n  confirmLink: string;\r\n}\r\n\r\nexport default function VerificationEmail({\r\n  confirmLink,\r\n}: VerificationEmailProps) {\r\n  return (\r\n    <Html>\r\n      <Head />\r\n      <Preview>Verify your email address</Preview>\r\n      <Tailwind>\r\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\r\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\r\n            <Section className=\"mt-[32px]\">\r\n              <Text className=\"text-black text-[24px] font-medium mb-[0] mt-[0] mx-[0]\">\r\n                Verify your email\r\n              </Text>\r\n              <Text className=\"text-black text-[14px] leading-[24px]\">\r\n                Click the button below to verify your email address.\r\n              </Text>\r\n              <Button\r\n                className=\"bg-blue-600 rounded text-white font-medium py-[8px] px-[20px]\"\r\n                href={confirmLink}\r\n              >\r\n                Confirm Email\r\n              </Button>\r\n              <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-[0] w-full\" />\r\n              <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\r\n                This link will expire in 24 hours.\r\n              </Text>\r\n            </Section>\r\n          </Container>\r\n        </Body>\r\n      </Tailwind>\r\n    </Html>\r\n  );\r\n}\r\n",
      "type": "registry:email",
      "target": ""
    },
    {
      "path": "dynamic-components/auth/emails/two-factor-email.tsx",
      "content": "import {\r\n  Body,\r\n  Container,\r\n  Head,\r\n  Hr,\r\n  Html,\r\n  Preview,\r\n  Section,\r\n  Text,\r\n} from \"@react-email/components\";\r\nimport { Tailwind } from \"@react-email/tailwind\";\r\n\r\ninterface TwoFactorAuthEmailProps {\r\n  verificationToken: string;\r\n}\r\n\r\nexport default function TwoFactorAuthEmail({\r\n  verificationToken,\r\n}: TwoFactorAuthEmailProps) {\r\n  return (\r\n    <Html>\r\n      <Head />\r\n      <Preview>Your 2FA Verification Code</Preview>\r\n      <Tailwind>\r\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\r\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\r\n            <Section className=\"mt-[32px]\">\r\n              <Text className=\"text-black text-[24px] font-medium mb-[0] mt-[0] mx-[0]\">\r\n                Two-Factor Authentication\r\n              </Text>\r\n              <Text className=\"text-black text-[14px] leading-[24px]\">\r\n                Your verification code is:\r\n              </Text>\r\n              <Text className=\"text-black text-[24px] font-bold my-[20px] mx-[0]\">\r\n                {verificationToken}\r\n              </Text>\r\n              <Text className=\"text-black text-[14px] leading-[24px]\">\r\n                This code will expire in <strong>5 minutes</strong>. Please use\r\n                it to complete your login process.\r\n              </Text>\r\n              <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-[0] w-full\" />\r\n              <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\r\n                If you did not request this code, please ignore this email.\r\n              </Text>\r\n            </Section>\r\n          </Container>\r\n        </Body>\r\n      </Tailwind>\r\n    </Html>\r\n  );\r\n}\r\n",
      "type": "registry:email",
      "target": ""
    }
  ]
}
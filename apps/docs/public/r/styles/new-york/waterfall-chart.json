{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "waterfall-chart",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "registryDependencies": [
    "card",
    "chart"
  ],
  "files": [
    {
      "path": "charts/waterfall-chart.tsx",
      "content": "\"use client\";\n\nimport { TrendingUp } from \"lucide-react\";\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Cell,\n  ReferenceLine,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n} from \"recharts\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport {\n  type ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/new-york/ui/chart\";\n\nconst chartData = [\n  { name: \"Starting\", value: 4000, isTotal: true },\n  { name: \"Product A\", value: 1000, isTotal: false },\n  { name: \"Product B\", value: 2000, isTotal: false },\n  { name: \"Product C\", value: -500, isTotal: false },\n  { name: \"Product D\", value: 1500, isTotal: false },\n  { name: \"Ending\", value: 4000, isTotal: true },\n];\n\n// Calculate running total for waterfall effect\nconst processedData = chartData.map((item, index, array) => {\n  if (item.isTotal) {\n    return { ...item, start: 0, end: item.value };\n  }\n\n  const start = array\n    .slice(0, index)\n    .reduce(\n      (sum, entry) => (entry.isTotal ? entry.value : sum + entry.value),\n      0,\n    );\n\n  return {\n    ...item,\n    start,\n    end: start + item.value,\n    fill: item.value >= 0 ? \"var(--color-positive)\" : \"var(--color-negative)\",\n  };\n});\n\nconst chartConfig = {\n  value: {\n    label: \"Value\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  total: {\n    label: \"Total\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  positive: {\n    label: \"Increase\",\n    color: \"hsl(var(--chart-3))\",\n  },\n  negative: {\n    label: \"Decrease\",\n    color: \"hsl(var(--destructive))\",\n  },\n} satisfies ChartConfig;\n\n// Custom bar shape to create waterfall effect\nconst CustomBar = (props) => {\n  const { x, y, width, height, value, index, fill, dataKey, ...rest } = props;\n  const item = processedData[index];\n\n  if (item.isTotal) {\n    // Total bars start from 0\n    return (\n      <rect\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        fill={chartConfig.total.color}\n        rx={4}\n        ry={4}\n        {...rest}\n      />\n    );\n  } else {\n    // For waterfall effect, we need to calculate proper y position\n    const yPos =\n      value >= 0\n        ? y // Positive bars grow upward from start\n        : y - height; // Negative bars grow downward from start\n\n    return (\n      <rect\n        x={x}\n        y={yPos}\n        width={width}\n        height={Math.abs(height)}\n        fill={\n          value >= 0 ? chartConfig.positive.color : chartConfig.negative.color\n        }\n        rx={4}\n        ry={4}\n        {...rest}\n      />\n    );\n  }\n};\n\nexport function WaterfallChart() {\n  // Convert data to format needed for the waterfall chart\n  const waterfallData = processedData.map((item) => ({\n    name: item.name,\n    value: item.value,\n    // For proper display, use start value for y-axis positioning\n    displayValue: item.isTotal ? item.value : item.value,\n    isTotal: item.isTotal,\n    // Store both start and end for rendering the connecting lines\n    start: item.start,\n    end: item.end,\n  }));\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Waterfall Chart</CardTitle>\n        <CardDescription>Revenue contribution by product</CardDescription>\n      </CardHeader>\n      <CardContent className=\"h-auto px-0 pb-0\">\n        <ChartContainer config={chartConfig} className=\"w-full h-full\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              accessibilityLayer\n              data={waterfallData}\n              margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n              barGap={0}\n              maxBarSize={50}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n              <XAxis dataKey=\"name\" tickLine={false} axisLine={false} />\n              <YAxis\n                tickLine={false}\n                axisLine={false}\n                tickFormatter={(value) => \"$\" + value}\n              />\n              <ChartTooltip\n                content={\n                  <ChartTooltipContent\n                    formatter={(value, name, props) => {\n                      // Format the tooltip display value\n                      return \"$\" + Math.abs(value).toLocaleString();\n                    }}\n                    labelFormatter={(name) => {\n                      // Add additional context to label\n                      const item = waterfallData.find((d) => d.name === name);\n                      if (item && !item.isTotal) {\n                        return (\n                          name +\n                          \": \" +\n                          (item.value >= 0 ? \"Increase\" : \"Decrease\")\n                        );\n                      }\n                      return name;\n                    }}\n                  />\n                }\n              />\n\n              {/* Draw connecting lines between bars */}\n              {waterfallData.map((entry, index, array) => {\n                if (index < array.length - 1) {\n                  return (\n                    <ReferenceLine\n                      key={\"connector-\" + index}\n                      x={index + 0.5}\n                      y={entry.end}\n                      stroke=\"hsl(var(--border))\"\n                      strokeDasharray=\"3 3\"\n                      strokeWidth={1}\n                      ifOverflow=\"hidden\"\n                    />\n                  );\n                }\n                return null;\n              })}\n\n              {/* Draw horizonal baseline for each non-total item */}\n              {waterfallData.map((entry, index) => {\n                if (!entry.isTotal) {\n                  return (\n                    <ReferenceLine\n                      key={\"baseline-\" + index}\n                      x={index}\n                      y={entry.start}\n                      stroke=\"hsl(var(--border))\"\n                      strokeDasharray=\"3 3\"\n                      strokeWidth={1}\n                    />\n                  );\n                }\n                return null;\n              })}\n\n              <Bar\n                dataKey=\"value\"\n                shape={<CustomBar />}\n                isAnimationActive={true}\n              >\n                {waterfallData.map((entry, index) => (\n                  <Cell\n                    key={\"cell-\" + index}\n                    fill={\n                      entry.isTotal\n                        ? chartConfig.total.color\n                        : entry.value >= 0\n                          ? chartConfig.positive.color\n                          : chartConfig.negative.color\n                    }\n                  />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          100% increase in revenue <TrendingUp className=\"h-4 w-4\" />\n        </div>\n        <div className=\"leading-none text-muted-foreground\">\n          Product B contributed the most to growth\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
      "type": "registry:block",
      "target": ""
    }
  ],
  "categories": [
    "charts",
    "charts-waterfall"
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "waterfall-chart",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "registryDependencies": [
    "card",
    "chart"
  ],
  "files": [
    {
      "path": "charts/waterfall-chart.tsx",
      "content": "\"use client\";\r\n\r\nimport { TrendingUp } from \"lucide-react\";\r\nimport {\r\n  Bar,\r\n  BarChart,\r\n  CartesianGrid,\r\n  Cell,\r\n  ReferenceLine,\r\n  XAxis,\r\n  YAxis,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n} from \"recharts\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport {\r\n  type ChartConfig,\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n} from \"@/registry/new-york/ui/chart\";\r\n\r\nconst chartData = [\r\n  { name: \"Starting\", value: 4000, isTotal: true },\r\n  { name: \"Product A\", value: 1000, isTotal: false },\r\n  { name: \"Product B\", value: 2000, isTotal: false },\r\n  { name: \"Product C\", value: -500, isTotal: false },\r\n  { name: \"Product D\", value: 1500, isTotal: false },\r\n  { name: \"Ending\", value: 4000, isTotal: true },\r\n];\r\n\r\n// Calculate running total for waterfall effect\r\nconst processedData = chartData.map((item, index, array) => {\r\n  if (item.isTotal) {\r\n    return { ...item, start: 0, end: item.value };\r\n  }\r\n\r\n  const start = array\r\n    .slice(0, index)\r\n    .reduce(\r\n      (sum, entry) => (entry.isTotal ? entry.value : sum + entry.value),\r\n      0,\r\n    );\r\n\r\n  return {\r\n    ...item,\r\n    start,\r\n    end: start + item.value,\r\n    fill: item.value >= 0 ? \"var(--color-positive)\" : \"var(--color-negative)\",\r\n  };\r\n});\r\n\r\nconst chartConfig = {\r\n  value: {\r\n    label: \"Value\",\r\n    color: \"hsl(var(--chart-1))\",\r\n  },\r\n  total: {\r\n    label: \"Total\",\r\n    color: \"hsl(var(--chart-2))\",\r\n  },\r\n  positive: {\r\n    label: \"Increase\",\r\n    color: \"hsl(var(--chart-3))\",\r\n  },\r\n  negative: {\r\n    label: \"Decrease\",\r\n    color: \"hsl(var(--destructive))\",\r\n  },\r\n} satisfies ChartConfig;\r\n\r\n// Custom bar shape to create waterfall effect\r\nconst CustomBar = (props) => {\r\n  const { x, y, width, height, value, index, fill, dataKey, ...rest } = props;\r\n  const item = processedData[index];\r\n\r\n  if (item.isTotal) {\r\n    // Total bars start from 0\r\n    return (\r\n      <rect\r\n        x={x}\r\n        y={y}\r\n        width={width}\r\n        height={height}\r\n        fill={chartConfig.total.color}\r\n        rx={4}\r\n        ry={4}\r\n        {...rest}\r\n      />\r\n    );\r\n  } else {\r\n    // For waterfall effect, we need to calculate proper y position\r\n    const yPos =\r\n      value >= 0\r\n        ? y // Positive bars grow upward from start\r\n        : y - height; // Negative bars grow downward from start\r\n\r\n    return (\r\n      <rect\r\n        x={x}\r\n        y={yPos}\r\n        width={width}\r\n        height={Math.abs(height)}\r\n        fill={\r\n          value >= 0 ? chartConfig.positive.color : chartConfig.negative.color\r\n        }\r\n        rx={4}\r\n        ry={4}\r\n        {...rest}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport function WaterfallChart() {\r\n  // Convert data to format needed for the waterfall chart\r\n  const waterfallData = processedData.map((item) => ({\r\n    name: item.name,\r\n    value: item.value,\r\n    // For proper display, use start value for y-axis positioning\r\n    displayValue: item.isTotal ? item.value : item.value,\r\n    isTotal: item.isTotal,\r\n    // Store both start and end for rendering the connecting lines\r\n    start: item.start,\r\n    end: item.end,\r\n  }));\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Waterfall Chart</CardTitle>\r\n        <CardDescription>Revenue contribution by product</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"h-auto px-0 pb-0\">\r\n        <ChartContainer config={chartConfig} className=\"w-full h-full\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart\r\n              accessibilityLayer\r\n              data={waterfallData}\r\n              margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\r\n              barGap={0}\r\n              maxBarSize={50}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\r\n              <XAxis dataKey=\"name\" tickLine={false} axisLine={false} />\r\n              <YAxis\r\n                tickLine={false}\r\n                axisLine={false}\r\n                tickFormatter={(value) => \"$\" + value}\r\n              />\r\n              <ChartTooltip\r\n                content={\r\n                  <ChartTooltipContent\r\n                    formatter={(value, name, props) => {\r\n                      // Format the tooltip display value\r\n                      return \"$\" + Math.abs(value).toLocaleString();\r\n                    }}\r\n                    labelFormatter={(name) => {\r\n                      // Add additional context to label\r\n                      const item = waterfallData.find((d) => d.name === name);\r\n                      if (item && !item.isTotal) {\r\n                        return (\r\n                          name +\r\n                          \": \" +\r\n                          (item.value >= 0 ? \"Increase\" : \"Decrease\")\r\n                        );\r\n                      }\r\n                      return name;\r\n                    }}\r\n                  />\r\n                }\r\n              />\r\n\r\n              {/* Draw connecting lines between bars */}\r\n              {waterfallData.map((entry, index, array) => {\r\n                if (index < array.length - 1) {\r\n                  return (\r\n                    <ReferenceLine\r\n                      key={\"connector-\" + index}\r\n                      x={index + 0.5}\r\n                      y={entry.end}\r\n                      stroke=\"hsl(var(--border))\"\r\n                      strokeDasharray=\"3 3\"\r\n                      strokeWidth={1}\r\n                      ifOverflow=\"hidden\"\r\n                    />\r\n                  );\r\n                }\r\n                return null;\r\n              })}\r\n\r\n              {/* Draw horizonal baseline for each non-total item */}\r\n              {waterfallData.map((entry, index) => {\r\n                if (!entry.isTotal) {\r\n                  return (\r\n                    <ReferenceLine\r\n                      key={\"baseline-\" + index}\r\n                      x={index}\r\n                      y={entry.start}\r\n                      stroke=\"hsl(var(--border))\"\r\n                      strokeDasharray=\"3 3\"\r\n                      strokeWidth={1}\r\n                    />\r\n                  );\r\n                }\r\n                return null;\r\n              })}\r\n\r\n              <Bar\r\n                dataKey=\"value\"\r\n                shape={<CustomBar />}\r\n                isAnimationActive={true}\r\n              >\r\n                {waterfallData.map((entry, index) => (\r\n                  <Cell\r\n                    key={\"cell-\" + index}\r\n                    fill={\r\n                      entry.isTotal\r\n                        ? chartConfig.total.color\r\n                        : entry.value >= 0\r\n                          ? chartConfig.positive.color\r\n                          : chartConfig.negative.color\r\n                    }\r\n                  />\r\n                ))}\r\n              </Bar>\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter className=\"flex-col items-start gap-2 text-sm\">\r\n        <div className=\"flex gap-2 font-medium leading-none\">\r\n          100% increase in revenue <TrendingUp className=\"h-4 w-4\" />\r\n        </div>\r\n        <div className=\"leading-none text-muted-foreground\">\r\n          Product B contributed the most to growth\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:block",
      "target": ""
    }
  ],
  "categories": [
    "charts",
    "charts-waterfall"
  ]
}
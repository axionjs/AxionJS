{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "quiz",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A quiz component with creation, taking, and result viewing functionality.",
  "dependencies": [
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "input",
    "card",
    "textarea",
    "form",
    "select",
    "checkbox",
    "radio-group",
    "separator",
    "use-toast",
    "alert-dialog",
    "progress"
  ],
  "files": [
    {
      "path": "dynamic-components/quiz/actions/quiz-actions.ts",
      "content": "\"use server\";\nimport { revalidatePath } from \"next/cache\";\nimport type {\n  QuizFormData,\n  QuizSubmissionFormData,\n} from \"@/registry/new-york/dynamic-components/quiz/lib/types\";\nimport { db } from \"@/registry/new-york/lib/db\";\n\n// Create a new quiz\nexport async function createQuiz(data: QuizFormData) {\n  try {\n    // In a real app, you would get the user ID from the session\n    const userId = \"user-placeholder-id\";\n\n    const quiz = await db.quiz.create({\n      data: {\n        title: data.title,\n        description: data.description,\n        createdById: userId,\n        questions: {\n          create: data.questions.map((question) => ({\n            text: question.text,\n            type: question.type,\n            points: question.points,\n            options: {\n              create: question.options.map((option) => ({\n                text: option.text,\n                isCorrect: option.isCorrect,\n              })),\n            },\n          })),\n        },\n      },\n      include: {\n        questions: {\n          include: {\n            options: true,\n          },\n        },\n      },\n    });\n\n    revalidatePath(\"/quizzes\");\n    return { success: true, quiz };\n  } catch (error) {\n    console.error(\"Error creating quiz:\", error);\n    return { success: false, error: \"Failed to create quiz\" };\n  }\n}\n\n// Get all quizzes\nexport async function getQuizzes() {\n  try {\n    const quizzes = await db.quiz.findMany({\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n\n    return { success: true, quizzes };\n  } catch (error) {\n    console.error(\"Error fetching quizzes:\", error);\n    return { success: false, error: \"Failed to fetch quizzes\" };\n  }\n}\n\n// Get a quiz by ID\nexport async function getQuizById(id: string) {\n  try {\n    const quiz = await db.quiz.findUnique({\n      where: { id },\n      include: {\n        questions: {\n          include: {\n            options: true,\n          },\n        },\n      },\n    });\n\n    if (!quiz) {\n      return { success: false, error: \"Quiz not found\" };\n    }\n\n    return { success: true, quiz };\n  } catch (error) {\n    console.error(`Error fetching quiz ${id}:`, error);\n    return { success: false, error: \"Failed to fetch quiz\" };\n  }\n}\n\n// Update a quiz\nexport async function updateQuiz(id: string, data: QuizFormData) {\n  try {\n    // First, delete existing questions and options to avoid conflicts\n    await db.question.deleteMany({\n      where: { quizId: id },\n    });\n\n    // Then update the quiz with new questions and options\n    const quiz = await db.quiz.update({\n      where: { id },\n      data: {\n        title: data.title,\n        description: data.description,\n        updatedAt: new Date(),\n        questions: {\n          create: data.questions.map((question) => ({\n            text: question.text,\n            type: question.type,\n            points: question.points,\n            options: {\n              create: question.options.map((option) => ({\n                text: option.text,\n                isCorrect: option.isCorrect,\n              })),\n            },\n          })),\n        },\n      },\n      include: {\n        questions: {\n          include: {\n            options: true,\n          },\n        },\n      },\n    });\n\n    revalidatePath(`/quizzes/${id}`);\n    return { success: true, quiz };\n  } catch (error) {\n    console.error(`Error updating quiz ${id}:`, error);\n    return { success: false, error: \"Failed to update quiz\" };\n  }\n}\n\n// Delete a quiz\nexport async function deleteQuiz(id: string) {\n  try {\n    await db.quiz.delete({\n      where: { id },\n    });\n\n    revalidatePath(\"/quizzes\");\n    return { success: true };\n  } catch (error) {\n    console.error(`Error deleting quiz ${id}:`, error);\n    return { success: false, error: \"Failed to delete quiz\" };\n  }\n}\n\n// Submit a quiz\nexport async function submitQuiz(data: QuizSubmissionFormData) {\n  try {\n    // In a real app, you would get the user ID from the session\n    const userId = \"user-placeholder-id\";\n\n    // Get the quiz to calculate the score\n    const quizResult = await getQuizById(data.quizId);\n\n    if (!quizResult.success || !quizResult.quiz) {\n      return { success: false, error: \"Quiz not found\" };\n    }\n\n    const quiz = quizResult.quiz;\n\n    // Calculate the score\n    let score = 0;\n    let maxScore = 0;\n\n    // Create a map of correct options for each question\n    const correctOptionsMap = new Map();\n\n    quiz.questions.forEach((question) => {\n      maxScore += question.points;\n      const correctOptions = question.options\n        .filter((option) => option.isCorrect)\n        .map((option) => option.id);\n\n      correctOptionsMap.set(question.id, correctOptions);\n    });\n\n    // Check each answer against the correct options\n    data.answers.forEach((answer) => {\n      const correctOptions = correctOptionsMap.get(answer.questionId) || [];\n      const question = quiz.questions.find((q) => q.id === answer.questionId);\n\n      if (!question) return;\n\n      // For single-choice and true-false questions\n      if (question.type === \"single-choice\" || question.type === \"true-false\") {\n        if (\n          answer.selectedOptionIds.length === 1 &&\n          correctOptions.includes(answer.selectedOptionIds[0])\n        ) {\n          score += question.points;\n        }\n      }\n      // For multiple-choice questions\n      else if (question.type === \"multiple-choice\") {\n        // All selected options must be correct and all correct options must be selected\n        const allCorrectSelected = answer.selectedOptionIds.every((id) =>\n          correctOptions.includes(id),\n        );\n\n        const allSelectedCorrect = correctOptions.every((id: string) =>\n          answer.selectedOptionIds.includes(id),\n        );\n\n        if (allCorrectSelected && allSelectedCorrect) {\n          score += question.points;\n        }\n      }\n    });\n\n    // Create the submission\n    const submission = await db.quizSubmission.create({\n      data: {\n        quizId: data.quizId,\n        userId,\n        score,\n        maxScore,\n        completed: true,\n        answers: {\n          create: data.answers.flatMap((answer) =>\n            answer.selectedOptionIds.map((optionId) => ({\n              questionId: answer.questionId,\n              optionId,\n            })),\n          ),\n        },\n      },\n      include: {\n        answers: true,\n      },\n    });\n\n    revalidatePath(`/quizzes/${data.quizId}/results/${submission.id}`);\n    return { success: true, submission, score, maxScore };\n  } catch (error) {\n    console.error(\"Error submitting quiz:\", error);\n    return { success: false, error: \"Failed to submit quiz\" };\n  }\n}\n\n// Get quiz submission by ID\nexport async function getQuizSubmission(submissionId: string) {\n  try {\n    const submission = await db.quizSubmission.findUnique({\n      where: { id: submissionId },\n      include: {\n        quiz: {\n          include: {\n            questions: {\n              include: {\n                options: true,\n              },\n            },\n          },\n        },\n        answers: {\n          include: {\n            question: true,\n            selectedOption: true,\n          },\n        },\n      },\n    });\n\n    if (!submission) {\n      return { success: false, error: \"Submission not found\" };\n    }\n\n    return { success: true, submission };\n  } catch (error) {\n    console.error(`Error fetching submission ${submissionId}:`, error);\n    return { success: false, error: \"Failed to fetch submission\" };\n  }\n}\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/components/quiz-builder.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Trash2, Plus, Save, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Textarea } from \"@/registry/new-york/ui/textarea\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\";\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\nimport { Separator } from \"@/registry/new-york/ui/separator\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport {\n  createQuiz,\n  updateQuiz,\n} from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\nimport type { Quiz } from \"@/registry/new-york/dynamic-components/quiz/lib/types\";\n\n// Define the form validation schema\nconst questionOptionSchema = z.object({\n  id: z.string().optional(),\n  text: z.string().min(1, \"Option text is required\"),\n  isCorrect: z.boolean().default(false),\n});\n\nconst questionSchema = z.object({\n  id: z.string().optional(),\n  text: z.string().min(1, \"Question text is required\"),\n  type: z.enum([\"multiple-choice\", \"single-choice\", \"true-false\"], {\n    required_error: \"Question type is required\",\n  }),\n  points: z.coerce.number().int().positive().default(1),\n  options: z\n    .array(questionOptionSchema)\n    .min(2, \"At least two options are required\"),\n});\n\nconst quizFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  questions: z\n    .array(questionSchema)\n    .min(1, \"At least one question is required\"),\n});\n\ntype QuizFormValues = z.infer<typeof quizFormSchema>;\n\ninterface QuizBuilderProps {\n  quiz?: Quiz;\n  isEditing?: boolean;\n}\n\nexport function QuizBuilder({ quiz, isEditing = false }: QuizBuilderProps) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Initialize form with existing quiz data or defaults\n  const form = useForm<QuizFormValues>({\n    resolver: zodResolver(quizFormSchema),\n    defaultValues: {\n      title: quiz?.title || \"\",\n      description: quiz?.description || \"\",\n      questions: quiz?.questions || [\n        {\n          text: \"\",\n          type: \"single-choice\",\n          points: 1,\n          options: [\n            { text: \"\", isCorrect: false },\n            { text: \"\", isCorrect: false },\n          ],\n        },\n      ],\n    },\n  });\n\n  // Use field array for dynamic questions and options\n  const {\n    fields: questionFields,\n    append: appendQuestion,\n    remove: removeQuestion,\n  } = useFieldArray({\n    control: form.control,\n    name: \"questions\",\n  });\n\n  // Handle form submission\n  const onSubmit = async (data: QuizFormValues) => {\n    setIsSubmitting(true);\n\n    try {\n      // Validate that each question has at least one correct answer\n      const hasInvalidQuestions = data.questions.some((question) => {\n        const correctOptions = question.options.filter(\n          (option) => option.isCorrect,\n        );\n\n        if (question.type === \"multiple-choice\") {\n          return correctOptions.length === 0;\n        } else {\n          return correctOptions.length !== 1;\n        }\n      });\n\n      if (hasInvalidQuestions) {\n        toast({\n          title: \"Validation Error\",\n          description:\n            \"Each question must have at least one correct answer. Single-choice and true-false questions must have exactly one correct answer.\",\n          variant: \"destructive\",\n        });\n        setIsSubmitting(false);\n        return;\n      }\n\n      // Process true-false questions to ensure they have exactly \"True\" and \"False\" options\n      data.questions = data.questions.map((question) => {\n        if (question.type === \"true-false\") {\n          return {\n            ...question,\n            options: [\n              {\n                id: question.options[0]?.id,\n                text: \"True\",\n                isCorrect: question.options[0]?.isCorrect || false,\n              },\n              {\n                id: question.options[1]?.id,\n                text: \"False\",\n                isCorrect: question.options[1]?.isCorrect || false,\n              },\n            ],\n          };\n        }\n        return question;\n      });\n\n      let result;\n      if (isEditing && quiz) {\n        result = await updateQuiz(quiz.id, data);\n      } else {\n        result = await createQuiz(data);\n      }\n\n      if (result.success) {\n        toast({\n          title: isEditing ? \"Quiz Updated\" : \"Quiz Created\",\n          description: isEditing\n            ? \"Your quiz has been updated successfully.\"\n            : \"Your quiz has been created successfully.\",\n        });\n        router.push(\"/quizzes\");\n      } else {\n        throw new Error(result.error || \"Something went wrong\");\n      }\n    } catch (error) {\n      console.error(\"Error saving quiz:\", error);\n      toast({\n        title: \"Error\",\n        description: `Failed to ${isEditing ? \"update\" : \"create\"} quiz. Please try again.`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Add a new question\n  const addQuestion = () => {\n    appendQuestion({\n      text: \"\",\n      type: \"single-choice\",\n      points: 1,\n      options: [\n        { text: \"\", isCorrect: false },\n        { text: \"\", isCorrect: false },\n      ],\n    });\n  };\n\n  // Add a new option to a question\n  const addOption = (questionIndex: number) => {\n    const options = form.getValues(`questions.${questionIndex}.options`);\n    form.setValue(`questions.${questionIndex}.options`, [\n      ...options,\n      { text: \"\", isCorrect: false },\n    ]);\n  };\n\n  // Remove an option from a question\n  const removeOption = (questionIndex: number, optionIndex: number) => {\n    const options = form.getValues(`questions.${questionIndex}.options`);\n    if (options.length <= 2) {\n      toast({\n        title: \"Cannot Remove Option\",\n        description: \"Questions must have at least two options.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newOptions = [...options];\n    newOptions.splice(optionIndex, 1);\n    form.setValue(`questions.${questionIndex}.options`, newOptions);\n  };\n\n  // Handle question type change\n  const handleQuestionTypeChange = (questionIndex: number, type: string) => {\n    if (type === \"true-false\") {\n      // For true-false questions, set exactly two options: \"True\" and \"False\"\n      form.setValue(`questions.${questionIndex}.options`, [\n        { text: \"True\", isCorrect: false },\n        { text: \"False\", isCorrect: false },\n      ]);\n    }\n  };\n\n  // Handle radio option selection (for single-choice and true-false)\n  const handleRadioOptionChange = (\n    questionIndex: number,\n    optionIndex: number,\n  ) => {\n    const options = form.getValues(`questions.${questionIndex}.options`);\n\n    // Set all options to not correct\n    const updatedOptions = options.map((option, idx) => ({\n      ...option,\n      isCorrect: idx === optionIndex,\n    }));\n\n    form.setValue(`questions.${questionIndex}.options`, updatedOptions);\n  };\n\n  return (\n    <div className=\"container max-w-4xl py-6\">\n      <Button\n        variant=\"outline\"\n        className=\"mb-6\"\n        onClick={() => router.push(\"/quizzes\")}\n      >\n        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n        Back to Quizzes\n      </Button>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>{isEditing ? \"Edit Quiz\" : \"Create New Quiz\"}</CardTitle>\n        </CardHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)}>\n            <CardContent className=\"space-y-6\">\n              {/* Quiz Details */}\n              <div className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quiz Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter quiz title\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Enter quiz description\"\n                          className=\"resize-none\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <Separator />\n\n              {/* Questions */}\n              <div className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"text-lg font-medium\">Questions</h3>\n                  <Button\n                    type=\"button\"\n                    onClick={addQuestion}\n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Add Question\n                  </Button>\n                </div>\n\n                {questionFields.map((questionField, questionIndex) => (\n                  <Card key={questionField.id} className=\"border border-muted\">\n                    <CardHeader className=\"bg-muted/50 p-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <CardTitle className=\"text-base\">\n                          Question {questionIndex + 1}\n                        </CardTitle>\n                        <Button\n                          type=\"button\"\n                          onClick={() => removeQuestion(questionIndex)}\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"h-8 w-8 p-0\"\n                          disabled={questionFields.length <= 1}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                          <span className=\"sr-only\">Remove question</span>\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"p-4 space-y-4\">\n                      {/* Question Text */}\n                      <FormField\n                        control={form.control}\n                        name={`questions.${questionIndex}.text`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Question Text</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"Enter your question\"\n                                className=\"resize-none\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* Question Type */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name={`questions.${questionIndex}.type`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Question Type</FormLabel>\n                              <Select\n                                onValueChange={(value) => {\n                                  field.onChange(value);\n                                  handleQuestionTypeChange(\n                                    questionIndex,\n                                    value,\n                                  );\n                                }}\n                                defaultValue={field.value}\n                              >\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select question type\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"single-choice\">\n                                    Single Choice\n                                  </SelectItem>\n                                  <SelectItem value=\"multiple-choice\">\n                                    Multiple Choice\n                                  </SelectItem>\n                                  <SelectItem value=\"true-false\">\n                                    True/False\n                                  </SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name={`questions.${questionIndex}.points`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Points</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  min=\"1\"\n                                  step=\"1\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      {/* Options */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <FormLabel>Options</FormLabel>\n                          {form.watch(`questions.${questionIndex}.type`) !==\n                            \"true-false\" && (\n                            <Button\n                              type=\"button\"\n                              onClick={() => addOption(questionIndex)}\n                              variant=\"outline\"\n                              size=\"sm\"\n                            >\n                              <Plus className=\"mr-2 h-3 w-3\" />\n                              Add Option\n                            </Button>\n                          )}\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          {form\n                            .watch(`questions.${questionIndex}.options`)\n                            ?.map((option, optionIndex) => (\n                              <div\n                                key={optionIndex}\n                                className=\"flex items-center space-x-2\"\n                              >\n                                {/* Option Correctness */}\n                                {form.watch(\n                                  `questions.${questionIndex}.type`,\n                                ) === \"multiple-choice\" ? (\n                                  <FormField\n                                    control={form.control}\n                                    name={`questions.${questionIndex}.options.${optionIndex}.isCorrect`}\n                                    render={({ field }) => (\n                                      <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                                        <FormControl>\n                                          <Checkbox\n                                            checked={field.value}\n                                            onCheckedChange={field.onChange}\n                                          />\n                                        </FormControl>\n                                      </FormItem>\n                                    )}\n                                  />\n                                ) : (\n                                  <RadioGroup\n                                    value={form\n                                      .watch(\n                                        `questions.${questionIndex}.options`,\n                                      )\n                                      .findIndex((opt) => opt.isCorrect)\n                                      .toString()}\n                                    onValueChange={(value) =>\n                                      handleRadioOptionChange(\n                                        questionIndex,\n                                        Number.parseInt(value),\n                                      )\n                                    }\n                                    className=\"flex items-center space-x-2\"\n                                  >\n                                    <RadioGroupItem\n                                      value={optionIndex.toString()}\n                                      id={`q${questionIndex}-opt${optionIndex}`}\n                                    />\n                                  </RadioGroup>\n                                )}\n\n                                {/* Option Text */}\n                                <div className=\"flex-1\">\n                                  <FormField\n                                    control={form.control}\n                                    name={`questions.${questionIndex}.options.${optionIndex}.text`}\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormControl>\n                                          <Input\n                                            placeholder={`Option ${optionIndex + 1}`}\n                                            {...field}\n                                            disabled={\n                                              form.watch(\n                                                `questions.${questionIndex}.type`,\n                                              ) === \"true-false\"\n                                            }\n                                          />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                </div>\n\n                                {/* Remove Option Button */}\n                                {form.watch(\n                                  `questions.${questionIndex}.type`,\n                                ) !== \"true-false\" && (\n                                  <Button\n                                    type=\"button\"\n                                    onClick={() =>\n                                      removeOption(questionIndex, optionIndex)\n                                    }\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"h-8 w-8 p-0\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                    <span className=\"sr-only\">\n                                      Remove option\n                                    </span>\n                                  </Button>\n                                )}\n                              </div>\n                            ))}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex justify-between\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => router.push(\"/quizzes\")}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? (\n                  <>Saving...</>\n                ) : (\n                  <>\n                    <Save className=\"mr-2 h-4 w-4\" />\n                    {isEditing ? \"Update Quiz\" : \"Create Quiz\"}\n                  </>\n                )}\n              </Button>\n            </CardFooter>\n          </form>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/components/quiz-list.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Edit, Trash2, Play, Plus } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/registry/new-york/ui/alert-dialog\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport { deleteQuiz } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\nimport type { Quiz } from \"@/registry/new-york/dynamic-components/quiz/lib/types\";\n\ninterface QuizListProps {\n  quizzes: Quiz[];\n}\n\nexport function QuizList({ quizzes }: QuizListProps) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [isDeleting, setIsDeleting] = useState<string | null>(null);\n\n  // Handle quiz deletion\n  const handleDeleteQuiz = async (quizId: string) => {\n    setIsDeleting(quizId);\n\n    try {\n      const result = await deleteQuiz(quizId);\n\n      if (result.success) {\n        toast({\n          title: \"Quiz Deleted\",\n          description: \"The quiz has been deleted successfully.\",\n        });\n        router.refresh();\n      } else {\n        throw new Error(result.error || \"Something went wrong\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting quiz:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete quiz. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDeleting(null);\n    }\n  };\n\n  return (\n    <div className=\"container py-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-bold\">Your Quizzes</h1>\n        <Button onClick={() => router.push(\"/quizzes/create\")}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Create Quiz\n        </Button>\n      </div>\n\n      {quizzes.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <p className=\"text-muted-foreground mb-4\">\n              You haven't created any quizzes yet.\n            </p>\n            <Button onClick={() => router.push(\"/quizzes/create\")}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Your First Quiz\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {quizzes.map((quiz) => (\n            <Card key={quiz.id}>\n              <CardHeader>\n                <CardTitle className=\"line-clamp-1\">{quiz.title}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground line-clamp-2\">\n                  {quiz.description || \"No description provided.\"}\n                </p>\n              </CardContent>\n              <CardFooter className=\"flex justify-between\">\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => router.push(`/quizzes/${quiz.id}`)}\n                  >\n                    <Edit className=\"h-4 w-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        Delete\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Delete Quiz</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to delete this quiz? This action\n                          cannot be undone.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => handleDeleteQuiz(quiz.id)}\n                          disabled={isDeleting === quiz.id}\n                        >\n                          {isDeleting === quiz.id ? \"Deleting...\" : \"Delete\"}\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  onClick={() => router.push(`/quizzes/${quiz.id}/take`)}\n                >\n                  <Play className=\"h-4 w-4 mr-1\" />\n                  Take Quiz\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/components/quiz-results.tsx",
      "content": "\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport { ArrowLeft, CheckCircle, XCircle } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport { Progress } from \"@/registry/new-york/ui/progress\";\nimport { Separator } from \"@/registry/new-york/ui/separator\";\nimport type { QuizSubmission } from \"@/registry/new-york/dynamic-components/quiz/lib/types\";\n\ninterface QuizResultsProps {\n  submission: QuizSubmission;\n}\n\nexport function QuizResults({ submission }: QuizResultsProps) {\n  const router = useRouter();\n\n  // Calculate score percentage\n  const scorePercentage = submission.maxScore\n    ? Math.round(((submission.score || 0) / submission.maxScore) * 100)\n    : 0;\n\n  // Group answers by question\n  const answersByQuestion = submission.answers.reduce(\n    (acc, answer) => {\n      if (!acc[answer.questionId]) {\n        acc[answer.questionId] = [];\n      }\n      if (answer.optionId) {\n        acc[answer.questionId].push(answer.optionId);\n      }\n      return acc;\n    },\n    {} as Record<string, string[]>,\n  );\n\n  return (\n    <div className=\"container max-w-3xl py-6\">\n      <Button\n        variant=\"outline\"\n        className=\"mb-6\"\n        onClick={() => router.push(\"/quizzes\")}\n      >\n        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n        Back to Quizzes\n      </Button>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>{submission.quiz.title} - Results</CardTitle>\n          <div className=\"mt-4\">\n            <div className=\"flex justify-between text-sm mb-1\">\n              <span>\n                Score: {submission.score} / {submission.maxScore}\n              </span>\n              <span>{scorePercentage}%</span>\n            </div>\n            <Progress\n              value={scorePercentage}\n              className={`h-2 ${\n                scorePercentage >= 70\n                  ? \"bg-green-600\"\n                  : scorePercentage >= 40\n                    ? \"bg-yellow-500\"\n                    : \"bg-red-500\"\n              }`}\n            />\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {submission?.quiz?.questions.map((question, index) => {\n            // Get user's answers for this question\n            const userAnswers = answersByQuestion[question.id] || [];\n\n            // Get correct answers for this question\n            const correctAnswers = question.options\n              .filter((option) => option.isCorrect)\n              .map((option) => option.id);\n\n            // Check if user answered correctly\n            const isCorrect =\n              question.type === \"multiple-choice\"\n                ? userAnswers.length === correctAnswers.length &&\n                  userAnswers.every((id) => correctAnswers.includes(id)) &&\n                  correctAnswers.every((id) => userAnswers.includes(id))\n                : userAnswers.length === 1 &&\n                  correctAnswers.includes(userAnswers[0]);\n\n            return (\n              <div key={question.id} className=\"border rounded-lg p-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <h3 className=\"text-lg font-medium\">\n                      Question {index + 1}\n                    </h3>\n                    <p className=\"mt-1\">{question.text}</p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    {isCorrect ? (\n                      <CheckCircle className=\"h-6 w-6 text-green-500\" />\n                    ) : (\n                      <XCircle className=\"h-6 w-6 text-red-500\" />\n                    )}\n                    <span className=\"ml-2 font-medium\">\n                      {isCorrect ? `+${question.points}` : \"0\"} /{\" \"}\n                      {question.points}\n                    </span>\n                  </div>\n                </div>\n\n                <Separator className=\"my-3\" />\n\n                <div className=\"space-y-2\">\n                  {question.options.map((option) => {\n                    const isUserSelected = userAnswers.includes(option.id);\n                    const isCorrectOption = option.isCorrect;\n\n                    return (\n                      <div\n                        key={option.id}\n                        className={`p-2 rounded-md ${\n                          isUserSelected && isCorrectOption\n                            ? \"bg-green-100 dark:bg-green-900/20\"\n                            : isUserSelected && !isCorrectOption\n                              ? \"bg-red-100 dark:bg-red-900/20\"\n                              : !isUserSelected && isCorrectOption\n                                ? \"bg-blue-100 dark:bg-blue-900/20\"\n                                : \"\"\n                        }`}\n                      >\n                        <div className=\"flex items-center\">\n                          <div className=\"mr-2\">\n                            {isUserSelected && isCorrectOption && (\n                              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                            )}\n                            {isUserSelected && !isCorrectOption && (\n                              <XCircle className=\"h-4 w-4 text-red-500\" />\n                            )}\n                            {!isUserSelected && isCorrectOption && (\n                              <CheckCircle className=\"h-4 w-4 text-blue-500\" />\n                            )}\n                          </div>\n                          <span>{option.text}</span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </CardContent>\n        <CardFooter className=\"flex justify-center\">\n          <Button\n            onClick={() => router.push(`/quizzes/${submission.quiz.id}/take`)}\n          >\n            Retake Quiz\n          </Button>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/components/quiz-taker.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { ArrowLeft, ArrowRight, Check } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\nimport { Progress } from \"@/registry/new-york/ui/progress\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport { submitQuiz } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\nimport type { Quiz } from \"@/registry/new-york/dynamic-components/quiz/lib/types\";\n\ninterface QuizTakerProps {\n  quiz: Quiz;\n}\n\nexport function QuizTaker({ quiz }: QuizTakerProps) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<Record<string, string[]>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const currentQuestion = quiz.questions[currentQuestionIndex];\n  const totalQuestions = quiz.questions.length;\n  const progressPercentage =\n    (currentQuestionIndex / (totalQuestions - 1)) * 100;\n\n  // Handle next question\n  const nextQuestion = () => {\n    if (currentQuestionIndex < totalQuestions - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  // Handle previous question\n  const prevQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  // Handle option selection for single-choice and true-false questions\n  const handleSingleOptionSelect = (questionId: string, optionId: string) => {\n    setAnswers({\n      ...answers,\n      [questionId]: [optionId],\n    });\n  };\n\n  // Handle option selection for multiple-choice questions\n  const handleMultipleOptionSelect = (\n    questionId: string,\n    optionId: string,\n    isChecked: boolean,\n  ) => {\n    const currentAnswers = answers[questionId] || [];\n\n    if (isChecked) {\n      setAnswers({\n        ...answers,\n        [questionId]: [...currentAnswers, optionId],\n      });\n    } else {\n      setAnswers({\n        ...answers,\n        [questionId]: currentAnswers.filter((id) => id !== optionId),\n      });\n    }\n  };\n\n  // Check if all questions have been answered\n  const isQuizComplete = () => {\n    return quiz.questions.every((question) => {\n      const questionAnswers = answers[question.id] || [];\n      return questionAnswers.length > 0;\n    });\n  };\n\n  // Handle quiz submission\n  const handleSubmit = async () => {\n    if (!isQuizComplete()) {\n      toast({\n        title: \"Incomplete Quiz\",\n        description: \"Please answer all questions before submitting.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const result = await submitQuiz({\n        quizId: quiz.id,\n        answers: Object.entries(answers).map(\n          ([questionId, selectedOptionIds]) => ({\n            questionId,\n            selectedOptionIds,\n          }),\n        ),\n      });\n\n      if (result.success) {\n        toast({\n          title: \"Quiz Submitted\",\n          description: \"Your quiz has been submitted successfully.\",\n        });\n        router.push(`/quizzes/${quiz.id}/results/${result.submission?.id}`);\n      } else {\n        throw new Error(result.error || \"Something went wrong\");\n      }\n    } catch (error) {\n      console.error(\"Error submitting quiz:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit quiz. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"container max-w-3xl py-6\">\n      <Button\n        variant=\"outline\"\n        className=\"mb-6\"\n        onClick={() => router.push(\"/quizzes\")}\n      >\n        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n        Back to Quizzes\n      </Button>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>{quiz.title}</CardTitle>\n          {quiz.description && (\n            <p className=\"text-muted-foreground\">{quiz.description}</p>\n          )}\n          <div className=\"mt-4\">\n            <div className=\"flex justify-between text-sm mb-1\">\n              <span>\n                Question {currentQuestionIndex + 1} of {totalQuestions}\n              </span>\n              <span>\n                {currentQuestion.points}{\" \"}\n                {currentQuestion.points === 1 ? \"point\" : \"points\"}\n              </span>\n            </div>\n            <Progress value={progressPercentage} className=\"h-2\" />\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-medium\">{currentQuestion.text}</h3>\n\n            {/* Options */}\n            <div className=\"space-y-3\">\n              {currentQuestion.type === \"multiple-choice\" ? (\n                // Multiple choice options (checkboxes)\n                currentQuestion.options.map((option) => (\n                  <div key={option.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={option.id}\n                      checked={(answers[currentQuestion.id] || []).includes(\n                        option.id,\n                      )}\n                      onCheckedChange={(checked) =>\n                        handleMultipleOptionSelect(\n                          currentQuestion.id,\n                          option.id,\n                          checked === true,\n                        )\n                      }\n                    />\n                    <label\n                      htmlFor={option.id}\n                      className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                    >\n                      {option.text}\n                    </label>\n                  </div>\n                ))\n              ) : (\n                // Single choice or true-false options (radio buttons)\n                <RadioGroup\n                  value={(answers[currentQuestion.id] || [])[0] || \"\"}\n                  onValueChange={(value) =>\n                    handleSingleOptionSelect(currentQuestion.id, value)\n                  }\n                >\n                  {currentQuestion.options.map((option) => (\n                    <div\n                      key={option.id}\n                      className=\"flex items-center space-x-2\"\n                    >\n                      <RadioGroupItem value={option.id} id={option.id} />\n                      <label\n                        htmlFor={option.id}\n                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                      >\n                        {option.text}\n                      </label>\n                    </div>\n                  ))}\n                </RadioGroup>\n              )}\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter className=\"flex justify-between\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={prevQuestion}\n            disabled={currentQuestionIndex === 0}\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Previous\n          </Button>\n\n          {currentQuestionIndex < totalQuestions - 1 ? (\n            <Button type=\"button\" onClick={nextQuestion}>\n              Next\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </Button>\n          ) : (\n            <Button\n              type=\"button\"\n              onClick={handleSubmit}\n              disabled={isSubmitting}\n            >\n              {isSubmitting ? (\n                <>Submitting...</>\n              ) : (\n                <>\n                  <Check className=\"mr-2 h-4 w-4\" />\n                  Submit Quiz\n                </>\n              )}\n            </Button>\n          )}\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/lib/types.ts",
      "content": "export type QuestionType = \"multiple-choice\" | \"single-choice\" | \"true-false\";\n\nexport interface QuestionOption {\n  id: string;\n  text: string;\n  isCorrect: boolean;\n}\n\nexport interface Question {\n  id: string;\n  text: string;\n  type: QuestionType;\n  points: number;\n  options: QuestionOption[];\n}\n\nexport interface Quiz {\n  id: string;\n  title: string;\n  description?: string;\n  questions: Question[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface QuizSubmission {\n  id: string;\n  quizId: string;\n  userId: string;\n  score?: number;\n  maxScore?: number;\n  completed: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n  answers: Answer[];\n}\n\nexport interface Answer {\n  id: string;\n  questionId: string;\n  optionId?: string;\n  submissionId: string;\n}\n\nexport interface QuizFormData {\n  title: string;\n  description?: string;\n  questions: QuestionFormData[];\n}\n\nexport interface QuestionFormData {\n  id?: string;\n  text: string;\n  type: QuestionType;\n  points: number;\n  options: QuestionOptionFormData[];\n}\n\nexport interface QuestionOptionFormData {\n  id?: string;\n  text: string;\n  isCorrect: boolean;\n}\n\nexport interface QuizSubmissionFormData {\n  quizId: string;\n  answers: {\n    questionId: string;\n    selectedOptionIds: string[];\n  }[];\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/quizzes/[id]/results/[submissionId]/page.tsx",
      "content": "import { notFound } from \"next/navigation\";\nimport { getQuizSubmission } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\nimport { QuizResults } from \"@/registry/new-york/dynamic-components/quiz/components/quiz-results\";\n\ninterface QuizResultsPageProps {\n  params: {\n    id: string;\n    submissionId: string;\n  };\n}\n\nexport default async function QuizResultsPage({\n  params,\n}: QuizResultsPageProps) {\n  const result = await getQuizSubmission(params.submissionId);\n  const submission = result.success ? result.submission : null;\n\n  if (!submission || submission.quiz.id !== params.id) {\n    notFound();\n  }\n\n  return (\n    <div className=\"container mx-auto px-24\">\n      <QuizResults submission={submission} />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(quiz)/quizzes/[id]/results/[submissionId]/page.tsx"
    },
    {
      "path": "dynamic-components/quiz/quizzes/[id]/take/page.tsx",
      "content": "import { notFound } from \"next/navigation\";\nimport { getQuizById } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\nimport { QuizTaker } from \"@/registry/new-york/dynamic-components/quiz/components/quiz-taker\";\n\ninterface QuizTakePageProps {\n  params: {\n    id: string;\n  };\n}\n\nexport default async function QuizTakePage({ params }: QuizTakePageProps) {\n  const result = await getQuizById(params.id);\n  const quiz = result.success ? result.quiz : null;\n\n  if (!quiz) {\n    notFound();\n  }\n\n  return (\n    <div className=\"container mx-auto px-24\">\n      <QuizTaker quiz={quiz} />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(quiz)/quizzes/[id]/take/page.tsx"
    },
    {
      "path": "dynamic-components/quiz/quizzes/[id]/page.tsx",
      "content": "import { notFound } from \"next/navigation\";\nimport { getQuizById } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\nimport { QuizBuilder } from \"@/registry/new-york/dynamic-components/quiz/components/quiz-builder\";\n\ninterface QuizEditPageProps {\n  params: {\n    id: string;\n  };\n}\n\nexport default async function QuizEditPage({ params }: QuizEditPageProps) {\n  const result = await getQuizById(params.id);\n  const quiz = result.success ? result.quiz : null;\n\n  if (!quiz) {\n    notFound();\n  }\n\n  return (\n    <div className=\"container mx-auto px-24\">\n      <QuizBuilder quiz={quiz} isEditing />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(quiz)/quizzes/[id]/page.tsx"
    },
    {
      "path": "dynamic-components/quiz/quizzes/create/page.tsx",
      "content": "import { QuizBuilder } from \"@/registry/new-york/dynamic-components/quiz/components/quiz-builder\";\n\nexport default function CreateQuizPage() {\n  return (\n    <div className=\"container mx-auto px-24\">\n      <QuizBuilder />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(quiz)/quizzes/create/page.tsx"
    },
    {
      "path": "dynamic-components/quiz/quizzes/page.tsx",
      "content": "import { Suspense } from \"react\";\nimport { getQuizzes } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\nimport { QuizList } from \"@/registry/new-york/dynamic-components/quiz/components/quiz-list\";\n\nexport const dynamic = \"force-dynamic\";\n\nexport default async function QuizzesPage() {\n  const { quizzes = [] } = await getQuizzes().then((res) =>\n    res.success ? res : { quizzes: [] },\n  );\n\n  const quizzesWithQuestions = quizzes.map((quiz: any) => ({\n    ...quiz,\n    questions: quiz.questions ?? [],\n  }));\n\n  return (\n    <Suspense fallback={<div>Loading quizzes...</div>}>\n      <div className=\"container mx-auto px-24\">\n        <QuizList quizzes={quizzesWithQuestions} />\n      </div>\n    </Suspense>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(quiz)/quizzes/page.tsx"
    }
  ]
}
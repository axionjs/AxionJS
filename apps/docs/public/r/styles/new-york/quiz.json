{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "quiz",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A quiz component with creation, taking, and result viewing functionality.",
  "dependencies": [
    "prisma",
    "@prisma/client"
  ],
  "registryDependencies": [
    "button",
    "input",
    "card",
    "textarea",
    "form",
    "select",
    "checkbox",
    "radio-group",
    "separator",
    "use-toast",
    "alert-dialog",
    "progress"
  ],
  "files": [
    {
      "path": "dynamic-components/quiz/actions/quiz-actions.ts",
      "content": "\"use server\";\r\nimport { revalidatePath } from \"next/cache\";\r\nimport type {\r\n  QuizFormData,\r\n  QuizSubmissionFormData,\r\n} from \"@/registry/new-york/dynamic-components/quiz/lib/types\";\r\nimport { db } from \"@/registry/new-york/lib/db\";\r\n\r\n// Create a new quiz\r\nexport async function createQuiz(data: QuizFormData) {\r\n  try {\r\n    // In a real app, you would get the user ID from the session\r\n    const userId = \"user-placeholder-id\";\r\n\r\n    const quiz = await db.quiz.create({\r\n      data: {\r\n        title: data.title,\r\n        description: data.description,\r\n        createdById: userId,\r\n        questions: {\r\n          create: data.questions.map((question) => ({\r\n            text: question.text,\r\n            type: question.type,\r\n            points: question.points,\r\n            options: {\r\n              create: question.options.map((option) => ({\r\n                text: option.text,\r\n                isCorrect: option.isCorrect,\r\n              })),\r\n            },\r\n          })),\r\n        },\r\n      },\r\n      include: {\r\n        questions: {\r\n          include: {\r\n            options: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    revalidatePath(\"/quizzes\");\r\n    return { success: true, quiz };\r\n  } catch (error) {\r\n    console.error(\"Error creating quiz:\", error);\r\n    return { success: false, error: \"Failed to create quiz\" };\r\n  }\r\n}\r\n\r\n// Get all quizzes\r\nexport async function getQuizzes() {\r\n  try {\r\n    const quizzes = await db.quiz.findMany({\r\n      orderBy: {\r\n        createdAt: \"desc\",\r\n      },\r\n    });\r\n\r\n    return { success: true, quizzes };\r\n  } catch (error) {\r\n    console.error(\"Error fetching quizzes:\", error);\r\n    return { success: false, error: \"Failed to fetch quizzes\" };\r\n  }\r\n}\r\n\r\n// Get a quiz by ID\r\nexport async function getQuizById(id: string) {\r\n  try {\r\n    const quiz = await db.quiz.findUnique({\r\n      where: { id },\r\n      include: {\r\n        questions: {\r\n          include: {\r\n            options: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!quiz) {\r\n      return { success: false, error: \"Quiz not found\" };\r\n    }\r\n\r\n    return { success: true, quiz };\r\n  } catch (error) {\r\n    console.error(`Error fetching quiz ${id}:`, error);\r\n    return { success: false, error: \"Failed to fetch quiz\" };\r\n  }\r\n}\r\n\r\n// Update a quiz\r\nexport async function updateQuiz(id: string, data: QuizFormData) {\r\n  try {\r\n    // First, delete existing questions and options to avoid conflicts\r\n    await db.question.deleteMany({\r\n      where: { quizId: id },\r\n    });\r\n\r\n    // Then update the quiz with new questions and options\r\n    const quiz = await db.quiz.update({\r\n      where: { id },\r\n      data: {\r\n        title: data.title,\r\n        description: data.description,\r\n        updatedAt: new Date(),\r\n        questions: {\r\n          create: data.questions.map((question) => ({\r\n            text: question.text,\r\n            type: question.type,\r\n            points: question.points,\r\n            options: {\r\n              create: question.options.map((option) => ({\r\n                text: option.text,\r\n                isCorrect: option.isCorrect,\r\n              })),\r\n            },\r\n          })),\r\n        },\r\n      },\r\n      include: {\r\n        questions: {\r\n          include: {\r\n            options: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    revalidatePath(`/quizzes/${id}`);\r\n    return { success: true, quiz };\r\n  } catch (error) {\r\n    console.error(`Error updating quiz ${id}:`, error);\r\n    return { success: false, error: \"Failed to update quiz\" };\r\n  }\r\n}\r\n\r\n// Delete a quiz\r\nexport async function deleteQuiz(id: string) {\r\n  try {\r\n    await db.quiz.delete({\r\n      where: { id },\r\n    });\r\n\r\n    revalidatePath(\"/quizzes\");\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(`Error deleting quiz ${id}:`, error);\r\n    return { success: false, error: \"Failed to delete quiz\" };\r\n  }\r\n}\r\n\r\n// Submit a quiz\r\nexport async function submitQuiz(data: QuizSubmissionFormData) {\r\n  try {\r\n    // In a real app, you would get the user ID from the session\r\n    const userId = \"user-placeholder-id\";\r\n\r\n    // Get the quiz to calculate the score\r\n    const quizResult = await getQuizById(data.quizId);\r\n\r\n    if (!quizResult.success || !quizResult.quiz) {\r\n      return { success: false, error: \"Quiz not found\" };\r\n    }\r\n\r\n    const quiz = quizResult.quiz;\r\n\r\n    // Calculate the score\r\n    let score = 0;\r\n    let maxScore = 0;\r\n\r\n    // Create a map of correct options for each question\r\n    const correctOptionsMap = new Map();\r\n\r\n    quiz.questions.forEach((question) => {\r\n      maxScore += question.points;\r\n      const correctOptions = question.options\r\n        .filter((option) => option.isCorrect)\r\n        .map((option) => option.id);\r\n\r\n      correctOptionsMap.set(question.id, correctOptions);\r\n    });\r\n\r\n    // Check each answer against the correct options\r\n    data.answers.forEach((answer) => {\r\n      const correctOptions = correctOptionsMap.get(answer.questionId) || [];\r\n      const question = quiz.questions.find((q) => q.id === answer.questionId);\r\n\r\n      if (!question) return;\r\n\r\n      // For single-choice and true-false questions\r\n      if (question.type === \"single-choice\" || question.type === \"true-false\") {\r\n        if (\r\n          answer.selectedOptionIds.length === 1 &&\r\n          correctOptions.includes(answer.selectedOptionIds[0])\r\n        ) {\r\n          score += question.points;\r\n        }\r\n      }\r\n      // For multiple-choice questions\r\n      else if (question.type === \"multiple-choice\") {\r\n        // All selected options must be correct and all correct options must be selected\r\n        const allCorrectSelected = answer.selectedOptionIds.every((id) =>\r\n          correctOptions.includes(id),\r\n        );\r\n\r\n        const allSelectedCorrect = correctOptions.every((id: string) =>\r\n          answer.selectedOptionIds.includes(id),\r\n        );\r\n\r\n        if (allCorrectSelected && allSelectedCorrect) {\r\n          score += question.points;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create the submission\r\n    const submission = await db.quizSubmission.create({\r\n      data: {\r\n        quizId: data.quizId,\r\n        userId,\r\n        score,\r\n        maxScore,\r\n        completed: true,\r\n        answers: {\r\n          create: data.answers.flatMap((answer) =>\r\n            answer.selectedOptionIds.map((optionId) => ({\r\n              questionId: answer.questionId,\r\n              optionId,\r\n            })),\r\n          ),\r\n        },\r\n      },\r\n      include: {\r\n        answers: true,\r\n      },\r\n    });\r\n\r\n    revalidatePath(`/quizzes/${data.quizId}/results/${submission.id}`);\r\n    return { success: true, submission, score, maxScore };\r\n  } catch (error) {\r\n    console.error(\"Error submitting quiz:\", error);\r\n    return { success: false, error: \"Failed to submit quiz\" };\r\n  }\r\n}\r\n\r\n// Get quiz submission by ID\r\nexport async function getQuizSubmission(submissionId: string) {\r\n  try {\r\n    const submission = await db.quizSubmission.findUnique({\r\n      where: { id: submissionId },\r\n      include: {\r\n        quiz: {\r\n          include: {\r\n            questions: {\r\n              include: {\r\n                options: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n        answers: {\r\n          include: {\r\n            question: true,\r\n            selectedOption: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!submission) {\r\n      return { success: false, error: \"Submission not found\" };\r\n    }\r\n\r\n    return { success: true, submission };\r\n  } catch (error) {\r\n    console.error(`Error fetching submission ${submissionId}:`, error);\r\n    return { success: false, error: \"Failed to fetch submission\" };\r\n  }\r\n}\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalThis.prisma = db;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/components/quiz-builder.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useForm, useFieldArray } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport { Trash2, Plus, Save, ArrowLeft } from \"lucide-react\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { Textarea } from \"@/registry/new-york/ui/textarea\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/registry/new-york/ui/select\";\r\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\r\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\r\nimport { Separator } from \"@/registry/new-york/ui/separator\";\r\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\nimport {\r\n  createQuiz,\r\n  updateQuiz,\r\n} from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\r\nimport type { Quiz } from \"@/registry/new-york/dynamic-components/quiz/lib/types\";\r\n\r\n// Define the form validation schema\r\nconst questionOptionSchema = z.object({\r\n  id: z.string().optional(),\r\n  text: z.string().min(1, \"Option text is required\"),\r\n  isCorrect: z.boolean().default(false),\r\n});\r\n\r\nconst questionSchema = z.object({\r\n  id: z.string().optional(),\r\n  text: z.string().min(1, \"Question text is required\"),\r\n  type: z.enum([\"multiple-choice\", \"single-choice\", \"true-false\"], {\r\n    required_error: \"Question type is required\",\r\n  }),\r\n  points: z.coerce.number().int().positive().default(1),\r\n  options: z\r\n    .array(questionOptionSchema)\r\n    .min(2, \"At least two options are required\"),\r\n});\r\n\r\nconst quizFormSchema = z.object({\r\n  title: z.string().min(1, \"Title is required\"),\r\n  description: z.string().optional(),\r\n  questions: z\r\n    .array(questionSchema)\r\n    .min(1, \"At least one question is required\"),\r\n});\r\n\r\ntype QuizFormValues = z.infer<typeof quizFormSchema>;\r\n\r\ninterface QuizBuilderProps {\r\n  quiz?: Quiz;\r\n  isEditing?: boolean;\r\n}\r\n\r\nexport function QuizBuilder({ quiz, isEditing = false }: QuizBuilderProps) {\r\n  const router = useRouter();\r\n  const { toast } = useToast();\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // Initialize form with existing quiz data or defaults\r\n  const form = useForm<QuizFormValues>({\r\n    resolver: zodResolver(quizFormSchema),\r\n    defaultValues: {\r\n      title: quiz?.title || \"\",\r\n      description: quiz?.description || \"\",\r\n      questions: quiz?.questions || [\r\n        {\r\n          text: \"\",\r\n          type: \"single-choice\",\r\n          points: 1,\r\n          options: [\r\n            { text: \"\", isCorrect: false },\r\n            { text: \"\", isCorrect: false },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  });\r\n\r\n  // Use field array for dynamic questions and options\r\n  const {\r\n    fields: questionFields,\r\n    append: appendQuestion,\r\n    remove: removeQuestion,\r\n  } = useFieldArray({\r\n    control: form.control,\r\n    name: \"questions\",\r\n  });\r\n\r\n  // Handle form submission\r\n  const onSubmit = async (data: QuizFormValues) => {\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      // Validate that each question has at least one correct answer\r\n      const hasInvalidQuestions = data.questions.some((question) => {\r\n        const correctOptions = question.options.filter(\r\n          (option) => option.isCorrect,\r\n        );\r\n\r\n        if (question.type === \"multiple-choice\") {\r\n          return correctOptions.length === 0;\r\n        } else {\r\n          return correctOptions.length !== 1;\r\n        }\r\n      });\r\n\r\n      if (hasInvalidQuestions) {\r\n        toast({\r\n          title: \"Validation Error\",\r\n          description:\r\n            \"Each question must have at least one correct answer. Single-choice and true-false questions must have exactly one correct answer.\",\r\n          variant: \"destructive\",\r\n        });\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      // Process true-false questions to ensure they have exactly \"True\" and \"False\" options\r\n      data.questions = data.questions.map((question) => {\r\n        if (question.type === \"true-false\") {\r\n          return {\r\n            ...question,\r\n            options: [\r\n              {\r\n                id: question.options[0]?.id,\r\n                text: \"True\",\r\n                isCorrect: question.options[0]?.isCorrect || false,\r\n              },\r\n              {\r\n                id: question.options[1]?.id,\r\n                text: \"False\",\r\n                isCorrect: question.options[1]?.isCorrect || false,\r\n              },\r\n            ],\r\n          };\r\n        }\r\n        return question;\r\n      });\r\n\r\n      let result;\r\n      if (isEditing && quiz) {\r\n        result = await updateQuiz(quiz.id, data);\r\n      } else {\r\n        result = await createQuiz(data);\r\n      }\r\n\r\n      if (result.success) {\r\n        toast({\r\n          title: isEditing ? \"Quiz Updated\" : \"Quiz Created\",\r\n          description: isEditing\r\n            ? \"Your quiz has been updated successfully.\"\r\n            : \"Your quiz has been created successfully.\",\r\n        });\r\n        router.push(\"/quizzes\");\r\n      } else {\r\n        throw new Error(result.error || \"Something went wrong\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving quiz:\", error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: `Failed to ${isEditing ? \"update\" : \"create\"} quiz. Please try again.`,\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Add a new question\r\n  const addQuestion = () => {\r\n    appendQuestion({\r\n      text: \"\",\r\n      type: \"single-choice\",\r\n      points: 1,\r\n      options: [\r\n        { text: \"\", isCorrect: false },\r\n        { text: \"\", isCorrect: false },\r\n      ],\r\n    });\r\n  };\r\n\r\n  // Add a new option to a question\r\n  const addOption = (questionIndex: number) => {\r\n    const options = form.getValues(`questions.${questionIndex}.options`);\r\n    form.setValue(`questions.${questionIndex}.options`, [\r\n      ...options,\r\n      { text: \"\", isCorrect: false },\r\n    ]);\r\n  };\r\n\r\n  // Remove an option from a question\r\n  const removeOption = (questionIndex: number, optionIndex: number) => {\r\n    const options = form.getValues(`questions.${questionIndex}.options`);\r\n    if (options.length <= 2) {\r\n      toast({\r\n        title: \"Cannot Remove Option\",\r\n        description: \"Questions must have at least two options.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const newOptions = [...options];\r\n    newOptions.splice(optionIndex, 1);\r\n    form.setValue(`questions.${questionIndex}.options`, newOptions);\r\n  };\r\n\r\n  // Handle question type change\r\n  const handleQuestionTypeChange = (questionIndex: number, type: string) => {\r\n    if (type === \"true-false\") {\r\n      // For true-false questions, set exactly two options: \"True\" and \"False\"\r\n      form.setValue(`questions.${questionIndex}.options`, [\r\n        { text: \"True\", isCorrect: false },\r\n        { text: \"False\", isCorrect: false },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  // Handle radio option selection (for single-choice and true-false)\r\n  const handleRadioOptionChange = (\r\n    questionIndex: number,\r\n    optionIndex: number,\r\n  ) => {\r\n    const options = form.getValues(`questions.${questionIndex}.options`);\r\n\r\n    // Set all options to not correct\r\n    const updatedOptions = options.map((option, idx) => ({\r\n      ...option,\r\n      isCorrect: idx === optionIndex,\r\n    }));\r\n\r\n    form.setValue(`questions.${questionIndex}.options`, updatedOptions);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container max-w-4xl py-6\">\r\n      <Button\r\n        variant=\"outline\"\r\n        className=\"mb-6\"\r\n        onClick={() => router.push(\"/quizzes\")}\r\n      >\r\n        <ArrowLeft className=\"mr-2 h-4 w-4\" />\r\n        Back to Quizzes\r\n      </Button>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{isEditing ? \"Edit Quiz\" : \"Create New Quiz\"}</CardTitle>\r\n        </CardHeader>\r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)}>\r\n            <CardContent className=\"space-y-6\">\r\n              {/* Quiz Details */}\r\n              <div className=\"space-y-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"title\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Quiz Title</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Enter quiz title\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"description\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Description (Optional)</FormLabel>\r\n                      <FormControl>\r\n                        <Textarea\r\n                          placeholder=\"Enter quiz description\"\r\n                          className=\"resize-none\"\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <Separator />\r\n\r\n              {/* Questions */}\r\n              <div className=\"space-y-6\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <h3 className=\"text-lg font-medium\">Questions</h3>\r\n                  <Button\r\n                    type=\"button\"\r\n                    onClick={addQuestion}\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                  >\r\n                    <Plus className=\"mr-2 h-4 w-4\" />\r\n                    Add Question\r\n                  </Button>\r\n                </div>\r\n\r\n                {questionFields.map((questionField, questionIndex) => (\r\n                  <Card key={questionField.id} className=\"border border-muted\">\r\n                    <CardHeader className=\"bg-muted/50 p-4\">\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <CardTitle className=\"text-base\">\r\n                          Question {questionIndex + 1}\r\n                        </CardTitle>\r\n                        <Button\r\n                          type=\"button\"\r\n                          onClick={() => removeQuestion(questionIndex)}\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          className=\"h-8 w-8 p-0\"\r\n                          disabled={questionFields.length <= 1}\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                          <span className=\"sr-only\">Remove question</span>\r\n                        </Button>\r\n                      </div>\r\n                    </CardHeader>\r\n                    <CardContent className=\"p-4 space-y-4\">\r\n                      {/* Question Text */}\r\n                      <FormField\r\n                        control={form.control}\r\n                        name={`questions.${questionIndex}.text`}\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Question Text</FormLabel>\r\n                            <FormControl>\r\n                              <Textarea\r\n                                placeholder=\"Enter your question\"\r\n                                className=\"resize-none\"\r\n                                {...field}\r\n                              />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n\r\n                      {/* Question Type */}\r\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                        <FormField\r\n                          control={form.control}\r\n                          name={`questions.${questionIndex}.type`}\r\n                          render={({ field }) => (\r\n                            <FormItem>\r\n                              <FormLabel>Question Type</FormLabel>\r\n                              <Select\r\n                                onValueChange={(value) => {\r\n                                  field.onChange(value);\r\n                                  handleQuestionTypeChange(\r\n                                    questionIndex,\r\n                                    value,\r\n                                  );\r\n                                }}\r\n                                defaultValue={field.value}\r\n                              >\r\n                                <FormControl>\r\n                                  <SelectTrigger>\r\n                                    <SelectValue placeholder=\"Select question type\" />\r\n                                  </SelectTrigger>\r\n                                </FormControl>\r\n                                <SelectContent>\r\n                                  <SelectItem value=\"single-choice\">\r\n                                    Single Choice\r\n                                  </SelectItem>\r\n                                  <SelectItem value=\"multiple-choice\">\r\n                                    Multiple Choice\r\n                                  </SelectItem>\r\n                                  <SelectItem value=\"true-false\">\r\n                                    True/False\r\n                                  </SelectItem>\r\n                                </SelectContent>\r\n                              </Select>\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n\r\n                        <FormField\r\n                          control={form.control}\r\n                          name={`questions.${questionIndex}.points`}\r\n                          render={({ field }) => (\r\n                            <FormItem>\r\n                              <FormLabel>Points</FormLabel>\r\n                              <FormControl>\r\n                                <Input\r\n                                  type=\"number\"\r\n                                  min=\"1\"\r\n                                  step=\"1\"\r\n                                  {...field}\r\n                                />\r\n                              </FormControl>\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n                      </div>\r\n\r\n                      {/* Options */}\r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"flex justify-between items-center\">\r\n                          <FormLabel>Options</FormLabel>\r\n                          {form.watch(`questions.${questionIndex}.type`) !==\r\n                            \"true-false\" && (\r\n                            <Button\r\n                              type=\"button\"\r\n                              onClick={() => addOption(questionIndex)}\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                            >\r\n                              <Plus className=\"mr-2 h-3 w-3\" />\r\n                              Add Option\r\n                            </Button>\r\n                          )}\r\n                        </div>\r\n\r\n                        <div className=\"space-y-2\">\r\n                          {form\r\n                            .watch(`questions.${questionIndex}.options`)\r\n                            ?.map((option, optionIndex) => (\r\n                              <div\r\n                                key={optionIndex}\r\n                                className=\"flex items-center space-x-2\"\r\n                              >\r\n                                {/* Option Correctness */}\r\n                                {form.watch(\r\n                                  `questions.${questionIndex}.type`,\r\n                                ) === \"multiple-choice\" ? (\r\n                                  <FormField\r\n                                    control={form.control}\r\n                                    name={`questions.${questionIndex}.options.${optionIndex}.isCorrect`}\r\n                                    render={({ field }) => (\r\n                                      <FormItem className=\"flex items-center space-x-2 space-y-0\">\r\n                                        <FormControl>\r\n                                          <Checkbox\r\n                                            checked={field.value}\r\n                                            onCheckedChange={field.onChange}\r\n                                          />\r\n                                        </FormControl>\r\n                                      </FormItem>\r\n                                    )}\r\n                                  />\r\n                                ) : (\r\n                                  <RadioGroup\r\n                                    value={form\r\n                                      .watch(\r\n                                        `questions.${questionIndex}.options`,\r\n                                      )\r\n                                      .findIndex((opt) => opt.isCorrect)\r\n                                      .toString()}\r\n                                    onValueChange={(value) =>\r\n                                      handleRadioOptionChange(\r\n                                        questionIndex,\r\n                                        Number.parseInt(value),\r\n                                      )\r\n                                    }\r\n                                    className=\"flex items-center space-x-2\"\r\n                                  >\r\n                                    <RadioGroupItem\r\n                                      value={optionIndex.toString()}\r\n                                      id={`q${questionIndex}-opt${optionIndex}`}\r\n                                    />\r\n                                  </RadioGroup>\r\n                                )}\r\n\r\n                                {/* Option Text */}\r\n                                <div className=\"flex-1\">\r\n                                  <FormField\r\n                                    control={form.control}\r\n                                    name={`questions.${questionIndex}.options.${optionIndex}.text`}\r\n                                    render={({ field }) => (\r\n                                      <FormItem>\r\n                                        <FormControl>\r\n                                          <Input\r\n                                            placeholder={`Option ${optionIndex + 1}`}\r\n                                            {...field}\r\n                                            disabled={\r\n                                              form.watch(\r\n                                                `questions.${questionIndex}.type`,\r\n                                              ) === \"true-false\"\r\n                                            }\r\n                                          />\r\n                                        </FormControl>\r\n                                        <FormMessage />\r\n                                      </FormItem>\r\n                                    )}\r\n                                  />\r\n                                </div>\r\n\r\n                                {/* Remove Option Button */}\r\n                                {form.watch(\r\n                                  `questions.${questionIndex}.type`,\r\n                                ) !== \"true-false\" && (\r\n                                  <Button\r\n                                    type=\"button\"\r\n                                    onClick={() =>\r\n                                      removeOption(questionIndex, optionIndex)\r\n                                    }\r\n                                    variant=\"ghost\"\r\n                                    size=\"sm\"\r\n                                    className=\"h-8 w-8 p-0\"\r\n                                  >\r\n                                    <Trash2 className=\"h-4 w-4\" />\r\n                                    <span className=\"sr-only\">\r\n                                      Remove option\r\n                                    </span>\r\n                                  </Button>\r\n                                )}\r\n                              </div>\r\n                            ))}\r\n                        </div>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n            <CardFooter className=\"flex justify-between\">\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outline\"\r\n                onClick={() => router.push(\"/quizzes\")}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button type=\"submit\" disabled={isSubmitting}>\r\n                {isSubmitting ? (\r\n                  <>Saving...</>\r\n                ) : (\r\n                  <>\r\n                    <Save className=\"mr-2 h-4 w-4\" />\r\n                    {isEditing ? \"Update Quiz\" : \"Create Quiz\"}\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </CardFooter>\r\n          </form>\r\n        </Form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/components/quiz-list.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { Edit, Trash2, Play, Plus } from \"lucide-react\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/registry/new-york/ui/alert-dialog\";\r\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\nimport { deleteQuiz } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\r\nimport type { Quiz } from \"@/registry/new-york/dynamic-components/quiz/lib/types\";\r\n\r\ninterface QuizListProps {\r\n  quizzes: Quiz[];\r\n}\r\n\r\nexport function QuizList({ quizzes }: QuizListProps) {\r\n  const router = useRouter();\r\n  const { toast } = useToast();\r\n  const [isDeleting, setIsDeleting] = useState<string | null>(null);\r\n\r\n  // Handle quiz deletion\r\n  const handleDeleteQuiz = async (quizId: string) => {\r\n    setIsDeleting(quizId);\r\n\r\n    try {\r\n      const result = await deleteQuiz(quizId);\r\n\r\n      if (result.success) {\r\n        toast({\r\n          title: \"Quiz Deleted\",\r\n          description: \"The quiz has been deleted successfully.\",\r\n        });\r\n        router.refresh();\r\n      } else {\r\n        throw new Error(result.error || \"Something went wrong\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting quiz:\", error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to delete quiz. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsDeleting(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container py-6\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold\">Your Quizzes</h1>\r\n        <Button onClick={() => router.push(\"/quizzes/create\")}>\r\n          <Plus className=\"mr-2 h-4 w-4\" />\r\n          Create Quiz\r\n        </Button>\r\n      </div>\r\n\r\n      {quizzes.length === 0 ? (\r\n        <Card>\r\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\r\n            <p className=\"text-muted-foreground mb-4\">\r\n              You haven't created any quizzes yet.\r\n            </p>\r\n            <Button onClick={() => router.push(\"/quizzes/create\")}>\r\n              <Plus className=\"mr-2 h-4 w-4\" />\r\n              Create Your First Quiz\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n          {quizzes.map((quiz) => (\r\n            <Card key={quiz.id}>\r\n              <CardHeader>\r\n                <CardTitle className=\"line-clamp-1\">{quiz.title}</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <p className=\"text-muted-foreground line-clamp-2\">\r\n                  {quiz.description || \"No description provided.\"}\r\n                </p>\r\n              </CardContent>\r\n              <CardFooter className=\"flex justify-between\">\r\n                <div className=\"flex space-x-2\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => router.push(`/quizzes/${quiz.id}`)}\r\n                  >\r\n                    <Edit className=\"h-4 w-4 mr-1\" />\r\n                    Edit\r\n                  </Button>\r\n                  <AlertDialog>\r\n                    <AlertDialogTrigger asChild>\r\n                      <Button variant=\"outline\" size=\"sm\">\r\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\r\n                        Delete\r\n                      </Button>\r\n                    </AlertDialogTrigger>\r\n                    <AlertDialogContent>\r\n                      <AlertDialogHeader>\r\n                        <AlertDialogTitle>Delete Quiz</AlertDialogTitle>\r\n                        <AlertDialogDescription>\r\n                          Are you sure you want to delete this quiz? This action\r\n                          cannot be undone.\r\n                        </AlertDialogDescription>\r\n                      </AlertDialogHeader>\r\n                      <AlertDialogFooter>\r\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n                        <AlertDialogAction\r\n                          onClick={() => handleDeleteQuiz(quiz.id)}\r\n                          disabled={isDeleting === quiz.id}\r\n                        >\r\n                          {isDeleting === quiz.id ? \"Deleting...\" : \"Delete\"}\r\n                        </AlertDialogAction>\r\n                      </AlertDialogFooter>\r\n                    </AlertDialogContent>\r\n                  </AlertDialog>\r\n                </div>\r\n                <Button\r\n                  variant=\"default\"\r\n                  size=\"sm\"\r\n                  onClick={() => router.push(`/quizzes/${quiz.id}/take`)}\r\n                >\r\n                  <Play className=\"h-4 w-4 mr-1\" />\r\n                  Take Quiz\r\n                </Button>\r\n              </CardFooter>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/components/quiz-results.tsx",
      "content": "\"use client\";\r\n\r\nimport { useRouter } from \"next/navigation\";\r\nimport { ArrowLeft, CheckCircle, XCircle } from \"lucide-react\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport { Progress } from \"@/registry/new-york/ui/progress\";\r\nimport { Separator } from \"@/registry/new-york/ui/separator\";\r\nimport type { QuizSubmission } from \"@/registry/new-york/dynamic-components/quiz/lib/types\";\r\n\r\ninterface QuizResultsProps {\r\n  submission: QuizSubmission;\r\n}\r\n\r\nexport function QuizResults({ submission }: QuizResultsProps) {\r\n  const router = useRouter();\r\n\r\n  // Calculate score percentage\r\n  const scorePercentage = submission.maxScore\r\n    ? Math.round(((submission.score || 0) / submission.maxScore) * 100)\r\n    : 0;\r\n\r\n  // Group answers by question\r\n  const answersByQuestion = submission.answers.reduce(\r\n    (acc, answer) => {\r\n      if (!acc[answer.questionId]) {\r\n        acc[answer.questionId] = [];\r\n      }\r\n      if (answer.optionId) {\r\n        acc[answer.questionId].push(answer.optionId);\r\n      }\r\n      return acc;\r\n    },\r\n    {} as Record<string, string[]>,\r\n  );\r\n\r\n  return (\r\n    <div className=\"container max-w-3xl py-6\">\r\n      <Button\r\n        variant=\"outline\"\r\n        className=\"mb-6\"\r\n        onClick={() => router.push(\"/quizzes\")}\r\n      >\r\n        <ArrowLeft className=\"mr-2 h-4 w-4\" />\r\n        Back to Quizzes\r\n      </Button>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{submission.quiz.title} - Results</CardTitle>\r\n          <div className=\"mt-4\">\r\n            <div className=\"flex justify-between text-sm mb-1\">\r\n              <span>\r\n                Score: {submission.score} / {submission.maxScore}\r\n              </span>\r\n              <span>{scorePercentage}%</span>\r\n            </div>\r\n            <Progress\r\n              value={scorePercentage}\r\n              className={`h-2 ${\r\n                scorePercentage >= 70\r\n                  ? \"bg-green-600\"\r\n                  : scorePercentage >= 40\r\n                    ? \"bg-yellow-500\"\r\n                    : \"bg-red-500\"\r\n              }`}\r\n            />\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {submission?.quiz?.questions.map((question, index) => {\r\n            // Get user's answers for this question\r\n            const userAnswers = answersByQuestion[question.id] || [];\r\n\r\n            // Get correct answers for this question\r\n            const correctAnswers = question.options\r\n              .filter((option) => option.isCorrect)\r\n              .map((option) => option.id);\r\n\r\n            // Check if user answered correctly\r\n            const isCorrect =\r\n              question.type === \"multiple-choice\"\r\n                ? userAnswers.length === correctAnswers.length &&\r\n                  userAnswers.every((id) => correctAnswers.includes(id)) &&\r\n                  correctAnswers.every((id) => userAnswers.includes(id))\r\n                : userAnswers.length === 1 &&\r\n                  correctAnswers.includes(userAnswers[0]);\r\n\r\n            return (\r\n              <div key={question.id} className=\"border rounded-lg p-4\">\r\n                <div className=\"flex justify-between items-start\">\r\n                  <div>\r\n                    <h3 className=\"text-lg font-medium\">\r\n                      Question {index + 1}\r\n                    </h3>\r\n                    <p className=\"mt-1\">{question.text}</p>\r\n                  </div>\r\n                  <div className=\"flex items-center\">\r\n                    {isCorrect ? (\r\n                      <CheckCircle className=\"h-6 w-6 text-green-500\" />\r\n                    ) : (\r\n                      <XCircle className=\"h-6 w-6 text-red-500\" />\r\n                    )}\r\n                    <span className=\"ml-2 font-medium\">\r\n                      {isCorrect ? `+${question.points}` : \"0\"} /{\" \"}\r\n                      {question.points}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <Separator className=\"my-3\" />\r\n\r\n                <div className=\"space-y-2\">\r\n                  {question.options.map((option) => {\r\n                    const isUserSelected = userAnswers.includes(option.id);\r\n                    const isCorrectOption = option.isCorrect;\r\n\r\n                    return (\r\n                      <div\r\n                        key={option.id}\r\n                        className={`p-2 rounded-md ${\r\n                          isUserSelected && isCorrectOption\r\n                            ? \"bg-green-100 dark:bg-green-900/20\"\r\n                            : isUserSelected && !isCorrectOption\r\n                              ? \"bg-red-100 dark:bg-red-900/20\"\r\n                              : !isUserSelected && isCorrectOption\r\n                                ? \"bg-blue-100 dark:bg-blue-900/20\"\r\n                                : \"\"\r\n                        }`}\r\n                      >\r\n                        <div className=\"flex items-center\">\r\n                          <div className=\"mr-2\">\r\n                            {isUserSelected && isCorrectOption && (\r\n                              <CheckCircle className=\"h-4 w-4 text-green-500\" />\r\n                            )}\r\n                            {isUserSelected && !isCorrectOption && (\r\n                              <XCircle className=\"h-4 w-4 text-red-500\" />\r\n                            )}\r\n                            {!isUserSelected && isCorrectOption && (\r\n                              <CheckCircle className=\"h-4 w-4 text-blue-500\" />\r\n                            )}\r\n                          </div>\r\n                          <span>{option.text}</span>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </CardContent>\r\n        <CardFooter className=\"flex justify-center\">\r\n          <Button\r\n            onClick={() => router.push(`/quizzes/${submission.quiz.id}/take`)}\r\n          >\r\n            Retake Quiz\r\n          </Button>\r\n        </CardFooter>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/components/quiz-taker.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { ArrowLeft, ArrowRight, Check } from \"lucide-react\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\r\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\r\nimport { Progress } from \"@/registry/new-york/ui/progress\";\r\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\r\nimport { submitQuiz } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\r\nimport type { Quiz } from \"@/registry/new-york/dynamic-components/quiz/lib/types\";\r\n\r\ninterface QuizTakerProps {\r\n  quiz: Quiz;\r\n}\r\n\r\nexport function QuizTaker({ quiz }: QuizTakerProps) {\r\n  const router = useRouter();\r\n  const { toast } = useToast();\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [answers, setAnswers] = useState<Record<string, string[]>>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const currentQuestion = quiz.questions[currentQuestionIndex];\r\n  const totalQuestions = quiz.questions.length;\r\n  const progressPercentage =\r\n    (currentQuestionIndex / (totalQuestions - 1)) * 100;\r\n\r\n  // Handle next question\r\n  const nextQuestion = () => {\r\n    if (currentQuestionIndex < totalQuestions - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    }\r\n  };\r\n\r\n  // Handle previous question\r\n  const prevQuestion = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n    }\r\n  };\r\n\r\n  // Handle option selection for single-choice and true-false questions\r\n  const handleSingleOptionSelect = (questionId: string, optionId: string) => {\r\n    setAnswers({\r\n      ...answers,\r\n      [questionId]: [optionId],\r\n    });\r\n  };\r\n\r\n  // Handle option selection for multiple-choice questions\r\n  const handleMultipleOptionSelect = (\r\n    questionId: string,\r\n    optionId: string,\r\n    isChecked: boolean,\r\n  ) => {\r\n    const currentAnswers = answers[questionId] || [];\r\n\r\n    if (isChecked) {\r\n      setAnswers({\r\n        ...answers,\r\n        [questionId]: [...currentAnswers, optionId],\r\n      });\r\n    } else {\r\n      setAnswers({\r\n        ...answers,\r\n        [questionId]: currentAnswers.filter((id) => id !== optionId),\r\n      });\r\n    }\r\n  };\r\n\r\n  // Check if all questions have been answered\r\n  const isQuizComplete = () => {\r\n    return quiz.questions.every((question) => {\r\n      const questionAnswers = answers[question.id] || [];\r\n      return questionAnswers.length > 0;\r\n    });\r\n  };\r\n\r\n  // Handle quiz submission\r\n  const handleSubmit = async () => {\r\n    if (!isQuizComplete()) {\r\n      toast({\r\n        title: \"Incomplete Quiz\",\r\n        description: \"Please answer all questions before submitting.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      const result = await submitQuiz({\r\n        quizId: quiz.id,\r\n        answers: Object.entries(answers).map(\r\n          ([questionId, selectedOptionIds]) => ({\r\n            questionId,\r\n            selectedOptionIds,\r\n          }),\r\n        ),\r\n      });\r\n\r\n      if (result.success) {\r\n        toast({\r\n          title: \"Quiz Submitted\",\r\n          description: \"Your quiz has been submitted successfully.\",\r\n        });\r\n        router.push(`/quizzes/${quiz.id}/results/${result.submission?.id}`);\r\n      } else {\r\n        throw new Error(result.error || \"Something went wrong\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error submitting quiz:\", error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to submit quiz. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container max-w-3xl py-6\">\r\n      <Button\r\n        variant=\"outline\"\r\n        className=\"mb-6\"\r\n        onClick={() => router.push(\"/quizzes\")}\r\n      >\r\n        <ArrowLeft className=\"mr-2 h-4 w-4\" />\r\n        Back to Quizzes\r\n      </Button>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{quiz.title}</CardTitle>\r\n          {quiz.description && (\r\n            <p className=\"text-muted-foreground\">{quiz.description}</p>\r\n          )}\r\n          <div className=\"mt-4\">\r\n            <div className=\"flex justify-between text-sm mb-1\">\r\n              <span>\r\n                Question {currentQuestionIndex + 1} of {totalQuestions}\r\n              </span>\r\n              <span>\r\n                {currentQuestion.points}{\" \"}\r\n                {currentQuestion.points === 1 ? \"point\" : \"points\"}\r\n              </span>\r\n            </div>\r\n            <Progress value={progressPercentage} className=\"h-2\" />\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"space-y-6\">\r\n            <h3 className=\"text-lg font-medium\">{currentQuestion.text}</h3>\r\n\r\n            {/* Options */}\r\n            <div className=\"space-y-3\">\r\n              {currentQuestion.type === \"multiple-choice\" ? (\r\n                // Multiple choice options (checkboxes)\r\n                currentQuestion.options.map((option) => (\r\n                  <div key={option.id} className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      id={option.id}\r\n                      checked={(answers[currentQuestion.id] || []).includes(\r\n                        option.id,\r\n                      )}\r\n                      onCheckedChange={(checked) =>\r\n                        handleMultipleOptionSelect(\r\n                          currentQuestion.id,\r\n                          option.id,\r\n                          checked === true,\r\n                        )\r\n                      }\r\n                    />\r\n                    <label\r\n                      htmlFor={option.id}\r\n                      className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n                    >\r\n                      {option.text}\r\n                    </label>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                // Single choice or true-false options (radio buttons)\r\n                <RadioGroup\r\n                  value={(answers[currentQuestion.id] || [])[0] || \"\"}\r\n                  onValueChange={(value) =>\r\n                    handleSingleOptionSelect(currentQuestion.id, value)\r\n                  }\r\n                >\r\n                  {currentQuestion.options.map((option) => (\r\n                    <div\r\n                      key={option.id}\r\n                      className=\"flex items-center space-x-2\"\r\n                    >\r\n                      <RadioGroupItem value={option.id} id={option.id} />\r\n                      <label\r\n                        htmlFor={option.id}\r\n                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n                      >\r\n                        {option.text}\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n                </RadioGroup>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n        <CardFooter className=\"flex justify-between\">\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outline\"\r\n            onClick={prevQuestion}\r\n            disabled={currentQuestionIndex === 0}\r\n          >\r\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\r\n            Previous\r\n          </Button>\r\n\r\n          {currentQuestionIndex < totalQuestions - 1 ? (\r\n            <Button type=\"button\" onClick={nextQuestion}>\r\n              Next\r\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              type=\"button\"\r\n              onClick={handleSubmit}\r\n              disabled={isSubmitting}\r\n            >\r\n              {isSubmitting ? (\r\n                <>Submitting...</>\r\n              ) : (\r\n                <>\r\n                  <Check className=\"mr-2 h-4 w-4\" />\r\n                  Submit Quiz\r\n                </>\r\n              )}\r\n            </Button>\r\n          )}\r\n        </CardFooter>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/lib/types.ts",
      "content": "export type QuestionType = \"multiple-choice\" | \"single-choice\" | \"true-false\";\r\n\r\nexport interface QuestionOption {\r\n  id: string;\r\n  text: string;\r\n  isCorrect: boolean;\r\n}\r\n\r\nexport interface Question {\r\n  id: string;\r\n  text: string;\r\n  type: QuestionType;\r\n  points: number;\r\n  options: QuestionOption[];\r\n}\r\n\r\nexport interface Quiz {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  questions: Question[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface QuizSubmission {\r\n  id: string;\r\n  quizId: string;\r\n  userId: string;\r\n  score?: number;\r\n  maxScore?: number;\r\n  completed: boolean;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  answers: Answer[];\r\n}\r\n\r\nexport interface Answer {\r\n  id: string;\r\n  questionId: string;\r\n  optionId?: string;\r\n  submissionId: string;\r\n}\r\n\r\nexport interface QuizFormData {\r\n  title: string;\r\n  description?: string;\r\n  questions: QuestionFormData[];\r\n}\r\n\r\nexport interface QuestionFormData {\r\n  id?: string;\r\n  text: string;\r\n  type: QuestionType;\r\n  points: number;\r\n  options: QuestionOptionFormData[];\r\n}\r\n\r\nexport interface QuestionOptionFormData {\r\n  id?: string;\r\n  text: string;\r\n  isCorrect: boolean;\r\n}\r\n\r\nexport interface QuizSubmissionFormData {\r\n  quizId: string;\r\n  answers: {\r\n    questionId: string;\r\n    selectedOptionIds: string[];\r\n  }[];\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/quiz/quizzes/[id]/results/[submissionId]/page.tsx",
      "content": "import { notFound } from \"next/navigation\";\r\nimport { getQuizSubmission } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\r\nimport { QuizResults } from \"@/registry/new-york/dynamic-components/quiz/components/quiz-results\";\r\n\r\ninterface QuizResultsPageProps {\r\n  params: {\r\n    id: string;\r\n    submissionId: string;\r\n  };\r\n}\r\n\r\nexport default async function QuizResultsPage({\r\n  params,\r\n}: QuizResultsPageProps) {\r\n  const result = await getQuizSubmission(params.submissionId);\r\n  const submission = result.success ? result.submission : null;\r\n\r\n  if (!submission || submission.quiz.id !== params.id) {\r\n    notFound();\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-24\">\r\n      <QuizResults submission={submission} />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(quiz)/quizzes/[id]/results/[submissionId]/page.tsx"
    },
    {
      "path": "dynamic-components/quiz/quizzes/[id]/take/page.tsx",
      "content": "import { notFound } from \"next/navigation\";\r\nimport { getQuizById } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\r\nimport { QuizTaker } from \"@/registry/new-york/dynamic-components/quiz/components/quiz-taker\";\r\n\r\ninterface QuizTakePageProps {\r\n  params: {\r\n    id: string;\r\n  };\r\n}\r\n\r\nexport default async function QuizTakePage({ params }: QuizTakePageProps) {\r\n  const result = await getQuizById(params.id);\r\n  const quiz = result.success ? result.quiz : null;\r\n\r\n  if (!quiz) {\r\n    notFound();\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-24\">\r\n      <QuizTaker quiz={quiz} />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(quiz)/quizzes/[id]/take/page.tsx"
    },
    {
      "path": "dynamic-components/quiz/quizzes/[id]/page.tsx",
      "content": "import { notFound } from \"next/navigation\";\r\nimport { getQuizById } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\r\nimport { QuizBuilder } from \"@/registry/new-york/dynamic-components/quiz/components/quiz-builder\";\r\n\r\ninterface QuizEditPageProps {\r\n  params: {\r\n    id: string;\r\n  };\r\n}\r\n\r\nexport default async function QuizEditPage({ params }: QuizEditPageProps) {\r\n  const result = await getQuizById(params.id);\r\n  const quiz = result.success ? result.quiz : null;\r\n\r\n  if (!quiz) {\r\n    notFound();\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-24\">\r\n      <QuizBuilder quiz={quiz} isEditing />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(quiz)/quizzes/[id]/page.tsx"
    },
    {
      "path": "dynamic-components/quiz/quizzes/create/page.tsx",
      "content": "import { QuizBuilder } from \"@/registry/new-york/dynamic-components/quiz/components/quiz-builder\";\r\n\r\nexport default function CreateQuizPage() {\r\n  return (\r\n    <div className=\"container mx-auto px-24\">\r\n      <QuizBuilder />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(quiz)/quizzes/create/page.tsx"
    },
    {
      "path": "dynamic-components/quiz/quizzes/page.tsx",
      "content": "import { Suspense } from \"react\";\r\nimport { getQuizzes } from \"@/registry/new-york/dynamic-components/quiz/actions/quiz-actions\";\r\nimport { QuizList } from \"@/registry/new-york/dynamic-components/quiz/components/quiz-list\";\r\n\r\nexport const dynamic = \"force-dynamic\";\r\n\r\nexport default async function QuizzesPage() {\r\n  const { quizzes = [] } = await getQuizzes().then((res) =>\r\n    res.success ? res : { quizzes: [] },\r\n  );\r\n\r\n  const quizzesWithQuestions = quizzes.map((quiz: any) => ({\r\n    ...quiz,\r\n    questions: quiz.questions ?? [],\r\n  }));\r\n\r\n  return (\r\n    <Suspense fallback={<div>Loading quizzes...</div>}>\r\n      <div className=\"container mx-auto px-24\">\r\n        <QuizList quizzes={quizzesWithQuestions} />\r\n      </div>\r\n    </Suspense>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/(quiz)/quizzes/page.tsx"
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "path": "ui/dialog.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\r\nimport { X } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  1. Dialog (Root)\r\n * -----------------------------------------------------------------------------\r\n *  The main Dialog wrapper. By default, Radix sets up role=\"dialog\" or\r\n *  role=\"alertdialog\" if it's set to `modal`. You can pass additional props\r\n *  like `aria-label`, `aria-describedby`, etc. here if needed.\r\n */\r\nconst Dialog = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>\r\n>(({ children, ...props }, ref) => (\r\n  <DialogPrimitive.Root ref={ref} {...props}>\r\n    {children}\r\n  </DialogPrimitive.Root>\r\n));\r\nDialog.displayName = \"Dialog\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  2. DialogTrigger\r\n * -----------------------------------------------------------------------------\r\n *  The button/element that opens the dialog.\r\n *  You can pass `aria-label` or other attributes if your trigger is not textual.\r\n */\r\nconst DialogTrigger = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>\r\n>(({ children, ...props }, ref) => (\r\n  <DialogPrimitive.Trigger ref={ref} {...props}>\r\n    {children}\r\n  </DialogPrimitive.Trigger>\r\n));\r\nDialogTrigger.displayName = \"DialogTrigger\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  3. DialogPortal\r\n * -----------------------------------------------------------------------------\r\n *  Renders the dialog outside the DOM hierarchy of the parent (e.g., a portal).\r\n */\r\nconst DialogPortal = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Portal>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Portal>\r\n>(({ children, ...props }, ref) => (\r\n  <DialogPrimitive.Portal ref={ref} {...props}>\r\n    {children}\r\n  </DialogPrimitive.Portal>\r\n));\r\nDialogPortal.displayName = \"DialogPortal\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  4. DialogOverlay\r\n * -----------------------------------------------------------------------------\r\n *  The dimmed overlay behind the dialog. Radix sets aria-hidden automatically.\r\n */\r\nconst DialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Overlay\r\n    ref={ref}\r\n    className={cn(\r\n      \"fixed inset-0 z-50 bg-black/80\",\r\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\r\n      \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nDialogOverlay.displayName = \"DialogOverlay\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  5. DialogClose\r\n * -----------------------------------------------------------------------------\r\n *  A button that closes the dialog. Often used inside DialogContent.\r\n */\r\nconst DialogClose = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Close>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Close>\r\n>(({ children, ...props }, ref) => (\r\n  <DialogPrimitive.Close ref={ref} {...props}>\r\n    {children}\r\n  </DialogPrimitive.Close>\r\n));\r\nDialogClose.displayName = \"DialogClose\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  6. DialogContent\r\n * -----------------------------------------------------------------------------\r\n *  The dialog itself. Radix automatically applies role=\"dialog\",\r\n *  aria-modal=\"true\", and focuses it when opened.\r\n */\r\nconst DialogContent = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => (\r\n  <DialogPortal>\r\n    <DialogOverlay />\r\n    <DialogPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg\",\r\n        \"translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg\",\r\n        // Radix animations\r\n        \"duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out\",\r\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\r\n        \"data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]\",\r\n        \"data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\r\n        \"sm:rounded-lg\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <DialogPrimitive.Close\r\n        className={cn(\r\n          \"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background\",\r\n          \"transition-opacity hover:opacity-100 focus:outline-none focus:ring-2\",\r\n          \"focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none\",\r\n          \"data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\",\r\n        )}\r\n      >\r\n        <X className=\"h-4 w-4\" />\r\n        <span className=\"sr-only\">Close</span>\r\n      </DialogPrimitive.Close>\r\n    </DialogPrimitive.Content>\r\n  </DialogPortal>\r\n));\r\nDialogContent.displayName = \"DialogContent\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  7. DialogHeader\r\n * -----------------------------------------------------------------------------\r\n *  Optional container for your dialog header. Typically holds <DialogTitle>.\r\n */\r\nconst DialogHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nDialogHeader.displayName = \"DialogHeader\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  8. DialogFooter\r\n * -----------------------------------------------------------------------------\r\n *  Optional container for your dialog footer (actions, buttons, etc.).\r\n */\r\nconst DialogFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nDialogFooter.displayName = \"DialogFooter\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  9. DialogTitle\r\n * -----------------------------------------------------------------------------\r\n *  The main title of your dialog. Radix automatically wires this up\r\n *  with the dialog for screen readers via `aria-labelledby`.\r\n */\r\nconst DialogTitle = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-lg font-semibold leading-none tracking-tight\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nDialogTitle.displayName = \"DialogTitle\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  10. DialogDescription\r\n * -----------------------------------------------------------------------------\r\n *  Additional descriptive text for your dialog. Radix connects this\r\n *  to the dialog for screen readers via `aria-describedby`.\r\n */\r\nconst DialogDescription = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n));\r\nDialogDescription.displayName = \"DialogDescription\";\r\n\r\n/* -----------------------------------------------------------------------------\r\n *  Exports\r\n * -----------------------------------------------------------------------------\r\n *  Exporting all sub-components to be used together in a cohesive dialog.\r\n */\r\nexport {\r\n  Dialog,\r\n  DialogPortal,\r\n  DialogOverlay,\r\n  DialogTrigger,\r\n  DialogClose,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogFooter,\r\n  DialogTitle,\r\n  DialogDescription,\r\n};\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-local-storage",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-local-storage.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\ntype SetValue<T> = React.Dispatch<React.SetStateAction<T>>;\r\n\r\n/**\r\n * A hook that manages state in localStorage\r\n * @param key The localStorage key\r\n * @param initialValue The initial value\r\n * @returns A stateful value and a function to update it\r\n */\r\nexport function useLocalStorage<T>(\r\n  key: string,\r\n  initialValue: T,\r\n): [T, SetValue<T>] {\r\n  // Get from local storage then parse stored json or return initialValue\r\n  const readValue = React.useCallback((): T => {\r\n    if (typeof window === \"undefined\") {\r\n      return initialValue;\r\n    }\r\n\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? (JSON.parse(item) as T) : initialValue;\r\n    } catch (error) {\r\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  }, [initialValue, key]);\r\n\r\n  // State to store our value\r\n  const [storedValue, setStoredValue] = React.useState<T>(readValue);\r\n\r\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\r\n  const setValue: SetValue<T> = React.useCallback(\r\n    (value) => {\r\n      if (typeof window === \"undefined\") {\r\n        console.warn(\r\n          `Tried setting localStorage key \"${key}\" even though environment is not a client`,\r\n        );\r\n      }\r\n\r\n      try {\r\n        // Allow value to be a function so we have the same API as useState\r\n        const newValue = value instanceof Function ? value(storedValue) : value;\r\n\r\n        // Save to local storage\r\n        window.localStorage.setItem(key, JSON.stringify(newValue));\r\n\r\n        // Save state\r\n        setStoredValue(newValue);\r\n      } catch (error) {\r\n        console.warn(`Error setting localStorage key \"${key}\":`, error);\r\n      }\r\n    },\r\n    [key, storedValue],\r\n  );\r\n\r\n  // Listen for changes to this localStorage key from other tabs/windows\r\n  React.useEffect(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const handleStorageChange = (e: StorageEvent) => {\r\n      if (e.key === key && e.newValue) {\r\n        setStoredValue(JSON.parse(e.newValue));\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"storage\", handleStorageChange);\r\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\r\n  }, [key]);\r\n\r\n  return [storedValue, setValue];\r\n}\r\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "signup-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A signup form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card",
    "use-toast",
    "password-input",
    "toast"
  ],
  "files": [
    {
      "path": "blocks/signup-form-1.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useId } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { AtSignIcon, UserIcon, LockIcon } from \"lucide-react\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport { useToast } from \"@/lib/use-toast\";\nimport PasswordInput from \"@/registry/new-york/ui/password-input\";\n\n// TODO: Create server action for signup\n// Create a file: app/actions/auth-actions.ts\n//\n// \"use server\";\n//\n// import { z } from \"zod\";\n// import { redirect } from \"next/navigation\";\n//\n// const signupSchema = z.object({\n//   name: z.string().min(2),\n//   email: z.string().email(),\n//   password: z.string().min(8),\n//   confirmPassword: z.string(),\n// }).refine((data) => data.password === data.confirmPassword, {\n//   message: \"Passwords do not match\",\n//   path: [\"confirmPassword\"],\n// });\n//\n// export async function signupAction(formData: z.infer<typeof signupSchema>) {\n//   try {\n//     // Validate the form data\n//     const validatedFields = signupSchema.parse(formData);\n//\n//     // TODO: Implement your authentication logic here\n//     // Examples:\n//     // - Hash the password using bcrypt\n//     // - Save user to database\n//     // - Send verification email\n//     // - Create session/JWT token\n//\n//     // Example with a database call:\n//     // const hashedPassword = await bcrypt.hash(validatedFields.password, 10);\n//     // const user = await db.user.create({\n//     //   data: {\n//     //     name: validatedFields.name,\n//     //     email: validatedFields.email,\n//     //     password: hashedPassword,\n//     //   },\n//     // });\n//\n//     return { success: true, message: \"Account created successfully\" };\n//   } catch (error) {\n//     console.error(\"Signup error:\", error);\n//     throw new Error(\"Failed to create account\");\n//   }\n// }\n\nconst formSchema = z\n  .object({\n    name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\n    email: z.string().email({ message: \"Please enter a valid email address\" }),\n    password: z\n      .string()\n      .min(8, { message: \"Password must be at least 8 characters\" }),\n    confirmPassword: z.string(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  });\n\nexport function SignupForm1() {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [isPending, setIsPending] = React.useState(false);\n\n  const nameId = useId();\n  const emailId = useId();\n  const passwordId = useId();\n  const confirmPasswordId = useId();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    try {\n      setIsPending(true);\n\n      // TODO: Import and use the signupAction server action\n      // import { signupAction } from \"@/actions/auth-actions\";\n      // await signupAction(values);\n\n      // For now, simulate the signup process\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      toast({\n        title: \"Account created\",\n        description: \"Your account has been created successfully.\",\n      });\n      router.push(\"/login\");\n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description: \"There was a problem creating your account.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsPending(false);\n    }\n  }\n\n  // TODO: Implement OAuth server actions\n  // Create server actions for GitHub and Google OAuth:\n  //\n  // export async function signInWithGitHub() {\n  //   \"use server\";\n  //   // Implement GitHub OAuth logic\n  //   // redirect to GitHub OAuth URL\n  // }\n  //\n  // export async function signInWithGoogle() {\n  //   \"use server\";\n  //   // Implement Google OAuth logic\n  //   // redirect to Google OAuth URL\n  // }\n\n  const handleGitHubSignup = async () => {\n    // TODO: Call GitHub OAuth server action\n    // await signInWithGitHub();\n    console.log(\"GitHub signup clicked\");\n  };\n\n  const handleGoogleSignup = async () => {\n    // TODO: Call Google OAuth server action\n    // await signInWithGoogle();\n    console.log(\"Google signup clicked\");\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold text-center\">\n          Create an account\n        </CardTitle>\n        <CardDescription className=\"text-center\">\n          Enter your information to create an account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel htmlFor={nameId}>Full Name</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        id={nameId}\n                        placeholder=\"John Doe\"\n                        className=\"peer ps-9\"\n                        {...field}\n                        autoComplete=\"name\"\n                        aria-label=\"Full name\"\n                      />\n                      <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                        <UserIcon size={16} aria-hidden=\"true\" />\n                      </div>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel htmlFor={emailId}>Email</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        id={emailId}\n                        placeholder=\"name@example.com\"\n                        className=\"peer ps-9\"\n                        {...field}\n                        autoComplete=\"email\"\n                        aria-label=\"Email address\"\n                      />\n                      <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                        <AtSignIcon size={16} aria-hidden=\"true\" />\n                      </div>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel htmlFor={passwordId}>Password</FormLabel>\n                  <FormControl>\n                    <PasswordInput\n                      id={passwordId}\n                      value={field.value}\n                      onChange={field.onChange}\n                      error={form.formState.errors.password?.message}\n                      autoComplete=\"new-password\"\n                      aria-label=\"Password\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel htmlFor={confirmPasswordId}>\n                    Confirm Password\n                  </FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        id={confirmPasswordId}\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        className=\"peer ps-9\"\n                        {...field}\n                        aria-label=\"Confirm password\"\n                      />\n                      <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                        <LockIcon size={16} aria-hidden=\"true\" />\n                      </div>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isPending}\n              aria-label=\"Create your account\"\n            >\n              {isPending ? \"Creating account...\" : \"Create account\"}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n      <CardFooter className=\"flex flex-col space-y-4\">\n        <div className=\"relative w-full\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <span className=\"w-full border-t\" />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">\n              Or continue with\n            </span>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 gap-4 w-full\">\n          <Button\n            variant=\"outline\"\n            type=\"button\"\n            onClick={handleGitHubSignup}\n            className=\"flex items-center justify-center gap-2\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"16\"\n              height=\"16\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            >\n              <path d=\"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4\" />\n              <path d=\"M9 18c-4.51 2-5-2-7-2\" />\n            </svg>\n            GitHub\n          </Button>\n          <Button\n            variant=\"outline\"\n            type=\"button\"\n            onClick={handleGoogleSignup}\n            className=\"flex items-center justify-center gap-2\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"16\"\n              height=\"16\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            >\n              <path d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10z\" />\n              <path d=\"M12 8v8\" />\n              <path d=\"M8 12h8\" />\n            </svg>\n            Google\n          </Button>\n        </div>\n        <div className=\"text-center text-sm mt-4\">\n          Already have an account?{\" \"}\n          <Link href=\"/login\" className=\"text-primary hover:underline\">\n            Sign in\n          </Link>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
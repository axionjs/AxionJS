{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "bullet-chart",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "registryDependencies": [
    "card",
    "chart"
  ],
  "files": [
    {
      "path": "charts/bullet-chart.tsx",
      "content": "\"use client\";\n\nimport { TrendingUp } from \"lucide-react\";\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Cell,\n  ReferenceLine,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n} from \"recharts\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport {\n  type ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/new-york/ui/chart\";\n\nconst chartData = [\n  {\n    name: \"Revenue\",\n    actual: 8200,\n    target: 8000,\n    poor: 6000,\n    satisfactory: 7000,\n    good: 8000,\n    excellent: 9000,\n    type: \"currency\",\n  },\n  {\n    name: \"Profit\",\n    actual: 4100,\n    target: 4000,\n    poor: 3000,\n    satisfactory: 3500,\n    good: 4000,\n    excellent: 4500,\n    type: \"currency\",\n  },\n  {\n    name: \"New Customers\",\n    actual: 950,\n    target: 1000,\n    poor: 800,\n    satisfactory: 900,\n    good: 1000,\n    excellent: 1100,\n    type: \"count\",\n  },\n];\n\nconst chartConfig = {\n  actual: {\n    label: \"Actual\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  target: {\n    label: \"Target\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  poor: {\n    label: \"Poor\",\n    color: \"hsl(var(--chart-3) / 0.2)\",\n  },\n  satisfactory: {\n    label: \"Satisfactory\",\n    color: \"hsl(var(--chart-3) / 0.4)\",\n  },\n  good: {\n    label: \"Good\",\n    color: \"hsl(var(--chart-3) / 0.6)\",\n  },\n  excellent: {\n    label: \"Excellent\",\n    color: \"hsl(var(--chart-3) / 0.8)\",\n  },\n} satisfies ChartConfig;\n\n// Helper function for formatting values based on type\nconst formatValue = (value, type) => {\n  if (type === \"currency\") {\n    return \"$\" + value.toLocaleString();\n  }\n  return value.toLocaleString();\n};\n\nexport function BulletChart() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Bullet Chart</CardTitle>\n        <CardDescription>Performance metrics against targets</CardDescription>\n      </CardHeader>\n      <CardContent className=\"h-auto px-0 pb-0\">\n        <ChartContainer config={chartConfig} className=\"w-full h-full\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              accessibilityLayer\n              layout=\"vertical\"\n              data={chartData}\n              margin={{ top: 20, right: 20, bottom: 20, left: 70 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" horizontal={false} />\n              <XAxis\n                type=\"number\"\n                tickLine={false}\n                axisLine={false}\n                tickFormatter={(value) => {\n                  // Format the tick based on the chart item it's closest to\n                  // We'll use a simple heuristic based on the value ranges\n                  if (value >= 5000) {\n                    return \"$\" + (value / 1000).toFixed(0) + \"k\";\n                  } else if (value >= 1000) {\n                    return \"$\" + (value / 1000).toFixed(1) + \"k\";\n                  } else {\n                    return value;\n                  }\n                }}\n              />\n              <YAxis\n                type=\"category\"\n                dataKey=\"name\"\n                tickLine={false}\n                axisLine={false}\n                width={70}\n              />\n              <ChartTooltip\n                content={\n                  <ChartTooltipContent\n                    formatter={(value, name, props) => {\n                      const item = props.payload;\n                      if (item && item.type) {\n                        return formatValue(value, item.type);\n                      }\n                      return value;\n                    }}\n                  />\n                }\n              />\n              <Bar\n                dataKey=\"excellent\"\n                fill={chartConfig.excellent.color}\n                radius={0}\n                barSize={20}\n              />\n              <Bar\n                dataKey=\"good\"\n                fill={chartConfig.good.color}\n                radius={0}\n                barSize={20}\n              />\n              <Bar\n                dataKey=\"satisfactory\"\n                fill={chartConfig.satisfactory.color}\n                radius={0}\n                barSize={20}\n              />\n              <Bar\n                dataKey=\"poor\"\n                fill={chartConfig.poor.color}\n                radius={0}\n                barSize={20}\n              />\n              <Bar\n                dataKey=\"actual\"\n                fill={chartConfig.actual.color}\n                radius={0}\n                barSize={10}\n              >\n                {chartData.map((entry, index) => (\n                  <Cell\n                    key={\"cell-\" + index}\n                    fill={\n                      entry.actual >= entry.target\n                        ? chartConfig.actual.color\n                        : \"hsl(var(--destructive))\"\n                    }\n                  />\n                ))}\n              </Bar>\n              {chartData.map((entry, index) => (\n                <ReferenceLine\n                  key={\"ref-\" + index}\n                  y={entry.name}\n                  x={entry.target}\n                  stroke={chartConfig.target.color}\n                  strokeWidth={2}\n                  isFront\n                />\n              ))}\n            </BarChart>\n          </ResponsiveContainer>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Revenue and profit exceeded targets <TrendingUp className=\"h-4 w-4\" />\n        </div>\n        <div className=\"leading-none text-muted-foreground\">\n          Q2 2024 performance metrics\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
      "type": "registry:block",
      "target": ""
    }
  ],
  "categories": [
    "charts",
    "charts-bullet"
  ]
}
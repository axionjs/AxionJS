{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "simple-auth",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A simple authentication system with email verification and password reset.",
  "dependencies": [
    "nodemailer",
    "zod",
    "prisma",
    "@prisma/client",
    "react-spinners",
    "@react-email/components",
    "@react-email/render",
    "uuid",
    "bcryptjs",
    "next-auth@beta",
    "@auth/prisma-adapter",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card"
  ],
  "files": [
    {
      "path": "dynamic-components/simple-auth/components/login-form.tsx",
      "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { useState, useTransition } from \"react\";\nimport { useSearchParams, useRouter } from \"next/navigation\";\nimport {\n  Form,\n  FormField,\n  FormControl,\n  FormLabel,\n  FormItem,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/simple-auth/components/card-wrapper\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { FormError } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-error\";\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-success\";\nimport { login } from \"@/registry/new-york/dynamic-components/simple-auth/actions/auth-actions\";\nimport Link from \"next/link\";\nimport { LoginSchema } from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\n\nexport const LoginForm = () => {\n  const searchParams = useSearchParams();\n  const callbackUrl = searchParams.get(\"callbackUrl\");\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const router = useRouter();\n\n  const form = useForm<z.infer<typeof LoginSchema>>({\n    resolver: zodResolver(LoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof LoginSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      login(values, callbackUrl)\n        .then((data) => {\n          if (data?.error) {\n            form.reset();\n            setError(data.error);\n          }\n\n          if (data?.success) {\n            form.reset();\n            setSuccess(data.success);\n            router.push(callbackUrl || \"/dashboard\");\n          }\n        })\n        .catch(() => {\n          setError(\"\");\n        });\n    });\n  };\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Login\"\n      subHeaderLabel=\"Welcome Back\"\n      backButtonLabel=\"Don't have an account?\"\n      backButtonHref={`${process.env.NEXT_PUBLIC_BASE_PATH}/auth/register`}\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"jhon.doe@example.com\"\n                      type=\"email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"******\"\n                      type=\"password\"\n                    />\n                  </FormControl>\n                  <Button\n                    size=\"sm\"\n                    variant=\"link\"\n                    asChild\n                    className=\"px-0 font-normal\"\n                  >\n                    <Link\n                      href={`${process.env.NEXT_PUBLIC_BASE_PATH}/auth/reset`}\n                    >\n                      Forgot password?\n                    </Link>\n                  </Button>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <FormError message={error} />\n          <FormSuccess message={success} />\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n            Login\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/register-form.tsx",
      "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { useState, useTransition } from \"react\";\n\nimport {\n  Form,\n  FormField,\n  FormControl,\n  FormLabel,\n  FormItem,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/simple-auth/components/card-wrapper\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { FormError } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-error\";\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-success\";\nimport { register } from \"@/registry/new-york/dynamic-components/simple-auth/actions/auth-actions\";\nimport { RegisterSchema } from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\n\nexport const RegisterForm = () => {\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<z.infer<typeof RegisterSchema>>({\n    resolver: zodResolver(RegisterSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      name: \"\",\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof RegisterSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      register(values).then((data) => {\n        setError(data.error);\n        setSuccess(data.success);\n      });\n    });\n  };\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Register\"\n      subHeaderLabel=\"Create an account\"\n      backButtonLabel=\"Already have an account?\"\n      backButtonHref={`${process.env.NEXT_PUBLIC_BASE_PATH}/auth/login`}\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"Jhon Doe\"\n                      type=\"text\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"jhon.doe@example.com\"\n                      type=\"email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      disabled={isPending}\n                      {...field}\n                      placeholder=\"******\"\n                      type=\"password\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <FormError message={error} />\n          <FormSuccess message={success} />\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n            Create an account\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/new-password-form.tsx",
      "content": "\"use client\";\n\nimport * as z from \"zod\";\nimport { useState, useTransition } from \"react\";\nimport { useSearchParams } from \"next/navigation\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/simple-auth/components/card-wrapper\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-success\";\nimport { FormError } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-error\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { newPassword } from \"@/registry/new-york/dynamic-components/simple-auth/actions/auth-actions\";\nimport { NewPasswordSchema } from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\n\nexport function NewPasswordForm() {\n  const searchParams = useSearchParams();\n  const token = searchParams.get(\"token\");\n\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<z.infer<typeof NewPasswordSchema>>({\n    resolver: zodResolver(NewPasswordSchema),\n    defaultValues: { password: \"\" },\n  });\n\n  const onSubmit = (values: z.infer<typeof NewPasswordSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      newPassword(values, token).then((data) => {\n        setError(data?.error);\n        setSuccess(data?.success);\n      });\n    });\n  };\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"New Password\"\n      subHeaderLabel=\"Enter a new password\"\n      backButtonLabel=\"Back to login\"\n      backButtonHref=\"/auth/login\"\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      disabled={isPending}\n                      placeholder=\"******\"\n                      type=\"password\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <FormError message={error} />\n          <FormSuccess message={success} />\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n            Reset password\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/new-verification-form.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { BeatLoader } from \"react-spinners\";\nimport { useSearchParams, useRouter } from \"next/navigation\";\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/simple-auth/components/card-wrapper\";\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-success\";\nimport { FormError } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-error\";\nimport { newVerification } from \"@/registry/new-york/dynamic-components/simple-auth/actions/auth-actions\";\n\nexport function NewVerificationForm() {\n  const router = useRouter();\n  const [error, setError] = useState<string | undefined>();\n  const [success, setSuccess] = useState<string | undefined>();\n\n  const searchParams = useSearchParams();\n  const token = searchParams.get(\"token\");\n\n  const onsubmit = useCallback(() => {\n    if (success || error) return;\n\n    if (!token) {\n      setError(\"Missing token!\");\n      return;\n    }\n    newVerification(token)\n      .then((data) => {\n        setSuccess(data.success);\n        setError(data.error);\n        if (data.success) {\n          // Refresh the page after a short delay to reflect changes\n          setTimeout(() => {\n            router.refresh();\n          }, 2000);\n        }\n      })\n      .catch(() => {\n        setError(\"Something went wrong!\");\n      });\n  }, [token, success, error, router]);\n\n  useEffect(() => {\n    onsubmit();\n  }, [onsubmit]);\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Email Verification\"\n      subHeaderLabel={\"Confirming your verification\"}\n      backButtonHref={\"/auth/login\"}\n      backButtonLabel={\"Back to Login\"}\n    >\n      <div className=\"flex w-full items-center justify-center\">\n        {!success && !error && <BeatLoader />}\n        <FormSuccess message={success} />\n        {!success && <FormError message={error} />}\n      </div>\n    </CardWrapper>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/reset-form.tsx",
      "content": "\"use client\";\n\nimport * as z from \"zod\";\nimport { useState, useTransition } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-success\";\nimport { FormError } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-error\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { reset } from \"@/registry/new-york/dynamic-components/simple-auth/actions/auth-actions\";\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/simple-auth/components/card-wrapper\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { ResetSchema } from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\n\nexport function ResetForm() {\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<z.infer<typeof ResetSchema>>({\n    resolver: zodResolver(ResetSchema),\n    defaultValues: { email: \"\" },\n  });\n\n  const onSubmit = (values: z.infer<typeof ResetSchema>) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      reset(values).then((data) => {\n        setError(data?.error);\n        setSuccess(data?.success);\n      });\n    });\n  };\n\n  return (\n    <CardWrapper\n      mainHeaderLabel=\"Reset Password\"\n      subHeaderLabel=\"Forgot your password?\"\n      backButtonLabel=\"Back to login\"\n      backButtonHref={`${process.env.NEXT_PUBLIC_BASE_PATH}/auth/login`}\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      disabled={isPending}\n                      placeholder=\"john.doe@example.com\"\n                      type=\"email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <FormError message={error} />\n          <FormSuccess message={success} />\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n            Send reset email\n          </Button>\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/card-wrapper.tsx",
      "content": "\"use client\";\n\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n} from \"@/registry/new-york/ui/card\";\nimport { BackButton } from \"@/registry/new-york/dynamic-components/simple-auth/components/back-button\";\n\ninterface HeaderProps {\n  mainLabel: string;\n  subLabel: string;\n}\n\nexport const Header = ({ mainLabel, subLabel }: HeaderProps) => {\n  return (\n    <div className=\"w-full flex flex-col gap-y-4 items-center justify-center\">\n      <h1 className=\"text-3xl font-bold\">{mainLabel}</h1>\n      <p className=\"text-muted-foreground text-sm\">{subLabel}</p>\n    </div>\n  );\n};\n\ninterface CardWrapperProps {\n  children: React.ReactNode;\n  mainHeaderLabel: string;\n  subHeaderLabel: string;\n  backButtonLabel: string;\n  backButtonHref: string;\n}\n\nexport const CardWrapper = ({\n  children,\n  mainHeaderLabel,\n  subHeaderLabel,\n  backButtonLabel,\n  backButtonHref,\n}: CardWrapperProps) => {\n  return (\n    <Card className=\"w-[400px] shadow-lg\">\n      <CardHeader>\n        <Header mainLabel={mainHeaderLabel} subLabel={subHeaderLabel} />\n      </CardHeader>\n      <CardContent>{children}</CardContent>\n\n      <CardFooter>\n        <BackButton label={backButtonLabel} href={backButtonHref} />\n      </CardFooter>\n    </Card>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/back-button.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport Link from \"next/link\";\n\ninterface BackButtonProps {\n  href: string;\n  label: string;\n}\n\nexport const BackButton = ({ href, label }: BackButtonProps) => {\n  return (\n    <Button className=\"font-normal w-full\" size=\"sm\" variant=\"link\" asChild>\n      <Link href={href}>{label}</Link>\n    </Button>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/form-error.tsx",
      "content": "import { AlertTriangleIcon } from \"lucide-react\";\n\ninterface FormErrorProps {\n  message?: string;\n}\n\nexport const FormError = ({ message }: FormErrorProps) => {\n  if (!message) return null;\n  return (\n    <div className=\"flex items-center gap-x-2 bg-destructive/15 p-3 rounded-md text-sm text-destructive\">\n      <AlertTriangleIcon className=\"h-4 w-4\" />\n      <p>{message}</p>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/form-success.tsx",
      "content": "import { CheckCircleIcon } from \"lucide-react\";\n\ninterface FormSuccessProps {\n  message?: string;\n}\n\nexport const FormSuccess = ({ message }: FormSuccessProps) => {\n  if (!message) return null;\n  return (\n    <div className=\"flex items-center gap-x-2 bg-emerald-500/15 p-3 rounded-md text-sm text-emerald-500\">\n      <CheckCircleIcon className=\"h-4 w-4\" />\n      <p>{message}</p>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/actions/auth-actions.ts",
      "content": "\"use server\";\n\nimport * as z from \"zod\";\nimport { db } from \"@/registry/new-york/auth/lib/db\";\nimport { getUserByEmail } from \"@/registry/new-york/auth/lib/user\";\nimport {\n  signIn,\n  signOut,\n} from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth\";\nimport { DEFAULT_LOGIN_REDIRECT } from \"@/registry/new-york/dynamic-components/simple-auth/lib/routes\";\nimport { AuthError } from \"next-auth\";\nimport {\n  generatePasswordResetToken,\n  generateVerificationToken,\n  getPasswordResetTokenByToken,\n  getVerificationTokenByToken,\n  hashPassword,\n  verifyPassword,\n} from \"@/registry/new-york/auth/lib/auth-helpers\";\nimport {\n  sendPasswordResetEmail,\n  sendVerificationEmail,\n} from \"@/registry/new-york/dynamic-components/simple-auth/lib/mail\";\nimport {\n  LoginSchema,\n  RegisterSchema,\n  ResetSchema,\n  NewPasswordSchema,\n} from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\n\nexport const login = async (\n  values: z.infer<typeof LoginSchema>,\n  callbackUrl?: string | null,\n) => {\n  const validatedFields = LoginSchema.safeParse(values);\n  if (!validatedFields.success) {\n    return { error: \"Invalid fields!\" };\n  }\n\n  const { email, password } = validatedFields.data;\n\n  const existingUser = await getUserByEmail(email);\n  if (!existingUser || !existingUser.email || !existingUser.password) {\n    // Either user/email does not exist or user signed in with OAuth\n    return { error: \"Email does not exist!\" };\n  }\n\n  const passwordsMatch = await verifyPassword(password, existingUser.password);\n\n  if (!existingUser.emailVerified) {\n    const verificationToken = await generateVerificationToken(\n      existingUser.email,\n    );\n\n    if (!passwordsMatch) {\n      return { error: \"Invalid credentials!\" };\n    }\n    await sendVerificationEmail(\n      verificationToken.email,\n      verificationToken.token,\n    );\n\n    return { success: \"Confirmation email sent!\" };\n  }\n  if (!passwordsMatch) {\n    return { error: \"Invalid credentials!\" };\n  }\n\n  try {\n    await signIn(\"credentials\", {\n      email,\n      password,\n      redirectTo: callbackUrl || DEFAULT_LOGIN_REDIRECT,\n    }); // explicitly setting the redirect (for clarity), even though middleware will redirect if user is logged in\n\n    return { success: \"Logged in!\" };\n  } catch (error) {\n    if (error instanceof AuthError) {\n      switch (error.type) {\n        case \"CredentialsSignin\": {\n          return { error: \"Invalid credentials!\" };\n        }\n        default: {\n          return { error: \"Something went wrong!\" };\n        }\n      }\n    }\n    throw error;\n  }\n};\n\nexport const logout = async () => {\n  await signOut();\n};\n\nexport const register = async (values: z.infer<typeof RegisterSchema>) => {\n  const validatedFields = RegisterSchema.safeParse(values);\n  if (!validatedFields.success) {\n    return { error: \"Invalid fields!\" };\n  }\n\n  const { email, password, name } = validatedFields.data;\n  const hashedPassword = await hashPassword(password);\n\n  const existingUser = await getUserByEmail(email);\n\n  if (existingUser) {\n    return { error: \"Email already in use!\" };\n  }\n\n  await db.user.create({\n    data: {\n      email,\n      password: hashedPassword,\n      name,\n    },\n  });\n\n  const verificationToken = await generateVerificationToken(email);\n  await sendVerificationEmail(verificationToken.email, verificationToken.token);\n\n  return { success: \"Confirmation Email Sent!\" };\n};\n\nexport const newVerification = async (token: string) => {\n  const existingToken = await getVerificationTokenByToken(token);\n  if (!existingToken) {\n    return { error: \"Token does not exist\" };\n  }\n\n  const hasExpired = new Date(existingToken.expires) < new Date();\n\n  if (hasExpired) {\n    return { error: \"Token has expired\" };\n  }\n\n  const existingUser = await getUserByEmail(existingToken.email);\n\n  // Handle case where user exists - normal email verification for new registration\n  if (existingUser) {\n    await db.user.update({\n      where: { id: existingUser.id },\n      data: {\n        emailVerified: new Date(),\n      },\n    });\n  } else {\n    // If we can't find a user with this email, it might be from a registration\n    // that created the user but didn't set the email yet\n    const pendingUser = await db.user.findFirst({\n      where: {\n        OR: [{ email: null }, { emailVerified: null }],\n      },\n      orderBy: {\n        id: \"desc\",\n      },\n    });\n\n    if (!pendingUser) {\n      return { error: \"User not found!\" };\n    }\n\n    await db.user.update({\n      where: { id: pendingUser.id },\n      data: {\n        email: existingToken.email,\n        emailVerified: new Date(),\n      },\n    });\n  }\n\n  await db.verificationToken.delete({\n    where: { id: existingToken.id },\n  });\n\n  return { success: \"Email verified!\" };\n};\n\nexport const reset = async (values: z.infer<typeof ResetSchema>) => {\n  const validatedFields = ResetSchema.safeParse(values);\n\n  if (!validatedFields.success) return { error: \"Invalid email!\" };\n\n  const { email } = validatedFields.data;\n\n  const existingUser = await getUserByEmail(email);\n  if (!existingUser) return { error: \"Email not found!\" };\n\n  const isOAuthAccount = await db.account.findFirst({\n    where: { userId: existingUser?.id },\n  });\n\n  if (isOAuthAccount)\n    return { error: \"Cannot reset password for OAuth account!\" };\n\n  const passwordResetToken = await generatePasswordResetToken(email);\n  await sendPasswordResetEmail(\n    passwordResetToken.email,\n    passwordResetToken.token,\n  );\n\n  return { success: \"Reset password email sent\" };\n};\n\nexport const newPassword = async (\n  values: z.infer<typeof NewPasswordSchema>,\n  token?: string | null,\n) => {\n  if (!token) return { error: \"Missing token!\" };\n\n  const validatedFields = NewPasswordSchema.safeParse(values);\n\n  if (!validatedFields.success) return { error: \"Invalid fields!\" };\n\n  const { password } = validatedFields.data;\n\n  const existingToken = await getPasswordResetTokenByToken(token);\n\n  if (!existingToken) return { error: \"Invalid token!\" };\n\n  const hasExpired = new Date(existingToken.expires) < new Date();\n\n  if (hasExpired) return { error: \"Token has expired!\" };\n\n  const existingUser = await getUserByEmail(existingToken.email);\n\n  if (!existingUser) return { error: \"Email does not exist!\" };\n\n  const hashedPassword = await hashPassword(password);\n\n  await db.user.update({\n    where: { id: existingUser.id },\n    data: { password: hashedPassword },\n  });\n\n  await db.passwordResetToken.delete({\n    where: { id: existingToken.id },\n  });\n\n  return { success: \"Password updated!\" };\n};\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/auth.ts",
      "content": "import NextAuth from \"next-auth\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport authConfig from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth.config\";\nimport { db } from \"@/registry/new-york/lib/db\";\nimport { getUserById } from \"@/registry/new-york/dynamic-components/simple-auth/lib/user\";\n\nexport const { auth, handlers, signIn, signOut } = NextAuth({\n  pages: {\n    signIn: \"/auth/login\",\n  },\n  events: {\n    async linkAccount({ user }) {\n      await db.user.update({\n        where: { id: user.id },\n        data: { emailVerified: new Date() },\n      });\n    },\n  },\n  callbacks: {\n    async signIn({ user, account }) {\n      const existingUser = await getUserById(user.id!);\n\n      //Prevent login if email is not verified\n      if (!existingUser?.emailVerified) return false;\n\n      return true;\n    },\n    async session({ session, token }) {\n      if (token.sub && session.user) {\n        session.user.id = token.sub;\n      }\n\n      if (session.user) {\n        session.user.name = token.name;\n        session.user.email = token.email as string;\n      }\n      return session;\n    },\n\n    async jwt({ token }) {\n      if (!token.sub) {\n        return token;\n      }\n\n      const existingUser = await getUserById(token.sub);\n\n      if (!existingUser) {\n        return token;\n      }\n\n      token.role = existingUser.role;\n      token.isTwoFactorEnabled = existingUser.isTwoFactorEnabled;\n\n      token.name = existingUser.name;\n      token.email = existingUser.email;\n\n      return token;\n    },\n  },\n  adapter: PrismaAdapter(db),\n  session: { strategy: \"jwt\" },\n  ...authConfig,\n});\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/routes.ts",
      "content": "export const publicRoutes = [\"/\", \"/auth/verify\"];\n\n/**\n * An array of routes that are accessible only to authenticated users.\n * @type {string[]}\n */\nexport const authRoutes = [\n  \"/auth/login\",\n  \"/auth/register\",\n  \"/auth/reset\",\n  \"/auth/new-password\",\n];\n\n/**\n * An array of routes that are accessible only to admin users.\n * @type {string[]}\n */\nexport const adminRoutes = [\n  \"/admin\",\n  // Add other admin routes here\n];\n\n/**\n * The prefix for all API auth routes.\n * @type {string}\n */\nexport const apiAuthPrefix = \"/api/auth\";\n\n/**\n * The default redirect path after a successful login.\n * @type {string}\n */\nexport const DEFAULT_LOGIN_REDIRECT = \"/auth/dashboard\";\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/auth-helpers.ts",
      "content": "import { db } from \"@/registry/new-york/lib/db\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport bcryptjs from \"bcryptjs\";\n\nexport const hashPassword = async (password: string) => {\n  return await bcryptjs.hash(password, 10);\n};\n\nexport const verifyPassword = async (\n  inputPassword: string,\n  hashedPassword: string,\n) => {\n  return await bcryptjs.compare(inputPassword, hashedPassword);\n};\n\nexport const getVerificationTokenByToken = async (token: string) => {\n  try {\n    const verificationToken = await db.verificationToken.findUnique({\n      where: { token },\n    });\n\n    return verificationToken;\n  } catch {\n    return null;\n  }\n};\n\nexport const getVerificationTokenByEmail = async (email: string) => {\n  try {\n    const verificationToken = await db.verificationToken.findFirst({\n      where: { email },\n    });\n\n    return verificationToken;\n  } catch {\n    return null;\n  }\n};\n\nexport const generateVerificationToken = async (\n  email: string,\n  userId?: string,\n) => {\n  const token = uuidv4();\n  const expires = new Date(new Date().getTime() + 3600 * 1000);\n\n  const existingToken = await getVerificationTokenByEmail(email);\n\n  if (existingToken) {\n    await db.verificationToken.delete({\n      where: { id: existingToken.id },\n    });\n  }\n\n  const verificationToken = await db.verificationToken.create({\n    data: {\n      email,\n      token,\n      expires,\n      userId, // Will be undefined for new registrations, populated for email changes\n    },\n  });\n\n  return verificationToken;\n};\n\nexport const getPasswordResetTokenByToken = async (token: string) => {\n  try {\n    const passwordResetToken = await db.passwordResetToken.findUnique({\n      where: {\n        token,\n      },\n    });\n    return passwordResetToken;\n  } catch {\n    return null;\n  }\n};\n\nexport const getPasswordResetTokenByEmail = async (email: string) => {\n  try {\n    const passwordResetToken = await db.passwordResetToken.findFirst({\n      where: {\n        email,\n      },\n    });\n    return passwordResetToken;\n  } catch {\n    return null;\n  }\n};\n\nexport const generatePasswordResetToken = async (email: string) => {\n  const token = uuidv4();\n  const expires = new Date(new Date().getTime() + 3600 * 1000);\n\n  const existingToken = await getPasswordResetTokenByEmail(email);\n\n  if (existingToken) {\n    await db.passwordResetToken.delete({\n      where: { id: existingToken.id },\n    });\n  }\n\n  const passwordResetToken = await db.passwordResetToken.create({\n    data: {\n      email,\n      token,\n      expires,\n    },\n  });\n\n  return passwordResetToken;\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/user.ts",
      "content": "import { db } from \"@/registry/new-york/lib/db\";\n\nexport const getUserByEmail = async (email: string) => {\n  try {\n    const user = await db.user.findFirst({\n      where: { email },\n    });\n    return user;\n  } catch (e) {\n    return null;\n  }\n};\nexport const getUpdatedEmailUser = async (email: string) => {\n  try {\n    const user = await db.verificationToken.findFirst({\n      where: { email },\n    });\n    return user;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const getUserById = async (id: string) => {\n  try {\n    const user = await db.user.findFirst({\n      where: { id },\n    });\n    return user;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const getAccountByUserId = async (userId: string) => {\n  try {\n    const account = await db.account.findFirst({\n      where: {\n        userId,\n      },\n    });\n\n    return account;\n  } catch {\n    return null;\n  }\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/get-user.ts",
      "content": "import { auth } from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth\";\n\nexport const currentUser = async () => {\n  const session = await auth();\n  return session?.user;\n};\n\nexport const currentRole = async () => {\n  const session = await auth();\n  return session?.user?.role;\n};\nexport const isCurrentAccountOAuth = async () => {\n  const session = await auth();\n  return session?.user?.isOAuth;\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/next-auth.d.ts",
      "content": "import { UserRole } from \"@prisma/client\";\nimport NextAuth, { type DefaultSession } from \"next-auth\";\nimport { JWT } from \"next-auth/jwt\";\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    role: UserRole;\n    isTwoFactorEnabled: boolean;\n    isOAuth: boolean;\n  }\n}\n\nexport type ExtendedUser = DefaultSession[\"user\"] & {\n  role: UserRole;\n  isTwoFactorEnabled: boolean;\n  isOAuth: boolean;\n};\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user: ExtendedUser;\n  }\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/auth.config.ts",
      "content": "import Credentials from \"next-auth/providers/credentials\";\nimport type { NextAuthConfig } from \"next-auth\";\nimport { getUserByEmail } from \"@/registry/new-york/dynamic-components/simple-auth/lib/user\";\nimport { verifyPassword } from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth-helpers\";\nimport { LoginSchema } from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\n\nexport default {\n  providers: [\n    Credentials({\n      async authorize(credentials) {\n        const validatedFields = LoginSchema.safeParse(credentials);\n\n        if (validatedFields.success) {\n          const { email, password } = validatedFields.data;\n          const user = await getUserByEmail(email);\n\n          if (!user || !user.password) return null;\n\n          const passwordsMatch = await verifyPassword(password, user.password);\n\n          if (passwordsMatch) return user;\n        }\n        return null;\n      },\n    }),\n  ],\n} satisfies NextAuthConfig;\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/mail.ts",
      "content": "import nodemailer from \"nodemailer\";\nimport { render } from \"@react-email/render\";\nimport VerificationEmail from \"@/registry/new-york/dynamic-components/simple-auth/emails/verification-email\";\nimport ResetPasswordEmail from \"@/registry/new-york/dynamic-components/simple-auth/emails/reset-password-email\";\n\nexport const transporter = nodemailer.createTransport({\n  host: process.env.EMAIL_SERVER_HOST,\n  port: Number(process.env.EMAIL_SERVER_PORT),\n  auth: {\n    user: process.env.EMAIL_SERVER_USER,\n    pass: process.env.EMAIL_SERVER_PASSWORD,\n  },\n});\n\nexport const sendVerificationEmail = async (\n  email: string,\n  token: string,\n  isEmailChange = false,\n) => {\n  // Add emailChange parameter to the URL for email changes\n  const confirmLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/verify?token=${token}${isEmailChange ? \"&emailChange=true\" : \"\"}`;\n\n  const emailHtml = await render(VerificationEmail({ confirmLink }));\n\n  await transporter.sendMail({\n    from: `AxionJS - <${process.env.EMAIL_FROM}>`,\n    to: email,\n    subject: isEmailChange\n      ? \"Confirm your new email address\"\n      : \"Confirm your email address\",\n    html: emailHtml,\n  });\n};\n\nexport const sendPasswordResetEmail = async (email: string, token: string) => {\n  const resetLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/new-password?token=${token}`;\n\n  const emailHtml = await render(ResetPasswordEmail({ resetLink }));\n\n  await transporter.sendMail({\n    from: `AxionJS - <${process.env.EMAIL_FROM}>`,\n    to: email,\n    subject: \"Reset your password\",\n    html: emailHtml,\n  });\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/route.ts",
      "content": "import { handlers } from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth\";\nexport const { GET, POST } = handlers;\n",
      "type": "registry:api",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/emails/verification-email.tsx",
      "content": "import {\n  Body,\n  Button,\n  Container,\n  Head,\n  Hr,\n  Html,\n  Preview,\n  Section,\n  Text,\n} from \"@react-email/components\";\nimport { Tailwind } from \"@react-email/tailwind\";\n\ninterface VerificationEmailProps {\n  confirmLink: string;\n}\n\nexport default function VerificationEmail({\n  confirmLink,\n}: VerificationEmailProps) {\n  return (\n    <Html>\n      <Head />\n      <Preview>Verify your email address</Preview>\n      <Tailwind>\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\n            <Section className=\"mt-[32px]\">\n              <Text className=\"text-black text-[24px] font-medium mb-[0] mt-[0] mx-[0]\">\n                Verify your email\n              </Text>\n              <Text className=\"text-black text-[14px] leading-[24px]\">\n                Click the button below to verify your email address.\n              </Text>\n              <Button\n                className=\"bg-blue-600 rounded text-white font-medium py-[8px] px-[20px]\"\n                href={confirmLink}\n              >\n                Confirm Email\n              </Button>\n              <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-[0] w-full\" />\n              <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\n                This link will expire in 24 hours.\n              </Text>\n            </Section>\n          </Container>\n        </Body>\n      </Tailwind>\n    </Html>\n  );\n}\n",
      "type": "registry:email",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/emails/reset-password-email.tsx",
      "content": "import {\n  Body,\n  Button,\n  Container,\n  Head,\n  Hr,\n  Html,\n  Preview,\n  Section,\n  Text,\n} from \"@react-email/components\";\nimport { Tailwind } from \"@react-email/tailwind\";\n\ninterface ResetPasswordEmailProps {\n  resetLink: string;\n}\n\nexport default function ResetPasswordEmail({\n  resetLink,\n}: ResetPasswordEmailProps) {\n  return (\n    <Html>\n      <Head />\n      <Preview>Reset your password</Preview>\n      <Tailwind>\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\n            <Section className=\"mt-[32px]\">\n              <Text className=\"text-black text-[24px] font-medium mb-[0] mt-[0] mx-[0]\">\n                Reset your password\n              </Text>\n              <Text className=\"text-black text-[14px] leading-[24px]\">\n                Click the button below to reset your password.\n              </Text>\n              <Button\n                className=\"bg-blue-600 rounded text-white font-medium py-[8px] px-[20px]\"\n                href={resetLink}\n              >\n                Reset Password\n              </Button>\n              <Text className=\"text-black text-[14px] leading-[24px]\">\n                If you did not request a password reset, you can safely ignore\n                this email.\n              </Text>\n              <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-[0] w-full\" />\n              <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\n                This link will expire in 1 hour.\n              </Text>\n            </Section>\n          </Container>\n        </Body>\n      </Tailwind>\n    </Html>\n  );\n}\n",
      "type": "registry:email",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/auth/login/page.tsx",
      "content": "import { LoginForm } from \"@/registry/new-york/dynamic-components/simple-auth/components/login-form\";\n\nconst LoginPage = () => {\n  return <LoginForm />;\n};\n\nexport default LoginPage;\n",
      "type": "registry:page",
      "target": "app/auth/login/page.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/auth/register/page.tsx",
      "content": "import { RegisterForm } from \"@/registry/new-york/dynamic-components/simple-auth/components/register-form\";\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n",
      "type": "registry:page",
      "target": "app/auth/register/page.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/auth/reset/page.tsx",
      "content": "import { ResetForm } from \"@/registry/new-york/dynamic-components/simple-auth/components/reset-form\";\n\nexport default function ResetPage() {\n  return (\n    <div className=\"flex h-screen items-center justify-center\">\n      <ResetForm />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/auth/reset/page.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/auth/new-password/page.tsx",
      "content": "import { NewPasswordForm } from \"@/registry/new-york/auth/components/new-password-form\";\nimport { Suspense } from \"react\";\n\nexport default function NewPasswordPage() {\n  return (\n    <Suspense>\n      <NewPasswordForm />\n    </Suspense>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/auth/new-password/page.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/auth/verify/page.tsx",
      "content": "\"use client\";\n\nimport { NewVerificationForm } from \"@/registry/new-york/dynamic-components/simple-auth/components/new-verification-form\";\n\nexport default function VerifyPage() {\n  return <NewVerificationForm />;\n}\n",
      "type": "registry:page",
      "target": "app/auth/verify/page.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/schemas/index.ts",
      "content": "import * as z from \"zod\";\n\nexport const LoginSchema = z.object({\n  email: z.string().email({\n    message: \"Invalid email address\",\n  }),\n  password: z.string().min(1, {\n    message: \"Password is required\",\n  }),\n});\n\nexport const RegisterSchema = z.object({\n  email: z.string().email({\n    message: \"Invalid email address\",\n  }),\n  password: z.string().min(6, {\n    message: \"Password must be at least 6 characters\",\n  }),\n  name: z.string().min(1, {\n    message: \"Name is required\",\n  }),\n});\n\nexport const ResetSchema = z.object({\n  email: z.string().email({\n    message: \"Email is required\",\n  }),\n});\n\nexport const NewPasswordSchema = z.object({\n  password: z.string().min(6, { message: \"Minimum 6 characters required\" }),\n});\n",
      "type": "registry:schemas",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/auth/layout.tsx",
      "content": "import React from \"react\";\n\nconst SimpleAuthLayout = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className=\"h-full flex items-center justify-center pt-10\">\n      {children}\n    </div>\n  );\n};\nexport default SimpleAuthLayout;\n",
      "type": "registry:file",
      "target": "app/auth/layout.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/middleware.ts",
      "content": "import authConfig from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth.config\";\nimport NextAuth from \"next-auth\";\n\nimport {\n  DEFAULT_LOGIN_REDIRECT,\n  apiAuthPrefix,\n  authRoutes,\n  publicRoutes,\n} from \"@/registry/new-york/dynamic-components/simple-auth/lib/routes\";\n\nconst { auth } = NextAuth(authConfig);\nexport default auth((req) => {\n  const { nextUrl } = req;\n  const isLoggedIn = !!req.auth;\n\n  const isApiAuthRoute = nextUrl.pathname.startsWith(apiAuthPrefix);\n  const isPublicRoute = publicRoutes.includes(nextUrl.pathname);\n  const isAuthRoute = authRoutes.includes(nextUrl.pathname);\n\n  if (isApiAuthRoute) {\n    return;\n  }\n\n  if (isAuthRoute) {\n    if (isLoggedIn) {\n      return Response.redirect(new URL(DEFAULT_LOGIN_REDIRECT, nextUrl));\n    }\n    return;\n  }\n\n  if (!isLoggedIn && !isPublicRoute) {\n    return Response.redirect(new URL(\"/auth/login\", nextUrl));\n  }\n\n  return;\n});\n\nexport const config = {\n  matcher: [\n    // Skip Next.js internals and all static files, unless found in search params\n    \"/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)\",\n    // Always run for API routes\n    \"/(api|trpc)(.*)\",\n  ],\n};\n",
      "type": "registry:middleware",
      "target": ""
    }
  ]
}
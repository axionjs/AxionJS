{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "simple-auth",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A simple authentication system with email verification and password reset.",
  "dependencies": [
    "nodemailer",
    "zod",
    "prisma",
    "@prisma/client",
    "react-spinners",
    "@react-email/components",
    "@react-email/render",
    "uuid",
    "bcryptjs",
    "next-auth@beta",
    "@auth/prisma-adapter",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "input",
    "form",
    "card"
  ],
  "files": [
    {
      "path": "dynamic-components/simple-auth/components/login-form.tsx",
      "content": "\"use client\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { useState, useTransition } from \"react\";\r\nimport { useSearchParams, useRouter } from \"next/navigation\";\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormControl,\r\n  FormLabel,\r\n  FormItem,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/simple-auth/components/card-wrapper\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-error\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-success\";\r\nimport { login } from \"@/registry/new-york/dynamic-components/simple-auth/actions/auth-actions\";\r\nimport Link from \"next/link\";\r\nimport { LoginSchema } from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\r\n\r\nexport const LoginForm = () => {\r\n  const searchParams = useSearchParams();\r\n  const callbackUrl = searchParams.get(\"callbackUrl\");\r\n  const [error, setError] = useState<string | undefined>(\"\");\r\n  const [success, setSuccess] = useState<string | undefined>(\"\");\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const router = useRouter();\r\n\r\n  const form = useForm<z.infer<typeof LoginSchema>>({\r\n    resolver: zodResolver(LoginSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof LoginSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    startTransition(() => {\r\n      login(values, callbackUrl)\r\n        .then((data) => {\r\n          if (data?.error) {\r\n            form.reset();\r\n            setError(data.error);\r\n          }\r\n\r\n          if (data?.success) {\r\n            form.reset();\r\n            setSuccess(data.success);\r\n            router.push(callbackUrl || \"/dashboard\");\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setError(\"\");\r\n        });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Login\"\r\n      subHeaderLabel=\"Welcome Back\"\r\n      backButtonLabel=\"Don't have an account?\"\r\n      backButtonHref={`${process.env.NEXT_PUBLIC_BASE_PATH}/auth/register`}\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={isPending}\r\n                      {...field}\r\n                      placeholder=\"jhon.doe@example.com\"\r\n                      type=\"email\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"password\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={isPending}\r\n                      {...field}\r\n                      placeholder=\"******\"\r\n                      type=\"password\"\r\n                    />\r\n                  </FormControl>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"link\"\r\n                    asChild\r\n                    className=\"px-0 font-normal\"\r\n                  >\r\n                    <Link\r\n                      href={`${process.env.NEXT_PUBLIC_BASE_PATH}/auth/reset`}\r\n                    >\r\n                      Forgot password?\r\n                    </Link>\r\n                  </Button>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          <FormError message={error} />\r\n          <FormSuccess message={success} />\r\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\r\n            Login\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/register-form.tsx",
      "content": "\"use client\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { useState, useTransition } from \"react\";\r\n\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormControl,\r\n  FormLabel,\r\n  FormItem,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/simple-auth/components/card-wrapper\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-error\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-success\";\r\nimport { register } from \"@/registry/new-york/dynamic-components/simple-auth/actions/auth-actions\";\r\nimport { RegisterSchema } from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\r\n\r\nexport const RegisterForm = () => {\r\n  const [error, setError] = useState<string | undefined>(\"\");\r\n  const [success, setSuccess] = useState<string | undefined>(\"\");\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const form = useForm<z.infer<typeof RegisterSchema>>({\r\n    resolver: zodResolver(RegisterSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      name: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof RegisterSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    startTransition(() => {\r\n      register(values).then((data) => {\r\n        setError(data.error);\r\n        setSuccess(data.success);\r\n      });\r\n    });\r\n  };\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Register\"\r\n      subHeaderLabel=\"Create an account\"\r\n      backButtonLabel=\"Already have an account?\"\r\n      backButtonHref={`${process.env.NEXT_PUBLIC_BASE_PATH}/auth/login`}\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Name</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={isPending}\r\n                      {...field}\r\n                      placeholder=\"Jhon Doe\"\r\n                      type=\"text\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={isPending}\r\n                      {...field}\r\n                      placeholder=\"jhon.doe@example.com\"\r\n                      type=\"email\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"password\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={isPending}\r\n                      {...field}\r\n                      placeholder=\"******\"\r\n                      type=\"password\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          <FormError message={error} />\r\n          <FormSuccess message={success} />\r\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\r\n            Create an account\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/new-password-form.tsx",
      "content": "\"use client\";\r\n\r\nimport * as z from \"zod\";\r\nimport { useState, useTransition } from \"react\";\r\nimport { useSearchParams } from \"next/navigation\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/simple-auth/components/card-wrapper\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-success\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-error\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { newPassword } from \"@/registry/new-york/dynamic-components/simple-auth/actions/auth-actions\";\r\nimport { NewPasswordSchema } from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\r\n\r\nexport function NewPasswordForm() {\r\n  const searchParams = useSearchParams();\r\n  const token = searchParams.get(\"token\");\r\n\r\n  const [error, setError] = useState<string | undefined>(\"\");\r\n  const [success, setSuccess] = useState<string | undefined>(\"\");\r\n\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const form = useForm<z.infer<typeof NewPasswordSchema>>({\r\n    resolver: zodResolver(NewPasswordSchema),\r\n    defaultValues: { password: \"\" },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof NewPasswordSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    startTransition(() => {\r\n      newPassword(values, token).then((data) => {\r\n        setError(data?.error);\r\n        setSuccess(data?.success);\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"New Password\"\r\n      subHeaderLabel=\"Enter a new password\"\r\n      backButtonLabel=\"Back to login\"\r\n      backButtonHref=\"/auth/login\"\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"password\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      disabled={isPending}\r\n                      placeholder=\"******\"\r\n                      type=\"password\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          <FormError message={error} />\r\n          <FormSuccess message={success} />\r\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\r\n            Reset password\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/new-verification-form.tsx",
      "content": "\"use client\";\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { BeatLoader } from \"react-spinners\";\r\nimport { useSearchParams, useRouter } from \"next/navigation\";\r\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/simple-auth/components/card-wrapper\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-success\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-error\";\r\nimport { newVerification } from \"@/registry/new-york/dynamic-components/simple-auth/actions/auth-actions\";\r\n\r\nexport function NewVerificationForm() {\r\n  const router = useRouter();\r\n  const [error, setError] = useState<string | undefined>();\r\n  const [success, setSuccess] = useState<string | undefined>();\r\n\r\n  const searchParams = useSearchParams();\r\n  const token = searchParams.get(\"token\");\r\n\r\n  const onsubmit = useCallback(() => {\r\n    if (success || error) return;\r\n\r\n    if (!token) {\r\n      setError(\"Missing token!\");\r\n      return;\r\n    }\r\n    newVerification(token)\r\n      .then((data) => {\r\n        setSuccess(data.success);\r\n        setError(data.error);\r\n        if (data.success) {\r\n          // Refresh the page after a short delay to reflect changes\r\n          setTimeout(() => {\r\n            router.refresh();\r\n          }, 2000);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        setError(\"Something went wrong!\");\r\n      });\r\n  }, [token, success, error, router]);\r\n\r\n  useEffect(() => {\r\n    onsubmit();\r\n  }, [onsubmit]);\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Email Verification\"\r\n      subHeaderLabel={\"Confirming your verification\"}\r\n      backButtonHref={\"/auth/login\"}\r\n      backButtonLabel={\"Back to Login\"}\r\n    >\r\n      <div className=\"flex w-full items-center justify-center\">\r\n        {!success && !error && <BeatLoader />}\r\n        <FormSuccess message={success} />\r\n        {!success && <FormError message={error} />}\r\n      </div>\r\n    </CardWrapper>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/reset-form.tsx",
      "content": "\"use client\";\r\n\r\nimport * as z from \"zod\";\r\nimport { useState, useTransition } from \"react\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\";\r\nimport { FormSuccess } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-success\";\r\nimport { FormError } from \"@/registry/new-york/dynamic-components/simple-auth/components/form-error\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { reset } from \"@/registry/new-york/dynamic-components/simple-auth/actions/auth-actions\";\r\nimport { CardWrapper } from \"@/registry/new-york/dynamic-components/simple-auth/components/card-wrapper\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { ResetSchema } from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\r\n\r\nexport function ResetForm() {\r\n  const [error, setError] = useState<string | undefined>(\"\");\r\n  const [success, setSuccess] = useState<string | undefined>(\"\");\r\n\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const form = useForm<z.infer<typeof ResetSchema>>({\r\n    resolver: zodResolver(ResetSchema),\r\n    defaultValues: { email: \"\" },\r\n  });\r\n\r\n  const onSubmit = (values: z.infer<typeof ResetSchema>) => {\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    startTransition(() => {\r\n      reset(values).then((data) => {\r\n        setError(data?.error);\r\n        setSuccess(data?.success);\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CardWrapper\r\n      mainHeaderLabel=\"Reset Password\"\r\n      subHeaderLabel=\"Forgot your password?\"\r\n      backButtonLabel=\"Back to login\"\r\n      backButtonHref={`${process.env.NEXT_PUBLIC_BASE_PATH}/auth/login`}\r\n    >\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"email\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      {...field}\r\n                      disabled={isPending}\r\n                      placeholder=\"john.doe@example.com\"\r\n                      type=\"email\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          <FormError message={error} />\r\n          <FormSuccess message={success} />\r\n          <Button disabled={isPending} type=\"submit\" className=\"w-full\">\r\n            Send reset email\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </CardWrapper>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/card-wrapper.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardFooter,\r\n  CardHeader,\r\n} from \"@/registry/new-york/ui/card\";\r\nimport { BackButton } from \"@/registry/new-york/dynamic-components/simple-auth/components/back-button\";\r\n\r\ninterface HeaderProps {\r\n  mainLabel: string;\r\n  subLabel: string;\r\n}\r\n\r\nexport const Header = ({ mainLabel, subLabel }: HeaderProps) => {\r\n  return (\r\n    <div className=\"w-full flex flex-col gap-y-4 items-center justify-center\">\r\n      <h1 className=\"text-3xl font-bold\">{mainLabel}</h1>\r\n      <p className=\"text-muted-foreground text-sm\">{subLabel}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface CardWrapperProps {\r\n  children: React.ReactNode;\r\n  mainHeaderLabel: string;\r\n  subHeaderLabel: string;\r\n  backButtonLabel: string;\r\n  backButtonHref: string;\r\n}\r\n\r\nexport const CardWrapper = ({\r\n  children,\r\n  mainHeaderLabel,\r\n  subHeaderLabel,\r\n  backButtonLabel,\r\n  backButtonHref,\r\n}: CardWrapperProps) => {\r\n  return (\r\n    <Card className=\"w-[400px] shadow-lg\">\r\n      <CardHeader>\r\n        <Header mainLabel={mainHeaderLabel} subLabel={subHeaderLabel} />\r\n      </CardHeader>\r\n      <CardContent>{children}</CardContent>\r\n\r\n      <CardFooter>\r\n        <BackButton label={backButtonLabel} href={backButtonHref} />\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/back-button.tsx",
      "content": "\"use client\";\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport Link from \"next/link\";\r\n\r\ninterface BackButtonProps {\r\n  href: string;\r\n  label: string;\r\n}\r\n\r\nexport const BackButton = ({ href, label }: BackButtonProps) => {\r\n  return (\r\n    <Button className=\"font-normal w-full\" size=\"sm\" variant=\"link\" asChild>\r\n      <Link href={href}>{label}</Link>\r\n    </Button>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/form-error.tsx",
      "content": "import { AlertTriangleIcon } from \"lucide-react\";\r\n\r\ninterface FormErrorProps {\r\n  message?: string;\r\n}\r\n\r\nexport const FormError = ({ message }: FormErrorProps) => {\r\n  if (!message) return null;\r\n  return (\r\n    <div className=\"flex items-center gap-x-2 bg-destructive/15 p-3 rounded-md text-sm text-destructive\">\r\n      <AlertTriangleIcon className=\"h-4 w-4\" />\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/components/form-success.tsx",
      "content": "import { CheckCircleIcon } from \"lucide-react\";\r\n\r\ninterface FormSuccessProps {\r\n  message?: string;\r\n}\r\n\r\nexport const FormSuccess = ({ message }: FormSuccessProps) => {\r\n  if (!message) return null;\r\n  return (\r\n    <div className=\"flex items-center gap-x-2 bg-emerald-500/15 p-3 rounded-md text-sm text-emerald-500\">\r\n      <CheckCircleIcon className=\"h-4 w-4\" />\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/actions/auth-actions.ts",
      "content": "\"use server\";\r\n\r\nimport * as z from \"zod\";\r\nimport { db } from \"@/registry/new-york/dynamic-components/auth/lib/db\";\r\nimport { getUserByEmail } from \"@/registry/new-york/dynamic-components/auth/lib/user\";\r\nimport {\r\n  signIn,\r\n  signOut,\r\n} from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth\";\r\nimport { DEFAULT_LOGIN_REDIRECT } from \"@/registry/new-york/dynamic-components/simple-auth/lib/routes\";\r\nimport { AuthError } from \"next-auth\";\r\nimport {\r\n  generatePasswordResetToken,\r\n  generateVerificationToken,\r\n  getPasswordResetTokenByToken,\r\n  getVerificationTokenByToken,\r\n  hashPassword,\r\n  verifyPassword,\r\n} from \"@/registry/new-york/dynamic-components/auth/lib/auth-helpers\";\r\nimport {\r\n  sendPasswordResetEmail,\r\n  sendVerificationEmail,\r\n} from \"@/registry/new-york/dynamic-components/simple-auth/lib/mail\";\r\nimport {\r\n  LoginSchema,\r\n  RegisterSchema,\r\n  ResetSchema,\r\n  NewPasswordSchema,\r\n} from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\r\n\r\nexport const login = async (\r\n  values: z.infer<typeof LoginSchema>,\r\n  callbackUrl?: string | null,\r\n) => {\r\n  const validatedFields = LoginSchema.safeParse(values);\r\n  if (!validatedFields.success) {\r\n    return { error: \"Invalid fields!\" };\r\n  }\r\n\r\n  const { email, password } = validatedFields.data;\r\n\r\n  const existingUser = await getUserByEmail(email);\r\n  if (!existingUser || !existingUser.email || !existingUser.password) {\r\n    // Either user/email does not exist or user signed in with OAuth\r\n    return { error: \"Email does not exist!\" };\r\n  }\r\n\r\n  const passwordsMatch = await verifyPassword(password, existingUser.password);\r\n\r\n  if (!existingUser.emailVerified) {\r\n    const verificationToken = await generateVerificationToken(\r\n      existingUser.email,\r\n    );\r\n\r\n    if (!passwordsMatch) {\r\n      return { error: \"Invalid credentials!\" };\r\n    }\r\n    await sendVerificationEmail(\r\n      verificationToken.email,\r\n      verificationToken.token,\r\n    );\r\n\r\n    return { success: \"Confirmation email sent!\" };\r\n  }\r\n  if (!passwordsMatch) {\r\n    return { error: \"Invalid credentials!\" };\r\n  }\r\n\r\n  try {\r\n    await signIn(\"credentials\", {\r\n      email,\r\n      password,\r\n      redirectTo: callbackUrl || DEFAULT_LOGIN_REDIRECT,\r\n    }); // explicitly setting the redirect (for clarity), even though middleware will redirect if user is logged in\r\n\r\n    return { success: \"Logged in!\" };\r\n  } catch (error) {\r\n    if (error instanceof AuthError) {\r\n      switch (error.type) {\r\n        case \"CredentialsSignin\": {\r\n          return { error: \"Invalid credentials!\" };\r\n        }\r\n        default: {\r\n          return { error: \"Something went wrong!\" };\r\n        }\r\n      }\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logout = async () => {\r\n  await signOut();\r\n};\r\n\r\nexport const register = async (values: z.infer<typeof RegisterSchema>) => {\r\n  const validatedFields = RegisterSchema.safeParse(values);\r\n  if (!validatedFields.success) {\r\n    return { error: \"Invalid fields!\" };\r\n  }\r\n\r\n  const { email, password, name } = validatedFields.data;\r\n  const hashedPassword = await hashPassword(password);\r\n\r\n  const existingUser = await getUserByEmail(email);\r\n\r\n  if (existingUser) {\r\n    return { error: \"Email already in use!\" };\r\n  }\r\n\r\n  await db.user.create({\r\n    data: {\r\n      email,\r\n      password: hashedPassword,\r\n      name,\r\n    },\r\n  });\r\n\r\n  const verificationToken = await generateVerificationToken(email);\r\n  await sendVerificationEmail(verificationToken.email, verificationToken.token);\r\n\r\n  return { success: \"Confirmation Email Sent!\" };\r\n};\r\n\r\nexport const newVerification = async (token: string) => {\r\n  const existingToken = await getVerificationTokenByToken(token);\r\n  if (!existingToken) {\r\n    return { error: \"Token does not exist\" };\r\n  }\r\n\r\n  const hasExpired = new Date(existingToken.expires) < new Date();\r\n\r\n  if (hasExpired) {\r\n    return { error: \"Token has expired\" };\r\n  }\r\n\r\n  const existingUser = await getUserByEmail(existingToken.email);\r\n\r\n  // Handle case where user exists - normal email verification for new registration\r\n  if (existingUser) {\r\n    await db.user.update({\r\n      where: { id: existingUser.id },\r\n      data: {\r\n        emailVerified: new Date(),\r\n      },\r\n    });\r\n  } else {\r\n    // If we can't find a user with this email, it might be from a registration\r\n    // that created the user but didn't set the email yet\r\n    const pendingUser = await db.user.findFirst({\r\n      where: {\r\n        OR: [{ email: null }, { emailVerified: null }],\r\n      },\r\n      orderBy: {\r\n        id: \"desc\",\r\n      },\r\n    });\r\n\r\n    if (!pendingUser) {\r\n      return { error: \"User not found!\" };\r\n    }\r\n\r\n    await db.user.update({\r\n      where: { id: pendingUser.id },\r\n      data: {\r\n        email: existingToken.email,\r\n        emailVerified: new Date(),\r\n      },\r\n    });\r\n  }\r\n\r\n  await db.verificationToken.delete({\r\n    where: { id: existingToken.id },\r\n  });\r\n\r\n  return { success: \"Email verified!\" };\r\n};\r\n\r\nexport const reset = async (values: z.infer<typeof ResetSchema>) => {\r\n  const validatedFields = ResetSchema.safeParse(values);\r\n\r\n  if (!validatedFields.success) return { error: \"Invalid email!\" };\r\n\r\n  const { email } = validatedFields.data;\r\n\r\n  const existingUser = await getUserByEmail(email);\r\n  if (!existingUser) return { error: \"Email not found!\" };\r\n\r\n  const isOAuthAccount = await db.account.findFirst({\r\n    where: { userId: existingUser?.id },\r\n  });\r\n\r\n  if (isOAuthAccount)\r\n    return { error: \"Cannot reset password for OAuth account!\" };\r\n\r\n  const passwordResetToken = await generatePasswordResetToken(email);\r\n  await sendPasswordResetEmail(\r\n    passwordResetToken.email,\r\n    passwordResetToken.token,\r\n  );\r\n\r\n  return { success: \"Reset password email sent\" };\r\n};\r\n\r\nexport const newPassword = async (\r\n  values: z.infer<typeof NewPasswordSchema>,\r\n  token?: string | null,\r\n) => {\r\n  if (!token) return { error: \"Missing token!\" };\r\n\r\n  const validatedFields = NewPasswordSchema.safeParse(values);\r\n\r\n  if (!validatedFields.success) return { error: \"Invalid fields!\" };\r\n\r\n  const { password } = validatedFields.data;\r\n\r\n  const existingToken = await getPasswordResetTokenByToken(token);\r\n\r\n  if (!existingToken) return { error: \"Invalid token!\" };\r\n\r\n  const hasExpired = new Date(existingToken.expires) < new Date();\r\n\r\n  if (hasExpired) return { error: \"Token has expired!\" };\r\n\r\n  const existingUser = await getUserByEmail(existingToken.email);\r\n\r\n  if (!existingUser) return { error: \"Email does not exist!\" };\r\n\r\n  const hashedPassword = await hashPassword(password);\r\n\r\n  await db.user.update({\r\n    where: { id: existingUser.id },\r\n    data: { password: hashedPassword },\r\n  });\r\n\r\n  await db.passwordResetToken.delete({\r\n    where: { id: existingToken.id },\r\n  });\r\n\r\n  return { success: \"Password updated!\" };\r\n};\r\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@/lib/generated/prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalThis.prisma = db;\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/auth.ts",
      "content": "import NextAuth from \"next-auth\";\r\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\r\nimport authConfig from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth.config\";\r\nimport { db } from \"@/registry/new-york/lib/db\";\r\nimport { getUserById } from \"@/registry/new-york/dynamic-components/simple-auth/lib/user\";\r\n\r\nexport const { auth, handlers, signIn, signOut } = NextAuth({\r\n  pages: {\r\n    signIn: \"/auth/login\",\r\n  },\r\n  events: {\r\n    async linkAccount({ user }) {\r\n      await db.user.update({\r\n        where: { id: user.id },\r\n        data: { emailVerified: new Date() },\r\n      });\r\n    },\r\n  },\r\n  callbacks: {\r\n    async signIn({ user, account }) {\r\n      const existingUser = await getUserById(user.id!);\r\n\r\n      //Prevent login if email is not verified\r\n      if (!existingUser?.emailVerified) return false;\r\n\r\n      return true;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token.sub && session.user) {\r\n        session.user.id = token.sub;\r\n      }\r\n\r\n      if (session.user) {\r\n        session.user.name = token.name;\r\n        session.user.email = token.email as string;\r\n      }\r\n      return session;\r\n    },\r\n\r\n    async jwt({ token }) {\r\n      if (!token.sub) {\r\n        return token;\r\n      }\r\n\r\n      const existingUser = await getUserById(token.sub);\r\n\r\n      if (!existingUser) {\r\n        return token;\r\n      }\r\n\r\n      token.role = existingUser.role;\r\n      token.isTwoFactorEnabled = existingUser.isTwoFactorEnabled;\r\n\r\n      token.name = existingUser.name;\r\n      token.email = existingUser.email;\r\n\r\n      return token;\r\n    },\r\n  },\r\n  adapter: PrismaAdapter(db),\r\n  session: { strategy: \"jwt\" },\r\n  ...authConfig,\r\n});\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/routes.ts",
      "content": "export const publicRoutes = [\"/\", \"/auth/verify\"];\r\n\r\n/**\r\n * An array of routes that are accessible only to authenticated users.\r\n * @type {string[]}\r\n */\r\nexport const authRoutes = [\r\n  \"/auth/login\",\r\n  \"/auth/register\",\r\n  \"/auth/reset\",\r\n  \"/auth/new-password\",\r\n];\r\n\r\n/**\r\n * An array of routes that are accessible only to admin users.\r\n * @type {string[]}\r\n */\r\nexport const adminRoutes = [\r\n  \"/admin\",\r\n  // Add other admin routes here\r\n];\r\n\r\n/**\r\n * The prefix for all API auth routes.\r\n * @type {string}\r\n */\r\nexport const apiAuthPrefix = \"/api/auth\";\r\n\r\n/**\r\n * The default redirect path after a successful login.\r\n * @type {string}\r\n */\r\nexport const DEFAULT_LOGIN_REDIRECT = \"/auth/dashboard\";\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/auth-helpers.ts",
      "content": "import { db } from \"@/registry/new-york/lib/db\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport bcryptjs from \"bcryptjs\";\r\n\r\nexport const hashPassword = async (password: string) => {\r\n  return await bcryptjs.hash(password, 10);\r\n};\r\n\r\nexport const verifyPassword = async (\r\n  inputPassword: string,\r\n  hashedPassword: string,\r\n) => {\r\n  return await bcryptjs.compare(inputPassword, hashedPassword);\r\n};\r\n\r\nexport const getVerificationTokenByToken = async (token: string) => {\r\n  try {\r\n    const verificationToken = await db.verificationToken.findUnique({\r\n      where: { token },\r\n    });\r\n\r\n    return verificationToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getVerificationTokenByEmail = async (email: string) => {\r\n  try {\r\n    const verificationToken = await db.verificationToken.findFirst({\r\n      where: { email },\r\n    });\r\n\r\n    return verificationToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const generateVerificationToken = async (\r\n  email: string,\r\n  userId?: string,\r\n) => {\r\n  const token = uuidv4();\r\n  const expires = new Date(new Date().getTime() + 3600 * 1000);\r\n\r\n  const existingToken = await getVerificationTokenByEmail(email);\r\n\r\n  if (existingToken) {\r\n    await db.verificationToken.delete({\r\n      where: { id: existingToken.id },\r\n    });\r\n  }\r\n\r\n  const verificationToken = await db.verificationToken.create({\r\n    data: {\r\n      email,\r\n      token,\r\n      expires,\r\n      userId, // Will be undefined for new registrations, populated for email changes\r\n    },\r\n  });\r\n\r\n  return verificationToken;\r\n};\r\n\r\nexport const getPasswordResetTokenByToken = async (token: string) => {\r\n  try {\r\n    const passwordResetToken = await db.passwordResetToken.findUnique({\r\n      where: {\r\n        token,\r\n      },\r\n    });\r\n    return passwordResetToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getPasswordResetTokenByEmail = async (email: string) => {\r\n  try {\r\n    const passwordResetToken = await db.passwordResetToken.findFirst({\r\n      where: {\r\n        email,\r\n      },\r\n    });\r\n    return passwordResetToken;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const generatePasswordResetToken = async (email: string) => {\r\n  const token = uuidv4();\r\n  const expires = new Date(new Date().getTime() + 3600 * 1000);\r\n\r\n  const existingToken = await getPasswordResetTokenByEmail(email);\r\n\r\n  if (existingToken) {\r\n    await db.passwordResetToken.delete({\r\n      where: { id: existingToken.id },\r\n    });\r\n  }\r\n\r\n  const passwordResetToken = await db.passwordResetToken.create({\r\n    data: {\r\n      email,\r\n      token,\r\n      expires,\r\n    },\r\n  });\r\n\r\n  return passwordResetToken;\r\n};\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/user.ts",
      "content": "import { db } from \"@/registry/new-york/lib/db\";\r\n\r\nexport const getUserByEmail = async (email: string) => {\r\n  try {\r\n    const user = await db.user.findFirst({\r\n      where: { email },\r\n    });\r\n    return user;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\nexport const getUpdatedEmailUser = async (email: string) => {\r\n  try {\r\n    const user = await db.verificationToken.findFirst({\r\n      where: { email },\r\n    });\r\n    return user;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getUserById = async (id: string) => {\r\n  try {\r\n    const user = await db.user.findFirst({\r\n      where: { id },\r\n    });\r\n    return user;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getAccountByUserId = async (userId: string) => {\r\n  try {\r\n    const account = await db.account.findFirst({\r\n      where: {\r\n        userId,\r\n      },\r\n    });\r\n\r\n    return account;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/get-user.ts",
      "content": "import { auth } from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth\";\r\n\r\nexport const currentUser = async () => {\r\n  const session = await auth();\r\n  return session?.user;\r\n};\r\n\r\nexport const currentRole = async () => {\r\n  const session = await auth();\r\n  return session?.user?.role;\r\n};\r\nexport const isCurrentAccountOAuth = async () => {\r\n  const session = await auth();\r\n  return session?.user?.isOAuth;\r\n};\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/next-auth.d.ts",
      "content": "import { UserRole } from \"@prisma/client\";\r\nimport NextAuth, { type DefaultSession } from \"next-auth\";\r\nimport { JWT } from \"next-auth/jwt\";\r\n\r\ndeclare module \"next-auth/jwt\" {\r\n  interface JWT {\r\n    role: UserRole;\r\n    isTwoFactorEnabled: boolean;\r\n    isOAuth: boolean;\r\n  }\r\n}\r\n\r\nexport type ExtendedUser = DefaultSession[\"user\"] & {\r\n  role: UserRole;\r\n  isTwoFactorEnabled: boolean;\r\n  isOAuth: boolean;\r\n};\r\n\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    user: ExtendedUser;\r\n  }\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/auth.config.ts",
      "content": "import Credentials from \"next-auth/providers/credentials\";\r\nimport type { NextAuthConfig } from \"next-auth\";\r\nimport { getUserByEmail } from \"@/registry/new-york/dynamic-components/simple-auth/lib/user\";\r\nimport { verifyPassword } from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth-helpers\";\r\nimport { LoginSchema } from \"@/registry/new-york/dynamic-components/simple-auth/schemas\";\r\n\r\nexport default {\r\n  providers: [\r\n    Credentials({\r\n      async authorize(credentials) {\r\n        const validatedFields = LoginSchema.safeParse(credentials);\r\n\r\n        if (validatedFields.success) {\r\n          const { email, password } = validatedFields.data;\r\n          const user = await getUserByEmail(email);\r\n\r\n          if (!user || !user.password) return null;\r\n\r\n          const passwordsMatch = await verifyPassword(password, user.password);\r\n\r\n          if (passwordsMatch) return user;\r\n        }\r\n        return null;\r\n      },\r\n    }),\r\n  ],\r\n} satisfies NextAuthConfig;\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/lib/mail.ts",
      "content": "import nodemailer from \"nodemailer\";\r\nimport { render } from \"@react-email/render\";\r\nimport VerificationEmail from \"@/registry/new-york/dynamic-components/simple-auth/emails/verification-email\";\r\nimport ResetPasswordEmail from \"@/registry/new-york/dynamic-components/simple-auth/emails/reset-password-email\";\r\n\r\nexport const transporter = nodemailer.createTransport({\r\n  host: process.env.EMAIL_SERVER_HOST,\r\n  port: Number(process.env.EMAIL_SERVER_PORT),\r\n  auth: {\r\n    user: process.env.EMAIL_SERVER_USER,\r\n    pass: process.env.EMAIL_SERVER_PASSWORD,\r\n  },\r\n});\r\n\r\nexport const sendVerificationEmail = async (\r\n  email: string,\r\n  token: string,\r\n  isEmailChange = false,\r\n) => {\r\n  // Add emailChange parameter to the URL for email changes\r\n  const confirmLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/verify?token=${token}${isEmailChange ? \"&emailChange=true\" : \"\"}`;\r\n\r\n  const emailHtml = await render(VerificationEmail({ confirmLink }));\r\n\r\n  await transporter.sendMail({\r\n    from: `AxionJS - <${process.env.EMAIL_FROM}>`,\r\n    to: email,\r\n    subject: isEmailChange\r\n      ? \"Confirm your new email address\"\r\n      : \"Confirm your email address\",\r\n    html: emailHtml,\r\n  });\r\n};\r\n\r\nexport const sendPasswordResetEmail = async (email: string, token: string) => {\r\n  const resetLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/new-password?token=${token}`;\r\n\r\n  const emailHtml = await render(ResetPasswordEmail({ resetLink }));\r\n\r\n  await transporter.sendMail({\r\n    from: `AxionJS - <${process.env.EMAIL_FROM}>`,\r\n    to: email,\r\n    subject: \"Reset your password\",\r\n    html: emailHtml,\r\n  });\r\n};\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/route.ts",
      "content": "import { handlers } from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth\";\r\nexport const { GET, POST } = handlers;\r\n",
      "type": "registry:api",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/emails/verification-email.tsx",
      "content": "import {\r\n  Body,\r\n  Button,\r\n  Container,\r\n  Head,\r\n  Hr,\r\n  Html,\r\n  Preview,\r\n  Section,\r\n  Text,\r\n} from \"@react-email/components\";\r\nimport { Tailwind } from \"@react-email/tailwind\";\r\n\r\ninterface VerificationEmailProps {\r\n  confirmLink: string;\r\n}\r\n\r\nexport default function VerificationEmail({\r\n  confirmLink,\r\n}: VerificationEmailProps) {\r\n  return (\r\n    <Html>\r\n      <Head />\r\n      <Preview>Verify your email address</Preview>\r\n      <Tailwind>\r\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\r\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\r\n            <Section className=\"mt-[32px]\">\r\n              <Text className=\"text-black text-[24px] font-medium mb-[0] mt-[0] mx-[0]\">\r\n                Verify your email\r\n              </Text>\r\n              <Text className=\"text-black text-[14px] leading-[24px]\">\r\n                Click the button below to verify your email address.\r\n              </Text>\r\n              <Button\r\n                className=\"bg-blue-600 rounded text-white font-medium py-[8px] px-[20px]\"\r\n                href={confirmLink}\r\n              >\r\n                Confirm Email\r\n              </Button>\r\n              <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-[0] w-full\" />\r\n              <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\r\n                This link will expire in 24 hours.\r\n              </Text>\r\n            </Section>\r\n          </Container>\r\n        </Body>\r\n      </Tailwind>\r\n    </Html>\r\n  );\r\n}\r\n",
      "type": "registry:email",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/emails/reset-password-email.tsx",
      "content": "import {\r\n  Body,\r\n  Button,\r\n  Container,\r\n  Head,\r\n  Hr,\r\n  Html,\r\n  Preview,\r\n  Section,\r\n  Text,\r\n} from \"@react-email/components\";\r\nimport { Tailwind } from \"@react-email/tailwind\";\r\n\r\ninterface ResetPasswordEmailProps {\r\n  resetLink: string;\r\n}\r\n\r\nexport default function ResetPasswordEmail({\r\n  resetLink,\r\n}: ResetPasswordEmailProps) {\r\n  return (\r\n    <Html>\r\n      <Head />\r\n      <Preview>Reset your password</Preview>\r\n      <Tailwind>\r\n        <Body className=\"bg-white my-auto mx-auto font-sans\">\r\n          <Container className=\"border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] w-[465px]\">\r\n            <Section className=\"mt-[32px]\">\r\n              <Text className=\"text-black text-[24px] font-medium mb-[0] mt-[0] mx-[0]\">\r\n                Reset your password\r\n              </Text>\r\n              <Text className=\"text-black text-[14px] leading-[24px]\">\r\n                Click the button below to reset your password.\r\n              </Text>\r\n              <Button\r\n                className=\"bg-blue-600 rounded text-white font-medium py-[8px] px-[20px]\"\r\n                href={resetLink}\r\n              >\r\n                Reset Password\r\n              </Button>\r\n              <Text className=\"text-black text-[14px] leading-[24px]\">\r\n                If you did not request a password reset, you can safely ignore\r\n                this email.\r\n              </Text>\r\n              <Hr className=\"border border-solid border-[#eaeaea] my-[26px] mx-[0] w-full\" />\r\n              <Text className=\"text-[#666666] text-[12px] leading-[24px]\">\r\n                This link will expire in 1 hour.\r\n              </Text>\r\n            </Section>\r\n          </Container>\r\n        </Body>\r\n      </Tailwind>\r\n    </Html>\r\n  );\r\n}\r\n",
      "type": "registry:email",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/auth/login/page.tsx",
      "content": "import { LoginForm } from \"@/registry/new-york/dynamic-components/simple-auth/components/login-form\";\r\n\r\nconst LoginPage = () => {\r\n  return <LoginForm />;\r\n};\r\n\r\nexport default LoginPage;\r\n",
      "type": "registry:page",
      "target": "app/auth/login/page.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/auth/register/page.tsx",
      "content": "import { RegisterForm } from \"@/registry/new-york/dynamic-components/simple-auth/components/register-form\";\r\n\r\nconst RegisterPage = () => {\r\n  return <RegisterForm />;\r\n};\r\n\r\nexport default RegisterPage;\r\n",
      "type": "registry:page",
      "target": "app/auth/register/page.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/auth/reset/page.tsx",
      "content": "import { ResetForm } from \"@/registry/new-york/dynamic-components/simple-auth/components/reset-form\";\r\n\r\nexport default function ResetPage() {\r\n  return (\r\n    <div className=\"flex h-screen items-center justify-center\">\r\n      <ResetForm />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/reset/page.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/auth/new-password/page.tsx",
      "content": "import { NewPasswordForm } from \"@/registry/new-york/dynamic-components/auth/components/new-password-form\";\r\nimport { Suspense } from \"react\";\r\n\r\nexport default function NewPasswordPage() {\r\n  return (\r\n    <Suspense>\r\n      <NewPasswordForm />\r\n    </Suspense>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/new-password/page.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/auth/verify/page.tsx",
      "content": "\"use client\";\r\n\r\nimport { NewVerificationForm } from \"@/registry/new-york/dynamic-components/simple-auth/components/new-verification-form\";\r\n\r\nexport default function VerifyPage() {\r\n  return <NewVerificationForm />;\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/verify/page.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/schemas/index.ts",
      "content": "import * as z from \"zod\";\r\n\r\nexport const LoginSchema = z.object({\r\n  email: z.string().email({\r\n    message: \"Invalid email address\",\r\n  }),\r\n  password: z.string().min(1, {\r\n    message: \"Password is required\",\r\n  }),\r\n});\r\n\r\nexport const RegisterSchema = z.object({\r\n  email: z.string().email({\r\n    message: \"Invalid email address\",\r\n  }),\r\n  password: z.string().min(6, {\r\n    message: \"Password must be at least 6 characters\",\r\n  }),\r\n  name: z.string().min(1, {\r\n    message: \"Name is required\",\r\n  }),\r\n});\r\n\r\nexport const ResetSchema = z.object({\r\n  email: z.string().email({\r\n    message: \"Email is required\",\r\n  }),\r\n});\r\n\r\nexport const NewPasswordSchema = z.object({\r\n  password: z.string().min(6, { message: \"Minimum 6 characters required\" }),\r\n});\r\n",
      "type": "registry:schemas",
      "target": ""
    },
    {
      "path": "dynamic-components/simple-auth/auth/layout.tsx",
      "content": "import React from \"react\";\r\n\r\nconst SimpleAuthLayout = ({ children }: { children: React.ReactNode }) => {\r\n  return (\r\n    <div className=\"h-full flex items-center justify-center pt-10\">\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\nexport default SimpleAuthLayout;\r\n",
      "type": "registry:file",
      "target": "app/auth/layout.tsx"
    },
    {
      "path": "dynamic-components/simple-auth/middleware.ts",
      "content": "import authConfig from \"@/registry/new-york/dynamic-components/simple-auth/lib/auth.config\";\r\nimport NextAuth from \"next-auth\";\r\n\r\nimport {\r\n  DEFAULT_LOGIN_REDIRECT,\r\n  apiAuthPrefix,\r\n  authRoutes,\r\n  publicRoutes,\r\n} from \"@/registry/new-york/dynamic-components/simple-auth/lib/routes\";\r\n\r\nconst { auth } = NextAuth(authConfig);\r\nexport default auth((req) => {\r\n  const { nextUrl } = req;\r\n  const isLoggedIn = !!req.auth;\r\n\r\n  const isApiAuthRoute = nextUrl.pathname.startsWith(apiAuthPrefix);\r\n  const isPublicRoute = publicRoutes.includes(nextUrl.pathname);\r\n  const isAuthRoute = authRoutes.includes(nextUrl.pathname);\r\n\r\n  if (isApiAuthRoute) {\r\n    return;\r\n  }\r\n\r\n  if (isAuthRoute) {\r\n    if (isLoggedIn) {\r\n      return Response.redirect(new URL(DEFAULT_LOGIN_REDIRECT, nextUrl));\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (!isLoggedIn && !isPublicRoute) {\r\n    return Response.redirect(new URL(\"/auth/login\", nextUrl));\r\n  }\r\n\r\n  return;\r\n});\r\n\r\nexport const config = {\r\n  matcher: [\r\n    // Skip Next.js internals and all static files, unless found in search params\r\n    \"/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)\",\r\n    // Always run for API routes\r\n    \"/(api|trpc)(.*)\",\r\n  ],\r\n};\r\n",
      "type": "registry:middleware",
      "target": ""
    }
  ]
}
{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "questionnaire-form-2",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A questionnaire form.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "separator",
    "progress",
    "radio-group",
    "checkbox",
    "textarea",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/questionnaire-form-2.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useId } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Loader2,\n  ChevronLeft,\n  ChevronRight,\n  UserIcon,\n  AtSignIcon,\n  Star,\n  Check,\n} from \"lucide-react\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\nimport { Textarea } from \"@/registry/new-york/ui/textarea\";\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport { Progress } from \"@/registry/new-york/ui/progress\";\nimport { cn } from \"@/lib/utils\";\nimport { Separator } from \"@/registry/new-york/ui/separator\";\n\n// Define the form validation schema\nconst formSchema = z.object({\n  // Step 1: Personal Information\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n  age: z.string().min(1, { message: \"Age is required\" }),\n\n  // Step 2: Preferences\n  preferredContact: z.enum([\"email\", \"phone\", \"mail\"], {\n    required_error: \"Please select a preferred contact method\",\n  }),\n  interests: z\n    .array(z.string())\n    .min(1, { message: \"Please select at least one interest\" }),\n\n  // Step 3: Feedback\n  satisfaction: z.enum(\n    [\n      \"very-satisfied\",\n      \"satisfied\",\n      \"neutral\",\n      \"dissatisfied\",\n      \"very-dissatisfied\",\n    ],\n    {\n      required_error: \"Please rate your satisfaction\",\n    },\n  ),\n  feedback: z\n    .string()\n    .min(10, { message: \"Feedback must be at least 10 characters\" }),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\n// Define interest options\ninterface InterestOption {\n  id: string;\n  label: string;\n  icon?: React.ReactNode;\n}\n\nconst defaultInterestOptions: InterestOption[] = [\n  {\n    id: \"technology\",\n    label: \"Technology\",\n    icon: (\n      <svg\n        className=\"h-4 w-4\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n        />\n      </svg>\n    ),\n  },\n  {\n    id: \"sports\",\n    label: \"Sports\",\n    icon: (\n      <svg\n        className=\"h-4 w-4\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        />\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z\"\n        />\n      </svg>\n    ),\n  },\n  {\n    id: \"music\",\n    label: \"Music\",\n    icon: (\n      <svg\n        className=\"h-4 w-4\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3\"\n        />\n      </svg>\n    ),\n  },\n  {\n    id: \"art\",\n    label: \"Art\",\n    icon: (\n      <svg\n        className=\"h-4 w-4\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01\"\n        />\n      </svg>\n    ),\n  },\n  {\n    id: \"travel\",\n    label: \"Travel\",\n    icon: (\n      <svg\n        className=\"h-4 w-4\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        />\n      </svg>\n    ),\n  },\n  {\n    id: \"food\",\n    label: \"Food\",\n    icon: (\n      <svg\n        className=\"h-4 w-4\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253\"\n        />\n      </svg>\n    ),\n  },\n];\n\ninterface QuestionnaireFormProps {\n  /**\n   * Function to handle form submission\n   */\n  onSubmit?: (data: FormValues) => Promise<void>;\n  /**\n   * URL to redirect to after successful submission\n   */\n  redirectTo?: string;\n  /**\n   * Custom form action for server-side form processing\n   */\n  formAction?: string;\n  /**\n   * Custom interest options\n   */\n  interestOptions?: InterestOption[];\n  /**\n   * Questionnaire title\n   */\n  title?: string;\n  /**\n   * Custom CSS class for the container\n   */\n  className?: string;\n  /**\n   * Initial step to show (1-based)\n   */\n  initialStep?: number;\n  /**\n   * Show step indicators\n   */\n  showStepIndicator?: boolean;\n  /**\n   * Label for the submission button\n   */\n  submitButtonLabel?: string;\n}\n\nexport default function QuestionnaireForm({\n  onSubmit: onFormSubmit,\n  redirectTo,\n  formAction,\n  interestOptions = defaultInterestOptions,\n  title = \"Questionnaire\",\n  className,\n  initialStep = 1,\n  showStepIndicator = true,\n  submitButtonLabel = \"Submit\",\n}: QuestionnaireFormProps) {\n  const [step, setStep] = React.useState(initialStep);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  const { toast } = useToast();\n\n  const nameId = useId();\n  const emailId = useId();\n  const ageId = useId();\n\n  const totalSteps = 3; // Define the total number of steps\n  const progressPercentage = ((step - 1) / (totalSteps - 1)) * 100; // Calculate progress percentage\n\n  const formRef = React.useRef<HTMLFormElement>(null); // Define formRef\n  const step1Ref = React.useRef<HTMLDivElement>(null);\n  const step2Ref = React.useRef<HTMLDivElement>(null);\n  const step3Ref = React.useRef<HTMLDivElement>(null);\n  const successRef = React.useRef<HTMLDivElement>(null);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      age: \"\",\n      preferredContact: \"email\",\n      interests: [],\n      satisfaction: \"neutral\",\n      feedback: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n  // Step validation fields\n  const stepValidationFields = {\n    1: [\"name\", \"email\", \"age\"],\n    2: [\"preferredContact\", \"interests\"],\n    3: [\"satisfaction\", \"feedback\"],\n  };\n\n  // Step titles\n  const stepTitles = {\n    1: \"Personal Information\",\n    2: \"Preferences\",\n    3: \"Feedback\",\n  };\n\n  // Handle next step\n  const nextStep = async () => {\n    // Validate current step fields\n    const isValid = await form.trigger(\n      stepValidationFields[step as keyof typeof stepValidationFields] as any,\n    );\n\n    if (isValid) {\n      // Move to next step\n      setStep((prev) => prev + 1);\n\n      // Focus management for screen readers\n      setTimeout(() => {\n        if (step === 1 && step2Ref.current) {\n          step2Ref.current.focus();\n        } else if (step === 2 && step3Ref.current) {\n          step3Ref.current.focus();\n        }\n      }, 100);\n\n      // Scroll to top of form\n      if (formRef.current) {\n        formRef.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n      }\n    }\n  };\n\n  // Handle previous step\n  const prevStep = () => {\n    setStep((prev) => prev - 1);\n\n    // Focus management for screen readers\n    setTimeout(() => {\n      if (step === 2 && step1Ref.current) {\n        step1Ref.current.focus();\n      } else if (step === 3 && step2Ref.current) {\n        step2Ref.current.focus();\n      }\n    }, 100);\n\n    // Scroll to top of form\n    if (formRef.current) {\n      formRef.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  };\n\n  // Handle form submission\n  async function handleSubmit(data: FormValues) {\n    try {\n      setIsLoading(true);\n\n      // Use provided callback or simulate API call\n      if (onFormSubmit) {\n        await onFormSubmit(data);\n      } else {\n        // Simulate API call\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(\"Form data:\", data);\n      }\n\n      setIsSubmitted(true);\n\n      toast({\n        title: \"Questionnaire submitted!\",\n        description: \"Thank you for completing our questionnaire.\",\n      });\n\n      // Focus success message for accessibility\n      setTimeout(() => {\n        if (successRef.current) {\n          successRef.current.focus();\n        }\n      }, 100);\n\n      // Redirect if specified\n      if (redirectTo) {\n        window.location.href = redirectTo;\n      }\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n\n      toast({\n        title: \"Submission failed\",\n        description:\n          \"There was a problem submitting your responses. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div\n      className={cn(\n        \"w-full max-w-2xl mx-auto bg-background text-foreground rounded-lg border shadow-md p-6\",\n        className,\n      )}\n    >\n      {/* Step indicator */}\n      {showStepIndicator && !isSubmitted && (\n        <div className=\"mb-8\">\n          {/* Progress bar */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-primary font-medium\">\n                Step {step} of {totalSteps}\n              </span>\n              <span className=\"text-muted-foreground\">\n                {stepTitles[step as keyof typeof stepTitles]}\n              </span>\n            </div>\n            <Progress value={progressPercentage} className=\"h-2\" />\n          </div>\n\n          {/* Step circles */}\n          <div className=\"hidden sm:flex justify-between items-center mt-4\">\n            {[1, 2, 3].map((stepNumber) => (\n              <div key={stepNumber} className=\"flex flex-col items-center\">\n                <div\n                  className={cn(\n                    \"w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors\",\n                    stepNumber < step\n                      ? \"bg-primary text-primary-foreground\"\n                      : stepNumber === step\n                        ? \"bg-primary/10 text-primary border-2 border-primary\"\n                        : \"bg-muted text-muted-foreground\",\n                  )}\n                  aria-hidden=\"true\"\n                >\n                  {stepNumber < step ? (\n                    <Check className=\"h-4 w-4\" />\n                  ) : (\n                    stepNumber\n                  )}\n                </div>\n                <span\n                  className={cn(\n                    \"text-xs mt-1\",\n                    stepNumber === step\n                      ? \"text-primary font-medium\"\n                      : \"text-muted-foreground\",\n                  )}\n                >\n                  {stepTitles[stepNumber as keyof typeof stepTitles]}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {isSubmitted ? (\n        <div\n          className=\"text-center space-y-4 py-6\"\n          ref={successRef}\n          tabIndex={-1}\n          role=\"alert\"\n          aria-live=\"polite\"\n        >\n          <div className=\"rounded-full w-16 h-16 bg-primary/20 mx-auto flex items-center justify-center\">\n            <Check className=\"w-8 h-8 text-primary\" aria-hidden=\"true\" />\n          </div>\n          <h3 className=\"text-lg font-medium\">Thank You!</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Your feedback has been submitted successfully. We appreciate your\n            time and input.\n          </p>\n\n          <div className=\"mt-4 bg-muted/50 rounded-lg p-4 max-w-md mx-auto\">\n            <h4 className=\"font-medium text-left mb-2\">Your Responses</h4>\n            <div className=\"space-y-3 text-sm text-left\">\n              <div>\n                <p className=\"text-muted-foreground\">Name:</p>\n                <p className=\"font-medium\">{form.getValues().name}</p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">Email:</p>\n                <p className=\"font-medium\">{form.getValues().email}</p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">Interests:</p>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {form.getValues().interests.map((interest) => (\n                    <span\n                      key={interest}\n                      className=\"inline-flex items-center rounded-full bg-primary/10 px-2 py-1 text-xs\"\n                    >\n                      {interestOptions.find((opt) => opt.id === interest)\n                        ?.label || interest}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">Satisfaction:</p>\n                <p className=\"font-medium capitalize\">\n                  {form.getValues().satisfaction.replace(/-/g, \" \")}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <Button\n            className=\"mt-4\"\n            onClick={() => {\n              setIsSubmitted(false);\n              setStep(1);\n              form.reset();\n            }}\n          >\n            Submit Another Response\n          </Button>\n        </div>\n      ) : (\n        <Form {...form}>\n          <form\n            ref={formRef}\n            onSubmit={form.handleSubmit(handleSubmit)}\n            className=\"space-y-6\"\n            action={formAction}\n            noValidate\n          >\n            {/* Step 1: Personal Information */}\n            {step === 1 && (\n              <div\n                className=\"space-y-4\"\n                ref={step1Ref}\n                tabIndex={-1}\n                aria-labelledby=\"step1-heading\"\n              >\n                <h3\n                  id=\"step1-heading\"\n                  className=\"text-lg font-medium flex items-center\"\n                >\n                  <UserIcon\n                    className=\"mr-2 h-5 w-5 text-primary\"\n                    aria-hidden=\"true\"\n                  />\n                  Personal Information\n                </h3>\n                <Separator className=\"my-4\" />\n\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor={nameId}>Full Name</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            id={nameId}\n                            placeholder=\"John Doe\"\n                            className=\"peer ps-9\"\n                            {...field}\n                            autoComplete=\"name\"\n                            aria-required=\"true\"\n                          />\n                          <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                            <UserIcon size={16} aria-hidden=\"true\" />\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor={emailId}>Email</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            id={emailId}\n                            placeholder=\"name@example.com\"\n                            className=\"peer ps-9\"\n                            type=\"email\"\n                            {...field}\n                            autoComplete=\"email\"\n                            aria-required=\"true\"\n                          />\n                          <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                            <AtSignIcon size={16} aria-hidden=\"true\" />\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"age\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor={ageId}>Age</FormLabel>\n                      <FormControl>\n                        <Input\n                          id={ageId}\n                          placeholder=\"30\"\n                          type=\"number\"\n                          {...field}\n                          min=\"0\"\n                          max=\"120\"\n                          aria-required=\"true\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            )}\n\n            {/* Step 2: Preferences */}\n            {step === 2 && (\n              <div\n                className=\"space-y-4\"\n                ref={step2Ref}\n                tabIndex={-1}\n                aria-labelledby=\"step2-heading\"\n              >\n                <h3\n                  id=\"step2-heading\"\n                  className=\"text-lg font-medium flex items-center\"\n                >\n                  <Star\n                    className=\"mr-2 h-5 w-5 text-primary\"\n                    aria-hidden=\"true\"\n                  />\n                  Preferences\n                </h3>\n                <Separator className=\"my-4\" />\n\n                <FormField\n                  control={form.control}\n                  name=\"preferredContact\"\n                  render={({ field }) => (\n                    <FormItem className=\"space-y-3\">\n                      <FormLabel id=\"contact-method-label\">\n                        Preferred Contact Method\n                      </FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          defaultValue={field.value}\n                          className=\"flex flex-col space-y-3\"\n                          aria-labelledby=\"contact-method-label\"\n                        >\n                          {[\n                            { value: \"email\", label: \"Email\" },\n                            { value: \"phone\", label: \"Phone\" },\n                            { value: \"mail\", label: \"Mail\" },\n                          ].map((option) => (\n                            <FormItem\n                              key={option.value}\n                              className=\"flex items-center space-x-3 space-y-0 rounded-md border p-3 hover:bg-muted/50 transition-colors\"\n                            >\n                              <FormControl>\n                                <RadioGroupItem\n                                  value={option.value}\n                                  id={`contact-${option.value}`}\n                                />\n                              </FormControl>\n                              <FormLabel\n                                htmlFor={`contact-${option.value}`}\n                                className=\"font-normal cursor-pointer flex-1\"\n                              >\n                                {option.label}\n                              </FormLabel>\n                            </FormItem>\n                          ))}\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"interests\"\n                  render={() => (\n                    <FormItem>\n                      <div className=\"mb-4\">\n                        <FormLabel id=\"interests-group-label\">\n                          Interests\n                        </FormLabel>\n                        <FormDescription>Select all that apply</FormDescription>\n                      </div>\n                      <div\n                        className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\"\n                        role=\"group\"\n                        aria-labelledby=\"interests-group-label\"\n                      >\n                        {interestOptions.map((option) => (\n                          <FormField\n                            key={option.id}\n                            control={form.control}\n                            name=\"interests\"\n                            render={({ field }) => {\n                              return (\n                                <FormItem\n                                  key={option.id}\n                                  className=\"flex items-start space-x-3 space-y-0 rounded-md border p-3 hover:bg-muted/50 transition-colors\"\n                                >\n                                  <FormControl>\n                                    <Checkbox\n                                      id={`interest-${option.id}`}\n                                      checked={field.value?.includes(option.id)}\n                                      onCheckedChange={(checked) => {\n                                        return checked\n                                          ? field.onChange([\n                                              ...field.value,\n                                              option.id,\n                                            ])\n                                          : field.onChange(\n                                              field.value?.filter(\n                                                (value) => value !== option.id,\n                                              ),\n                                            );\n                                      }}\n                                    />\n                                  </FormControl>\n                                  <div className=\"flex items-center space-x-2\">\n                                    {option.icon && (\n                                      <span className=\"text-muted-foreground\">\n                                        {option.icon}\n                                      </span>\n                                    )}\n                                    <FormLabel\n                                      htmlFor={`interest-${option.id}`}\n                                      className=\"font-normal cursor-pointer\"\n                                    >\n                                      {option.label}\n                                    </FormLabel>\n                                  </div>\n                                </FormItem>\n                              );\n                            }}\n                          />\n                        ))}\n                      </div>\n                      <FormMessage className=\"mt-2\" />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            )}\n\n            {/* Step 3: Feedback */}\n            {step === 3 && (\n              <div\n                className=\"space-y-4\"\n                ref={step3Ref}\n                tabIndex={-1}\n                aria-labelledby=\"step3-heading\"\n              >\n                <h3\n                  id=\"step3-heading\"\n                  className=\"text-lg font-medium flex items-center\"\n                >\n                  <svg\n                    className=\"mr-2 h-5 w-5 text-primary\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                    aria-hidden=\"true\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z\"\n                    />\n                  </svg>\n                  Feedback\n                </h3>\n                <Separator className=\"my-4\" />\n\n                <FormField\n                  control={form.control}\n                  name=\"satisfaction\"\n                  render={({ field }) => (\n                    <FormItem className=\"space-y-3\">\n                      <FormLabel id=\"satisfaction-label\">\n                        How satisfied are you with our service?\n                      </FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          defaultValue={field.value}\n                          className=\"flex flex-col space-y-3\"\n                          aria-labelledby=\"satisfaction-label\"\n                        >\n                          {[\n                            {\n                              value: \"very-satisfied\",\n                              label: \"Very Satisfied\",\n                              emoji: \"😁\",\n                            },\n                            {\n                              value: \"satisfied\",\n                              label: \"Satisfied\",\n                              emoji: \"🙂\",\n                            },\n                            { value: \"neutral\", label: \"Neutral\", emoji: \"😐\" },\n                            {\n                              value: \"dissatisfied\",\n                              label: \"Dissatisfied\",\n                              emoji: \"🙁\",\n                            },\n                            {\n                              value: \"very-dissatisfied\",\n                              label: \"Very Dissatisfied\",\n                              emoji: \"😞\",\n                            },\n                          ].map((option) => (\n                            <FormItem\n                              key={option.value}\n                              className={cn(\n                                \"flex items-center space-x-3 space-y-0 rounded-md border p-3 hover:bg-muted/50 transition-colors\",\n                                field.value === option.value &&\n                                  \"border-primary bg-primary/5\",\n                              )}\n                            >\n                              <FormControl>\n                                <RadioGroupItem\n                                  value={option.value}\n                                  id={`satisfaction-${option.value}`}\n                                />\n                              </FormControl>\n                              <FormLabel\n                                htmlFor={`satisfaction-${option.value}`}\n                                className=\"font-normal cursor-pointer flex-1 flex items-center\"\n                              >\n                                <span\n                                  className=\"mr-2 text-lg\"\n                                  aria-hidden=\"true\"\n                                >\n                                  {option.emoji}\n                                </span>\n                                {option.label}\n                              </FormLabel>\n                            </FormItem>\n                          ))}\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"feedback\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor=\"feedback-textarea\">\n                        Additional Feedback\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea\n                          id=\"feedback-textarea\"\n                          placeholder=\"Please share any additional thoughts or suggestions\"\n                          className=\"resize-none min-h-[150px]\"\n                          {...field}\n                          aria-required=\"true\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Your feedback helps us improve our services\n                      </FormDescription>\n                      <FormMessage />\n                      <div className=\"text-xs text-right text-muted-foreground mt-1\">\n                        {field.value.length} characters\n                      </div>\n                    </FormItem>\n                  )}\n                />\n              </div>\n            )}\n\n            {/* Navigation buttons */}\n            <div className=\"flex justify-between mt-8\">\n              {step > 1 ? (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={prevStep}\n                  className=\"flex items-center\"\n                >\n                  <ChevronLeft className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\n                  Previous\n                </Button>\n              ) : (\n                <div></div>\n              )}\n\n              {step < totalSteps ? (\n                <Button\n                  type=\"button\"\n                  onClick={nextStep}\n                  variant=\"default\"\n                  className=\"flex items-center\"\n                >\n                  Next\n                  <ChevronRight className=\"ml-2 h-4 w-4\" aria-hidden=\"true\" />\n                </Button>\n              ) : (\n                <Button\n                  type=\"submit\"\n                  disabled={isLoading}\n                  variant=\"shine\"\n                  className=\"flex items-center\"\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2\n                        className=\"mr-2 h-4 w-4 animate-spin\"\n                        aria-hidden=\"true\"\n                      />\n                      <span>Submitting...</span>\n                    </>\n                  ) : (\n                    submitButtonLabel\n                  )}\n                </Button>\n              )}\n            </div>\n          </form>\n        </Form>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
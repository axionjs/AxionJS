{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "middleware",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Middleware for handling authentication.",
  "dependencies": [
    "next-auth@beta",
    "bcryptjs"
  ],
  "files": [
    {
      "path": "auth/middleware.ts",
      "content": "import authConfig from \"@/registry/new-york/auth/lib/auth.config\";\nimport NextAuth from \"next-auth\";\n\nimport {\n  DEFAULT_LOGIN_REDIRECT,\n  apiAuthPrefix,\n  authRoutes,\n  publicRoutes,\n} from \"@/registry/new-york/auth/lib/routes\";\n\nconst { auth } = NextAuth(authConfig);\nexport default auth((req) => {\n  const { nextUrl } = req;\n  const isLoggedIn = !!req.auth;\n\n  const isApiAuthRoute = nextUrl.pathname.startsWith(apiAuthPrefix);\n  const isPublicRoute = publicRoutes.includes(nextUrl.pathname);\n  const isAuthRoute = authRoutes.includes(nextUrl.pathname);\n\n  if (isApiAuthRoute) {\n    return;\n  }\n\n  if (isAuthRoute) {\n    if (isLoggedIn) {\n      return Response.redirect(new URL(DEFAULT_LOGIN_REDIRECT, nextUrl));\n    }\n    return;\n  }\n\n  if (!isLoggedIn && !isPublicRoute) {\n    return Response.redirect(new URL(\"/auth/login\", nextUrl));\n  }\n\n  return;\n});\n\nexport const config = {\n  matcher: [\n    // Skip Next.js internals and all static files, unless found in search params\n    \"/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)\",\n    // Always run for API routes\n    \"/(api|trpc)(.*)\",\n  ],\n};\n",
      "type": "registry:middleware",
      "target": ""
    }
  ]
}
{
  "$schema": "http://localhost:3001/schema/registry-item.json",
  "name": "middleware",
  "type": "registry:auth",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "Middleware for handling authentication.",
  "dependencies": [
    "next-auth@beta",
    "bcryptjs"
  ],
  "files": [
    {
      "path": "auth/middleware.ts",
      "content": "import authConfig from \"@/registry/new-york/auth/lib/auth.config\";\r\nimport NextAuth from \"next-auth\";\r\n\r\nimport {\r\n  DEFAULT_LOGIN_REDIRECT,\r\n  apiAuthPrefix,\r\n  authRoutes,\r\n  publicRoutes,\r\n} from \"@/registry/new-york/auth/lib/routes\";\r\n\r\nconst { auth } = NextAuth(authConfig);\r\nexport default auth((req) => {\r\n  const { nextUrl } = req;\r\n  const isLoggedIn = !!req.auth;\r\n\r\n  const isApiAuthRoute = nextUrl.pathname.startsWith(apiAuthPrefix);\r\n  const isPublicRoute = publicRoutes.includes(nextUrl.pathname);\r\n  const isAuthRoute = authRoutes.includes(nextUrl.pathname);\r\n\r\n  if (isApiAuthRoute) {\r\n    return;\r\n  }\r\n\r\n  if (isAuthRoute) {\r\n    if (isLoggedIn) {\r\n      return Response.redirect(new URL(DEFAULT_LOGIN_REDIRECT, nextUrl));\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (!isLoggedIn && !isPublicRoute) {\r\n    return Response.redirect(new URL(\"/auth/login\", nextUrl));\r\n  }\r\n\r\n  return;\r\n});\r\n\r\nexport const config = {\r\n  matcher: [\r\n    // Skip Next.js internals and all static files, unless found in search params\r\n    \"/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)\",\r\n    // Always run for API routes\r\n    \"/(api|trpc)(.*)\",\r\n  ],\r\n};\r\n",
      "type": "registry:middleware",
      "target": ""
    }
  ]
}
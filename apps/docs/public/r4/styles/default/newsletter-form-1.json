{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "newsletter-form-1",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A newsletter form component.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "use-toast"
  ],
  "files": [
    {
      "path": "blocks/newsletter-form-1.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Loader2 } from \"lucide-react\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormMessage,\n} from \"@/registry/default/ui/form\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { useToast } from \"@/registry/default/hooks/use-toast\";\n\nconst formSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport default function NewsletterForm1() {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  async function onSubmit(data: FormValues) {\n    setIsLoading(true);\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 1500));\n    console.log(data);\n    setIsLoading(false);\n\n    toast({\n      title: \"Subscription successful!\",\n      description: \"You've been added to our newsletter.\",\n    });\n\n    form.reset();\n  }\n\n  return (\n    <div className=\"w-full max-w-md mx-auto p-4\">\n      <div className=\"text-center space-y-2 mb-4\">\n        <h2 className=\"text-2xl font-bold\">Subscribe to our newsletter</h2>\n        <p className=\"text-muted-foreground\">\n          Get the latest updates and news delivered to your inbox\n        </p>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      placeholder=\"name@example.com\"\n                      className=\"flex-1\"\n                      {...field}\n                    />\n                    <Button\n                      type=\"submit\"\n                      disabled={isLoading}\n                      variant=\"ringHover\"\n                    >\n                      {isLoading ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        \"Subscribe\"\n                      )}\n                    </Button>\n                  </div>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </form>\n      </Form>\n\n      <p className=\"text-xs text-muted-foreground text-center mt-4\">\n        By subscribing, you agree to our Terms of Service and Privacy Policy.\n      </p>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
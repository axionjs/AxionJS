{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "event-registration-form-3",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A form for event registration.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "checkbox",
    "use-toast",
    "radio-group"
  ],
  "files": [
    {
      "path": "blocks/event-registration-form-3.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\";\n\nconst formSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n  phone: z.string().min(10, { message: \"Please enter a valid phone number\" }),\n  attendeeType: z.enum([\"individual\", \"student\", \"corporate\"], {\n    required_error: \"Please select an attendee type\",\n  }),\n  sessions: z\n    .array(z.string())\n    .min(1, { message: \"Please select at least one session\" }),\n  agreeTerms: z.boolean().refine((val) => val === true, {\n    message: \"You must agree to the terms and conditions\",\n  }),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst sessions = [\n  {\n    id: \"keynote\",\n    title: \"Opening Keynote\",\n    description: \"The future of technology\",\n    time: \"9:00 AM - 10:30 AM\",\n  },\n  {\n    id: \"workshop-1\",\n    title: \"Workshop: AI Fundamentals\",\n    description: \"Learn the basics of artificial intelligence\",\n    time: \"11:00 AM - 12:30 PM\",\n  },\n  {\n    id: \"workshop-2\",\n    title: \"Workshop: Cloud Computing\",\n    description: \"Scaling your applications in the cloud\",\n    time: \"2:00 PM - 3:30 PM\",\n  },\n  {\n    id: \"panel\",\n    title: \"Industry Panel Discussion\",\n    description: \"Experts discuss emerging trends\",\n    time: \"4:00 PM - 5:30 PM\",\n  },\n];\n\ninterface EventRegistrationFormProps {\n  /**\n   * Optional callback that runs after successful form submission\n   */\n  onRegistrationSuccess?: (data: FormValues) => void;\n  /**\n   * Optional callback that runs if registration fails\n   */\n  onRegistrationError?: (error: unknown) => void;\n  /**\n   * Custom form action for server submission\n   */\n  formAction?: string;\n  /**\n   * Event date (displayed in the event details)\n   */\n  eventDate?: string;\n  /**\n   * Event location (displayed in the event details)\n   */\n  eventLocation?: string;\n}\n\nexport default function EventRegistrationForm({\n  onRegistrationSuccess,\n  onRegistrationError,\n  formAction,\n  eventDate = \"September 15-16, 2025\",\n  eventLocation = \"Tech Convention Center, San Francisco\",\n}: EventRegistrationFormProps) {\n  const [step, setStep] = React.useState(1);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  const { toast } = useToast();\n  const formRef = React.useRef<HTMLFormElement>(null);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      attendeeType: \"individual\",\n      sessions: [],\n      agreeTerms: false,\n    },\n    mode: \"onChange\",\n  });\n\n  const nextStep = async () => {\n    if (step === 1) {\n      const isValid = await form.trigger([\"name\", \"email\", \"phone\"]);\n      if (!isValid) return;\n    }\n    setStep(step + 1);\n  };\n\n  const prevStep = () => {\n    setStep(step - 1);\n  };\n\n  async function onSubmit(data: FormValues) {\n    try {\n      setIsLoading(true);\n      if (!formAction) {\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(data);\n      }\n      setIsSubmitted(true);\n      toast({\n        title: \"Registration successful!\",\n        description: \"You've been registered for the event.\",\n      });\n      if (onRegistrationSuccess) onRegistrationSuccess(data);\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      toast({\n        title: \"Registration failed\",\n        description:\n          \"There was a problem with your registration. Please try again.\",\n        variant: \"destructive\",\n      });\n      if (onRegistrationError) onRegistrationError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const getPrice = () => {\n    const attendeeType = form.watch(\"attendeeType\");\n    switch (attendeeType) {\n      case \"student\":\n        return \"$149\";\n      case \"corporate\":\n        return \"$499\";\n      case \"individual\":\n      default:\n        return \"$299\";\n    }\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setStep(1);\n    setIsSubmitted(false);\n  };\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto p-6 space-y-6 bg-background text-foreground rounded-lg shadow-md\">\n      <div className=\"space-y-4\">\n        <h1 className=\"text-3xl font-bold text-center\">\n          {step === 1 && \"Personal Information\"}\n          {step === 2 && \"Event Details\"}\n          {isSubmitted && \"Registration Complete\"}\n        </h1>\n        <p className=\"text-center text-muted-foreground\">\n          {step === 1 && \"Provide your contact information to register.\"}\n          {step === 2 && \"Select your attendee type and sessions.\"}\n          {isSubmitted && \"Thank you for registering for our event!\"}\n        </p>\n      </div>\n\n      <Form {...form}>\n        <form\n          ref={formRef}\n          onSubmit={form.handleSubmit(onSubmit)}\n          className=\"space-y-6\"\n          action={formAction}\n          noValidate\n        >\n          {step === 1 && (\n            <div className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor=\"name-input\">Full Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        id=\"name-input\"\n                        placeholder=\"John Doe\"\n                        {...field}\n                        autoComplete=\"name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor=\"email-input\">Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        id=\"email-input\"\n                        placeholder=\"name@example.com\"\n                        type=\"email\"\n                        {...field}\n                        autoComplete=\"email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor=\"phone-input\">Phone Number</FormLabel>\n                    <FormControl>\n                      <Input\n                        id=\"phone-input\"\n                        placeholder=\"+1 (555) 123-4567\"\n                        type=\"tel\"\n                        {...field}\n                        autoComplete=\"tel\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end\">\n                <Button onClick={nextStep} variant=\"default\">\n                  Continue\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {step === 2 && (\n            <div className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"attendeeType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Attendee Type</FormLabel>\n                    <RadioGroup\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                      className=\"space-y-2\"\n                    >\n                      <RadioGroupItem\n                        value=\"individual\"\n                        label=\"Individual ($299)\"\n                      />\n                      <RadioGroupItem value=\"student\" label=\"Student ($149)\" />\n                      <RadioGroupItem\n                        value=\"corporate\"\n                        label=\"Corporate ($499)\"\n                      />\n                    </RadioGroup>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"sessions\"\n                render={() => (\n                  <FormItem>\n                    <FormLabel>Select Sessions</FormLabel>\n                    <div className=\"space-y-2\">\n                      {sessions.map((session) => (\n                        <Checkbox\n                          key={session.id}\n                          id={`session-${session.id}`}\n                          label={`${session.title} (${session.time})`}\n                          value={session.id}\n                          onCheckedChange={(checked) => {\n                            const currentSessions = form.getValues(\"sessions\");\n                            form.setValue(\n                              \"sessions\",\n                              checked\n                                ? [...currentSessions, session.id]\n                                : currentSessions.filter(\n                                    (id) => id !== session.id,\n                                  ),\n                            );\n                          }}\n                        />\n                      ))}\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"agreeTerms\"\n                render={({ field }) => (\n                  <FormItem>\n                    <Checkbox\n                      id=\"agree-terms\"\n                      label=\"I agree to the terms and conditions\"\n                      {...field}\n                    />\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-between\">\n                <Button onClick={prevStep} variant=\"outline\">\n                  Back\n                </Button>\n                <Button type=\"submit\" variant=\"default\" disabled={isLoading}>\n                  {isLoading ? \"Processing...\" : \"Complete Registration\"}\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {isSubmitted && (\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-xl font-bold\">Registration Complete</h2>\n              <p className=\"text-muted-foreground\">\n                Thank you for registering! A confirmation email has been sent to{\" \"}\n                {form.getValues(\"email\")}.\n              </p>\n              <Button onClick={resetForm} variant=\"default\">\n                Register Another Attendee\n              </Button>\n            </div>\n          )}\n        </form>\n      </Form>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
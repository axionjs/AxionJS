{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "scatter-chart",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "registryDependencies": [
    "card",
    "chart"
  ],
  "files": [
    {
      "path": "charts/scatter-chart.tsx",
      "content": "\"use client\";\n\nimport { TrendingUp } from \"lucide-react\";\nimport {\n  CartesianGrid,\n  Scatter,\n  ScatterChart,\n  XAxis,\n  YAxis,\n  ZAxis,\n} from \"recharts\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport {\n  type ChartConfig,\n  ChartContainer,\n  ChartLegend,\n  ChartLegendContent,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/new-york/ui/chart\";\n\nconst chartData = [\n  { category: \"A\", price: 120, rating: 4.5, sales: 240 },\n  { category: \"A\", price: 150, rating: 4.8, sales: 280 },\n  { category: \"A\", price: 90, rating: 4.2, sales: 200 },\n  { category: \"A\", price: 180, rating: 4.9, sales: 300 },\n  { category: \"A\", price: 110, rating: 4.3, sales: 220 },\n  { category: \"B\", price: 70, rating: 3.8, sales: 150 },\n  { category: \"B\", price: 60, rating: 3.5, sales: 130 },\n  { category: \"B\", price: 80, rating: 4.0, sales: 170 },\n  { category: \"B\", price: 50, rating: 3.2, sales: 120 },\n  { category: \"B\", price: 65, rating: 3.7, sales: 140 },\n  { category: \"C\", price: 200, rating: 4.7, sales: 180 },\n  { category: \"C\", price: 220, rating: 4.9, sales: 190 },\n  { category: \"C\", price: 190, rating: 4.6, sales: 170 },\n  { category: \"C\", price: 250, rating: 5.0, sales: 210 },\n  { category: \"C\", price: 230, rating: 4.8, sales: 200 },\n];\n\nconst chartConfig = {\n  A: {\n    label: \"Category A\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  B: {\n    label: \"Category B\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  C: {\n    label: \"Category C\",\n    color: \"hsl(var(--chart-3))\",\n  },\n} satisfies ChartConfig;\n\nexport function ScatterPlotChart() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Scatter Plot Chart</CardTitle>\n        <CardDescription>Price vs. Rating with Sales Volume</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig}>\n          <ScatterChart\n            accessibilityLayer\n            margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis\n              dataKey=\"price\"\n              name=\"Price\"\n              unit=\"$\"\n              label={{ value: \"Price ($)\", position: \"bottom\", offset: 0 }}\n              tickLine={false}\n              axisLine={false}\n            />\n            <YAxis\n              dataKey=\"rating\"\n              name=\"Rating\"\n              unit=\" stars\"\n              label={{ value: \"Rating\", angle: -90, position: \"left\" }}\n              tickLine={false}\n              axisLine={false}\n              domain={[3, 5]}\n            />\n            <ZAxis\n              dataKey=\"sales\"\n              range={[50, 400]}\n              name=\"Sales\"\n              unit=\" units\"\n            />\n            <ChartTooltip\n              cursor={{ strokeDasharray: \"3 3\" }}\n              content={\n                <ChartTooltipContent\n                  formatter={(value, name) => {\n                    if (name === \"Price\") return \"$\" + value;\n                    if (name === \"Rating\") return value + \" stars\";\n                    if (name === \"Sales\") return value + \" units\";\n                    return value;\n                  }}\n                />\n              }\n            />\n            <Scatter\n              name=\"Category A\"\n              data={chartData.filter((item) => item.category === \"A\")}\n              fill=\"var(--color-A)\"\n            />\n            <Scatter\n              name=\"Category B\"\n              data={chartData.filter((item) => item.category === \"B\")}\n              fill=\"var(--color-B)\"\n            />\n            <Scatter\n              name=\"Category C\"\n              data={chartData.filter((item) => item.category === \"C\")}\n              fill=\"var(--color-C)\"\n            />\n            <ChartLegend content={<ChartLegendContent />} />\n          </ScatterChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col items-start gap-2 text-sm\">\n        <div className=\"flex gap-2 font-medium leading-none\">\n          Higher ratings correlate with higher sales{\" \"}\n          <TrendingUp className=\"h-4 w-4\" />\n        </div>\n        <div className=\"leading-none text-muted-foreground\">\n          Bubble size represents sales volume\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n",
      "type": "registry:block",
      "target": ""
    }
  ],
  "categories": [
    "charts",
    "charts-scatter"
  ]
}
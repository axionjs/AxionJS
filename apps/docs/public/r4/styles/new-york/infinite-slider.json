{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "infinite-slider",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "An infinite slider component.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "blocks/infinite-slider.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport { useRef, useState, useEffect } from \"react\";\nimport { motion, useAnimationControls, useMotionValue } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface InfiniteSliderProps {\n  children: React.ReactNode;\n  speed?: number;\n  speedOnHover?: number;\n  direction?: \"left\" | \"right\";\n  gap?: number;\n  className?: string;\n  pauseOnHover?: boolean;\n}\n\nexport function InfiniteSlider({\n  children,\n  speed = 20,\n  speedOnHover = 0,\n  direction = \"left\",\n  gap = 40,\n  className,\n  pauseOnHover = false,\n}: InfiniteSliderProps) {\n  const [contentWidth, setContentWidth] = useState(0);\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [numDuplicates, setNumDuplicates] = useState(1);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [hovering, setHovering] = useState(false);\n  const controls = useAnimationControls();\n  const x = useMotionValue(0);\n\n  // Calculate the width of the content and container\n  useEffect(() => {\n    if (contentRef.current && containerRef.current) {\n      const contentWidth = contentRef.current.offsetWidth;\n      const containerWidth = containerRef.current.offsetWidth;\n\n      setContentWidth(contentWidth);\n      setContainerWidth(containerWidth);\n\n      // Calculate how many duplicates we need to fill the container\n      const duplicatesNeeded = Math.ceil(containerWidth / contentWidth) + 1;\n      setNumDuplicates(duplicatesNeeded);\n    }\n  }, [children]);\n\n  // Animation effect\n  useEffect(() => {\n    if (contentWidth === 0) return;\n\n    const totalContentWidth = contentWidth + gap;\n    const duration = totalContentWidth / (hovering ? speedOnHover || 0 : speed);\n\n    if (pauseOnHover && hovering) {\n      controls.stop();\n      return;\n    }\n\n    if (duration === 0 || duration === Number.POSITIVE_INFINITY) {\n      controls.stop();\n      return;\n    }\n\n    const directionMultiplier = direction === \"left\" ? -1 : 1;\n\n    controls.start({\n      x: directionMultiplier * totalContentWidth,\n      transition: {\n        duration,\n        ease: \"linear\",\n        repeat: Number.POSITIVE_INFINITY,\n        repeatType: \"loop\",\n      },\n    });\n\n    return () => {\n      controls.stop();\n    };\n  }, [\n    contentWidth,\n    speed,\n    speedOnHover,\n    direction,\n    hovering,\n    pauseOnHover,\n    gap,\n    controls,\n  ]);\n\n  // If we don't have content width yet, don't render\n  if (contentWidth === 0) {\n    return (\n      <div ref={containerRef} className={cn(\"overflow-hidden\", className)}>\n        <div ref={contentRef} className=\"flex\">\n          {children}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\"overflow-hidden\", className)}\n      onMouseEnter={() => setHovering(true)}\n      onMouseLeave={() => setHovering(false)}\n    >\n      <motion.div\n        className=\"flex\"\n        style={{ x, gap: `${gap}px` }}\n        animate={controls}\n      >\n        <div\n          ref={contentRef}\n          className=\"flex shrink-0\"\n          style={{ gap: `${gap}px` }}\n        >\n          {children}\n        </div>\n\n        {/* Duplicate the content to create the infinite effect */}\n        {Array.from({ length: numDuplicates }).map((_, i) => (\n          <div\n            key={`duplicate-${i}`}\n            className=\"flex shrink-0\"\n            style={{ gap: `${gap}px` }}\n          >\n            {children}\n          </div>\n        ))}\n      </motion.div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
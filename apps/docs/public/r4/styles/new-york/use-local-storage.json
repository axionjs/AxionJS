{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "use-local-storage",
  "type": "registry:hook",
  "author": "axionjs (https://www.axionjs.com)",
  "files": [
    {
      "path": "hooks/use-local-storage.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ntype SetValue<T> = React.Dispatch<React.SetStateAction<T>>;\n\n/**\n * A hook that manages state in localStorage\n * @param key The localStorage key\n * @param initialValue The initial value\n * @returns A stateful value and a function to update it\n */\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T,\n): [T, SetValue<T>] {\n  // Get from local storage then parse stored json or return initialValue\n  const readValue = React.useCallback((): T => {\n    if (typeof window === \"undefined\") {\n      return initialValue;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? (JSON.parse(item) as T) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  }, [initialValue, key]);\n\n  // State to store our value\n  const [storedValue, setStoredValue] = React.useState<T>(readValue);\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue: SetValue<T> = React.useCallback(\n    (value) => {\n      if (typeof window === \"undefined\") {\n        console.warn(\n          `Tried setting localStorage key \"${key}\" even though environment is not a client`,\n        );\n      }\n\n      try {\n        // Allow value to be a function so we have the same API as useState\n        const newValue = value instanceof Function ? value(storedValue) : value;\n\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(newValue));\n\n        // Save state\n        setStoredValue(newValue);\n      } catch (error) {\n        console.warn(`Error setting localStorage key \"${key}\":`, error);\n      }\n    },\n    [key, storedValue],\n  );\n\n  // Listen for changes to this localStorage key from other tabs/windows\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === key && e.newValue) {\n        setStoredValue(JSON.parse(e.newValue));\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, [key]);\n\n  return [storedValue, setValue];\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
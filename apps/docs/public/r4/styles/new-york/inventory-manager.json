{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "inventory-manager",
  "type": "registry:dynamic-component",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "An inventory manager with CRUD functionality.",
  "dependencies": [
    "prisma",
    "@prisma/client",
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "button",
    "alert",
    "alert-dialog",
    "dialog",
    "toaster",
    "skeleton",
    "badge",
    "dropdown-menu",
    "table",
    "input",
    "select",
    "use-toast",
    "form"
  ],
  "files": [
    {
      "path": "dynamic-components/inventory-manager/actions/inventory.ts",
      "content": "\"use server\";\n\nimport { db } from \"@/registry/new-york/lib/db\";\nimport { revalidatePath } from \"next/cache\";\n\nimport { z } from \"zod\";\n\nconst inventoryFormSchema = z.object({\n  name: z.string().min(2),\n  category: z.string().min(1),\n  price: z.number().positive(),\n  stock: z.number().int().nonnegative(),\n  sku: z.string().min(3),\n});\n\nexport async function getInventoryItems({\n  page = 1,\n  pageSize = 10,\n  sortBy = \"updatedAt\",\n  sortOrder = \"desc\",\n  filters = {},\n  lowStockOnly = false,\n}: {\n  page?: number;\n  pageSize?: number;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  filters?: Record<string, any>;\n  lowStockOnly?: boolean;\n} = {}) {\n  try {\n    // Calculate pagination values\n    const skip = (page - 1) * pageSize;\n    const take = pageSize;\n\n    // Build where clause based on filters\n    const where: any = {};\n\n    if (filters.name) {\n      where.name = {\n        contains: filters.name,\n        mode: \"insensitive\",\n      };\n    }\n\n    if (filters.category && filters.category !== \"\") {\n      where.category = filters.category;\n    }\n\n    // Add low stock filter if requested\n    if (lowStockOnly) {\n      where.stock = {\n        lt: 10, // Items with stock less than 10\n      };\n    }\n\n    // Get paginated items with sorting\n    const items = await db.inventoryItem.findMany({\n      where,\n      orderBy: {\n        [sortBy]: sortOrder,\n      },\n      skip,\n      take,\n    });\n\n    // Get total count for pagination\n    const totalItems = await db.inventoryItem.count({ where });\n    const totalPages = Math.ceil(totalItems / pageSize);\n\n    // Get count of low stock items for the alert\n    const lowStockCount = await db.inventoryItem.count({\n      where: {\n        stock: {\n          lt: 10,\n        },\n      },\n    });\n\n    return {\n      items,\n      meta: {\n        currentPage: page,\n        pageSize,\n        totalItems,\n        totalPages,\n        lowStockCount,\n      },\n    };\n  } catch (error) {\n    console.error(\"Failed to fetch inventory items:\", error);\n    throw new Error(\"Failed to fetch inventory items\");\n  }\n}\n\nexport async function getInventoryItem(id: string) {\n  try {\n    const item = await db.inventoryItem.findUnique({\n      where: { id },\n    });\n\n    if (!item) {\n      throw new Error(\"Inventory item not found\");\n    }\n\n    return item;\n  } catch (error) {\n    console.error(`Failed to fetch inventory item ${id}:`, error);\n    throw new Error(\"Failed to fetch inventory item\");\n  }\n}\n\nexport async function createInventoryItem(\n  values: z.infer<typeof inventoryFormSchema>,\n) {\n  try {\n    const validatedFields = inventoryFormSchema.parse(values);\n\n    // Check if SKU already exists\n    const existingItem = await db.inventoryItem.findUnique({\n      where: { sku: validatedFields.sku },\n    });\n    if (existingItem) {\n      return { error: \"SKU already exists\" };\n    }\n\n    await db.inventoryItem.create({\n      data: {\n        name: validatedFields.name,\n        category: validatedFields.category,\n        price: validatedFields.price,\n        stock: validatedFields.stock,\n        sku: validatedFields.sku,\n      },\n    });\n\n    revalidatePath(\"/inventory\");\n    return { success: true };\n  } catch (error) {\n    console.error(\"Failed to create inventory item:\", error);\n    return { error: \"Failed to create inventory item\" };\n  }\n}\n\nexport async function updateInventoryItem(\n  id: string,\n  values: z.infer<typeof inventoryFormSchema>,\n) {\n  try {\n    const validatedFields = inventoryFormSchema.parse(values);\n\n    //Check if same sku exists\n    const existingItem = await db.inventoryItem.findUnique({\n      where: { sku: validatedFields.sku },\n    });\n    if (existingItem && existingItem.id !== id) {\n      return { error: \"SKU already exists\" };\n    }\n\n    // Update the inventory item\n    await db.inventoryItem.update({\n      where: { id },\n      data: {\n        name: validatedFields.name,\n        category: validatedFields.category,\n        price: validatedFields.price,\n        stock: validatedFields.stock,\n        sku: validatedFields.sku,\n      },\n    });\n\n    revalidatePath(\"/inventory\");\n    return { success: true };\n  } catch (error) {\n    console.error(`Failed to update inventory item ${id}:`, error);\n    return { error: \"Failed to update inventory item\" };\n  }\n}\n\nexport async function deleteInventoryItem(id: string) {\n  try {\n    await db.inventoryItem.delete({\n      where: { id },\n    });\n\n    revalidatePath(\"/inventory\");\n    return { success: true };\n  } catch (error) {\n    console.error(`Failed to delete inventory item ${id}:`, error);\n    return { error: \"Failed to delete inventory item\" };\n  }\n}\n",
      "type": "registry:actions",
      "target": ""
    },
    {
      "path": "lib/db.ts",
      "content": "import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/components/inventory-form.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { InventoryItem } from \"@prisma/client\";\nimport { Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/registry/new-york/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\";\nimport {\n  createInventoryItem,\n  updateInventoryItem,\n} from \"@/registry/new-york/dynamic-components/inventory-manager/actions/inventory\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport { useInventory } from \"@/registry/new-york/dynamic-components/inventory-manager/lib/context\";\n\nconst formSchema = z.object({\n  name: z.string().min(2, {\n    message: \"Name must be at least 2 characters.\",\n  }),\n  category: z.string().min(1, {\n    message: \"Please select a category.\",\n  }),\n  price: z.coerce.number().positive({\n    message: \"Price must be a positive number.\",\n  }),\n  stock: z.coerce.number().int().nonnegative({\n    message: \"Stock must be a non-negative integer.\",\n  }),\n  sku: z.string().min(3, {\n    message: \"SKU must be at least 3 characters.\",\n  }),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\ninterface InventoryFormProps {\n  item?: InventoryItem;\n  onSuccess?: () => void;\n}\n\nexport function InventoryForm({ item, onSuccess }: InventoryFormProps) {\n  const { toast } = useToast();\n  const { refreshData } = useInventory();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const isEditing = !!item;\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: item?.name || \"\",\n      category: item?.category || \"\",\n      price: item?.price || 0,\n      stock: item?.stock || 0,\n      sku: item?.sku || \"\",\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    try {\n      setIsSubmitting(true);\n      if (isEditing && item) {\n        const response = await updateInventoryItem(item.id, values);\n        if (response.error) {\n          toast({\n            title: \"Error\",\n            description: response.error,\n            variant: \"destructive\",\n          });\n        } else {\n          toast({\n            title: \"Item updated\",\n            description: \"The inventory item has been updated successfully.\",\n          });\n        }\n      } else {\n        const response = await createInventoryItem(values);\n        if (response.error) {\n          toast({\n            title: \"Error\",\n            description: response.error,\n            variant: \"destructive\",\n          });\n        } else {\n          toast({\n            title: \"Item created\",\n            description: \"The new inventory item has been added successfully.\",\n          });\n        }\n      }\n      form.reset();\n      onSuccess?.();\n      await refreshData();\n    } catch (error) {\n      console.error(error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save inventory item. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Item name\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"category\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Category</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a category\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"Electronics\">Electronics</SelectItem>\n                  <SelectItem value=\"Clothing\">Clothing</SelectItem>\n                  <SelectItem value=\"Food\">Food</SelectItem>\n                  <SelectItem value=\"Other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"price\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Price</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" step=\"0.01\" min=\"0\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"stock\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Stock</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"0\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"sku\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>SKU</FormLabel>\n              <FormControl>\n                <Input placeholder=\"SKU000123\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <DialogFooter>\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting ? (\n              <>\n                <span className=\"animate-spin mr-2\">⟳</span>\n                {isEditing ? \"Updating...\" : \"Creating...\"}\n              </>\n            ) : (\n              <>{isEditing ? \"Update\" : \"Create\"} Item</>\n            )}\n          </Button>\n        </DialogFooter>\n      </form>\n    </Form>\n  );\n}\n\n// Create Item Dialog\nexport function CreateInventoryItem() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Item\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Add Inventory Item</DialogTitle>\n          <DialogDescription>\n            Create a new item in your inventory. Click save when you're done.\n          </DialogDescription>\n        </DialogHeader>\n        <InventoryForm onSuccess={() => setOpen(false)} />\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Edit Item Dialog\ninterface EditInventoryItemProps {\n  item: InventoryItem;\n  trigger: React.ReactNode;\n}\n\nexport function EditInventoryItem({ item, trigger }: EditInventoryItemProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>{trigger}</DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Edit Inventory Item</DialogTitle>\n          <DialogDescription>\n            Make changes to your inventory item. Click save when you're done.\n          </DialogDescription>\n        </DialogHeader>\n        <InventoryForm item={item} onSuccess={() => setOpen(false)} />\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/components/inventory-data-table.tsx",
      "content": "\"use client\";\n\nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle,\n} from \"@/registry/new-york/ui/alert\";\nimport { AlertTriangle, AlertCircle } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\n\nimport { InventoryContext } from \"@/registry/new-york/dynamic-components/inventory-manager/lib/context\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\";\nimport { DataTable } from \"./data-table\";\nimport { useInventoryDataTable } from \"@/registry/new-york/dynamic-components/inventory-manager/hooks/use-inventory-data-table\";\n\nexport function InventoryDataTable() {\n  const {\n    data,\n    pageCount,\n    totalItems,\n    lowStockCount,\n    isLoading,\n    isPending,\n    columns,\n    pageIndex,\n    pageSize,\n    nameFilter,\n    categoryFilter,\n    lowStockOnly,\n    handlePaginationChange,\n    handleNameFilterChange,\n    handleCategoryFilterChange,\n    toggleLowStockFilter,\n    contextValue,\n    refreshData,\n  } = useInventoryDataTable();\n  return (\n    <InventoryContext.Provider value={contextValue}>\n      <div>\n        {lowStockCount > 0 && (\n          <Alert\n            variant=\"destructive\"\n            className=\"mb-4 cursor-pointer\"\n            onClick={toggleLowStockFilter}\n          >\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Low Stock Alert</AlertTitle>\n            <AlertDescription className=\"flex justify-between items-center\">\n              <span>\n                {lowStockCount} {lowStockCount === 1 ? \"item\" : \"items\"} in your\n                inventory {lowStockCount === 1 ? \"is\" : \"are\"} running low on\n                stock.\n              </span>\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                className=\"ml-2 border-primary text-secondary hover:text-white hover:bg-red-600\"\n              >\n                {lowStockOnly ? \"Show All Items\" : \"View Low Stock Items\"}\n              </Button>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {lowStockOnly && (\n          <div className=\"bg-muted p-2 rounded-md mb-4 flex justify-between items-center\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-4 w-4 mr-2 text-destructive\" />\n              <span>Showing low stock items only</span>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" onClick={toggleLowStockFilter}>\n              Show All Items\n            </Button>\n          </div>\n        )}\n\n        <div className=\"flex items-center py-4 gap-2\">\n          <div className=\"flex-1\">\n            <Input\n              placeholder=\"Filter by name...\"\n              value={nameFilter}\n              onChange={(e) => handleNameFilterChange(e.target.value)}\n              className=\"max-w-sm\"\n            />\n          </div>\n          <div className=\"w-[180px]\">\n            <Select\n              value={categoryFilter || \"all\"}\n              onValueChange={handleCategoryFilterChange}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                <SelectItem value=\"Electronics\">Electronics</SelectItem>\n                <SelectItem value=\"Clothing\">Clothing</SelectItem>\n                <SelectItem value=\"Food\">Food</SelectItem>\n                <SelectItem value=\"Other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className=\"h-[400px] w-full flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n          </div>\n        ) : (\n          <DataTable\n            columns={columns}\n            data={data}\n            pageCount={pageCount}\n            pageSize={pageSize}\n            pageIndex={pageIndex}\n            totalItems={totalItems}\n            onPaginationChange={handlePaginationChange}\n            onRefresh={refreshData}\n            isRefreshing={isPending}\n          />\n        )}\n      </div>\n    </InventoryContext.Provider>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/components/data-table.tsx",
      "content": "\"use client\";\n\nimport {\n  type ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/new-york/ui/table\";\nimport { Button } from \"@/registry/new-york/ui/button\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\";\nimport { RotateCcw } from \"lucide-react\";\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n  pageCount: number;\n  pageSize: number;\n  pageIndex: number;\n  totalItems: number;\n  onPaginationChange: (page: number, pageSize: number) => void;\n  onRefresh: () => void;\n  isRefreshing: boolean;\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  pageCount,\n  pageSize,\n  pageIndex,\n  totalItems,\n  onPaginationChange,\n  onRefresh,\n  isRefreshing,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    manualPagination: true,\n    pageCount,\n    state: {\n      pagination: {\n        pageIndex,\n        pageSize,\n      },\n    },\n  });\n\n  // Calculate the range of items being displayed\n  const startItem = pageIndex * pageSize + 1;\n  const endItem = Math.min((pageIndex + 1) * pageSize, totalItems);\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext(),\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows.length > 0 ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext(),\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-between space-x-2 py-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"text-sm text-muted-foreground\">\n            Showing <span className=\"font-medium\">{startItem}</span> to{\" \"}\n            <span className=\"font-medium\">{endItem}</span> of{\" \"}\n            <span className=\"font-medium\">{totalItems}</span> items\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onRefresh}\n            disabled={isRefreshing}\n            title=\"Refresh data\"\n          >\n            <RotateCcw\n              className={`h-4 w-4 ${isRefreshing ? \"animate-spin\" : \"\"}`}\n            />\n            <span className=\"sr-only\">Refresh</span>\n          </Button>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onPaginationChange(pageIndex - 1, pageSize)}\n            disabled={pageIndex === 0}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onPaginationChange(pageIndex + 1, pageSize)}\n            disabled={pageIndex === pageCount - 1 || pageCount === 0}\n          >\n            Next\n          </Button>\n          <Select\n            value={`${pageSize}`}\n            onValueChange={(value) => onPaginationChange(0, Number(value))}\n          >\n            <SelectTrigger className=\"w-[80px]\">\n              <SelectValue placeholder={pageSize} />\n            </SelectTrigger>\n            <SelectContent>\n              {[5, 10, 20, 30, 40, 50].map((size) => (\n                <SelectItem key={size} value={`${size}`}>\n                  {size}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/components/columns.tsx",
      "content": "\"use client\";\n\nimport type { ColumnDef } from \"@tanstack/react-table\";\nimport { MoreHorizontal, AlertTriangle, ArrowUpDown } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Badge } from \"@/registry/new-york/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport { EditInventoryItem } from \"./inventory-form\";\nimport type { InventoryItem } from \"@prisma/client\";\n\nimport { useState } from \"react\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/registry/new-york/ui/alert-dialog\";\nimport { deleteInventoryItem } from \"@/registry/new-york/dynamic-components/inventory-manager/actions/inventory\";\nimport { useInventory } from \"@/registry/new-york/dynamic-components/inventory-manager/lib/context\";\n\ninterface ColumnProps {\n  onSort: (column: string) => void;\n}\n\nexport const createColumns = ({\n  onSort,\n}: ColumnProps): ColumnDef<InventoryItem>[] => [\n  {\n    accessorKey: \"name\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => onSort(\"name\")}\n          className=\"-ml-4 h-8 data-[state=open]:bg-accent\"\n        >\n          Name\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      );\n    },\n  },\n  {\n    accessorKey: \"category\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => onSort(\"category\")}\n          className=\"-ml-4 h-8 data-[state=open]:bg-accent\"\n        >\n          Category\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      );\n    },\n    cell: ({ row }) => {\n      const category = row.getValue(\"category\") as string;\n      return <Badge variant=\"outline\">{category}</Badge>;\n    },\n  },\n  {\n    accessorKey: \"sku\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => onSort(\"sku\")}\n          className=\"-ml-4 h-8 data-[state=open]:bg-accent\"\n        >\n          SKU\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      );\n    },\n  },\n  {\n    accessorKey: \"price\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => onSort(\"price\")}\n          className=\"-ml-4 h-8 data-[state=open]:bg-accent\"\n        >\n          Price\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      );\n    },\n    cell: ({ row }) => {\n      const price = Number.parseFloat(row.getValue(\"price\"));\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(price);\n      return formatted;\n    },\n  },\n  {\n    accessorKey: \"stock\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => onSort(\"stock\")}\n          className=\"-ml-4 h-8 data-[state=open]:bg-accent\"\n        >\n          Stock\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      );\n    },\n    cell: ({ row }) => {\n      const stock = Number.parseInt(row.getValue(\"stock\"));\n\n      return (\n        <div className=\"flex items-center gap-2\">\n          <span className={stock < 10 ? \"font-bold text-red-500\" : \"\"}>\n            {stock}\n          </span>\n          {stock < 10 && (\n            <Badge variant=\"destructive\" className=\"whitespace-nowrap\">\n              <AlertTriangle className=\"h-3 w-3 mr-1\" />\n              Low Stock\n            </Badge>\n          )}\n        </div>\n      );\n    },\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => {\n      const item = row.original;\n\n      return <ActionCell item={item} />;\n    },\n  },\n];\n\nfunction ActionCell({ item }: { item: InventoryItem }) {\n  const [isDeleteAlertOpen, setIsDeleteAlertOpen] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const { toast } = useToast();\n  const { refreshData } = useInventory();\n\n  const handleDelete = async () => {\n    try {\n      setIsDeleting(true);\n      const response = await deleteInventoryItem(item.id);\n      //if response gets an error, show error toast\n      if (response.error) {\n        toast({\n          title: \"Error\",\n          description: response.error,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Item deleted\",\n          description: `${item.name} has been removed from inventory.`,\n        });\n        // Refresh data instead of reloading the page\n        await refreshData();\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete item. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDeleting(false);\n      setIsDeleteAlertOpen(false);\n    }\n  };\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n            <span className=\"sr-only\">Open menu</span>\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n          <EditInventoryItem\n            item={item}\n            trigger={\n              <DropdownMenuItem onSelect={(e) => e.preventDefault()}>\n                Edit\n              </DropdownMenuItem>\n            }\n          />\n          <DropdownMenuItem onClick={() => setIsDeleteAlertOpen(true)}>\n            Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <AlertDialog open={isDeleteAlertOpen} onOpenChange={setIsDeleteAlertOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will permanently delete {item.name} from your inventory. This\n              action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={(e) => {\n                e.preventDefault();\n                handleDelete();\n              }}\n              disabled={isDeleting}\n              className={isDeleting ? \"opacity-50 cursor-not-allowed\" : \"\"}\n            >\n              {isDeleting ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/inventory/page.tsx",
      "content": "import { InventoryDataTable } from \"@/registry/new-york/dynamic-components/inventory-manager/components/inventory-data-table\";\nimport { CreateInventoryItem } from \"@/registry/new-york/dynamic-components/inventory-manager/components/inventory-form\";\nimport { Skeleton } from \"@/registry/new-york/ui/skeleton\";\nimport { Package } from \"lucide-react\";\nimport { Suspense } from \"react\";\n\nexport default function InventoryPage() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8 lg:py-12\">\n        {/* Header Section */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-primary/10 rounded-lg\">\n                <Package className=\"h-12 w-12 text-primary\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-foreground\">\n                  Inventory Management\n                </h1>\n                <p className=\"text-muted-foreground mt-1\">\n                  Manage your inventory items and stock levels\n                </p>\n              </div>\n            </div>\n            <div className=\"flex-shrink-0\">\n              <CreateInventoryItem />\n            </div>\n          </div>\n          <Separator />\n        </div>\n\n        {/* Data Table Section */}\n        <div className=\"bg-card p-6 rounded-xl shadow-sm border overflow-hidden\">\n          <Suspense\n            fallback={\n              <div className=\"p-6 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Skeleton className=\"h-8 w-48\" />\n                  <Skeleton className=\"h-10 w-32\" />\n                </div>\n                <Skeleton className=\"h-12 w-full\" />\n                {Array.from({ length: 8 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-4\">\n                    <Skeleton className=\"h-12 w-12 rounded\" />\n                    <div className=\"flex-1 space-y-2\">\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-4 w-3/4\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            }\n          >\n            <InventoryDataTable />\n          </Suspense>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/(inventory-manager)/inventory/page.tsx"
    },
    {
      "path": "dynamic-components/inventory-manager/lib/context.tsx",
      "content": "import { createContext, useContext } from \"react\";\n\ninterface InventoryContextType {\n  refreshData: () => Promise<void>;\n  isRefreshing: boolean;\n}\n\nexport const InventoryContext = createContext<InventoryContextType>({\n  refreshData: async () => {},\n  isRefreshing: false,\n});\n\nexport const useInventory = () => useContext(InventoryContext);\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "dynamic-components/inventory-manager/hooks/use-inventory-data-table.ts",
      "content": "import { useState, useEffect, useTransition } from \"react\";\nimport { useRouter, usePathname, useSearchParams } from \"next/navigation\";\nimport type { InventoryItem } from \"@prisma/client\";\nimport { getInventoryItems } from \"@/registry/new-york/dynamic-components/inventory-manager/actions/inventory\";\nimport { createColumns } from \"@/registry/new-york/dynamic-components/inventory-manager/components/columns\";\n\nexport const useInventoryDataTable = () => {\n  const [data, setData] = useState<InventoryItem[]>([]);\n  const [pageCount, setPageCount] = useState(0);\n  const [totalItems, setTotalItems] = useState(0);\n  const [lowStockCount, setLowStockCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isPending, startTransition] = useTransition();\n\n  // Filters\n  const [nameFilter, setNameFilter] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n  const [lowStockOnly, setLowStockOnly] = useState(false);\n\n  // Sorting\n  const [sortBy, setSortBy] = useState(\"updatedAt\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n\n  // Pagination state\n  const [pageIndex, setPageIndex] = useState(0);\n  const [pageSize, setPageSize] = useState(10);\n\n  // For URL state management\n  const router = useRouter();\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n\n  // Handle sorting\n  const handleSort = (column: string) => {\n    // If clicking the same column, toggle sort order\n    if (sortBy === column) {\n      const newOrder = sortOrder === \"asc\" ? \"desc\" : \"asc\";\n      setSortOrder(newOrder);\n\n      // Update URL params\n      const params = new URLSearchParams(searchParams);\n      params.set(\"sort\", column);\n      params.set(\"order\", newOrder);\n      router.push(`${pathname}?${params.toString()}`);\n    } else {\n      // New column, set as default desc\n      setSortBy(column);\n      setSortOrder(\"desc\");\n\n      // Update URL params\n      const params = new URLSearchParams(searchParams);\n      params.set(\"sort\", column);\n      params.set(\"order\", \"desc\");\n      router.push(`${pathname}?${params.toString()}`);\n    }\n  };\n\n  // Load data based on current pagination, filters, and sorting\n  const loadData = async () => {\n    setIsLoading(true);\n    try {\n      const result = await getInventoryItems({\n        page: pageIndex + 1, // API uses 1-based indexing\n        pageSize,\n        sortBy,\n        sortOrder,\n        filters: {\n          name: nameFilter,\n          category: categoryFilter,\n        },\n        lowStockOnly,\n      });\n\n      setData(result.items);\n      setPageCount(result.meta.totalPages);\n      setTotalItems(result.meta.totalItems);\n      setLowStockCount(result.meta.lowStockCount);\n    } catch (error) {\n      console.error(\"Failed to load inventory data:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to refresh data without changing state\n  const refreshData = async () => {\n    startTransition(async () => {\n      try {\n        const result = await getInventoryItems({\n          page: pageIndex + 1,\n          pageSize,\n          sortBy,\n          sortOrder,\n          filters: {\n            name: nameFilter,\n            category: categoryFilter,\n          },\n          lowStockOnly,\n        });\n\n        setData(result.items);\n        setPageCount(result.meta.totalPages);\n        setTotalItems(result.meta.totalItems);\n        setLowStockCount(result.meta.lowStockCount);\n      } catch (error) {\n        console.error(\"Failed to refresh inventory data:\", error);\n      }\n    });\n  };\n\n  // Handle pagination changes\n  const handlePaginationChange = (\n    newPageIndex: number,\n    newPageSize: number,\n  ) => {\n    setPageIndex(newPageIndex);\n    setPageSize(newPageSize);\n\n    // Update URL params\n    const params = new URLSearchParams(searchParams);\n    params.set(\"page\", String(newPageIndex + 1));\n    params.set(\"pageSize\", String(newPageSize));\n    router.push(`${pathname}?${params.toString()}`);\n  };\n\n  // Handle filter changes\n  const handleNameFilterChange = (value: string) => {\n    setNameFilter(value);\n    setPageIndex(0); // Reset to first page when filtering\n\n    // Update URL params\n    const params = new URLSearchParams(searchParams);\n    params.set(\"name\", value);\n    params.set(\"page\", \"1\");\n    router.push(`${pathname}?${params.toString()}`);\n  };\n\n  const handleCategoryFilterChange = (value: string) => {\n    setCategoryFilter(value === \"all\" ? \"\" : value);\n    setPageIndex(0); // Reset to first page when filtering\n\n    // Update URL params\n    const params = new URLSearchParams(searchParams);\n    if (value !== \"all\") {\n      params.set(\"category\", value);\n    } else {\n      params.delete(\"category\");\n    }\n    params.set(\"page\", \"1\");\n    router.push(`${pathname}?${params.toString()}`);\n  };\n\n  // Handle low stock filter\n  const toggleLowStockFilter = () => {\n    const newValue = !lowStockOnly;\n    setLowStockOnly(newValue);\n    setPageIndex(0); // Reset to first page when filtering\n\n    // Update URL params\n    const params = new URLSearchParams(searchParams);\n    if (newValue) {\n      params.set(\"lowStock\", \"true\");\n    } else {\n      params.delete(\"lowStock\");\n    }\n    params.set(\"page\", \"1\");\n    router.push(`${pathname}?${params.toString()}`);\n  };\n\n  // Initialize from URL params on first load\n  useEffect(() => {\n    const page = searchParams.get(\"page\")\n      ? Number(searchParams.get(\"page\")) - 1\n      : 0;\n    const size = searchParams.get(\"pageSize\")\n      ? Number(searchParams.get(\"pageSize\"))\n      : 10;\n    const name = searchParams.get(\"name\") || \"\";\n    const category = searchParams.get(\"category\") || \"\";\n    const sort = searchParams.get(\"sort\") || \"updatedAt\";\n    const order = searchParams.get(\"order\") === \"asc\" ? \"asc\" : \"desc\";\n    const lowStock = searchParams.get(\"lowStock\") === \"true\";\n\n    setPageIndex(page);\n    setPageSize(size);\n    setNameFilter(name);\n    setCategoryFilter(category);\n    setSortBy(sort);\n    setSortOrder(order);\n    setLowStockOnly(lowStock);\n  }, [searchParams]);\n\n  // Load data when pagination, filters, or sorting change\n  useEffect(() => {\n    loadData();\n  }, [\n    pageIndex,\n    pageSize,\n    nameFilter,\n    categoryFilter,\n    sortBy,\n    sortOrder,\n    lowStockOnly,\n  ]);\n\n  // Create context value\n  const contextValue = {\n    refreshData,\n    isRefreshing: isPending,\n  };\n\n  // Create columns with sort handler\n  const columns = createColumns({ onSort: handleSort });\n\n  return {\n    data,\n    pageCount,\n    totalItems,\n    lowStockCount,\n    isLoading,\n    isPending,\n    columns,\n    pageIndex,\n    pageSize,\n    nameFilter,\n    categoryFilter,\n    lowStockOnly,\n    handlePaginationChange,\n    handleNameFilterChange,\n    handleCategoryFilterChange,\n    toggleLowStockFilter,\n    contextValue,\n    refreshData,\n  };\n};\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
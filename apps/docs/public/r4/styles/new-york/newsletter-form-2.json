{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "newsletter-form-2",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A newsletter form component.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "use-toast",
    "checkbox",
    "switch",
    "tooltip"
  ],
  "files": [
    {
      "path": "blocks/newsletter-form-2.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Loader2, Mail, Check, Info } from \"lucide-react\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport { Checkbox } from \"@/registry/new-york/ui/checkbox\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/new-york/ui/tooltip\";\nimport { Switch } from \"@/registry/new-york/ui/switch\";\n\n// Define form validation schema\nconst formSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n  weeklyDigest: z.boolean().optional().default(true),\n  productUpdates: z.boolean().optional().default(false),\n  marketingEmails: z.boolean().optional().default(false),\n  eventInvites: z.boolean().optional().default(false),\n  subscribedToAll: z.boolean().optional().default(false),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\n// Define subscription preference options\ninterface SubscriptionOption {\n  id: keyof FormValues;\n  label: string;\n  description: string;\n  icon?: React.ReactNode;\n  frequency?: string;\n}\n\nconst defaultSubscriptionOptions: SubscriptionOption[] = [\n  {\n    id: \"weeklyDigest\",\n    label: \"Weekly digest newsletter\",\n    description: \"A roundup of the best content from our blog and community\",\n    frequency: \"Weekly\",\n    icon: (\n      <svg\n        className=\"h-5 w-5\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n      </svg>\n    ),\n  },\n  {\n    id: \"productUpdates\",\n    label: \"Product updates and announcements\",\n    description: \"Be the first to know about new features and improvements\",\n    frequency: \"Monthly\",\n    icon: (\n      <svg\n        className=\"h-5 w-5\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\" />\n      </svg>\n    ),\n  },\n  {\n    id: \"marketingEmails\",\n    label: \"Marketing and promotions\",\n    description: \"Exclusive offers, discounts, and special promotions\",\n    frequency: \"Occasionally\",\n    icon: (\n      <svg\n        className=\"h-5 w-5\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        aria-hidden=\"true\"\n      >\n        <path d=\"M16 21v-2a4 4 0 00-4-4H6a4 4 0 00-4 4v2\" />\n        <circle cx=\"9\" cy=\"7\" r=\"4\" />\n        <path d=\"M22 21v-2a4 4 0 00-3-3.87M16 3.13a4 4 0 010 7.75\" />\n      </svg>\n    ),\n  },\n  {\n    id: \"eventInvites\",\n    label: \"Event invitations\",\n    description: \"Webinars, workshops, and other events we host\",\n    frequency: \"As scheduled\",\n    icon: (\n      <svg\n        className=\"h-5 w-5\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        aria-hidden=\"true\"\n      >\n        <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\" />\n        <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\" />\n        <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\" />\n        <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\" />\n      </svg>\n    ),\n  },\n];\n\ninterface NewsletterFormProps {\n  /**\n   * Function to handle form submission\n   */\n  onSubscribe?: (data: FormValues) => Promise<void>;\n  /**\n   * Custom form action for server-side form processing\n   */\n  formAction?: string;\n  /**\n   * Custom title for the form\n   */\n  title?: string;\n  /**\n   * Custom description for the form\n   */\n  description?: string;\n  /**\n   * Custom subscription options\n   */\n  subscriptionOptions?: SubscriptionOption[];\n  /**\n   * Whether to allow subscribing to all newsletters at once\n   */\n  allowSubscribeAll?: boolean;\n  /**\n   * Custom button text\n   */\n  buttonText?: string;\n  /**\n   * Custom success message\n   */\n  successMessage?: string;\n  /**\n   * Custom CSS class for the container\n   */\n  className?: string;\n  /**\n   * Color theme\n   */\n  colorTheme?: \"default\" | \"blue\" | \"green\" | \"purple\";\n}\n\nexport default function NewsletterPreferencesForm({\n  onSubscribe,\n  formAction,\n  title = \"Stay in the loop\",\n  description = \"Subscribe to receive the latest updates\",\n  subscriptionOptions = defaultSubscriptionOptions,\n  allowSubscribeAll = true,\n  buttonText = \"Subscribe\",\n  successMessage = \"You've been added to our newsletter.\",\n  className,\n  colorTheme = \"default\",\n}: NewsletterFormProps) {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  const [hasSubscriptions, setHasSubscriptions] = React.useState(false);\n  const { toast } = useToast();\n  const formRef = React.useRef<HTMLFormElement>(null);\n  const successRef = React.useRef<HTMLDivElement>(null);\n\n  // Get color theme classes\n  const getThemeClasses = () => {\n    switch (colorTheme) {\n      case \"blue\":\n        return {\n          icon: \"text-blue-500\",\n          background: \"bg-blue-50 dark:bg-blue-900/20\",\n          highlight: \"text-blue-600 dark:text-blue-400\",\n          primary: \"bg-blue-600 hover:bg-blue-700 text-white\",\n          accent: \"bg-blue-500/10 text-blue-500\",\n          border: \"border-blue-200 dark:border-blue-700\",\n        };\n      case \"green\":\n        return {\n          icon: \"text-green-500\",\n          background: \"bg-green-50 dark:bg-green-900/20\",\n          highlight: \"text-green-600 dark:text-green-400\",\n          primary: \"bg-green-600 hover:bg-green-700 text-white\",\n          accent: \"bg-green-500/10 text-green-500\",\n          border: \"border-green-200 dark:border-green-700\",\n        };\n      case \"purple\":\n        return {\n          icon: \"text-purple-500\",\n          background: \"bg-purple-50 dark:bg-purple-900/20\",\n          highlight: \"text-purple-600 dark:text-purple-400\",\n          primary: \"bg-purple-600 hover:bg-purple-700 text-white\",\n          accent: \"bg-purple-500/10 text-purple-500\",\n          border: \"border-purple-200 dark:border-purple-700\",\n        };\n      default:\n        return {\n          icon: \"text-primary\",\n          background: \"bg-primary/10\",\n          highlight: \"text-primary\",\n          primary: \"\",\n          accent: \"bg-primary/10 text-primary\",\n          border: \"border-border\",\n        };\n    }\n  };\n\n  const themeClasses = getThemeClasses();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      weeklyDigest: true,\n      productUpdates: false,\n      marketingEmails: false,\n      eventInvites: false,\n      subscribedToAll: false,\n    },\n    mode: \"onChange\",\n  });\n\n  // Watch all subscription values\n  const subscriptionValues = form.watch([\n    \"weeklyDigest\",\n    \"productUpdates\",\n    \"marketingEmails\",\n    \"eventInvites\",\n  ]);\n\n  // Watch subscribedToAll value\n  const subscribedToAll = form.watch(\"subscribedToAll\");\n\n  // Update hasSubscriptions state based on subscription selections\n  React.useEffect(() => {\n    const hasAnySubscription = subscriptionValues.some((value) => !!value);\n    setHasSubscriptions(hasAnySubscription);\n  }, [subscriptionValues]);\n\n  // Handle subscribedToAll changes\n  React.useEffect(() => {\n    if (subscribedToAll) {\n      // Check all subscription boxes\n      subscriptionOptions.forEach((option) => {\n        if (option.id !== \"subscribedToAll\" && option.id !== \"email\") {\n          form.setValue(option.id as any, true);\n        }\n      });\n    }\n  }, [subscribedToAll, form, subscriptionOptions]);\n\n  async function onSubmit(data: FormValues) {\n    if (!hasSubscriptions) {\n      toast({\n        title: \"No preferences selected\",\n        description: \"Please select at least one subscription preference.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n\n      if (onSubscribe) {\n        await onSubscribe(data);\n      } else {\n        // Simulate API call\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(\"Newsletter subscription:\", data);\n      }\n\n      setIsSubmitted(true);\n\n      toast({\n        title: \"Subscription successful!\",\n        description: successMessage,\n      });\n\n      // Focus success message for accessibility\n      setTimeout(() => {\n        if (successRef.current) {\n          successRef.current.focus();\n        }\n      }, 100);\n    } catch (error) {\n      console.error(\"Subscription error:\", error);\n\n      toast({\n        title: \"Subscription failed\",\n        description:\n          \"There was a problem with your subscription. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div\n      className={cn(\n        \"w-full max-w-lg mx-auto p-6 rounded-xl\",\n        themeClasses.background,\n        className,\n      )}\n    >\n      {!isSubmitted ? (\n        <>\n          <div className=\"flex items-center gap-4 mb-6\">\n            <div className={cn(\"rounded-full p-2\", themeClasses.accent)}>\n              <Mail\n                className={cn(\"h-6 w-6\", themeClasses.highlight)}\n                aria-hidden=\"true\"\n              />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold\">{title}</h2>\n              <p className=\"text-muted-foreground\">{description}</p>\n            </div>\n          </div>\n\n          <Form {...form}>\n            <form\n              ref={formRef}\n              onSubmit={form.handleSubmit(onSubmit)}\n              className=\"space-y-6\"\n              action={formAction}\n              noValidate\n            >\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel htmlFor=\"email-input\" className=\"sr-only\">\n                      Email\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"email-input\"\n                          placeholder=\"Enter your email\"\n                          className=\"pr-32 h-12\"\n                          type=\"email\"\n                          autoComplete=\"email\"\n                          aria-required=\"true\"\n                          {...field}\n                        />\n                        <Button\n                          type=\"submit\"\n                          className={cn(\n                            \"absolute right-1 top-1 h-10\",\n                            themeClasses.primary,\n                          )}\n                          disabled={isLoading}\n                          variant=\"expandIcon\"\n                        >\n                          {isLoading ? (\n                            <Loader2\n                              className=\"h-4 w-4 animate-spin\"\n                              aria-hidden=\"true\"\n                            />\n                          ) : (\n                            <>{buttonText}</>\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {allowSubscribeAll && (\n                <FormField\n                  control={form.control}\n                  name=\"subscribedToAll\"\n                  render={({ field }) => (\n                    <FormItem\n                      className={cn(\n                        \"flex flex-row items-center justify-between rounded-lg border p-4 space-y-0 mb-4\",\n                        themeClasses.border,\n                      )}\n                    >\n                      <div className=\"space-y-0.5\">\n                        <FormLabel\n                          htmlFor=\"subscribe-all\"\n                          className=\"text-base\"\n                        >\n                          Subscribe to all updates\n                        </FormLabel>\n                        <FormDescription>\n                          Receive all emails and notifications\n                        </FormDescription>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          id=\"subscribe-all\"\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          aria-label=\"Subscribe to all updates\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-sm font-medium\">\n                    Subscription preferences\n                  </h3>\n                  <TooltipProvider>\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\">\n                          <span className=\"sr-only\">Subscription info</span>\n                          <Info className=\"h-4 w-4\" />\n                        </Button>\n                      </TooltipTrigger>\n                      <TooltipContent>\n                        <p className=\"max-w-xs\">\n                          Choose which types of emails you'd like to receive.\n                          You can change your preferences anytime.\n                        </p>\n                      </TooltipContent>\n                    </Tooltip>\n                  </TooltipProvider>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {subscriptionOptions.map((option) => {\n                    // Skip the subscribedToAll option as it's handled separately\n                    if (\n                      option.id === \"subscribedToAll\" ||\n                      option.id === \"email\"\n                    ) {\n                      return null;\n                    }\n\n                    return (\n                      <FormField\n                        key={option.id}\n                        control={form.control}\n                        name={option.id as any}\n                        render={({ field }) => (\n                          <FormItem\n                            className={cn(\n                              \"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 transition-colors\",\n                              field.value && \"bg-muted/50\",\n                              themeClasses.border,\n                            )}\n                          >\n                            <FormControl>\n                              <Checkbox\n                                id={`option-${option.id}`}\n                                checked={field.value as boolean}\n                                onCheckedChange={field.onChange}\n                                disabled={subscribedToAll}\n                              />\n                            </FormControl>\n                            <div className=\"space-y-1 leading-none w-full\">\n                              <div className=\"flex items-center justify-between\">\n                                <FormLabel\n                                  htmlFor={`option-${option.id}`}\n                                  className=\"text-sm font-medium leading-none cursor-pointer flex items-center\"\n                                >\n                                  {option.icon && (\n                                    <span\n                                      className={cn(\"mr-2\", themeClasses.icon)}\n                                    >\n                                      {option.icon}\n                                    </span>\n                                  )}\n                                  {option.label}\n                                </FormLabel>\n                                {option.frequency && (\n                                  <span className=\"text-xs px-2 py-1 rounded-full bg-muted\">\n                                    {option.frequency}\n                                  </span>\n                                )}\n                              </div>\n                              <p className=\"text-xs text-muted-foreground mt-1\">\n                                {option.description}\n                              </p>\n                            </div>\n                          </FormItem>\n                        )}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n\n              <div className=\"lg:hidden\">\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isLoading || !form.formState.isValid}\n                  variant=\"default\"\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2\n                        className=\"mr-2 h-4 w-4 animate-spin\"\n                        aria-hidden=\"true\"\n                      />\n                      <span>Subscribing...</span>\n                    </>\n                  ) : (\n                    buttonText\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n\n          <p className=\"text-xs text-center mt-4 text-muted-foreground\">\n            By subscribing, you agree to our Terms of Service and Privacy\n            Policy. You can unsubscribe at any time.\n          </p>\n        </>\n      ) : (\n        <div\n          className=\"text-center space-y-4 py-6\"\n          ref={successRef}\n          tabIndex={-1}\n          role=\"alert\"\n          aria-live=\"polite\"\n        >\n          <div\n            className={cn(\n              \"rounded-full w-16 h-16 mx-auto flex items-center justify-center\",\n              themeClasses.accent,\n            )}\n          >\n            <Check\n              className={cn(\"w-8 h-8\", themeClasses.highlight)}\n              aria-hidden=\"true\"\n            />\n          </div>\n          <h2 className=\"text-2xl font-bold\">You're subscribed!</h2>\n          <p className=\"text-muted-foreground\">\n            Thank you for subscribing to our newsletter.\n            <br />\n            We've sent a confirmation email to{\" \"}\n            <strong>{form.getValues().email}</strong>.\n          </p>\n\n          <div className=\"mt-6 space-y-4\">\n            <div className={cn(\"p-4 rounded-lg\", themeClasses.background)}>\n              <h3 className=\"font-medium mb-2\">Your subscriptions:</h3>\n              <ul className=\"space-y-2\">\n                {subscriptionOptions.map((option) => {\n                  if (\n                    option.id === \"subscribedToAll\" ||\n                    option.id === \"email\"\n                  ) {\n                    return null;\n                  }\n\n                  const isSelected =\n                    form.getValues()[option.id as keyof FormValues];\n\n                  if (!isSelected) {\n                    return null;\n                  }\n\n                  return (\n                    <li key={option.id} className=\"flex items-center\">\n                      <Check\n                        className={cn(\"h-4 w-4 mr-2\", themeClasses.highlight)}\n                        aria-hidden=\"true\"\n                      />\n                      <span>{option.label}</span>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n\n            <Button\n              onClick={() => {\n                setIsSubmitted(false);\n                form.reset({\n                  email: \"\",\n                  weeklyDigest: true,\n                  productUpdates: false,\n                  marketingEmails: false,\n                  eventInvites: false,\n                  subscribedToAll: false,\n                });\n              }}\n              className=\"w-full\"\n              variant=\"outline\"\n            >\n              Subscribe another email\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
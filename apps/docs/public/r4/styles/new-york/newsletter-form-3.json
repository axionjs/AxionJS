{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "newsletter-form-3",
  "type": "registry:block",
  "author": "axionjs (https://www.axionjs.com)",
  "description": "A newsletter form component.",
  "registryDependencies": [
    "button",
    "input",
    "form",
    "use-toast",
    "select"
  ],
  "files": [
    {
      "path": "blocks/newsletter-form-3.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Loader2, Send, CheckCircle2 } from \"lucide-react\";\n\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/registry/new-york/ui/form\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { useToast } from \"@/registry/new-york/hooks/use-toast\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\";\nimport { cn } from \"@/lib/utils\";\n\n// Define form validation schema\nconst formSchema = z.object({\n  firstName: z\n    .string()\n    .min(2, { message: \"First name is required\" })\n    .optional(),\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n  interests: z.string().min(1, { message: \"Please select an interest\" }),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\n// Define available interest options\ninterface InterestOption {\n  value: string;\n  label: string;\n  description?: string;\n  icon?: React.ReactNode;\n}\n\n// Pre-defined interests with descriptions\nconst defaultInterests: InterestOption[] = [\n  {\n    value: \"technology\",\n    label: \"Technology\",\n    description: \"Latest tech trends and innovations\",\n    icon: (\n      <svg\n        className=\"h-5 w-5\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n        />\n      </svg>\n    ),\n  },\n  {\n    value: \"design\",\n    label: \"Design\",\n    description: \"UI/UX design trends and inspiration\",\n    icon: (\n      <svg\n        className=\"h-5 w-5\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01\"\n        />\n      </svg>\n    ),\n  },\n  {\n    value: \"business\",\n    label: \"Business\",\n    description: \"Business strategy and market insights\",\n    icon: (\n      <svg\n        className=\"h-5 w-5\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n        />\n      </svg>\n    ),\n  },\n  {\n    value: \"marketing\",\n    label: \"Marketing\",\n    description: \"Digital marketing strategies and tools\",\n    icon: (\n      <svg\n        className=\"h-5 w-5\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z\"\n        />\n      </svg>\n    ),\n  },\n  {\n    value: \"development\",\n    label: \"Development\",\n    description: \"Software development and coding tutorials\",\n    icon: (\n      <svg\n        className=\"h-5 w-5\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={1.5}\n          d=\"M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4\"\n        />\n      </svg>\n    ),\n  },\n];\n\ninterface NewsletterFormProps {\n  /**\n   * Optional callback for successful form submission\n   */\n  onSubscribe?: (data: FormValues) => Promise<void>;\n  /**\n   * Optional callback for submission errors\n   */\n  onError?: (error: unknown) => void;\n  /**\n   * Custom form action for server actions\n   */\n  formAction?: string;\n  /**\n   * Custom title for the newsletter\n   */\n  title?: string;\n  /**\n   * Custom description for the newsletter\n   */\n  description?: string;\n  /**\n   * Custom available interests\n   */\n  interestOptions?: InterestOption[];\n  /**\n   * Custom class names for the container\n   */\n  className?: string;\n  /**\n   * Custom accent color for the form\n   */\n  accentColor?: \"primary\" | \"blue\" | \"green\" | \"purple\" | \"amber\";\n}\n\nexport default function NewsletterForm({\n  onSubscribe,\n  onError,\n  formAction,\n  title = \"Join our newsletter\",\n  description = \"Get personalized content delivered to your inbox\",\n  interestOptions = defaultInterests,\n  className,\n  accentColor = \"primary\",\n}: NewsletterFormProps) {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  const [emailValue, setEmailValue] = React.useState(\"\");\n  const { toast } = useToast();\n\n  const formRef = React.useRef<HTMLFormElement>(null);\n  const successRef = React.useRef<HTMLDivElement>(null);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      firstName: \"\",\n      email: \"\",\n      interests: \"\",\n    },\n    mode: \"onBlur\",\n  });\n\n  // Get gradient classes based on accent color\n  const getGradientClasses = () => {\n    switch (accentColor) {\n      case \"blue\":\n        return \"from-blue-400/20 to-blue-500/5\";\n      case \"green\":\n        return \"from-green-400/20 to-green-500/5\";\n      case \"purple\":\n        return \"from-purple-400/20 to-purple-500/5\";\n      case \"amber\":\n        return \"from-amber-400/20 to-amber-500/5\";\n      case \"primary\":\n      default:\n        return \"from-primary/20 to-primary/5\";\n    }\n  };\n\n  // Get button color classes based on accent color\n  const getButtonClasses = () => {\n    switch (accentColor) {\n      case \"blue\":\n        return \"bg-blue-500 hover:bg-blue-600 focus:ring-blue-500\";\n      case \"green\":\n        return \"bg-green-500 hover:bg-green-600 focus:ring-green-500\";\n      case \"purple\":\n        return \"bg-purple-500 hover:bg-purple-600 focus:ring-purple-500\";\n      case \"amber\":\n        return \"bg-amber-500 hover:bg-amber-600 focus:ring-amber-500\";\n      case \"primary\":\n      default:\n        return \"\";\n    }\n  };\n\n  async function onSubmit(data: FormValues) {\n    try {\n      setIsLoading(true);\n      setEmailValue(data.email);\n\n      // If onSubscribe callback is provided, use it\n      if (onSubscribe) {\n        await onSubscribe(data);\n      } else {\n        // Otherwise, simulate API call\n        await new Promise((resolve) => setTimeout(resolve, 1500));\n        console.log(\"Newsletter subscription:\", data);\n      }\n\n      setIsSubmitted(true);\n\n      toast({\n        title: \"Subscription successful!\",\n        description: \"You've been added to our newsletter.\",\n      });\n\n      // Focus success message for accessibility\n      setTimeout(() => {\n        if (successRef.current) {\n          successRef.current.focus();\n        }\n      }, 100);\n    } catch (error) {\n      console.error(\"Subscription error:\", error);\n\n      toast({\n        title: \"Subscription failed\",\n        description:\n          \"There was a problem with your subscription. Please try again.\",\n        variant: \"destructive\",\n      });\n\n      if (onError) {\n        onError(error);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className={cn(\"w-full max-w-md mx-auto\", className)}>\n      <div\n        className={cn(\n          \"bg-gradient-to-br rounded-xl p-8 shadow-sm\",\n          getGradientClasses(),\n        )}\n      >\n        {!isSubmitted ? (\n          <>\n            <div className=\"space-y-2 text-center mb-6\">\n              <h2 className=\"text-2xl font-bold\">{title}</h2>\n              <p className=\"text-muted-foreground\">{description}</p>\n            </div>\n\n            <Form {...form}>\n              <form\n                ref={formRef}\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-4\"\n                action={formAction}\n                noValidate\n              >\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor=\"firstName-input\">\n                        First name{\" \"}\n                        <span className=\"text-muted-foreground\">\n                          (optional)\n                        </span>\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          id=\"firstName-input\"\n                          placeholder=\"Jane\"\n                          className=\"h-12 bg-background/80 backdrop-blur-sm\"\n                          autoComplete=\"given-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor=\"email-input\">Email address</FormLabel>\n                      <FormControl>\n                        <Input\n                          id=\"email-input\"\n                          placeholder=\"name@example.com\"\n                          className=\"h-12 bg-background/80 backdrop-blur-sm\"\n                          type=\"email\"\n                          autoComplete=\"email\"\n                          required\n                          aria-required=\"true\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"interests\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel htmlFor=\"interests-select\">\n                        Interests\n                      </FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger\n                            id=\"interests-select\"\n                            className=\"h-12 bg-background/80 backdrop-blur-sm\"\n                          >\n                            <SelectValue placeholder=\"Select your interests\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {interestOptions.map((interest) => (\n                            <SelectItem\n                              key={interest.value}\n                              value={interest.value}\n                              className=\"flex items-center py-3\"\n                            >\n                              <div className=\"flex items-center gap-2\">\n                                {interest.icon && (\n                                  <span className=\"text-muted-foreground\">\n                                    {interest.icon}\n                                  </span>\n                                )}\n                                <div>\n                                  <span>{interest.label}</span>\n                                  {interest.description && (\n                                    <p className=\"text-xs text-muted-foreground mt-1\">\n                                      {interest.description}\n                                    </p>\n                                  )}\n                                </div>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        We'll send you content based on your interests\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className={cn(\n                    \"w-full h-12 mt-2 focus:ring-2 focus:ring-offset-2\",\n                    getButtonClasses(),\n                  )}\n                  disabled={isLoading}\n                  variant=\"shine\"\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2\n                        className=\"mr-2 h-4 w-4 animate-spin\"\n                        aria-hidden=\"true\"\n                      />\n                      <span>Subscribing...</span>\n                    </>\n                  ) : (\n                    <>\n                      <Send className=\"mr-2 h-4 w-4\" aria-hidden=\"true\" />\n                      <span>Subscribe</span>\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <p className=\"text-xs text-center mt-4 text-muted-foreground\">\n              No spam, ever. Unsubscribe anytime.\n            </p>\n          </>\n        ) : (\n          <div\n            className=\"text-center space-y-4 py-8\"\n            role=\"alert\"\n            aria-live=\"polite\"\n            ref={successRef}\n            tabIndex={-1}\n          >\n            <div className=\"rounded-full w-16 h-16 bg-primary/20 mx-auto flex items-center justify-center\">\n              <CheckCircle2\n                className=\"w-8 h-8 text-primary\"\n                aria-hidden=\"true\"\n              />\n            </div>\n            <h2 className=\"text-2xl font-bold\">You're subscribed!</h2>\n            <p className=\"text-muted-foreground\">\n              Thank you for subscribing to our newsletter.\n              <br />\n              We've sent a confirmation email to{\" \"}\n              <strong className=\"font-medium text-foreground\">\n                {emailValue}\n              </strong>\n              .\n            </p>\n\n            <div className=\"pt-4 flex flex-col sm:flex-row gap-3 justify-center\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsSubmitted(false);\n                  form.reset();\n                }}\n                className=\"w-full sm:w-auto\"\n              >\n                Subscribe another email\n              </Button>\n\n              <Button\n                variant=\"default\"\n                className={cn(\n                  \"w-full sm:w-auto focus:ring-2 focus:ring-offset-2\",\n                  getButtonClasses(),\n                )}\n                onClick={() => (window.location.href = \"/\")}\n              >\n                Return to homepage\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
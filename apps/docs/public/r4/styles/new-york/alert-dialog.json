{
  "$schema": "https://www.axionjs.com/schema/registry-item.json",
  "name": "alert-dialog",
  "type": "registry:ui",
  "author": "axionjs (https://www.axionjs.com)",
  "dependencies": [
    "@radix-ui/react-alert-dialog"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/alert-dialog.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/registry/new-york/ui/button\";\n\n// 1. Root\n// ------------------------------------------------------------\n// The AlertDialog root. Allows you to pass any additional props\n// (role, aria-labelledby, aria-label, etc.) if you need custom\n// behavior for your dialog container.\nconst AlertDialog = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Root>\n>(({ children, ...props }, ref) => (\n  <AlertDialogPrimitive.Root ref={ref} {...props}>\n    {children}\n  </AlertDialogPrimitive.Root>\n));\nAlertDialog.displayName = \"AlertDialog\";\n\n// 2. Trigger\n// ------------------------------------------------------------\n// The button/element that opens the dialog. Since it's a Radix\n// primitive, it already supports keyboard and screen reader usage.\nconst AlertDialogTrigger = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Trigger>\n>(({ children, ...props }, ref) => (\n  <AlertDialogPrimitive.Trigger ref={ref} {...props}>\n    {children}\n  </AlertDialogPrimitive.Trigger>\n));\nAlertDialogTrigger.displayName = \"AlertDialogTrigger\";\n\n// 3. Portal\n// ------------------------------------------------------------\n// Renders the dialog outside the DOM hierarchy of the parent.\n// Typically, you'll just keep this as is.\nconst AlertDialogPortal = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Portal>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Portal>\n>(({ children, ...props }, ref) => (\n  <AlertDialogPrimitive.Portal ref={ref} {...props}>\n    {children}\n  </AlertDialogPrimitive.Portal>\n));\nAlertDialogPortal.displayName = \"AlertDialogPortal\";\n\n// 4. Overlay\n// ------------------------------------------------------------\n// Dimmed overlay behind the dialog. Pass any accessibility or styling\n// props through `className` or directly via `props`.\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80\",\n      // Radix animations\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nAlertDialogOverlay.displayName = \"AlertDialogOverlay\";\n\n// 5. Content\n// ------------------------------------------------------------\n// The dialog container itself. Radix automatically sets\n// `role=\"alertdialog\"` and manages focus and keyboard behavior.\n// We provide a portal and overlay, then wrap the content.\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        // Positioning & styling\n        \"fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200\",\n        // Radix animations\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]\",\n        \"data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\n        \"sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </AlertDialogPrimitive.Content>\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = \"AlertDialogContent\";\n\n// 6. Header\n// ------------------------------------------------------------\n// A simple wrapper for header content (title, optional close, etc.).\n// Not a Radix primitive, so we can define as a normal <div>.\nconst AlertDialogHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n));\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\n// 7. Footer\n// ------------------------------------------------------------\n// A simple footer wrapper for dialog actions (e.g., Cancel, OK).\nconst AlertDialogFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\n\n// 8. Title\n// ------------------------------------------------------------\n// The main heading of the dialog. Radix automatically connects this\n// title to the dialog for screen readers. You can pass additional\n// aria-* props as needed.\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = \"AlertDialogTitle\";\n\n// 9. Description\n// ------------------------------------------------------------\n// Additional descriptive text. Screen readers read this text in\n// context with the Title. Pass any extra aria-* if needed.\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName = \"AlertDialogDescription\";\n\n// 10. Action\n// ------------------------------------------------------------\n// Confirms the destructive or primary action. By default, uses\n// your `buttonVariants` style. You can override with any\n// className or style you like.\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = \"AlertDialogAction\";\n\n// 11. Cancel\n// ------------------------------------------------------------\n// Cancels or dismisses the action. By default, an outline button.\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = \"AlertDialogCancel\";\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}